require('./sourcemap-register.js');/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(7351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(8041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(5840);
const utils_1 = __nccwpck_require__(5278);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 8041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(6255);
const auth_1 = __nccwpck_require__(5526);
const core_1 = __nccwpck_require__(2186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 1327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5526:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 6255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(9835));
const tunnel = __importStar(__nccwpck_require__(4294));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
    readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                this.message.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        try {
            return new URL(proxyVar);
        }
        catch (_a) {
            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))
                return new URL(`http://${proxyVar}`);
        }
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
        return true;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperNoProxyItem === '*' ||
            upperReqHosts.some(x => x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith('.') &&
                    x.endsWith(`${upperNoProxyItem}`)))) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return (hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 6624:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/authentication/service.proto (package api.v1.authentication, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(3708);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage public endpoints in Users
 *
 * @generated from service api.v1.authentication.Service
 */
exports.t = {
    typeName: "api.v1.authentication.Service",
    methods: {
        /**
         * Login authenticats a user and returns a access/refresh token
         *
         * @generated from rpc api.v1.authentication.Service.Login
         */
        login: {
            name: "Login",
            I: service_pb_js_1.LoginRequest,
            O: service_pb_js_1.LoginResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Logout validates the access token and blocks it afterwards
         *
         * @generated from rpc api.v1.authentication.Service.Logout
         */
        logout: {
            name: "Logout",
            I: service_pb_js_1.LogoutRequest,
            O: service_pb_js_1.LogoutResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get the logged in user
         *
         * @generated from rpc api.v1.authentication.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Register creates a new user
         *
         * @generated from rpc api.v1.authentication.Service.Register
         */
        register: {
            name: "Register",
            I: service_pb_js_1.RegisterRequest,
            O: service_pb_js_1.RegisterResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Send reset password email to the user
         *
         * @generated from rpc api.v1.authentication.Service.SendPasswordReset
         */
        sendPasswordReset: {
            name: "SendPasswordReset",
            I: service_pb_js_1.SendPasswordResetRequest,
            O: service_pb_js_1.SendPasswordResetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Reset password of the user
         *
         * @generated from rpc api.v1.authentication.Service.ResetPassword
         */
        resetPassword: {
            name: "ResetPassword",
            I: service_pb_js_1.ResetPasswordRequest,
            O: service_pb_js_1.ResetPasswordResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete logged in user
         *
         * @generated from rpc api.v1.authentication.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Refresh logged in token pair
         *
         * @generated from rpc api.v1.authentication.Service.RefreshToken
         */
        refreshToken: {
            name: "RefreshToken",
            I: service_pb_js_1.RefreshTokenRequest,
            O: service_pb_js_1.RefreshTokenResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get auth config for how available login methods
         *
         * @generated from rpc api.v1.authentication.Service.GetAuthConfig
         */
        getAuthConfig: {
            name: "GetAuthConfig",
            I: service_pb_js_1.GetAuthConfigRequest,
            O: service_pb_js_1.GetAuthConfigResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Verify email
         *
         * @generated from rpc api.v1.authentication.Service.VerifyEmail
         */
        verifyEmail: {
            name: "VerifyEmail",
            I: service_pb_js_1.VerifyEmailRequest,
            O: service_pb_js_1.VerifyEmailResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Verify phone number
         *
         * @generated from rpc api.v1.authentication.Service.VerifyPhoneNumber
         */
        verifyPhoneNumber: {
            name: "VerifyPhoneNumber",
            I: service_pb_js_1.VerifyPhoneNumberRequest,
            O: service_pb_js_1.VerifyPhoneNumberResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 3708:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/authentication/service.proto (package api.v1.authentication, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetAuthConfigResponse = exports.GetAuthConfigRequest = exports.RefreshTokenResponse = exports.RefreshTokenRequest = exports.DeleteResponse = exports.DeleteRequest = exports.ResetPasswordResponse = exports.ResetPasswordRequest = exports.SendPasswordResetResponse = exports.SendPasswordResetRequest = exports.RegisterResponse = exports.RegisterRequest = exports.GetResponse = exports.GetRequest = exports.LogoutResponse = exports.LogoutRequest = exports.LoginResponse = exports.LoginRequest = exports.VerifyPhoneNumberResponse = exports.VerifyPhoneNumberRequest = exports.VerifyEmailResponse = exports.VerifyEmailRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const user_pb_js_1 = __nccwpck_require__(3848);
const user_pb_js_2 = __nccwpck_require__(3008);
const auth_pb_js_1 = __nccwpck_require__(7387);
/**
 * Request to verify the email of a user with a verification code sent to the email.
 *
 * @generated from message api.v1.authentication.VerifyEmailRequest
 */
class VerifyEmailRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The verification code.
         *
         * @generated from field: string code = 1;
         */
        this.code = "";
        /**
         * The email of the user.
         *
         * @generated from field: string email = 2;
         */
        this.email = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyEmailRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyEmailRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyEmailRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyEmailRequest, a, b);
    }
}
exports.VerifyEmailRequest = VerifyEmailRequest;
VerifyEmailRequest.runtime = protobuf_1.proto3;
VerifyEmailRequest.typeName = "api.v1.authentication.VerifyEmailRequest";
VerifyEmailRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty response to the Verify Email Request.
 *
 * @generated from message api.v1.authentication.VerifyEmailResponse
 */
class VerifyEmailResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyEmailResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyEmailResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyEmailResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyEmailResponse, a, b);
    }
}
exports.VerifyEmailResponse = VerifyEmailResponse;
VerifyEmailResponse.runtime = protobuf_1.proto3;
VerifyEmailResponse.typeName = "api.v1.authentication.VerifyEmailResponse";
VerifyEmailResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request to verify the phone number of a user with a verification code sent to the phone number.
 *
 * @generated from message api.v1.authentication.VerifyPhoneNumberRequest
 */
class VerifyPhoneNumberRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string code = 1;
         */
        this.code = "";
        /**
         * @generated from field: string phone_number = 2;
         */
        this.phoneNumber = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyPhoneNumberRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyPhoneNumberRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyPhoneNumberRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyPhoneNumberRequest, a, b);
    }
}
exports.VerifyPhoneNumberRequest = VerifyPhoneNumberRequest;
VerifyPhoneNumberRequest.runtime = protobuf_1.proto3;
VerifyPhoneNumberRequest.typeName = "api.v1.authentication.VerifyPhoneNumberRequest";
VerifyPhoneNumberRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty response to the Verify Phone Number Request.
 *
 * @generated from message api.v1.authentication.VerifyPhoneNumberResponse
 */
class VerifyPhoneNumberResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyPhoneNumberResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyPhoneNumberResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyPhoneNumberResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyPhoneNumberResponse, a, b);
    }
}
exports.VerifyPhoneNumberResponse = VerifyPhoneNumberResponse;
VerifyPhoneNumberResponse.runtime = protobuf_1.proto3;
VerifyPhoneNumberResponse.typeName = "api.v1.authentication.VerifyPhoneNumberResponse";
VerifyPhoneNumberResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Login request with either user identifier & email or client credentials.
 *
 * @generated from message api.v1.authentication.LoginRequest
 */
class LoginRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.authentication.LoginRequest.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LoginRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LoginRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LoginRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LoginRequest, a, b);
    }
}
exports.LoginRequest = LoginRequest;
LoginRequest.runtime = protobuf_1.proto3;
LoginRequest.typeName = "api.v1.authentication.LoginRequest";
LoginRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_password", kind: "message", T: user_pb_js_1.UserPassword, oneof: "method" },
    { no: 3, name: "client_credentials", kind: "message", T: user_pb_js_1.ClientCredentials, oneof: "method" },
]);
/**
 * Login response with tokens and user information.
 *
 * @generated from message api.v1.authentication.LoginResponse
 */
class LoginResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the user.
         *
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LoginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LoginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LoginResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LoginResponse, a, b);
    }
}
exports.LoginResponse = LoginResponse;
LoginResponse.runtime = protobuf_1.proto3;
LoginResponse.typeName = "api.v1.authentication.LoginResponse";
LoginResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: user_pb_js_1.Token },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_info", kind: "message", T: user_pb_js_2.UserInfo },
]);
/**
 * Empty logout request. The user ID etc. is taken from the token.
 *
 * @generated from message api.v1.authentication.LogoutRequest
 */
class LogoutRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogoutRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogoutRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogoutRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogoutRequest, a, b);
    }
}
exports.LogoutRequest = LogoutRequest;
LogoutRequest.runtime = protobuf_1.proto3;
LogoutRequest.typeName = "api.v1.authentication.LogoutRequest";
LogoutRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Empty response to the logout request.
 *
 * @generated from message api.v1.authentication.LogoutResponse
 */
class LogoutResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogoutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogoutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogoutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogoutResponse, a, b);
    }
}
exports.LogoutResponse = LogoutResponse;
LogoutResponse.runtime = protobuf_1.proto3;
LogoutResponse.typeName = "api.v1.authentication.LogoutResponse";
LogoutResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Get request to get the logged in user. The user ID etc. is taken from the token.
 *
 * @generated from message api.v1.authentication.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.authentication.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Response with user information to the get request.
 *
 * @generated from message api.v1.authentication.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the user
         *
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.authentication.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_info", kind: "message", T: user_pb_js_2.UserInfo },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Register request for users to self-register. This is only possible with the register bool set in users settings.
 *
 * @generated from message api.v1.authentication.RegisterRequest
 */
class RegisterRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.authentication.RegisterRequest.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterRequest, a, b);
    }
}
exports.RegisterRequest = RegisterRequest;
RegisterRequest.runtime = protobuf_1.proto3;
RegisterRequest.typeName = "api.v1.authentication.RegisterRequest";
RegisterRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_password", kind: "message", T: user_pb_js_1.UserPassword, oneof: "method" },
]);
/**
 * Register response with tokens and user information.
 *
 * @generated from message api.v1.authentication.RegisterResponse
 */
class RegisterResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * User ID of the new user.
         *
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterResponse, a, b);
    }
}
exports.RegisterResponse = RegisterResponse;
RegisterResponse.runtime = protobuf_1.proto3;
RegisterResponse.typeName = "api.v1.authentication.RegisterResponse";
RegisterResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: user_pb_js_1.Token },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_info", kind: "message", T: user_pb_js_2.UserInfo },
]);
/**
 * Request to send a reset password email to the user. This is only possible if an email provider is configured, and the user has an email.
 *
 * @generated from message api.v1.authentication.SendPasswordResetRequest
 */
class SendPasswordResetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SendPasswordResetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SendPasswordResetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SendPasswordResetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SendPasswordResetRequest, a, b);
    }
}
exports.SendPasswordResetRequest = SendPasswordResetRequest;
SendPasswordResetRequest.runtime = protobuf_1.proto3;
SendPasswordResetRequest.typeName = "api.v1.authentication.SendPasswordResetRequest";
SendPasswordResetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: user_pb_js_2.UserIdentifier },
]);
/**
 * Empty response to the send password reset request
 *
 * @generated from message api.v1.authentication.SendPasswordResetResponse
 */
class SendPasswordResetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SendPasswordResetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SendPasswordResetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SendPasswordResetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SendPasswordResetResponse, a, b);
    }
}
exports.SendPasswordResetResponse = SendPasswordResetResponse;
SendPasswordResetResponse.runtime = protobuf_1.proto3;
SendPasswordResetResponse.typeName = "api.v1.authentication.SendPasswordResetResponse";
SendPasswordResetResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request to reset the password of a user with a verification code sent to the email.
 *
 * @generated from message api.v1.authentication.ResetPasswordRequest
 */
class ResetPasswordRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The 6 digit verification code
         *
         * @generated from field: string code = 1;
         */
        this.code = "";
        /**
         * The new password
         *
         * @generated from field: string new_password = 2;
         */
        this.newPassword = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResetPasswordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResetPasswordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResetPasswordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResetPasswordRequest, a, b);
    }
}
exports.ResetPasswordRequest = ResetPasswordRequest;
ResetPasswordRequest.runtime = protobuf_1.proto3;
ResetPasswordRequest.typeName = "api.v1.authentication.ResetPasswordRequest";
ResetPasswordRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identifier", kind: "message", T: user_pb_js_2.UserIdentifier },
]);
/**
 * Empty response to the reset password request
 *
 * @generated from message api.v1.authentication.ResetPasswordResponse
 */
class ResetPasswordResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResetPasswordResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResetPasswordResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResetPasswordResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResetPasswordResponse, a, b);
    }
}
exports.ResetPasswordResponse = ResetPasswordResponse;
ResetPasswordResponse.runtime = protobuf_1.proto3;
ResetPasswordResponse.typeName = "api.v1.authentication.ResetPasswordResponse";
ResetPasswordResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request to delete the logged in user. The user ID etc. is taken from the token.
 *
 * @generated from message api.v1.authentication.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.authentication.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Empty response to the delete request.
 *
 * @generated from message api.v1.authentication.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.authentication.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request to refresh the access and refresh token of the logged in user.
 *
 * @generated from message api.v1.authentication.RefreshTokenRequest
 */
class RefreshTokenRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The access token of the user
         *
         * Refresh token matching the access token.
         *
         * @generated from field: string refresh_token = 1;
         */
        this.refreshToken = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RefreshTokenRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RefreshTokenRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RefreshTokenRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RefreshTokenRequest, a, b);
    }
}
exports.RefreshTokenRequest = RefreshTokenRequest;
RefreshTokenRequest.runtime = protobuf_1.proto3;
RefreshTokenRequest.typeName = "api.v1.authentication.RefreshTokenRequest";
RefreshTokenRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response with new access and refresh token.
 *
 * @generated from message api.v1.authentication.RefreshTokenResponse
 */
class RefreshTokenResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RefreshTokenResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RefreshTokenResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RefreshTokenResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RefreshTokenResponse, a, b);
    }
}
exports.RefreshTokenResponse = RefreshTokenResponse;
RefreshTokenResponse.runtime = protobuf_1.proto3;
RefreshTokenResponse.typeName = "api.v1.authentication.RefreshTokenResponse";
RefreshTokenResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: user_pb_js_1.Token },
]);
/**
 * Empty Request to get the auth config containing the available login mechanisms and if self-registering is enabled.
 *
 * @generated from message api.v1.authentication.GetAuthConfigRequest
 */
class GetAuthConfigRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetAuthConfigRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetAuthConfigRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetAuthConfigRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetAuthConfigRequest, a, b);
    }
}
exports.GetAuthConfigRequest = GetAuthConfigRequest;
GetAuthConfigRequest.runtime = protobuf_1.proto3;
GetAuthConfigRequest.typeName = "api.v1.authentication.GetAuthConfigRequest";
GetAuthConfigRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Response with the auth config containing the available login mechanisms and if self-registering is enabled.
 *
 * @generated from message api.v1.authentication.GetAuthConfigResponse
 */
class GetAuthConfigResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The name of the project
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The logo of the project
         *
         * @generated from field: string logo_url = 2;
         */
        this.logoUrl = "";
        /**
         * If to validate password
         *
         * @generated from field: bool validate_password = 3;
         */
        this.validatePassword = false;
        /**
         * Array of supported login methods.
         *
         * @generated from field: repeated model.LoginType login_types = 4;
         */
        this.loginTypes = [];
        /**
         * True if new users can sign up.
         *
         * @generated from field: bool allows_register = 7;
         */
        this.allowsRegister = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetAuthConfigResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetAuthConfigResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetAuthConfigResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetAuthConfigResponse, a, b);
    }
}
exports.GetAuthConfigResponse = GetAuthConfigResponse;
GetAuthConfigResponse.runtime = protobuf_1.proto3;
GetAuthConfigResponse.typeName = "api.v1.authentication.GetAuthConfigResponse";
GetAuthConfigResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validate_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "login_types", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), repeated: true },
    { no: 7, name: "allows_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);


/***/ }),

/***/ 3848:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/authentication/user.proto (package api.v1.authentication, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UserPassword = exports.ClientCredentials = exports.Token = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const user_pb_js_1 = __nccwpck_require__(3008);
/**
 * @generated from message api.v1.authentication.Token
 */
class Token extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Access token
         *
         * @generated from field: string access_token = 1;
         */
        this.accessToken = "";
        /**
         * Refresh token
         *
         * @generated from field: string refresh_token = 2;
         */
        this.refreshToken = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Token().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Token, a, b);
    }
}
exports.Token = Token;
Token.runtime = protobuf_1.proto3;
Token.typeName = "api.v1.authentication.Token";
Token.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.authentication.ClientCredentials
 */
class ClientCredentials extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the service account
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * secret of the service account
         *
         * @generated from field: string client_secret = 2;
         */
        this.clientSecret = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClientCredentials().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClientCredentials().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClientCredentials().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ClientCredentials, a, b);
    }
}
exports.ClientCredentials = ClientCredentials;
ClientCredentials.runtime = protobuf_1.proto3;
ClientCredentials.typeName = "api.v1.authentication.ClientCredentials";
ClientCredentials.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.authentication.UserPassword
 */
class UserPassword extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Password of the user
         *
         * @generated from field: string password = 2;
         */
        this.password = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserPassword().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserPassword().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserPassword().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserPassword, a, b);
    }
}
exports.UserPassword = UserPassword;
UserPassword.runtime = protobuf_1.proto3;
UserPassword.typeName = "api.v1.authentication.UserPassword";
UserPassword.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: user_pb_js_1.UserIdentifier },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 6442:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/build/service.proto (package api.v1.build, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(4729);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from service api.v1.build.Service
 */
exports.t = {
    typeName: "api.v1.build.Service",
    methods: {
        /**
         * Get Information about an image in a build.
         *
         * @generated from rpc api.v1.build.Service.GetImageInfo
         */
        getImageInfo: {
            name: "GetImageInfo",
            I: service_pb_js_1.GetImageInfoRequest,
            O: service_pb_js_1.GetImageInfoResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get Information about a docker registry repository.
         *
         * @generated from rpc api.v1.build.Service.GetRepositoryInfo
         */
        getRepositoryInfo: {
            name: "GetRepositoryInfo",
            I: service_pb_js_1.GetRepositoryInfoRequest,
            O: service_pb_js_1.GetRepositoryInfoResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a build.
         *
         * @generated from rpc api.v1.build.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Create a new build.
         * Builds are immutable and cannot change. Create a new build to make
         * changes from an existing one.
         *
         * @generated from rpc api.v1.build.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List builds for a capsule.
         *
         * @generated from rpc api.v1.build.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a build.
         *
         * @generated from rpc api.v1.build.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 4729:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/build/service.proto (package api.v1.build, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetResponse = exports.GetRequest = exports.DeleteResponse = exports.DeleteRequest = exports.ListResponse = exports.ListRequest = exports.CreateResponse = exports.CreateRequest = exports.Tag = exports.GetRepositoryInfoResponse = exports.GetRepositoryInfoRequest = exports.ImageId = exports.GetImageInfoResponse = exports.GetImageInfoRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const build_pb_js_1 = __nccwpck_require__(646);
const common_pb_js_1 = __nccwpck_require__(1101);
/**
 * Request to get information about an image.
 *
 * @generated from message api.v1.build.GetImageInfoRequest
 */
class GetImageInfoRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The image to get information about.
         *
         * @generated from field: string image = 1;
         */
        this.image = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetImageInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetImageInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetImageInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetImageInfoRequest, a, b);
    }
}
exports.GetImageInfoRequest = GetImageInfoRequest;
GetImageInfoRequest.runtime = protobuf_1.proto3;
GetImageInfoRequest.typeName = "api.v1.build.GetImageInfoRequest";
GetImageInfoRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Reponse to GetImageInfo request, containing information about an image.
 *
 * @generated from message api.v1.build.GetImageInfoResponse
 */
class GetImageInfoResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Image from the request.
         *
         * @generated from field: string image_string = 2;
         */
        this.imageString = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetImageInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetImageInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetImageInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetImageInfoResponse, a, b);
    }
}
exports.GetImageInfoResponse = GetImageInfoResponse;
GetImageInfoResponse.runtime = protobuf_1.proto3;
GetImageInfoResponse.typeName = "api.v1.build.GetImageInfoResponse";
GetImageInfoResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "image_id", kind: "message", T: ImageId },
    { no: 2, name: "image_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "origin", kind: "message", T: build_pb_js_1.Origin },
]);
/**
 * A collection of image properties that uniquely identifies an image.
 *
 * @generated from message api.v1.build.ImageId
 */
class ImageId extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Docker Registry.
         *
         * @generated from field: string registry = 1;
         */
        this.registry = "";
        /**
         * Docker Repository.
         *
         * @generated from field: string repository = 2;
         */
        this.repository = "";
        /**
         * Tag of the image.
         *
         * @generated from field: string tag = 3;
         */
        this.tag = "";
        /**
         * Digest of the image.
         *
         * @generated from field: string digest = 4;
         */
        this.digest = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImageId().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImageId().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImageId().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImageId, a, b);
    }
}
exports.ImageId = ImageId;
ImageId.runtime = protobuf_1.proto3;
ImageId.typeName = "api.v1.build.ImageId";
ImageId.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "registry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Get repository information request.
 *
 * @generated from message api.v1.build.GetRepositoryInfoRequest
 */
class GetRepositoryInfoRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Docker Registry
         *
         * @generated from field: string registry = 1;
         */
        this.registry = "";
        /**
         * Docker Repository
         *
         * @generated from field: string repository = 2;
         */
        this.repository = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRepositoryInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRepositoryInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRepositoryInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRepositoryInfoRequest, a, b);
    }
}
exports.GetRepositoryInfoRequest = GetRepositoryInfoRequest;
GetRepositoryInfoRequest.runtime = protobuf_1.proto3;
GetRepositoryInfoRequest.typeName = "api.v1.build.GetRepositoryInfoRequest";
GetRepositoryInfoRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "registry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Get repository information response.
 *
 * @generated from message api.v1.build.GetRepositoryInfoResponse
 */
class GetRepositoryInfoResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Image Tags in the repository.
         *
         * @generated from field: repeated api.v1.build.Tag tags = 1;
         */
        this.tags = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRepositoryInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRepositoryInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRepositoryInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRepositoryInfoResponse, a, b);
    }
}
exports.GetRepositoryInfoResponse = GetRepositoryInfoResponse;
GetRepositoryInfoResponse.runtime = protobuf_1.proto3;
GetRepositoryInfoResponse.typeName = "api.v1.build.GetRepositoryInfoResponse";
GetRepositoryInfoResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "message", T: Tag, repeated: true },
]);
/**
 * A docker image tag.
 *
 * @generated from message api.v1.build.Tag
 */
class Tag extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Tag of the image.
         *
         * @generated from field: string tag = 1;
         */
        this.tag = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Tag().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Tag().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Tag().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Tag, a, b);
    }
}
exports.Tag = Tag;
Tag.runtime = protobuf_1.proto3;
Tag.typeName = "api.v1.build.Tag";
Tag.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "image_created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * Request to create a new build in a capsule.
 *
 * @generated from message api.v1.build.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule to create the build in.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Image to create the build from.
         *
         * @generated from field: string image = 2;
         */
        this.image = "";
        /**
         * Digest of the image.
         *
         * @generated from field: string digest = 3;
         */
        this.digest = "";
        /**
         * Meta data to attach to the build.
         *
         * @generated from field: map<string, string> labels = 5;
         */
        this.labels = {};
        /**
         * if true skip check if image exists.
         *
         * @generated from field: bool skip_image_check = 6;
         */
        this.skipImageCheck = false;
        /**
         * Project ID.
         *
         * @generated from field: string project_id = 7;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.build.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "origin", kind: "message", T: build_pb_js_1.Origin },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 6, name: "skip_image_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response to create a new build in a capsule.
 *
 * @generated from message api.v1.build.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the build.
         *
         * @generated from field: string build_id = 1;
         */
        this.buildId = "";
        /**
         * True if a new build was created.
         *
         * @generated from field: bool created_new_build = 2;
         */
        this.createdNewBuild = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.build.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_new_build", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Request to list builds.
 *
 * @generated from message api.v1.build.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule to list builds in.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Project ID.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.build.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Reponse to list builds.
 *
 * @generated from message api.v1.build.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Builds in the capsule.
         *
         * @generated from field: repeated api.v1.capsule.Build builds = 1;
         */
        this.builds = [];
        /**
         * Total number of builds in the capsule.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.build.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: build_pb_js_1.Build, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Request to delete a build.
 *
 * @generated from message api.v1.build.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule to delete the build from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Build to delete.
         *
         * @generated from field: string build_id = 2;
         */
        this.buildId = "";
        /**
         * Project ID.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.build.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty response to delete a build.
 *
 * @generated from message api.v1.build.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.build.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request to get a build.
 *
 * @generated from message api.v1.build.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule to get the build from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Build to get.
         *
         * @generated from field: string build_id = 2;
         */
        this.buildId = "";
        /**
         * Project ID.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.build.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response to get a build.
 *
 * @generated from message api.v1.build.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.build.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "build", kind: "message", T: build_pb_js_1.Build },
]);


/***/ }),

/***/ 646:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/build.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Origin = exports.GitReference = exports.Build = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * Build is an environment wide abstraction of an image along with metadata for a capsule.
 *
 * @generated from message api.v1.capsule.Build
 */
class Build extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * unique identifier for the build
         *
         * @generated from field: string build_id = 2;
         */
        this.buildId = "";
        /**
         * digest of the image
         *
         * @generated from field: string digest = 7;
         */
        this.digest = "";
        /**
         * repository of the image
         *
         * @generated from field: string repository = 8;
         */
        this.repository = "";
        /**
         * tag of the image
         *
         * @generated from field: string tag = 9;
         */
        this.tag = "";
        /**
         * labels of the build
         *
         * @generated from field: map<string, string> labels = 6;
         */
        this.labels = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Build().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Build().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Build().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Build, a, b);
    }
}
exports.Build = Build;
Build.runtime = protobuf_1.proto3;
Build.typeName = "api.v1.capsule.Build";
Build.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 4, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "origin", kind: "message", T: Origin },
    { no: 6, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * GitReference is an origin of a build.
 *
 * @generated from message api.v1.capsule.GitReference
 */
class GitReference extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The url of the git repository
         *
         * @generated from field: string repository_url = 1;
         */
        this.repositoryUrl = "";
        /**
         * The commit sha of the git repository
         *
         * @generated from field: string commit_sha = 2;
         */
        this.commitSha = "";
        /**
         * The commit url of the git repository
         *
         * @generated from field: string commit_url = 3;
         */
        this.commitUrl = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GitReference().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GitReference().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GitReference().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GitReference, a, b);
    }
}
exports.GitReference = GitReference;
GitReference.runtime = protobuf_1.proto3;
GitReference.typeName = "api.v1.capsule.GitReference";
GitReference.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "repository_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commit_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Where the build came from
 *
 * @generated from message api.v1.capsule.Origin
 */
class Origin extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.Origin.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Origin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Origin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Origin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Origin, a, b);
    }
}
exports.Origin = Origin;
Origin.runtime = protobuf_1.proto3;
Origin.typeName = "api.v1.capsule.Origin";
Origin.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "git_reference", kind: "message", T: GitReference, oneof: "kind" },
]);


/***/ }),

/***/ 7203:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/capsule.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Update = exports.Capsule = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * Environment wide capsule abstraction
 *
 * @generated from message api.v1.capsule.Capsule
 */
class Capsule extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the capsule
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Current rollout of the capsule
         *
         * @generated from field: uint64 current_rollout = 5;
         */
        this.currentRollout = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Capsule().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Capsule().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Capsule().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Capsule, a, b);
    }
}
exports.Capsule = Capsule;
Capsule.runtime = protobuf_1.proto3;
Capsule.typeName = "api.v1.capsule.Capsule";
Capsule.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "current_rollout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "updated_by", kind: "message", T: author_pb_js_1.Author },
]);
/**
 * Legacy update message
 *
 * @generated from message api.v1.capsule.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.capsule.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 7814:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/change.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectReference = exports.ObjectMetric = exports.InstanceMetric = exports.CustomMetric = exports.CPUTarget = exports.HorizontalScale = exports.RoutingMethod_Ingress = exports.RoutingMethod_LoadBalancer = exports.RoutingMethod = exports.PublicInterface = exports.InterfaceProbe_GRPC = exports.InterfaceProbe_TCP = exports.InterfaceProbe_HTTP = exports.InterfaceProbe = exports.Interface = exports.Network = exports.EnvironmentSource_Kind = exports.EnvironmentSource = exports.GpuLimits = exports.ResourceList = exports.Resources = exports.ContainerSettings = exports.Change_RemoveInterface = exports.Change_RemoveCronJob = exports.Change_CommandArguments = exports.Change_EnvironmentVariable = exports.Change_CronJobs = exports.Change_Rollback = exports.Change_ConfigFile = exports.Change = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const job_pb_js_1 = __nccwpck_require__(4872);
/**
 * Change to a capsule that ultimately results in a new rollout.
 *
 * @generated from message api.v1.capsule.Change
 */
class Change extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Different types of changes.
         *
         * @generated from oneof api.v1.capsule.Change.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change, a, b);
    }
}
exports.Change = Change;
Change.runtime = protobuf_1.proto3;
Change.typeName = "api.v1.capsule.Change";
Change.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "field" },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "network", kind: "message", T: Network, oneof: "field" },
    { no: 4, name: "container_settings", kind: "message", T: ContainerSettings, oneof: "field" },
    { no: 5, name: "auto_add_rig_service_accounts", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 6, name: "set_config_file", kind: "message", T: Change_ConfigFile, oneof: "field" },
    { no: 7, name: "remove_config_file", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 8, name: "horizontal_scale", kind: "message", T: HorizontalScale, oneof: "field" },
    { no: 9, name: "rollback", kind: "message", T: Change_Rollback, oneof: "field" },
    { no: 11, name: "set_environment_variable", kind: "message", T: Change_EnvironmentVariable, oneof: "field" },
    { no: 12, name: "remove_environment_variable", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 13, name: "set_environment_source", kind: "message", T: EnvironmentSource, oneof: "field" },
    { no: 14, name: "remove_environment_source", kind: "message", T: EnvironmentSource, oneof: "field" },
    { no: 15, name: "command_arguments", kind: "message", T: Change_CommandArguments, oneof: "field" },
    { no: 16, name: "add_cron_job", kind: "message", T: job_pb_js_1.CronJob, oneof: "field" },
    { no: 17, name: "remove_cron_job", kind: "message", T: Change_RemoveCronJob, oneof: "field" },
    { no: 18, name: "add_interface", kind: "message", T: Interface, oneof: "field" },
    { no: 19, name: "remove_interface", kind: "message", T: Change_RemoveInterface, oneof: "field" },
]);
/**
 * Config file change.
 *
 * @generated from message api.v1.capsule.Change.ConfigFile
 */
class Change_ConfigFile extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Path of the file in the instance.
         *
         * @generated from field: string path = 1;
         */
        this.path = "";
        /**
         * Content of the config file.
         *
         * @generated from field: bytes content = 2;
         */
        this.content = new Uint8Array(0);
        /**
         * True if the content is secret.
         *
         * @generated from field: bool is_secret = 3;
         */
        this.isSecret = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change_ConfigFile().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change_ConfigFile().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change_ConfigFile().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change_ConfigFile, a, b);
    }
}
exports.Change_ConfigFile = Change_ConfigFile;
Change_ConfigFile.runtime = protobuf_1.proto3;
Change_ConfigFile.typeName = "api.v1.capsule.Change.ConfigFile";
Change_ConfigFile.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "is_secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Rollback change.
 *
 * @generated from message api.v1.capsule.Change.Rollback
 */
class Change_Rollback extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Rollout to roll back to.
         *
         * @generated from field: uint64 rollback_id = 1;
         */
        this.rollbackId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change_Rollback().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change_Rollback().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change_Rollback().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change_Rollback, a, b);
    }
}
exports.Change_Rollback = Change_Rollback;
Change_Rollback.runtime = protobuf_1.proto3;
Change_Rollback.typeName = "api.v1.capsule.Change.Rollback";
Change_Rollback.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollback_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Jobs change
 *
 * @generated from message api.v1.capsule.Change.CronJobs
 */
class Change_CronJobs extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The jobs.
         *
         * @generated from field: repeated api.v1.capsule.CronJob jobs = 1;
         */
        this.jobs = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change_CronJobs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change_CronJobs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change_CronJobs().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change_CronJobs, a, b);
    }
}
exports.Change_CronJobs = Change_CronJobs;
Change_CronJobs.runtime = protobuf_1.proto3;
Change_CronJobs.typeName = "api.v1.capsule.Change.CronJobs";
Change_CronJobs.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "jobs", kind: "message", T: job_pb_js_1.CronJob, repeated: true },
]);
/**
 * Environment variable change.
 *
 * @generated from message api.v1.capsule.Change.EnvironmentVariable
 */
class Change_EnvironmentVariable extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the environment variable.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The value it takes.
         *
         * @generated from field: string value = 2;
         */
        this.value = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change_EnvironmentVariable().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change_EnvironmentVariable().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change_EnvironmentVariable().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change_EnvironmentVariable, a, b);
    }
}
exports.Change_EnvironmentVariable = Change_EnvironmentVariable;
Change_EnvironmentVariable.runtime = protobuf_1.proto3;
Change_EnvironmentVariable.typeName = "api.v1.capsule.Change.EnvironmentVariable";
Change_EnvironmentVariable.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Entrypoint for the capsule instances.
 *
 * @generated from message api.v1.capsule.Change.CommandArguments
 */
class Change_CommandArguments extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Command to run.
         *
         * @generated from field: string command = 2;
         */
        this.command = "";
        /**
         * arguments to the command.
         *
         * @generated from field: repeated string args = 3;
         */
        this.args = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change_CommandArguments().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change_CommandArguments().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change_CommandArguments().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change_CommandArguments, a, b);
    }
}
exports.Change_CommandArguments = Change_CommandArguments;
Change_CommandArguments.runtime = protobuf_1.proto3;
Change_CommandArguments.typeName = "api.v1.capsule.Change.CommandArguments";
Change_CommandArguments.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * Remove cron job change.
 *
 * @generated from message api.v1.capsule.Change.RemoveCronJob
 */
class Change_RemoveCronJob extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the job to remove
         *
         * @generated from field: string job_name = 1;
         */
        this.jobName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change_RemoveCronJob().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change_RemoveCronJob().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change_RemoveCronJob().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change_RemoveCronJob, a, b);
    }
}
exports.Change_RemoveCronJob = Change_RemoveCronJob;
Change_RemoveCronJob.runtime = protobuf_1.proto3;
Change_RemoveCronJob.typeName = "api.v1.capsule.Change.RemoveCronJob";
Change_RemoveCronJob.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.Change.RemoveInterface
 */
class Change_RemoveInterface extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string interface_name = 1;
         */
        this.interfaceName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change_RemoveInterface().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change_RemoveInterface().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change_RemoveInterface().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change_RemoveInterface, a, b);
    }
}
exports.Change_RemoveInterface = Change_RemoveInterface;
Change_RemoveInterface.runtime = protobuf_1.proto3;
Change_RemoveInterface.typeName = "api.v1.capsule.Change.RemoveInterface";
Change_RemoveInterface.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "interface_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Settings for the instance container
 *
 * @generated from message api.v1.capsule.ContainerSettings
 */
class ContainerSettings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Environment variables.
         *
         * @generated from field: map<string, string> environment_variables = 1;
         */
        this.environmentVariables = {};
        /**
         * Entrypoint for the container.
         *
         * @generated from field: string command = 2;
         */
        this.command = "";
        /**
         * Arguments to the container.
         *
         * @generated from field: repeated string args = 3;
         */
        this.args = [];
        /**
         * Environment sources.
         *
         * @generated from field: repeated api.v1.capsule.EnvironmentSource environment_sources = 5;
         */
        this.environmentSources = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContainerSettings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContainerSettings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContainerSettings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContainerSettings, a, b);
    }
}
exports.ContainerSettings = ContainerSettings;
ContainerSettings.runtime = protobuf_1.proto3;
ContainerSettings.typeName = "api.v1.capsule.ContainerSettings";
ContainerSettings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "environment_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "resources", kind: "message", T: Resources },
    { no: 5, name: "environment_sources", kind: "message", T: EnvironmentSource, repeated: true },
]);
/**
 * Container resources requests and limits
 *
 * @generated from message api.v1.capsule.Resources
 */
class Resources extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Resources().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Resources().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Resources().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Resources, a, b);
    }
}
exports.Resources = Resources;
Resources.runtime = protobuf_1.proto3;
Resources.typeName = "api.v1.capsule.Resources";
Resources.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: ResourceList },
    { no: 2, name: "limits", kind: "message", T: ResourceList },
    { no: 3, name: "gpu_limits", kind: "message", T: GpuLimits },
]);
/**
 * CPU and Memory resource request or limits
 *
 * @generated from message api.v1.capsule.ResourceList
 */
class ResourceList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Unit: milli-CPUs
         *
         * @generated from field: uint32 cpu_millis = 1;
         */
        this.cpuMillis = 0;
        /**
         * Unit: Bytes
         *
         * @generated from field: uint64 memory_bytes = 2;
         */
        this.memoryBytes = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResourceList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResourceList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResourceList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResourceList, a, b);
    }
}
exports.ResourceList = ResourceList;
ResourceList.runtime = protobuf_1.proto3;
ResourceList.typeName = "api.v1.capsule.ResourceList";
ResourceList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "cpu_millis", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "memory_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * GPU resource limits
 *
 * @generated from message api.v1.capsule.GpuLimits
 */
class GpuLimits extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * gpu resource type - fx. nvidia.com/gpu
         *
         * @generated from field: string type = 1;
         */
        this.type = "";
        /**
         * number of gpus
         *
         * @generated from field: uint32 count = 2;
         */
        this.count = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GpuLimits().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GpuLimits().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GpuLimits().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GpuLimits, a, b);
    }
}
exports.GpuLimits = GpuLimits;
GpuLimits.runtime = protobuf_1.proto3;
GpuLimits.typeName = "api.v1.capsule.GpuLimits";
GpuLimits.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * Source of environment variables
 *
 * @generated from message api.v1.capsule.EnvironmentSource
 */
class EnvironmentSource extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the source
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Type of the source
         *
         * @generated from field: api.v1.capsule.EnvironmentSource.Kind kind = 2;
         */
        this.kind = EnvironmentSource_Kind.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnvironmentSource().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnvironmentSource().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnvironmentSource().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EnvironmentSource, a, b);
    }
}
exports.EnvironmentSource = EnvironmentSource;
EnvironmentSource.runtime = protobuf_1.proto3;
EnvironmentSource.typeName = "api.v1.capsule.EnvironmentSource";
EnvironmentSource.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: protobuf_1.proto3.getEnumType(EnvironmentSource_Kind) },
]);
/**
 * @generated from enum api.v1.capsule.EnvironmentSource.Kind
 */
var EnvironmentSource_Kind;
(function (EnvironmentSource_Kind) {
    /**
     * Unspecified.
     *
     * @generated from enum value: KIND_UNSPECIFIED = 0;
     */
    EnvironmentSource_Kind[EnvironmentSource_Kind["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Environment variables from a config map.
     *
     * @generated from enum value: KIND_CONFIG_MAP = 1;
     */
    EnvironmentSource_Kind[EnvironmentSource_Kind["CONFIG_MAP"] = 1] = "CONFIG_MAP";
    /**
     * Environment variables from a secret.
     *
     * @generated from enum value: KIND_SECRET = 2;
     */
    EnvironmentSource_Kind[EnvironmentSource_Kind["SECRET"] = 2] = "SECRET";
})(EnvironmentSource_Kind || (exports.EnvironmentSource_Kind = EnvironmentSource_Kind = {}));
// Retrieve enum metadata with: proto3.getEnumType(EnvironmentSource_Kind)
protobuf_1.proto3.util.setEnumType(EnvironmentSource_Kind, "api.v1.capsule.EnvironmentSource.Kind", [
    { no: 0, name: "KIND_UNSPECIFIED" },
    { no: 1, name: "KIND_CONFIG_MAP" },
    { no: 2, name: "KIND_SECRET" },
]);
/**
 * A network configuration of network interfaces.
 *
 * @generated from message api.v1.capsule.Network
 */
class Network extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * All the network interfaces.
         *
         * @generated from field: repeated api.v1.capsule.Interface interfaces = 1;
         */
        this.interfaces = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Network().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Network().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Network().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Network, a, b);
    }
}
exports.Network = Network;
Network.runtime = protobuf_1.proto3;
Network.typeName = "api.v1.capsule.Network";
Network.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "interfaces", kind: "message", T: Interface, repeated: true },
]);
/**
 * A single network interface.
 *
 * @generated from message api.v1.capsule.Interface
 */
class Interface extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Port of the interface.
         *
         * @generated from field: uint32 port = 1;
         */
        this.port = 0;
        /**
         * Name of the interface.
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Interface().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Interface().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Interface().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Interface, a, b);
    }
}
exports.Interface = Interface;
Interface.runtime = protobuf_1.proto3;
Interface.typeName = "api.v1.capsule.Interface";
Interface.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public", kind: "message", T: PublicInterface },
    { no: 7, name: "liveness", kind: "message", T: InterfaceProbe },
    { no: 8, name: "readiness", kind: "message", T: InterfaceProbe },
]);
/**
 * Probe for liveness or readiness.
 *
 * @generated from message api.v1.capsule.InterfaceProbe
 */
class InterfaceProbe extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Type of the proble.
         *
         * @generated from oneof api.v1.capsule.InterfaceProbe.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InterfaceProbe().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InterfaceProbe().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InterfaceProbe().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InterfaceProbe, a, b);
    }
}
exports.InterfaceProbe = InterfaceProbe;
InterfaceProbe.runtime = protobuf_1.proto3;
InterfaceProbe.typeName = "api.v1.capsule.InterfaceProbe";
InterfaceProbe.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "http", kind: "message", T: InterfaceProbe_HTTP, oneof: "kind" },
    { no: 2, name: "tcp", kind: "message", T: InterfaceProbe_TCP, oneof: "kind" },
    { no: 3, name: "grpc", kind: "message", T: InterfaceProbe_GRPC, oneof: "kind" },
]);
/**
 * HTTP path for the probe.
 *
 * @generated from message api.v1.capsule.InterfaceProbe.HTTP
 */
class InterfaceProbe_HTTP extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string path = 1;
         */
        this.path = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InterfaceProbe_HTTP().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InterfaceProbe_HTTP().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InterfaceProbe_HTTP().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InterfaceProbe_HTTP, a, b);
    }
}
exports.InterfaceProbe_HTTP = InterfaceProbe_HTTP;
InterfaceProbe_HTTP.runtime = protobuf_1.proto3;
InterfaceProbe_HTTP.typeName = "api.v1.capsule.InterfaceProbe.HTTP";
InterfaceProbe_HTTP.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * IF TCP probe.
 *
 * @generated from message api.v1.capsule.InterfaceProbe.TCP
 */
class InterfaceProbe_TCP extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InterfaceProbe_TCP().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InterfaceProbe_TCP().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InterfaceProbe_TCP().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InterfaceProbe_TCP, a, b);
    }
}
exports.InterfaceProbe_TCP = InterfaceProbe_TCP;
InterfaceProbe_TCP.runtime = protobuf_1.proto3;
InterfaceProbe_TCP.typeName = "api.v1.capsule.InterfaceProbe.TCP";
InterfaceProbe_TCP.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * GRPC service for the probe.
 *
 * @generated from message api.v1.capsule.InterfaceProbe.GRPC
 */
class InterfaceProbe_GRPC extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string service = 1;
         */
        this.service = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InterfaceProbe_GRPC().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InterfaceProbe_GRPC().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InterfaceProbe_GRPC().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InterfaceProbe_GRPC, a, b);
    }
}
exports.InterfaceProbe_GRPC = InterfaceProbe_GRPC;
InterfaceProbe_GRPC.runtime = protobuf_1.proto3;
InterfaceProbe_GRPC.typeName = "api.v1.capsule.InterfaceProbe.GRPC";
InterfaceProbe_GRPC.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Public interface configuration.
 *
 * @generated from message api.v1.capsule.PublicInterface
 */
class PublicInterface extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * True if the interface is public.
         *
         * @generated from field: bool enabled = 1;
         */
        this.enabled = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicInterface().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicInterface().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicInterface().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicInterface, a, b);
    }
}
exports.PublicInterface = PublicInterface;
PublicInterface.runtime = protobuf_1.proto3;
PublicInterface.typeName = "api.v1.capsule.PublicInterface";
PublicInterface.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "method", kind: "message", T: RoutingMethod },
]);
/**
 * The routing method for the public interface.
 *
 * @generated from message api.v1.capsule.RoutingMethod
 */
class RoutingMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Type of routing for the public interface.
         *
         * @generated from oneof api.v1.capsule.RoutingMethod.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoutingMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoutingMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoutingMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RoutingMethod, a, b);
    }
}
exports.RoutingMethod = RoutingMethod;
RoutingMethod.runtime = protobuf_1.proto3;
RoutingMethod.typeName = "api.v1.capsule.RoutingMethod";
RoutingMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "load_balancer", kind: "message", T: RoutingMethod_LoadBalancer, oneof: "kind" },
    { no: 2, name: "ingress", kind: "message", T: RoutingMethod_Ingress, oneof: "kind" },
]);
/**
 * Loadbalancer routing.
 *
 * @generated from message api.v1.capsule.RoutingMethod.LoadBalancer
 */
class RoutingMethod_LoadBalancer extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * public port.
         *
         * @generated from field: uint32 port = 1;
         */
        this.port = 0;
        /**
         * node port.
         *
         * @generated from field: uint32 node_port = 2;
         */
        this.nodePort = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoutingMethod_LoadBalancer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoutingMethod_LoadBalancer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoutingMethod_LoadBalancer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RoutingMethod_LoadBalancer, a, b);
    }
}
exports.RoutingMethod_LoadBalancer = RoutingMethod_LoadBalancer;
RoutingMethod_LoadBalancer.runtime = protobuf_1.proto3;
RoutingMethod_LoadBalancer.typeName = "api.v1.capsule.RoutingMethod.LoadBalancer";
RoutingMethod_LoadBalancer.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "node_port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * Ingress routing.
 *
 * @generated from message api.v1.capsule.RoutingMethod.Ingress
 */
class RoutingMethod_Ingress extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Hostname of the ingress.
         *
         * @generated from field: string host = 1;
         */
        this.host = "";
        /**
         * True if TLS is enabled.
         *
         * @generated from field: bool tls = 2;
         */
        this.tls = false;
        /**
         * Paths of the ingress.
         *
         * @generated from field: repeated string paths = 3;
         */
        this.paths = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoutingMethod_Ingress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoutingMethod_Ingress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoutingMethod_Ingress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RoutingMethod_Ingress, a, b);
    }
}
exports.RoutingMethod_Ingress = RoutingMethod_Ingress;
RoutingMethod_Ingress.runtime = protobuf_1.proto3;
RoutingMethod_Ingress.typeName = "api.v1.capsule.RoutingMethod.Ingress";
RoutingMethod_Ingress.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tls", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * Horizontal scaling settings.
 *
 * @generated from message api.v1.capsule.HorizontalScale
 */
class HorizontalScale extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Maximum number of replicas.
         *
         * @generated from field: uint32 max_replicas = 1;
         */
        this.maxReplicas = 0;
        /**
         * Minimum number of replicas.
         *
         * @generated from field: uint32 min_replicas = 2;
         */
        this.minReplicas = 0;
        /**
         * If scaling based on custom metrics.
         *
         * @generated from field: repeated api.v1.capsule.CustomMetric custom_metrics = 4;
         */
        this.customMetrics = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HorizontalScale().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HorizontalScale().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HorizontalScale().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HorizontalScale, a, b);
    }
}
exports.HorizontalScale = HorizontalScale;
HorizontalScale.runtime = protobuf_1.proto3;
HorizontalScale.typeName = "api.v1.capsule.HorizontalScale";
HorizontalScale.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "max_replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "min_replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "cpu_target", kind: "message", T: CPUTarget },
    { no: 4, name: "custom_metrics", kind: "message", T: CustomMetric, repeated: true },
]);
/**
 * Autoscaling based on CPU target.
 *
 * @generated from message api.v1.capsule.CPUTarget
 */
class CPUTarget extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Average CPU utilization target.
         *
         * @generated from field: uint32 average_utilization_percentage = 1;
         */
        this.averageUtilizationPercentage = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CPUTarget().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CPUTarget().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CPUTarget().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CPUTarget, a, b);
    }
}
exports.CPUTarget = CPUTarget;
CPUTarget.runtime = protobuf_1.proto3;
CPUTarget.typeName = "api.v1.capsule.CPUTarget";
CPUTarget.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "average_utilization_percentage", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * Autoscaling based on custom metrics.
 *
 * @generated from message api.v1.capsule.CustomMetric
 */
class CustomMetric extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The type of metric.
         *
         * @generated from oneof api.v1.capsule.CustomMetric.metric
         */
        this.metric = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CustomMetric().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomMetric().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomMetric().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomMetric, a, b);
    }
}
exports.CustomMetric = CustomMetric;
CustomMetric.runtime = protobuf_1.proto3;
CustomMetric.typeName = "api.v1.capsule.CustomMetric";
CustomMetric.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: InstanceMetric, oneof: "metric" },
    { no: 2, name: "object", kind: "message", T: ObjectMetric, oneof: "metric" },
]);
/**
 * Metric emitted by instances / pods.
 *
 * @generated from message api.v1.capsule.InstanceMetric
 */
class InstanceMetric extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the metric
         *
         * @generated from field: string metric_name = 1;
         */
        this.metricName = "";
        /**
         * Labels of the instances to match.
         *
         * @generated from field: map<string, string> match_labels = 2;
         */
        this.matchLabels = {};
        /**
         * Average value target.
         *
         * @generated from field: string average_value = 3;
         */
        this.averageValue = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceMetric().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceMetric().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceMetric().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceMetric, a, b);
    }
}
exports.InstanceMetric = InstanceMetric;
InstanceMetric.runtime = protobuf_1.proto3;
InstanceMetric.typeName = "api.v1.capsule.InstanceMetric";
InstanceMetric.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metric_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 3, name: "average_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Metric emitted by kubernetes object.
 *
 * @generated from message api.v1.capsule.ObjectMetric
 */
class ObjectMetric extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the metric.
         *
         * @generated from field: string metric_name = 1;
         */
        this.metricName = "";
        /**
         * Labels of the object to match.
         *
         * @generated from field: map<string, string> match_labels = 2;
         */
        this.matchLabels = {};
        /**
         * Average value target.
         *
         * @generated from field: string average_value = 3;
         */
        this.averageValue = "";
        /**
         * Value target.
         *
         * @generated from field: string value = 4;
         */
        this.value = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ObjectMetric().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ObjectMetric().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ObjectMetric().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ObjectMetric, a, b);
    }
}
exports.ObjectMetric = ObjectMetric;
ObjectMetric.runtime = protobuf_1.proto3;
ObjectMetric.typeName = "api.v1.capsule.ObjectMetric";
ObjectMetric.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metric_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "match_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 3, name: "average_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "object_reference", kind: "message", T: ObjectReference },
]);
/**
 * A reference to a kubernetes object.
 *
 * @generated from message api.v1.capsule.ObjectReference
 */
class ObjectReference extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Type of object.
         *
         * @generated from field: string kind = 1;
         */
        this.kind = "";
        /**
         * Name of the object.
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Api version of the object.
         *
         * @generated from field: string api_version = 3;
         */
        this.apiVersion = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ObjectReference().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ObjectReference().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ObjectReference().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ObjectReference, a, b);
    }
}
exports.ObjectReference = ObjectReference;
ObjectReference.runtime = protobuf_1.proto3;
ObjectReference.typeName = "api.v1.capsule.ObjectReference";
ObjectReference.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 1607:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/event.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventData = exports.ErrorEvent = exports.AbortEvent = exports.RolloutEvent = exports.Event = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * An event is a message from a rollout
 *
 * @generated from message api.v1.capsule.Event
 */
class Event extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The rollout that created the event.
         *
         * @generated from field: uint64 rollout_id = 3;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * A message associated with the event.
         *
         * @generated from field: string message = 4;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Event().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Event().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Event().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Event, a, b);
    }
}
exports.Event = Event;
Event.runtime = protobuf_1.proto3;
Event.typeName = "api.v1.capsule.Event";
Event.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "event_data", kind: "message", T: EventData },
]);
/**
 * An event that is associated with a rollout.
 *
 * @generated from message api.v1.capsule.RolloutEvent
 */
class RolloutEvent extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RolloutEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RolloutEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RolloutEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RolloutEvent, a, b);
    }
}
exports.RolloutEvent = RolloutEvent;
RolloutEvent.runtime = protobuf_1.proto3;
RolloutEvent.typeName = "api.v1.capsule.RolloutEvent";
RolloutEvent.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * An event that is associated with an abort.
 *
 * @generated from message api.v1.capsule.AbortEvent
 */
class AbortEvent extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AbortEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AbortEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AbortEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AbortEvent, a, b);
    }
}
exports.AbortEvent = AbortEvent;
AbortEvent.runtime = protobuf_1.proto3;
AbortEvent.typeName = "api.v1.capsule.AbortEvent";
AbortEvent.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * An event that is associated with an error.
 *
 * @generated from message api.v1.capsule.ErrorEvent
 */
class ErrorEvent extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ErrorEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ErrorEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ErrorEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ErrorEvent, a, b);
    }
}
exports.ErrorEvent = ErrorEvent;
ErrorEvent.runtime = protobuf_1.proto3;
ErrorEvent.typeName = "api.v1.capsule.ErrorEvent";
ErrorEvent.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The data associated with an event.
 *
 * @generated from message api.v1.capsule.EventData
 */
class EventData extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.EventData.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EventData, a, b);
    }
}
exports.EventData = EventData;
EventData.runtime = protobuf_1.proto3;
EventData.typeName = "api.v1.capsule.EventData";
EventData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout", kind: "message", T: RolloutEvent, oneof: "kind" },
    { no: 2, name: "error", kind: "message", T: ErrorEvent, oneof: "kind" },
    { no: 3, name: "abort", kind: "message", T: AbortEvent, oneof: "kind" },
]);


/***/ }),

/***/ 8344:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/instance/status.proto (package api.v1.capsule.instance, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeletedStep = exports.DeletedStage = exports.ContainerTermination = exports.ExecutingStep = exports.ReadyStep = exports.RunningStep = exports.RunningStage = exports.ImagePullingStep = exports.PreparingStep = exports.PreparingStage = exports.StepInfo = exports.GenericStep = exports.PlacementStep = exports.SchedulingStep = exports.SchedulingStage = exports.StageInfo = exports.Stages = exports.Status = exports.ReadyState = exports.ImagePullingState = exports.PlacementState = exports.StepState = exports.StageState = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Different states a stage can be in.
 *
 * @generated from enum api.v1.capsule.instance.StageState
 */
var StageState;
(function (StageState) {
    /**
     * Unspecified state.
     *
     * @generated from enum value: STAGE_STATE_UNSPECIFIED = 0;
     */
    StageState[StageState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Stage is ongoing.
     *
     * @generated from enum value: STAGE_STATE_ONGOING = 1;
     */
    StageState[StageState["ONGOING"] = 1] = "ONGOING";
    /**
     * Stage has failed.
     *
     * @generated from enum value: STAGE_STATE_FAILED = 2;
     */
    StageState[StageState["FAILED"] = 2] = "FAILED";
    /**
     * Stage is done.
     *
     * @generated from enum value: STAGE_STATE_DONE = 3;
     */
    StageState[StageState["DONE"] = 3] = "DONE";
    /**
     * Stage is running.
     *
     * @generated from enum value: STAGE_STATE_RUNNING = 4;
     */
    StageState[StageState["RUNNING"] = 4] = "RUNNING";
})(StageState || (exports.StageState = StageState = {}));
// Retrieve enum metadata with: proto3.getEnumType(StageState)
protobuf_1.proto3.util.setEnumType(StageState, "api.v1.capsule.instance.StageState", [
    { no: 0, name: "STAGE_STATE_UNSPECIFIED" },
    { no: 1, name: "STAGE_STATE_ONGOING" },
    { no: 2, name: "STAGE_STATE_FAILED" },
    { no: 3, name: "STAGE_STATE_DONE" },
    { no: 4, name: "STAGE_STATE_RUNNING" },
]);
/**
 * Different states a step can be in.
 *
 * @generated from enum api.v1.capsule.instance.StepState
 */
var StepState;
(function (StepState) {
    /**
     * Unspecified state.
     *
     * @generated from enum value: STEP_STATE_UNSPECIFIED = 0;
     */
    StepState[StepState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Step is ongoing.
     *
     * @generated from enum value: STEP_STATE_ONGOING = 1;
     */
    StepState[StepState["ONGOING"] = 1] = "ONGOING";
    /**
     * Step has failed.
     *
     * @generated from enum value: STEP_STATE_FAILED = 2;
     */
    StepState[StepState["FAILED"] = 2] = "FAILED";
    /**
     * Step is done.
     *
     * @generated from enum value: STEP_STATE_DONE = 3;
     */
    StepState[StepState["DONE"] = 3] = "DONE";
    /**
     * Step is running.
     *
     * @generated from enum value: STEP_STATE_RUNNING = 4;
     */
    StepState[StepState["RUNNING"] = 4] = "RUNNING";
})(StepState || (exports.StepState = StepState = {}));
// Retrieve enum metadata with: proto3.getEnumType(StepState)
protobuf_1.proto3.util.setEnumType(StepState, "api.v1.capsule.instance.StepState", [
    { no: 0, name: "STEP_STATE_UNSPECIFIED" },
    { no: 1, name: "STEP_STATE_ONGOING" },
    { no: 2, name: "STEP_STATE_FAILED" },
    { no: 3, name: "STEP_STATE_DONE" },
    { no: 4, name: "STEP_STATE_RUNNING" },
]);
/**
 * Different states of a placement step
 *
 * @generated from enum api.v1.capsule.instance.PlacementState
 */
var PlacementState;
(function (PlacementState) {
    /**
     * Unspecified state.
     *
     * @generated from enum value: SCHEDULING_STATE_UNSPECIFIED = 0;
     */
    PlacementState[PlacementState["SCHEDULING_STATE_UNSPECIFIED"] = 0] = "SCHEDULING_STATE_UNSPECIFIED";
    /**
     * If the instance is unschedulable.
     *
     * @generated from enum value: SCHEDULING_STATE_UNSCHEDULEABLE = 1;
     */
    PlacementState[PlacementState["SCHEDULING_STATE_UNSCHEDULEABLE"] = 1] = "SCHEDULING_STATE_UNSCHEDULEABLE";
    /**
     * If the instance is scheduled.
     *
     * @generated from enum value: SCHEDULING_STATE_DONE = 2;
     */
    PlacementState[PlacementState["SCHEDULING_STATE_DONE"] = 2] = "SCHEDULING_STATE_DONE";
})(PlacementState || (exports.PlacementState = PlacementState = {}));
// Retrieve enum metadata with: proto3.getEnumType(PlacementState)
protobuf_1.proto3.util.setEnumType(PlacementState, "api.v1.capsule.instance.PlacementState", [
    { no: 0, name: "SCHEDULING_STATE_UNSPECIFIED" },
    { no: 1, name: "SCHEDULING_STATE_UNSCHEDULEABLE" },
    { no: 2, name: "SCHEDULING_STATE_DONE" },
]);
/**
 * Different states of an image pulling step.
 *
 * @generated from enum api.v1.capsule.instance.ImagePullingState
 */
var ImagePullingState;
(function (ImagePullingState) {
    /**
     * Unspecified state.
     *
     * @generated from enum value: IMAGE_PULLING_STATE_UNSPECIFIED = 0;
     */
    ImagePullingState[ImagePullingState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Image is being pulled.
     *
     * @generated from enum value: IMAGE_PULLING_STATE_PULLING = 1;
     */
    ImagePullingState[ImagePullingState["PULLING"] = 1] = "PULLING";
    /**
     * Image pulling has failed.
     *
     * @generated from enum value: IMAGE_PULLING_STATE_ERROR = 2;
     */
    ImagePullingState[ImagePullingState["ERROR"] = 2] = "ERROR";
    /**
     * Image pulling is in back off.
     *
     * @generated from enum value: IMAGE_PULLING_STATE_BACK_OFF = 3;
     */
    ImagePullingState[ImagePullingState["BACK_OFF"] = 3] = "BACK_OFF";
    /**
     * Image pulling is done.
     *
     * @generated from enum value: IMAGE_PULLING_STATE_DONE = 4;
     */
    ImagePullingState[ImagePullingState["DONE"] = 4] = "DONE";
})(ImagePullingState || (exports.ImagePullingState = ImagePullingState = {}));
// Retrieve enum metadata with: proto3.getEnumType(ImagePullingState)
protobuf_1.proto3.util.setEnumType(ImagePullingState, "api.v1.capsule.instance.ImagePullingState", [
    { no: 0, name: "IMAGE_PULLING_STATE_UNSPECIFIED" },
    { no: 1, name: "IMAGE_PULLING_STATE_PULLING" },
    { no: 2, name: "IMAGE_PULLING_STATE_ERROR" },
    { no: 3, name: "IMAGE_PULLING_STATE_BACK_OFF" },
    { no: 4, name: "IMAGE_PULLING_STATE_DONE" },
]);
/**
 * Different states of a ready step.
 *
 * @generated from enum api.v1.capsule.instance.ReadyState
 */
var ReadyState;
(function (ReadyState) {
    /**
     * Unspecified state.
     *
     * @generated from enum value: READY_STATE_UNSPECIFIED = 0;
     */
    ReadyState[ReadyState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * If the instance is in crash loop backoff.
     *
     * @generated from enum value: READY_STATE_CRASH_LOOP_BACKOFF = 1;
     */
    ReadyState[ReadyState["CRASH_LOOP_BACKOFF"] = 1] = "CRASH_LOOP_BACKOFF";
    /**
     * If the instance is not ready.
     *
     * @generated from enum value: READY_STATE_NOT_READY = 2;
     */
    ReadyState[ReadyState["NOT_READY"] = 2] = "NOT_READY";
    /**
     * If the instance is ready.
     *
     * @generated from enum value: READY_STATE_READY = 3;
     */
    ReadyState[ReadyState["READY"] = 3] = "READY";
})(ReadyState || (exports.ReadyState = ReadyState = {}));
// Retrieve enum metadata with: proto3.getEnumType(ReadyState)
protobuf_1.proto3.util.setEnumType(ReadyState, "api.v1.capsule.instance.ReadyState", [
    { no: 0, name: "READY_STATE_UNSPECIFIED" },
    { no: 1, name: "READY_STATE_CRASH_LOOP_BACKOFF" },
    { no: 2, name: "READY_STATE_NOT_READY" },
    { no: 3, name: "READY_STATE_READY" },
]);
/**
 * Status is a representation of the current state of an instance.
 *
 * @generated from message api.v1.capsule.instance.Status
 */
class Status extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Instance ID.
         *
         * @generated from field: string instance_id = 1;
         */
        this.instanceId = "";
        /**
         * Rollout ID.
         *
         * @generated from field: uint64 rollout_id = 3;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * Image of the instance.
         *
         * @generated from field: string image = 4;
         */
        this.image = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Status().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Status().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Status().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Status, a, b);
    }
}
exports.Status = Status;
Status.runtime = protobuf_1.proto3;
Status.typeName = "api.v1.capsule.instance.Status";
Status.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stages", kind: "message", T: Stages },
    { no: 3, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * The different stages of the instance.
 *
 * @generated from message api.v1.capsule.instance.Stages
 */
class Stages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Stages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Stages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Stages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Stages, a, b);
    }
}
exports.Stages = Stages;
Stages.runtime = protobuf_1.proto3;
Stages.typeName = "api.v1.capsule.instance.Stages";
Stages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: SchedulingStage },
    { no: 2, name: "preparing", kind: "message", T: PreparingStage },
    { no: 3, name: "running", kind: "message", T: RunningStage },
    { no: 4, name: "deleted", kind: "message", T: DeletedStage },
]);
/**
 * Meta information about a stage.
 *
 * @generated from message api.v1.capsule.instance.StageInfo
 */
class StageInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the stage.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * State of the stage.
         *
         * @generated from field: api.v1.capsule.instance.StageState state = 3;
         */
        this.state = StageState.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StageInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StageInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StageInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StageInfo, a, b);
    }
}
exports.StageInfo = StageInfo;
StageInfo.runtime = protobuf_1.proto3;
StageInfo.typeName = "api.v1.capsule.instance.StageInfo";
StageInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(StageState) },
]);
/**
 * The scheduling stage.
 *
 * @generated from message api.v1.capsule.instance.SchedulingStage
 */
class SchedulingStage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Steps of the stage.
         *
         * @generated from field: repeated api.v1.capsule.instance.SchedulingStep steps = 2;
         */
        this.steps = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SchedulingStage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SchedulingStage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SchedulingStage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SchedulingStage, a, b);
    }
}
exports.SchedulingStage = SchedulingStage;
SchedulingStage.runtime = protobuf_1.proto3;
SchedulingStage.typeName = "api.v1.capsule.instance.SchedulingStage";
SchedulingStage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StageInfo },
    { no: 2, name: "steps", kind: "message", T: SchedulingStep, repeated: true },
]);
/**
 * A step of the scheduling stage.
 *
 * @generated from message api.v1.capsule.instance.SchedulingStep
 */
class SchedulingStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.instance.SchedulingStep.step
         */
        this.step = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SchedulingStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SchedulingStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SchedulingStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SchedulingStep, a, b);
    }
}
exports.SchedulingStep = SchedulingStep;
SchedulingStep.runtime = protobuf_1.proto3;
SchedulingStep.typeName = "api.v1.capsule.instance.SchedulingStep";
SchedulingStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: GenericStep, oneof: "step" },
    { no: 2, name: "placement", kind: "message", T: PlacementStep, oneof: "step" },
]);
/**
 * Placement step.
 *
 * @generated from message api.v1.capsule.instance.PlacementStep
 */
class PlacementStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Node on which the instance should run.
         *
         * @generated from field: string node = 2;
         */
        this.node = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PlacementStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PlacementStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PlacementStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PlacementStep, a, b);
    }
}
exports.PlacementStep = PlacementStep;
PlacementStep.runtime = protobuf_1.proto3;
PlacementStep.typeName = "api.v1.capsule.instance.PlacementStep";
PlacementStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * A generic step.
 *
 * @generated from message api.v1.capsule.instance.GenericStep
 */
class GenericStep extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenericStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenericStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenericStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GenericStep, a, b);
    }
}
exports.GenericStep = GenericStep;
GenericStep.runtime = protobuf_1.proto3;
GenericStep.typeName = "api.v1.capsule.instance.GenericStep";
GenericStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
]);
/**
 * Meta data about a step.
 *
 * @generated from message api.v1.capsule.instance.StepInfo
 */
class StepInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the step.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Message of the step.
         *
         * @generated from field: string message = 2;
         */
        this.message = "";
        /**
         * State of the step.
         *
         * @generated from field: api.v1.capsule.instance.StepState state = 4;
         */
        this.state = StepState.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StepInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StepInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StepInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StepInfo, a, b);
    }
}
exports.StepInfo = StepInfo;
StepInfo.runtime = protobuf_1.proto3;
StepInfo.typeName = "api.v1.capsule.instance.StepInfo";
StepInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(StepState) },
]);
/**
 * The preparing stage
 *
 * @generated from message api.v1.capsule.instance.PreparingStage
 */
class PreparingStage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Steps of the stage.
         *
         * @generated from field: repeated api.v1.capsule.instance.PreparingStep steps = 2;
         */
        this.steps = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PreparingStage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PreparingStage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PreparingStage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PreparingStage, a, b);
    }
}
exports.PreparingStage = PreparingStage;
PreparingStage.runtime = protobuf_1.proto3;
PreparingStage.typeName = "api.v1.capsule.instance.PreparingStage";
PreparingStage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StageInfo },
    { no: 2, name: "steps", kind: "message", T: PreparingStep, repeated: true },
]);
/**
 * A step of the preparing stage.
 *
 * @generated from message api.v1.capsule.instance.PreparingStep
 */
class PreparingStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.instance.PreparingStep.step
         */
        this.step = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PreparingStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PreparingStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PreparingStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PreparingStep, a, b);
    }
}
exports.PreparingStep = PreparingStep;
PreparingStep.runtime = protobuf_1.proto3;
PreparingStep.typeName = "api.v1.capsule.instance.PreparingStep";
PreparingStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: GenericStep, oneof: "step" },
    { no: 2, name: "image_pulling", kind: "message", T: ImagePullingStep, oneof: "step" },
]);
/**
 * An image pulling step of the preparing stage.
 *
 * @generated from message api.v1.capsule.instance.ImagePullingStep
 */
class ImagePullingStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * State of the step.
         *
         * @generated from field: api.v1.capsule.instance.ImagePullingState state = 2;
         */
        this.state = ImagePullingState.UNSPECIFIED;
        /**
         * Image that is being pulled.
         *
         * @generated from field: string image = 3;
         */
        this.image = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagePullingStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagePullingStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagePullingStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImagePullingStep, a, b);
    }
}
exports.ImagePullingStep = ImagePullingStep;
ImagePullingStep.runtime = protobuf_1.proto3;
ImagePullingStep.typeName = "api.v1.capsule.instance.ImagePullingStep";
ImagePullingStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(ImagePullingState) },
    { no: 3, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The running stage of the instance
 *
 * @generated from message api.v1.capsule.instance.RunningStage
 */
class RunningStage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Steps of the stage.
         *
         * @generated from field: repeated api.v1.capsule.instance.RunningStep steps = 2;
         */
        this.steps = [];
        /**
         * Number of restarts of the instance.
         *
         * @generated from field: uint32 restarts = 3;
         */
        this.restarts = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RunningStage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RunningStage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RunningStage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RunningStage, a, b);
    }
}
exports.RunningStage = RunningStage;
RunningStage.runtime = protobuf_1.proto3;
RunningStage.typeName = "api.v1.capsule.instance.RunningStage";
RunningStage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StageInfo },
    { no: 2, name: "steps", kind: "message", T: RunningStep, repeated: true },
    { no: 3, name: "restarts", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "last_container_termination", kind: "message", T: ContainerTermination },
]);
/**
 * A step of the running stage.
 *
 * @generated from message api.v1.capsule.instance.RunningStep
 */
class RunningStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.instance.RunningStep.step
         */
        this.step = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RunningStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RunningStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RunningStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RunningStep, a, b);
    }
}
exports.RunningStep = RunningStep;
RunningStep.runtime = protobuf_1.proto3;
RunningStep.typeName = "api.v1.capsule.instance.RunningStep";
RunningStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: GenericStep, oneof: "step" },
    { no: 2, name: "ready", kind: "message", T: ReadyStep, oneof: "step" },
    { no: 3, name: "executing", kind: "message", T: ExecutingStep, oneof: "step" },
]);
/**
 * A ready step of the running stage.
 *
 * @generated from message api.v1.capsule.instance.ReadyStep
 */
class ReadyStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * State of the step.
         *
         * @generated from field: api.v1.capsule.instance.ReadyState state = 2;
         */
        this.state = ReadyState.UNSPECIFIED;
        /**
         * Number of times the step has failed.
         *
         * @generated from field: uint32 fail_count = 4;
         */
        this.failCount = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReadyStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReadyStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReadyStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ReadyStep, a, b);
    }
}
exports.ReadyStep = ReadyStep;
ReadyStep.runtime = protobuf_1.proto3;
ReadyStep.typeName = "api.v1.capsule.instance.ReadyStep";
ReadyStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(ReadyState) },
    { no: 3, name: "failed_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "fail_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * An executing step of the running stage.
 *
 * @generated from message api.v1.capsule.instance.ExecutingStep
 */
class ExecutingStep extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExecutingStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecutingStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecutingStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecutingStep, a, b);
    }
}
exports.ExecutingStep = ExecutingStep;
ExecutingStep.runtime = protobuf_1.proto3;
ExecutingStep.typeName = "api.v1.capsule.instance.ExecutingStep";
ExecutingStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "started_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * Information about the last container termination.
 *
 * @generated from message api.v1.capsule.instance.ContainerTermination
 */
class ContainerTermination extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Exit status from the last termination of the container
         *
         * @generated from field: int32 exit_code = 1;
         */
        this.exitCode = 0;
        /**
         * Signal from the last termination of the container
         * +optional
         *
         * @generated from field: int32 signal = 2;
         */
        this.signal = 0;
        /**
         * (brief) reason from the last termination of the container
         * +optional
         *
         * @generated from field: string reason = 3;
         */
        this.reason = "";
        /**
         * Message regarding the last termination of the container
         * +optional
         *
         * @generated from field: string message = 4;
         */
        this.message = "";
        /**
         * Container's ID in the format 'type://container_id'
         * +optional
         *
         * @generated from field: string container_id = 7;
         */
        this.containerId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContainerTermination().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContainerTermination().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContainerTermination().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContainerTermination, a, b);
    }
}
exports.ContainerTermination = ContainerTermination;
ContainerTermination.runtime = protobuf_1.proto3;
ContainerTermination.typeName = "api.v1.capsule.instance.ContainerTermination";
ContainerTermination.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "signal", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "started_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "finished_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "container_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.instance.DeletedStage
 */
class DeletedStage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.instance.DeletedStep steps = 2;
         */
        this.steps = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeletedStage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeletedStage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeletedStage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeletedStage, a, b);
    }
}
exports.DeletedStage = DeletedStage;
DeletedStage.runtime = protobuf_1.proto3;
DeletedStage.typeName = "api.v1.capsule.instance.DeletedStage";
DeletedStage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StageInfo },
    { no: 2, name: "steps", kind: "message", T: DeletedStep, repeated: true },
]);
/**
 * @generated from message api.v1.capsule.instance.DeletedStep
 */
class DeletedStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.instance.DeletedStep.step
         */
        this.step = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeletedStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeletedStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeletedStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeletedStep, a, b);
    }
}
exports.DeletedStep = DeletedStep;
DeletedStep.runtime = protobuf_1.proto3;
DeletedStep.typeName = "api.v1.capsule.instance.DeletedStep";
DeletedStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: GenericStep, oneof: "step" },
]);


/***/ }),

/***/ 1717:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/instance.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StatusTimestamps = exports.ContainerStateTerminated = exports.InstanceReady = exports.NotReady = exports.ReadyStages = exports.Ready = exports.Running = exports.CrashLoopBackoffData = exports.CrashLoopBackoff = exports.InstanceStatusRunningStages = exports.InstanceStatusRunningData = exports.InstanceStatusRunning = exports.ImagePullingDone = exports.ImagePullingBackOff = exports.ImagePullingError = exports.ImagePullingPulling = exports.ImagePullingStages = exports.ImagePulling = exports.InstanceStatusPreparingStages = exports.InstanceStatusPreparing = exports.DoneScheduling = exports.CurrentlyUnscheduleable = exports.InstanceStatusSchedulingStages = exports.InstanceStatusScheduling = exports.InstanceStatusStages = exports.InstanceStatusData = exports.InstanceStatus = exports.Instance = exports.State = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from enum api.v1.capsule.State
 */
var State;
(function (State) {
    /**
     * @generated from enum value: STATE_UNSPECIFIED = 0;
     */
    State[State["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: STATE_PENDING = 1;
     */
    State[State["PENDING"] = 1] = "PENDING";
    /**
     * @generated from enum value: STATE_RUNNING = 2;
     */
    State[State["RUNNING"] = 2] = "RUNNING";
    /**
     * @generated from enum value: STATE_SUCCEEDED = 3;
     */
    State[State["SUCCEEDED"] = 3] = "SUCCEEDED";
    /**
     * @generated from enum value: STATE_FAILED = 4;
     */
    State[State["FAILED"] = 4] = "FAILED";
})(State || (exports.State = State = {}));
// Retrieve enum metadata with: proto3.getEnumType(State)
protobuf_1.proto3.util.setEnumType(State, "api.v1.capsule.State", [
    { no: 0, name: "STATE_UNSPECIFIED" },
    { no: 1, name: "STATE_PENDING" },
    { no: 2, name: "STATE_RUNNING" },
    { no: 3, name: "STATE_SUCCEEDED" },
    { no: 4, name: "STATE_FAILED" },
]);
/**
 * @generated from message api.v1.capsule.Instance
 */
class Instance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string instance_id = 1;
         */
        this.instanceId = "";
        /**
         * @generated from field: string build_id = 2;
         */
        this.buildId = "";
        /**
         * @generated from field: api.v1.capsule.State state = 3;
         */
        this.state = State.UNSPECIFIED;
        /**
         * @generated from field: uint32 restart_count = 4;
         */
        this.restartCount = 0;
        /**
         * @generated from field: string message = 8;
         */
        this.message = "";
        /**
         * @generated from field: uint64 rollout_id = 9;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Instance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Instance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Instance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Instance, a, b);
    }
}
exports.Instance = Instance;
Instance.runtime = protobuf_1.proto3;
Instance.typeName = "api.v1.capsule.Instance";
Instance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(State) },
    { no: 4, name: "restart_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "started_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "finished_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 8, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.InstanceStatus
 */
class InstanceStatus extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatus, a, b);
    }
}
exports.InstanceStatus = InstanceStatus;
InstanceStatus.runtime = protobuf_1.proto3;
InstanceStatus.typeName = "api.v1.capsule.InstanceStatus";
InstanceStatus.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "data", kind: "message", T: InstanceStatusData },
    { no: 4, name: "stages", kind: "message", T: InstanceStatusStages },
]);
/**
 * @generated from message api.v1.capsule.InstanceStatusData
 */
class InstanceStatusData extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string instance_id = 1;
         */
        this.instanceId = "";
        /**
         * @generated from field: uint64 rollout_id = 2;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: string image_name = 3;
         */
        this.imageName = "";
        /**
         * @generated from field: string node = 4;
         */
        this.node = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusData, a, b);
    }
}
exports.InstanceStatusData = InstanceStatusData;
InstanceStatusData.runtime = protobuf_1.proto3;
InstanceStatusData.typeName = "api.v1.capsule.InstanceStatusData";
InstanceStatusData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "image_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.InstanceStatusStages
 */
class InstanceStatusStages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusStages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusStages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusStages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusStages, a, b);
    }
}
exports.InstanceStatusStages = InstanceStatusStages;
InstanceStatusStages.runtime = protobuf_1.proto3;
InstanceStatusStages.typeName = "api.v1.capsule.InstanceStatusStages";
InstanceStatusStages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: InstanceStatusScheduling },
    { no: 2, name: "preparing", kind: "message", T: InstanceStatusPreparing },
    { no: 3, name: "running", kind: "message", T: InstanceStatusRunning },
]);
/**
 * ====================== SCHEDULING ====================
 *
 * @generated from message api.v1.capsule.InstanceStatusScheduling
 */
class InstanceStatusScheduling extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusScheduling().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusScheduling().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusScheduling().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusScheduling, a, b);
    }
}
exports.InstanceStatusScheduling = InstanceStatusScheduling;
InstanceStatusScheduling.runtime = protobuf_1.proto3;
InstanceStatusScheduling.typeName = "api.v1.capsule.InstanceStatusScheduling";
InstanceStatusScheduling.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: InstanceStatusSchedulingStages },
]);
/**
 * @generated from message api.v1.capsule.InstanceStatusSchedulingStages
 */
class InstanceStatusSchedulingStages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusSchedulingStages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusSchedulingStages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusSchedulingStages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusSchedulingStages, a, b);
    }
}
exports.InstanceStatusSchedulingStages = InstanceStatusSchedulingStages;
InstanceStatusSchedulingStages.runtime = protobuf_1.proto3;
InstanceStatusSchedulingStages.typeName = "api.v1.capsule.InstanceStatusSchedulingStages";
InstanceStatusSchedulingStages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "currently_unscheduleable", kind: "message", T: CurrentlyUnscheduleable },
    { no: 2, name: "done", kind: "message", T: DoneScheduling },
]);
/**
 * @generated from message api.v1.capsule.CurrentlyUnscheduleable
 */
class CurrentlyUnscheduleable extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CurrentlyUnscheduleable().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CurrentlyUnscheduleable().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CurrentlyUnscheduleable().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CurrentlyUnscheduleable, a, b);
    }
}
exports.CurrentlyUnscheduleable = CurrentlyUnscheduleable;
CurrentlyUnscheduleable.runtime = protobuf_1.proto3;
CurrentlyUnscheduleable.typeName = "api.v1.capsule.CurrentlyUnscheduleable";
CurrentlyUnscheduleable.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * @generated from message api.v1.capsule.DoneScheduling
 */
class DoneScheduling extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DoneScheduling().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DoneScheduling().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DoneScheduling().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DoneScheduling, a, b);
    }
}
exports.DoneScheduling = DoneScheduling;
DoneScheduling.runtime = protobuf_1.proto3;
DoneScheduling.typeName = "api.v1.capsule.DoneScheduling";
DoneScheduling.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * ======================= PREPARING =====================
 *
 * @generated from message api.v1.capsule.InstanceStatusPreparing
 */
class InstanceStatusPreparing extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusPreparing().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusPreparing().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusPreparing().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusPreparing, a, b);
    }
}
exports.InstanceStatusPreparing = InstanceStatusPreparing;
InstanceStatusPreparing.runtime = protobuf_1.proto3;
InstanceStatusPreparing.typeName = "api.v1.capsule.InstanceStatusPreparing";
InstanceStatusPreparing.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: InstanceStatusPreparingStages },
]);
/**
 * @generated from message api.v1.capsule.InstanceStatusPreparingStages
 */
class InstanceStatusPreparingStages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusPreparingStages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusPreparingStages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusPreparingStages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusPreparingStages, a, b);
    }
}
exports.InstanceStatusPreparingStages = InstanceStatusPreparingStages;
InstanceStatusPreparingStages.runtime = protobuf_1.proto3;
InstanceStatusPreparingStages.typeName = "api.v1.capsule.InstanceStatusPreparingStages";
InstanceStatusPreparingStages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pulling", kind: "message", T: ImagePulling },
]);
/**
 * @generated from message api.v1.capsule.ImagePulling
 */
class ImagePulling extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagePulling().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagePulling().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagePulling().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImagePulling, a, b);
    }
}
exports.ImagePulling = ImagePulling;
ImagePulling.runtime = protobuf_1.proto3;
ImagePulling.typeName = "api.v1.capsule.ImagePulling";
ImagePulling.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: ImagePullingStages },
]);
/**
 * @generated from message api.v1.capsule.ImagePullingStages
 */
class ImagePullingStages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagePullingStages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagePullingStages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagePullingStages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImagePullingStages, a, b);
    }
}
exports.ImagePullingStages = ImagePullingStages;
ImagePullingStages.runtime = protobuf_1.proto3;
ImagePullingStages.typeName = "api.v1.capsule.ImagePullingStages";
ImagePullingStages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pulling", kind: "message", T: ImagePullingPulling },
    { no: 2, name: "error", kind: "message", T: ImagePullingError },
    { no: 3, name: "back_off", kind: "message", T: ImagePullingBackOff },
    { no: 4, name: "done", kind: "message", T: ImagePullingDone },
]);
/**
 * @generated from message api.v1.capsule.ImagePullingPulling
 */
class ImagePullingPulling extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagePullingPulling().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagePullingPulling().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagePullingPulling().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImagePullingPulling, a, b);
    }
}
exports.ImagePullingPulling = ImagePullingPulling;
ImagePullingPulling.runtime = protobuf_1.proto3;
ImagePullingPulling.typeName = "api.v1.capsule.ImagePullingPulling";
ImagePullingPulling.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * @generated from message api.v1.capsule.ImagePullingError
 */
class ImagePullingError extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagePullingError().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagePullingError().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagePullingError().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImagePullingError, a, b);
    }
}
exports.ImagePullingError = ImagePullingError;
ImagePullingError.runtime = protobuf_1.proto3;
ImagePullingError.typeName = "api.v1.capsule.ImagePullingError";
ImagePullingError.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * @generated from message api.v1.capsule.ImagePullingBackOff
 */
class ImagePullingBackOff extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagePullingBackOff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagePullingBackOff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagePullingBackOff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImagePullingBackOff, a, b);
    }
}
exports.ImagePullingBackOff = ImagePullingBackOff;
ImagePullingBackOff.runtime = protobuf_1.proto3;
ImagePullingBackOff.typeName = "api.v1.capsule.ImagePullingBackOff";
ImagePullingBackOff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * @generated from message api.v1.capsule.ImagePullingDone
 */
class ImagePullingDone extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImagePullingDone().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImagePullingDone().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImagePullingDone().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImagePullingDone, a, b);
    }
}
exports.ImagePullingDone = ImagePullingDone;
ImagePullingDone.runtime = protobuf_1.proto3;
ImagePullingDone.typeName = "api.v1.capsule.ImagePullingDone";
ImagePullingDone.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * ======================== RUNNING ======================
 *
 * @generated from message api.v1.capsule.InstanceStatusRunning
 */
class InstanceStatusRunning extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusRunning().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusRunning().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusRunning().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusRunning, a, b);
    }
}
exports.InstanceStatusRunning = InstanceStatusRunning;
InstanceStatusRunning.runtime = protobuf_1.proto3;
InstanceStatusRunning.typeName = "api.v1.capsule.InstanceStatusRunning";
InstanceStatusRunning.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: InstanceStatusRunningStages },
    { no: 4, name: "data", kind: "message", T: InstanceStatusRunningData },
]);
/**
 * @generated from message api.v1.capsule.InstanceStatusRunningData
 */
class InstanceStatusRunningData extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 restarts = 1;
         */
        this.restarts = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusRunningData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusRunningData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusRunningData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusRunningData, a, b);
    }
}
exports.InstanceStatusRunningData = InstanceStatusRunningData;
InstanceStatusRunningData.runtime = protobuf_1.proto3;
InstanceStatusRunningData.typeName = "api.v1.capsule.InstanceStatusRunningData";
InstanceStatusRunningData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "restarts", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message api.v1.capsule.InstanceStatusRunningStages
 */
class InstanceStatusRunningStages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceStatusRunningStages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceStatusRunningStages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceStatusRunningStages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceStatusRunningStages, a, b);
    }
}
exports.InstanceStatusRunningStages = InstanceStatusRunningStages;
InstanceStatusRunningStages.runtime = protobuf_1.proto3;
InstanceStatusRunningStages.typeName = "api.v1.capsule.InstanceStatusRunningStages";
InstanceStatusRunningStages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "crash_loop_backoff", kind: "message", T: CrashLoopBackoff },
    { no: 2, name: "ready", kind: "message", T: Ready },
    { no: 3, name: "running", kind: "message", T: Running },
]);
/**
 * @generated from message api.v1.capsule.CrashLoopBackoff
 */
class CrashLoopBackoff extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CrashLoopBackoff().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CrashLoopBackoff().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CrashLoopBackoff().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CrashLoopBackoff, a, b);
    }
}
exports.CrashLoopBackoff = CrashLoopBackoff;
CrashLoopBackoff.runtime = protobuf_1.proto3;
CrashLoopBackoff.typeName = "api.v1.capsule.CrashLoopBackoff";
CrashLoopBackoff.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "data", kind: "message", T: CrashLoopBackoffData },
]);
/**
 * @generated from message api.v1.capsule.CrashLoopBackoffData
 */
class CrashLoopBackoffData extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CrashLoopBackoffData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CrashLoopBackoffData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CrashLoopBackoffData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CrashLoopBackoffData, a, b);
    }
}
exports.CrashLoopBackoffData = CrashLoopBackoffData;
CrashLoopBackoffData.runtime = protobuf_1.proto3;
CrashLoopBackoffData.typeName = "api.v1.capsule.CrashLoopBackoffData";
CrashLoopBackoffData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "termination", kind: "message", T: ContainerStateTerminated },
]);
/**
 * @generated from message api.v1.capsule.Running
 */
class Running extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Running().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Running().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Running().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Running, a, b);
    }
}
exports.Running = Running;
Running.runtime = protobuf_1.proto3;
Running.typeName = "api.v1.capsule.Running";
Running.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * @generated from message api.v1.capsule.Ready
 */
class Ready extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Ready().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Ready().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Ready().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Ready, a, b);
    }
}
exports.Ready = Ready;
Ready.runtime = protobuf_1.proto3;
Ready.typeName = "api.v1.capsule.Ready";
Ready.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
    { no: 3, name: "stages", kind: "message", T: ReadyStages },
]);
/**
 * @generated from message api.v1.capsule.ReadyStages
 */
class ReadyStages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReadyStages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReadyStages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReadyStages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ReadyStages, a, b);
    }
}
exports.ReadyStages = ReadyStages;
ReadyStages.runtime = protobuf_1.proto3;
ReadyStages.typeName = "api.v1.capsule.ReadyStages";
ReadyStages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "not_ready", kind: "message", T: NotReady },
    { no: 2, name: "ready", kind: "message", T: InstanceReady },
]);
/**
 * @generated from message api.v1.capsule.NotReady
 */
class NotReady extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NotReady().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NotReady().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NotReady().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(NotReady, a, b);
    }
}
exports.NotReady = NotReady;
NotReady.runtime = protobuf_1.proto3;
NotReady.typeName = "api.v1.capsule.NotReady";
NotReady.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * @generated from message api.v1.capsule.InstanceReady
 */
class InstanceReady extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceReady().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceReady().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceReady().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceReady, a, b);
    }
}
exports.InstanceReady = InstanceReady;
InstanceReady.runtime = protobuf_1.proto3;
InstanceReady.typeName = "api.v1.capsule.InstanceReady";
InstanceReady.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamps", kind: "message", T: StatusTimestamps },
]);
/**
 * @generated from message api.v1.capsule.ContainerStateTerminated
 */
class ContainerStateTerminated extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Exit status from the last termination of the container
         *
         * @generated from field: int32 exit_code = 1;
         */
        this.exitCode = 0;
        /**
         * Signal from the last termination of the container
         * +optional
         *
         * @generated from field: int32 signal = 2;
         */
        this.signal = 0;
        /**
         * (brief) reason from the last termination of the container
         * +optional
         *
         * @generated from field: string reason = 3;
         */
        this.reason = "";
        /**
         * Message regarding the last termination of the container
         * +optional
         *
         * @generated from field: string message = 4;
         */
        this.message = "";
        /**
         * Container's ID in the format 'type://container_id'
         * +optional
         *
         * @generated from field: string container_id = 7;
         */
        this.containerId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContainerStateTerminated().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContainerStateTerminated().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContainerStateTerminated().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContainerStateTerminated, a, b);
    }
}
exports.ContainerStateTerminated = ContainerStateTerminated;
ContainerStateTerminated.runtime = protobuf_1.proto3;
ContainerStateTerminated.typeName = "api.v1.capsule.ContainerStateTerminated";
ContainerStateTerminated.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "signal", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "started_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "finished_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "container_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.StatusTimestamps
 */
class StatusTimestamps extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StatusTimestamps().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StatusTimestamps().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StatusTimestamps().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StatusTimestamps, a, b);
    }
}
exports.StatusTimestamps = StatusTimestamps;
StatusTimestamps.runtime = protobuf_1.proto3;
StatusTimestamps.typeName = "api.v1.capsule.StatusTimestamps";
StatusTimestamps.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "entered", kind: "message", T: protobuf_1.Timestamp },
    { no: 2, name: "updated", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "exited", kind: "message", T: protobuf_1.Timestamp },
]);


/***/ }),

/***/ 4872:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/job.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JobCommand = exports.JobURL = exports.CronJob = exports.JobExecution = exports.JobState = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Different states a job execution can be in
 *
 * @generated from enum api.v1.capsule.JobState
 */
var JobState;
(function (JobState) {
    /**
     * Default value.
     *
     * @generated from enum value: JOB_STATE_UNSPECIFIED = 0;
     */
    JobState[JobState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The job is running.
     *
     * @generated from enum value: JOB_STATE_ONGOING = 1;
     */
    JobState[JobState["ONGOING"] = 1] = "ONGOING";
    /**
     * The job completed successfully.
     *
     * @generated from enum value: JOB_STATE_COMPLETED = 2;
     */
    JobState[JobState["COMPLETED"] = 2] = "COMPLETED";
    /**
     * The job failed.
     *
     * @generated from enum value: JOB_STATE_FAILED = 3;
     */
    JobState[JobState["FAILED"] = 3] = "FAILED";
    /**
     * The job was terminated.
     *
     * @generated from enum value: JOB_STATE_TERMINATED = 4;
     */
    JobState[JobState["TERMINATED"] = 4] = "TERMINATED";
})(JobState || (exports.JobState = JobState = {}));
// Retrieve enum metadata with: proto3.getEnumType(JobState)
protobuf_1.proto3.util.setEnumType(JobState, "api.v1.capsule.JobState", [
    { no: 0, name: "JOB_STATE_UNSPECIFIED" },
    { no: 1, name: "JOB_STATE_ONGOING" },
    { no: 2, name: "JOB_STATE_COMPLETED" },
    { no: 3, name: "JOB_STATE_FAILED" },
    { no: 4, name: "JOB_STATE_TERMINATED" },
]);
/**
 * An execution of a cron job.
 *
 * @generated from message api.v1.capsule.JobExecution
 */
class JobExecution extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the job.
         *
         * @generated from field: string job_name = 1;
         */
        this.jobName = "";
        /**
         * The state of the job.
         *
         * @generated from field: api.v1.capsule.JobState state = 4;
         */
        this.state = JobState.UNSPECIFIED;
        /**
         * Number of retries.
         *
         * @generated from field: int32 retries = 5;
         */
        this.retries = 0;
        /**
         * ID of the rollout.
         *
         * @generated from field: uint64 rollout_id = 6;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * ID of the capsule.
         *
         * @generated from field: string capsule_id = 7;
         */
        this.capsuleId = "";
        /**
         * ID of the project.
         *
         * @generated from field: string project_id = 8;
         */
        this.projectId = "";
        /**
         * ID of the execution.
         *
         * @generated from field: string execution_id = 9;
         */
        this.executionId = "";
        /**
         * ID of the environment.
         *
         * @generated from field: string environment_id = 10;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new JobExecution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new JobExecution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new JobExecution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(JobExecution, a, b);
    }
}
exports.JobExecution = JobExecution;
JobExecution.runtime = protobuf_1.proto3;
JobExecution.typeName = "api.v1.capsule.JobExecution";
JobExecution.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "finished_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(JobState) },
    { no: 5, name: "retries", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Specification for a cron job.
 *
 * @generated from message api.v1.capsule.CronJob
 */
class CronJob extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the job.
         *
         * @generated from field: string job_name = 1;
         */
        this.jobName = "";
        /**
         * Cron schedule.
         *
         * @generated from field: string schedule = 2;
         */
        this.schedule = "";
        /**
         * Maximum number of retries.
         *
         * @generated from field: int32 max_retries = 3;
         */
        this.maxRetries = 0;
        /**
         * The type of the job
         *
         * @generated from oneof api.v1.capsule.CronJob.job_type
         */
        this.jobType = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CronJob().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CronJob().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CronJob().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CronJob, a, b);
    }
}
exports.CronJob = CronJob;
CronJob.runtime = protobuf_1.proto3;
CronJob.typeName = "api.v1.capsule.CronJob";
CronJob.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schedule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "max_retries", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "timeout", kind: "message", T: protobuf_1.Duration },
    { no: 5, name: "url", kind: "message", T: JobURL, oneof: "job_type" },
    { no: 6, name: "command", kind: "message", T: JobCommand, oneof: "job_type" },
]);
/**
 * Run a job by making a HTTP request to a URL.
 *
 * @generated from message api.v1.capsule.JobURL
 */
class JobURL extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Port to make the request to.
         *
         * @generated from field: uint64 port = 1;
         */
        this.port = protobuf_1.protoInt64.zero;
        /**
         * Path to make the request to.
         *
         * @generated from field: string path = 2;
         */
        this.path = "";
        /**
         * Query parameters to add to the request.
         *
         * @generated from field: map<string, string> query_parameters = 3;
         */
        this.queryParameters = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new JobURL().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new JobURL().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new JobURL().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(JobURL, a, b);
    }
}
exports.JobURL = JobURL;
JobURL.runtime = protobuf_1.proto3;
JobURL.typeName = "api.v1.capsule.JobURL";
JobURL.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query_parameters", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * Run a job by running a command in an instance of a capsule
 *
 * @generated from message api.v1.capsule.JobCommand
 */
class JobCommand extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Command to run.
         *
         * @generated from field: string command = 1;
         */
        this.command = "";
        /**
         * Arguments to pass to the command.
         *
         * @generated from field: repeated string args = 2;
         */
        this.args = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new JobCommand().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new JobCommand().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new JobCommand().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(JobCommand, a, b);
    }
}
exports.JobCommand = JobCommand;
JobCommand.runtime = protobuf_1.proto3;
JobCommand.typeName = "api.v1.capsule.JobCommand";
JobCommand.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);


/***/ }),

/***/ 743:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/log.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogMessage = exports.Log = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Log of an instance
 *
 * @generated from message api.v1.capsule.Log
 */
class Log extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Instance ID of the log
         *
         * @generated from field: string instance_id = 3;
         */
        this.instanceId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Log().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Log().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Log().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Log, a, b);
    }
}
exports.Log = Log;
Log.runtime = protobuf_1.proto3;
Log.typeName = "api.v1.capsule.Log";
Log.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: protobuf_1.Timestamp },
    { no: 2, name: "message", kind: "message", T: LogMessage },
    { no: 3, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The actual log message
 *
 * @generated from message api.v1.capsule.LogMessage
 */
class LogMessage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.LogMessage.message
         */
        this.message = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogMessage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogMessage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogMessage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogMessage, a, b);
    }
}
exports.LogMessage = LogMessage;
LogMessage.runtime = protobuf_1.proto3;
LogMessage.typeName = "api.v1.capsule.LogMessage";
LogMessage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "message" },
    { no: 2, name: "stderr", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "message" },
]);


/***/ }),

/***/ 886:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/metrics.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InstanceMetrics = exports.ContainerMetrics = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Metrics for a container.
 *
 * @generated from message api.v1.capsule.ContainerMetrics
 */
class ContainerMetrics extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Memory usage in bytes.
         *
         * @generated from field: uint64 memory_bytes = 2;
         */
        this.memoryBytes = protobuf_1.protoInt64.zero;
        /**
         * CPU usage in milliseconds.
         *
         * @generated from field: uint64 cpu_ms = 3;
         */
        this.cpuMs = protobuf_1.protoInt64.zero;
        /**
         * Storage usage in bytes.
         *
         * @generated from field: uint64 storage_bytes = 4;
         */
        this.storageBytes = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContainerMetrics().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContainerMetrics().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContainerMetrics().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContainerMetrics, a, b);
    }
}
exports.ContainerMetrics = ContainerMetrics;
ContainerMetrics.runtime = protobuf_1.proto3;
ContainerMetrics.typeName = "api.v1.capsule.ContainerMetrics";
ContainerMetrics.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: protobuf_1.Timestamp },
    { no: 2, name: "memory_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "cpu_ms", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "storage_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Metrics for an instance
 *
 * @generated from message api.v1.capsule.InstanceMetrics
 */
class InstanceMetrics extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule of the instance.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Instance ID.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceMetrics().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceMetrics().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceMetrics().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceMetrics, a, b);
    }
}
exports.InstanceMetrics = InstanceMetrics;
InstanceMetrics.runtime = protobuf_1.proto3;
InstanceMetrics.typeName = "api.v1.capsule.InstanceMetrics";
InstanceMetrics.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "main_container", kind: "message", T: ContainerMetrics },
    { no: 4, name: "proxy_container", kind: "message", T: ContainerMetrics },
]);


/***/ }),

/***/ 4460:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/rollout/status.proto (package api.v1.capsule.rollout, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InstancesStep = exports.RunningStep = exports.RunningStage = exports.CreateResourceStep = exports.ResourceCreationStep = exports.ResourceCreationStage = exports.ConfigureEnvStep = exports.ConfigureFileStep = exports.ConfigureCapsuleStep = exports.ConfigureStep = exports.ConfigureStage = exports.Stages = exports.StepInfo = exports.GenericStep = exports.StageInfo = exports.Status = exports.ConfigureResult = exports.Result = exports.State = exports.StepState = exports.StageState = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Different states a stage can be in.
 *
 * @generated from enum api.v1.capsule.rollout.StageState
 */
var StageState;
(function (StageState) {
    /**
     * The state is unspecified.
     *
     * @generated from enum value: STAGE_STATE_UNSPECIFIED = 0;
     */
    StageState[StageState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The stage is deploying.
     *
     * @generated from enum value: STAGE_STATE_DEPLOYING = 1;
     */
    StageState[StageState["DEPLOYING"] = 1] = "DEPLOYING";
    /**
     * The stage is running.
     *
     * @generated from enum value: STAGE_STATE_RUNNING = 2;
     */
    StageState[StageState["RUNNING"] = 2] = "RUNNING";
    /**
     * The stage is stopped.
     *
     * @generated from enum value: STAGE_STATE_STOPPED = 3;
     */
    StageState[StageState["STOPPED"] = 3] = "STOPPED";
})(StageState || (exports.StageState = StageState = {}));
// Retrieve enum metadata with: proto3.getEnumType(StageState)
protobuf_1.proto3.util.setEnumType(StageState, "api.v1.capsule.rollout.StageState", [
    { no: 0, name: "STAGE_STATE_UNSPECIFIED" },
    { no: 1, name: "STAGE_STATE_DEPLOYING" },
    { no: 2, name: "STAGE_STATE_RUNNING" },
    { no: 3, name: "STAGE_STATE_STOPPED" },
]);
/**
 * Different states a step can be in.
 *
 * @generated from enum api.v1.capsule.rollout.StepState
 */
var StepState;
(function (StepState) {
    /**
     * The state is unspecified.
     *
     * @generated from enum value: STEP_STATE_UNSPECIFIED = 0;
     */
    StepState[StepState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The step is ongoing.
     *
     * @generated from enum value: STEP_STATE_ONGOING = 1;
     */
    StepState[StepState["ONGOING"] = 1] = "ONGOING";
    /**
     * The step failed.
     *
     * @generated from enum value: STEP_STATE_FAILED = 2;
     */
    StepState[StepState["FAILED"] = 2] = "FAILED";
    /**
     * The step is done.
     *
     * @generated from enum value: STEP_STATE_DONE = 3;
     */
    StepState[StepState["DONE"] = 3] = "DONE";
})(StepState || (exports.StepState = StepState = {}));
// Retrieve enum metadata with: proto3.getEnumType(StepState)
protobuf_1.proto3.util.setEnumType(StepState, "api.v1.capsule.rollout.StepState", [
    { no: 0, name: "STEP_STATE_UNSPECIFIED" },
    { no: 1, name: "STEP_STATE_ONGOING" },
    { no: 2, name: "STEP_STATE_FAILED" },
    { no: 3, name: "STEP_STATE_DONE" },
]);
/**
 * Different states a rollout can be in.
 *
 * @generated from enum api.v1.capsule.rollout.State
 */
var State;
(function (State) {
    /**
     * The state is unspecified.
     *
     * @generated from enum value: STATE_UNSPECIFIED = 0;
     */
    State[State["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The rollout is preparing.
     *
     * @generated from enum value: STATE_PREPARING = 1;
     */
    State[State["PREPARING"] = 1] = "PREPARING";
    /**
     * The rollout is configuring.
     *
     * @generated from enum value: STATE_CONFIGURE = 2;
     */
    State[State["CONFIGURE"] = 2] = "CONFIGURE";
    /**
     * The rollout is creating resources.
     *
     * @generated from enum value: STATE_RESOURCE_CREATION = 3;
     */
    State[State["RESOURCE_CREATION"] = 3] = "RESOURCE_CREATION";
    /**
     * The rollout is running.
     *
     * @generated from enum value: STATE_RUNNING = 4;
     */
    State[State["RUNNING"] = 4] = "RUNNING";
    /**
     * The rollout is stopped.
     *
     * @generated from enum value: STATE_STOPPED = 5;
     */
    State[State["STOPPED"] = 5] = "STOPPED";
})(State || (exports.State = State = {}));
// Retrieve enum metadata with: proto3.getEnumType(State)
protobuf_1.proto3.util.setEnumType(State, "api.v1.capsule.rollout.State", [
    { no: 0, name: "STATE_UNSPECIFIED" },
    { no: 1, name: "STATE_PREPARING" },
    { no: 2, name: "STATE_CONFIGURE" },
    { no: 3, name: "STATE_RESOURCE_CREATION" },
    { no: 4, name: "STATE_RUNNING" },
    { no: 5, name: "STATE_STOPPED" },
]);
/**
 * Different result of a rollout.
 *
 * @generated from enum api.v1.capsule.rollout.Result
 */
var Result;
(function (Result) {
    /**
     * The result is unspecified.
     *
     * @generated from enum value: RESULT_UNSPECIFIED = 0;
     */
    Result[Result["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The rollout has been replaced.
     *
     * @generated from enum value: RESULT_REPLACED = 1;
     */
    Result[Result["REPLACED"] = 1] = "REPLACED";
    /**
     * The rollout has failed.
     *
     * @generated from enum value: RESULT_FAILED = 2;
     */
    Result[Result["FAILED"] = 2] = "FAILED";
    /**
     * The rollout has been aborted.
     *
     * @generated from enum value: RESULT_ABORTED = 3;
     */
    Result[Result["ABORTED"] = 3] = "ABORTED";
    /**
     * The rollout has been rolled back.
     *
     * @generated from enum value: RESULT_ROLLBACK = 4;
     */
    Result[Result["ROLLBACK"] = 4] = "ROLLBACK";
})(Result || (exports.Result = Result = {}));
// Retrieve enum metadata with: proto3.getEnumType(Result)
protobuf_1.proto3.util.setEnumType(Result, "api.v1.capsule.rollout.Result", [
    { no: 0, name: "RESULT_UNSPECIFIED" },
    { no: 1, name: "RESULT_REPLACED" },
    { no: 2, name: "RESULT_FAILED" },
    { no: 3, name: "RESULT_ABORTED" },
    { no: 4, name: "RESULT_ROLLBACK" },
]);
/**
 * The result of a configuration step.
 *
 * @generated from enum api.v1.capsule.rollout.ConfigureResult
 */
var ConfigureResult;
(function (ConfigureResult) {
    /**
     * The result is unspecified.
     *
     * @generated from enum value: CONFIGURE_RESULT_UNSPECIFIED = 0;
     */
    ConfigureResult[ConfigureResult["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The resource is to be created.
     *
     * @generated from enum value: CONFIGURE_RESULT_CREATED = 1;
     */
    ConfigureResult[ConfigureResult["CREATED"] = 1] = "CREATED";
    /**
     * The resource is to be updated.
     *
     * @generated from enum value: CONFIGURE_RESULT_UPDATED = 2;
     */
    ConfigureResult[ConfigureResult["UPDATED"] = 2] = "UPDATED";
    /**
     * The resource has no change.
     *
     * @generated from enum value: CONFIGURE_RESULT_NO_CHANGE = 3;
     */
    ConfigureResult[ConfigureResult["NO_CHANGE"] = 3] = "NO_CHANGE";
    /**
     * The resource is to be deleted.
     *
     * @generated from enum value: CONFIGURE_RESULT_DELETED = 4;
     */
    ConfigureResult[ConfigureResult["DELETED"] = 4] = "DELETED";
})(ConfigureResult || (exports.ConfigureResult = ConfigureResult = {}));
// Retrieve enum metadata with: proto3.getEnumType(ConfigureResult)
protobuf_1.proto3.util.setEnumType(ConfigureResult, "api.v1.capsule.rollout.ConfigureResult", [
    { no: 0, name: "CONFIGURE_RESULT_UNSPECIFIED" },
    { no: 1, name: "CONFIGURE_RESULT_CREATED" },
    { no: 2, name: "CONFIGURE_RESULT_UPDATED" },
    { no: 3, name: "CONFIGURE_RESULT_NO_CHANGE" },
    { no: 4, name: "CONFIGURE_RESULT_DELETED" },
]);
/**
 * Status is a representation of the current state of a rollout.
 *
 * @generated from message api.v1.capsule.rollout.Status
 */
class Status extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The ID of the rollout.
         *
         * @generated from field: uint64 rollout_id = 1;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * The current state of the rollout.
         *
         * @generated from field: api.v1.capsule.rollout.State state = 2;
         */
        this.state = State.UNSPECIFIED;
        /**
         * The result of the rollout.
         *
         * @generated from field: api.v1.capsule.rollout.Result result = 5;
         */
        this.result = Result.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Status().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Status().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Status().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Status, a, b);
    }
}
exports.Status = Status;
Status.runtime = protobuf_1.proto3;
Status.typeName = "api.v1.capsule.rollout.Status";
Status.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(State) },
    { no: 3, name: "stages", kind: "message", T: Stages },
    { no: 4, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "result", kind: "enum", T: protobuf_1.proto3.getEnumType(Result) },
]);
/**
 * Information about a stage of a rollout.
 *
 * @generated from message api.v1.capsule.rollout.StageInfo
 */
class StageInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the stage.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The current state of the stage.
         *
         * @generated from field: api.v1.capsule.rollout.StageState state = 3;
         */
        this.state = StageState.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StageInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StageInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StageInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StageInfo, a, b);
    }
}
exports.StageInfo = StageInfo;
StageInfo.runtime = protobuf_1.proto3;
StageInfo.typeName = "api.v1.capsule.rollout.StageInfo";
StageInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(StageState) },
    { no: 4, name: "started_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * A generic step of a stage.
 *
 * @generated from message api.v1.capsule.rollout.GenericStep
 */
class GenericStep extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenericStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenericStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenericStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GenericStep, a, b);
    }
}
exports.GenericStep = GenericStep;
GenericStep.runtime = protobuf_1.proto3;
GenericStep.typeName = "api.v1.capsule.rollout.GenericStep";
GenericStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
]);
/**
 * Information about a step of a stage.
 *
 * @generated from message api.v1.capsule.rollout.StepInfo
 */
class StepInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the step.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Messages in the step.
         *
         * @generated from field: string message = 2;
         */
        this.message = "";
        /**
         * The current state of the step.
         *
         * @generated from field: api.v1.capsule.rollout.StepState state = 4;
         */
        this.state = StepState.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StepInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StepInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StepInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StepInfo, a, b);
    }
}
exports.StepInfo = StepInfo;
StepInfo.runtime = protobuf_1.proto3;
StepInfo.typeName = "api.v1.capsule.rollout.StepInfo";
StepInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(StepState) },
    { no: 5, name: "started_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * The three stages of a rollout
 *
 * @generated from message api.v1.capsule.rollout.Stages
 */
class Stages extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Stages().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Stages().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Stages().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Stages, a, b);
    }
}
exports.Stages = Stages;
Stages.runtime = protobuf_1.proto3;
Stages.typeName = "api.v1.capsule.rollout.Stages";
Stages.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "configure", kind: "message", T: ConfigureStage },
    { no: 2, name: "resource_creation", kind: "message", T: ResourceCreationStage },
    { no: 3, name: "running", kind: "message", T: RunningStage },
]);
/**
 * The configure stage.
 *
 * @generated from message api.v1.capsule.rollout.ConfigureStage
 */
class ConfigureStage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The steps of the stage.
         *
         * @generated from field: repeated api.v1.capsule.rollout.ConfigureStep steps = 2;
         */
        this.steps = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigureStage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigureStage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigureStage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigureStage, a, b);
    }
}
exports.ConfigureStage = ConfigureStage;
ConfigureStage.runtime = protobuf_1.proto3;
ConfigureStage.typeName = "api.v1.capsule.rollout.ConfigureStage";
ConfigureStage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StageInfo },
    { no: 2, name: "steps", kind: "message", T: ConfigureStep, repeated: true },
]);
/**
 * A step of the configure stage.
 *
 * @generated from message api.v1.capsule.rollout.ConfigureStep
 */
class ConfigureStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.rollout.ConfigureStep.step
         */
        this.step = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigureStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigureStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigureStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigureStep, a, b);
    }
}
exports.ConfigureStep = ConfigureStep;
ConfigureStep.runtime = protobuf_1.proto3;
ConfigureStep.typeName = "api.v1.capsule.rollout.ConfigureStep";
ConfigureStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: GenericStep, oneof: "step" },
    { no: 2, name: "configure_capsule", kind: "message", T: ConfigureCapsuleStep, oneof: "step" },
    { no: 3, name: "configure_file", kind: "message", T: ConfigureFileStep, oneof: "step" },
    { no: 4, name: "configure_env", kind: "message", T: ConfigureEnvStep, oneof: "step" },
]);
/**
 * A step configuring a capsule.
 *
 * @generated from message api.v1.capsule.rollout.ConfigureCapsuleStep
 */
class ConfigureCapsuleStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The state of the step.
         *
         * @generated from field: api.v1.capsule.rollout.ConfigureResult state = 2;
         */
        this.state = ConfigureResult.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigureCapsuleStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigureCapsuleStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigureCapsuleStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigureCapsuleStep, a, b);
    }
}
exports.ConfigureCapsuleStep = ConfigureCapsuleStep;
ConfigureCapsuleStep.runtime = protobuf_1.proto3;
ConfigureCapsuleStep.typeName = "api.v1.capsule.rollout.ConfigureCapsuleStep";
ConfigureCapsuleStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(ConfigureResult) },
]);
/**
 * A step configuring a file.
 *
 * @generated from message api.v1.capsule.rollout.ConfigureFileStep
 */
class ConfigureFileStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The result of the file configuration.
         *
         * @generated from field: api.v1.capsule.rollout.ConfigureResult state = 2;
         */
        this.state = ConfigureResult.UNSPECIFIED;
        /**
         * The path of the file.
         *
         * @generated from field: string path = 3;
         */
        this.path = "";
        /**
         * Whether the file is a secret.
         *
         * @generated from field: bool is_secret = 4;
         */
        this.isSecret = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigureFileStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigureFileStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigureFileStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigureFileStep, a, b);
    }
}
exports.ConfigureFileStep = ConfigureFileStep;
ConfigureFileStep.runtime = protobuf_1.proto3;
ConfigureFileStep.typeName = "api.v1.capsule.rollout.ConfigureFileStep";
ConfigureFileStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(ConfigureResult) },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * A step configuring an environment.
 *
 * @generated from message api.v1.capsule.rollout.ConfigureEnvStep
 */
class ConfigureEnvStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The result of the environment configuration.
         *
         * @generated from field: api.v1.capsule.rollout.ConfigureResult state = 2;
         */
        this.state = ConfigureResult.UNSPECIFIED;
        /**
         * Whether the environment is a secret.
         *
         * @generated from field: bool is_secret = 3;
         */
        this.isSecret = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigureEnvStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigureEnvStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigureEnvStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigureEnvStep, a, b);
    }
}
exports.ConfigureEnvStep = ConfigureEnvStep;
ConfigureEnvStep.runtime = protobuf_1.proto3;
ConfigureEnvStep.typeName = "api.v1.capsule.rollout.ConfigureEnvStep";
ConfigureEnvStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(ConfigureResult) },
    { no: 3, name: "is_secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * The resource creation stage.
 *
 * @generated from message api.v1.capsule.rollout.ResourceCreationStage
 */
class ResourceCreationStage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The steps of the stage.
         *
         * @generated from field: repeated api.v1.capsule.rollout.ResourceCreationStep steps = 2;
         */
        this.steps = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResourceCreationStage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResourceCreationStage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResourceCreationStage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResourceCreationStage, a, b);
    }
}
exports.ResourceCreationStage = ResourceCreationStage;
ResourceCreationStage.runtime = protobuf_1.proto3;
ResourceCreationStage.typeName = "api.v1.capsule.rollout.ResourceCreationStage";
ResourceCreationStage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StageInfo },
    { no: 2, name: "steps", kind: "message", T: ResourceCreationStep, repeated: true },
]);
/**
 * A step of the resource creation stage.
 *
 * @generated from message api.v1.capsule.rollout.ResourceCreationStep
 */
class ResourceCreationStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.rollout.ResourceCreationStep.step
         */
        this.step = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResourceCreationStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResourceCreationStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResourceCreationStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResourceCreationStep, a, b);
    }
}
exports.ResourceCreationStep = ResourceCreationStep;
ResourceCreationStep.runtime = protobuf_1.proto3;
ResourceCreationStep.typeName = "api.v1.capsule.rollout.ResourceCreationStep";
ResourceCreationStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: GenericStep, oneof: "step" },
    { no: 2, name: "create_resource", kind: "message", T: CreateResourceStep, oneof: "step" },
]);
/**
 * A step creating a resource.
 *
 * @generated from message api.v1.capsule.rollout.CreateResourceStep
 */
class CreateResourceStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The kind of the resource.
         *
         * @generated from field: string kind = 2;
         */
        this.kind = "";
        /**
         * The name of the resource.
         *
         * @generated from field: string name = 3;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResourceStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResourceStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResourceStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResourceStep, a, b);
    }
}
exports.CreateResourceStep = CreateResourceStep;
CreateResourceStep.runtime = protobuf_1.proto3;
CreateResourceStep.typeName = "api.v1.capsule.rollout.CreateResourceStep";
CreateResourceStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The running stage.
 *
 * @generated from message api.v1.capsule.rollout.RunningStage
 */
class RunningStage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The steps of the stage.
         *
         * @generated from field: repeated api.v1.capsule.rollout.RunningStep steps = 2;
         */
        this.steps = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RunningStage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RunningStage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RunningStage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RunningStage, a, b);
    }
}
exports.RunningStage = RunningStage;
RunningStage.runtime = protobuf_1.proto3;
RunningStage.typeName = "api.v1.capsule.rollout.RunningStage";
RunningStage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StageInfo },
    { no: 2, name: "steps", kind: "message", T: RunningStep, repeated: true },
]);
/**
 * A step of the running stage.
 *
 * @generated from message api.v1.capsule.rollout.RunningStep
 */
class RunningStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.rollout.RunningStep.step
         */
        this.step = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RunningStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RunningStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RunningStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RunningStep, a, b);
    }
}
exports.RunningStep = RunningStep;
RunningStep.runtime = protobuf_1.proto3;
RunningStep.typeName = "api.v1.capsule.rollout.RunningStep";
RunningStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "generic", kind: "message", T: GenericStep, oneof: "step" },
    { no: 2, name: "instances", kind: "message", T: InstancesStep, oneof: "step" },
]);
/**
 * Information on the instances of the rollout.
 *
 * @generated from message api.v1.capsule.rollout.InstancesStep
 */
class InstancesStep extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of updated instances.
         *
         * @generated from field: uint32 num_updated = 2;
         */
        this.numUpdated = 0;
        /**
         * The number of ready instances.
         *
         * @generated from field: uint32 num_ready = 3;
         */
        this.numReady = 0;
        /**
         * The number of stuck instances.
         *
         * @generated from field: uint32 num_stuck = 4;
         */
        this.numStuck = 0;
        /**
         * The number of instances with the wrong version.
         *
         * @generated from field: uint32 num_wrong_version = 5;
         */
        this.numWrongVersion = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstancesStep().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstancesStep().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstancesStep().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstancesStep, a, b);
    }
}
exports.InstancesStep = InstancesStep;
InstancesStep.runtime = protobuf_1.proto3;
InstancesStep.typeName = "api.v1.capsule.rollout.InstancesStep";
InstancesStep.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: StepInfo },
    { no: 2, name: "num_updated", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "num_ready", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "num_stuck", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "num_wrong_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);


/***/ }),

/***/ 5638:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/rollout.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RolloutStatus = exports.ConfigFile = exports.RolloutConfig = exports.Rollout = exports.EventType = exports.RolloutState = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const status_pb_js_1 = __nccwpck_require__(4460);
const author_pb_js_1 = __nccwpck_require__(4810);
const change_pb_js_1 = __nccwpck_require__(7814);
const job_pb_js_1 = __nccwpck_require__(4872);
/**
 * Different states a rollout can be in.
 *
 * @generated from enum api.v1.capsule.RolloutState
 */
var RolloutState;
(function (RolloutState) {
    /**
     * Default value.
     *
     * @generated from enum value: ROLLOUT_STATE_UNSPECIFIED = 0;
     */
    RolloutState[RolloutState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Pending rollout.
     *
     * @generated from enum value: ROLLOUT_STATE_PENDING = 1;
     */
    RolloutState[RolloutState["PENDING"] = 1] = "PENDING";
    /**
     * Preparing rollout.
     *
     * @generated from enum value: ROLLOUT_STATE_PREPARING = 6;
     */
    RolloutState[RolloutState["PREPARING"] = 6] = "PREPARING";
    /**
     * Applying rollout.
     *
     * @generated from enum value: ROLLOUT_STATE_APPLYING = 2;
     */
    RolloutState[RolloutState["APPLYING"] = 2] = "APPLYING";
    /**
     * Creating resources.
     *
     * @generated from enum value: ROLLOUT_STATE_RESOURCE_CREATION = 8;
     */
    RolloutState[RolloutState["RESOURCE_CREATION"] = 8] = "RESOURCE_CREATION";
    /**
     * Rolling out instances.
     *
     * @generated from enum value: ROLLOUT_STATE_INSTANCE_ROLL_OUT = 7;
     */
    RolloutState[RolloutState["INSTANCE_ROLL_OUT"] = 7] = "INSTANCE_ROLL_OUT";
    /**
     * Rollout is done.
     *
     * @generated from enum value: ROLLOUT_STATE_DONE = 3;
     */
    RolloutState[RolloutState["DONE"] = 3] = "DONE";
    /**
     * Rollout is aborted.
     *
     * @generated from enum value: ROLLOUT_STATE_ABORTED = 4;
     */
    RolloutState[RolloutState["ABORTED"] = 4] = "ABORTED";
    /**
     * Rollout failed.
     *
     * @generated from enum value: ROLLOUT_STATE_FAILED = 5;
     */
    RolloutState[RolloutState["FAILED"] = 5] = "FAILED";
})(RolloutState || (exports.RolloutState = RolloutState = {}));
// Retrieve enum metadata with: proto3.getEnumType(RolloutState)
protobuf_1.proto3.util.setEnumType(RolloutState, "api.v1.capsule.RolloutState", [
    { no: 0, name: "ROLLOUT_STATE_UNSPECIFIED" },
    { no: 1, name: "ROLLOUT_STATE_PENDING" },
    { no: 6, name: "ROLLOUT_STATE_PREPARING" },
    { no: 2, name: "ROLLOUT_STATE_APPLYING" },
    { no: 8, name: "ROLLOUT_STATE_RESOURCE_CREATION" },
    { no: 7, name: "ROLLOUT_STATE_INSTANCE_ROLL_OUT" },
    { no: 3, name: "ROLLOUT_STATE_DONE" },
    { no: 4, name: "ROLLOUT_STATE_ABORTED" },
    { no: 5, name: "ROLLOUT_STATE_FAILED" },
]);
/**
 * @generated from enum api.v1.capsule.EventType
 */
var EventType;
(function (EventType) {
    /**
     * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
     */
    EventType[EventType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: EVENT_TYPE_ABORT = 1;
     */
    EventType[EventType["ABORT"] = 1] = "ABORT";
})(EventType || (exports.EventType = EventType = {}));
// Retrieve enum metadata with: proto3.getEnumType(EventType)
protobuf_1.proto3.util.setEnumType(EventType, "api.v1.capsule.EventType", [
    { no: 0, name: "EVENT_TYPE_UNSPECIFIED" },
    { no: 1, name: "EVENT_TYPE_ABORT" },
]);
/**
 * The rollout model.
 *
 * @generated from message api.v1.capsule.Rollout
 */
class Rollout extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Unique indentifier for the rollout.
         *
         * @generated from field: uint64 rollout_id = 1;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Rollout().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Rollout().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Rollout().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Rollout, a, b);
    }
}
exports.Rollout = Rollout;
Rollout.runtime = protobuf_1.proto3;
Rollout.typeName = "api.v1.capsule.Rollout";
Rollout.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "config", kind: "message", T: RolloutConfig },
    { no: 3, name: "status", kind: "message", T: RolloutStatus },
    { no: 4, name: "rollout_status", kind: "message", T: status_pb_js_1.Status },
]);
/**
 * @generated from message api.v1.capsule.RolloutConfig
 */
class RolloutConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.Change changes = 3;
         */
        this.changes = [];
        /**
         * @generated from field: uint32 replicas = 4;
         */
        this.replicas = 0;
        /**
         * @generated from field: string build_id = 5;
         */
        this.buildId = "";
        /**
         * @generated from field: bool auto_add_rig_service_accounts = 8;
         */
        this.autoAddRigServiceAccounts = false;
        /**
         * @generated from field: repeated api.v1.capsule.ConfigFile config_files = 9;
         */
        this.configFiles = [];
        /**
         * @generated from field: repeated api.v1.capsule.CronJob cron_jobs = 11;
         */
        this.cronJobs = [];
        /**
         * @generated from field: string environment_id = 12;
         */
        this.environmentId = "";
        /**
         * @generated from field: string message = 13;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RolloutConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RolloutConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RolloutConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RolloutConfig, a, b);
    }
}
exports.RolloutConfig = RolloutConfig;
RolloutConfig.runtime = protobuf_1.proto3;
RolloutConfig.typeName = "api.v1.capsule.RolloutConfig";
RolloutConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "changes", kind: "message", T: change_pb_js_1.Change, repeated: true },
    { no: 4, name: "replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "network", kind: "message", T: change_pb_js_1.Network },
    { no: 7, name: "container_settings", kind: "message", T: change_pb_js_1.ContainerSettings },
    { no: 8, name: "auto_add_rig_service_accounts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "config_files", kind: "message", T: ConfigFile, repeated: true },
    { no: 10, name: "horizontal_scale", kind: "message", T: change_pb_js_1.HorizontalScale },
    { no: 11, name: "cron_jobs", kind: "message", T: job_pb_js_1.CronJob, repeated: true },
    { no: 12, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.ConfigFile
 */
class ConfigFile extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string path = 1;
         */
        this.path = "";
        /**
         * @generated from field: bytes content = 2;
         */
        this.content = new Uint8Array(0);
        /**
         * @generated from field: bool is_secret = 5;
         */
        this.isSecret = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConfigFile().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConfigFile().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConfigFile().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ConfigFile, a, b);
    }
}
exports.ConfigFile = ConfigFile;
ConfigFile.runtime = protobuf_1.proto3;
ConfigFile.typeName = "api.v1.capsule.ConfigFile";
ConfigFile.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "updated_by", kind: "message", T: author_pb_js_1.Author },
    { no: 4, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "is_secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.capsule.RolloutStatus
 */
class RolloutStatus extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: api.v1.capsule.RolloutState state = 1;
         */
        this.state = RolloutState.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RolloutStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RolloutStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RolloutStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RolloutStatus, a, b);
    }
}
exports.RolloutStatus = RolloutStatus;
RolloutStatus.runtime = protobuf_1.proto3;
RolloutStatus.typeName = "api.v1.capsule.RolloutStatus";
RolloutStatus.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(RolloutState) },
    { no: 2, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
]);


/***/ }),

/***/ 6779:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/capsule/service.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(7830);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage capsules.
 *
 * @generated from service api.v1.capsule.Service
 */
exports.t = {
    typeName: "api.v1.capsule.Service",
    methods: {
        /**
         * Create a new capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a capsule by id.
         *
         * @generated from rpc api.v1.capsule.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Logs returns (and streams) the log output of a capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Logs
         */
        logs: {
            name: "Logs",
            I: service_pb_js_1.LogsRequest,
            O: service_pb_js_1.LogsResponse,
            kind: protobuf_1.MethodKind.ServerStreaming,
        },
        /**
         * Update a capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lists all capsules for current project.
         *
         * @generated from rpc api.v1.capsule.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Deploy changes to a capsule.
         * When deploying, a new rollout will be initiated. Only one rollout can be
         * running at a single point in time.
         * Use `Abort` to abort an already running rollout.
         *
         * @generated from rpc api.v1.capsule.Service.Deploy
         */
        deploy: {
            name: "Deploy",
            I: service_pb_js_1.DeployRequest,
            O: service_pb_js_1.DeployResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lists all instances for the capsule.
         *
         * @generated from rpc api.v1.capsule.Service.ListInstances
         */
        listInstances: {
            name: "ListInstances",
            I: service_pb_js_1.ListInstancesRequest,
            O: service_pb_js_1.ListInstancesResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Restart a single capsule instance.
         *
         * @generated from rpc api.v1.capsule.Service.RestartInstance
         */
        restartInstance: {
            name: "RestartInstance",
            I: service_pb_js_1.RestartInstanceRequest,
            O: service_pb_js_1.RestartInstanceResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a single rollout by ID.
         *
         * @generated from rpc api.v1.capsule.Service.GetRollout
         */
        getRollout: {
            name: "GetRollout",
            I: service_pb_js_1.GetRolloutRequest,
            O: service_pb_js_1.GetRolloutResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lists all rollouts for the capsule.
         *
         * @generated from rpc api.v1.capsule.Service.ListRollouts
         */
        listRollouts: {
            name: "ListRollouts",
            I: service_pb_js_1.ListRolloutsRequest,
            O: service_pb_js_1.ListRolloutsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Abort the rollout.
         *
         * @generated from rpc api.v1.capsule.Service.AbortRollout
         */
        abortRollout: {
            name: "AbortRollout",
            I: service_pb_js_1.AbortRolloutRequest,
            O: service_pb_js_1.AbortRolloutResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List capsule events.
         *
         * @generated from rpc api.v1.capsule.Service.ListEvents
         */
        listEvents: {
            name: "ListEvents",
            I: service_pb_js_1.ListEventsRequest,
            O: service_pb_js_1.ListEventsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get metrics for a capsule
         *
         * @generated from rpc api.v1.capsule.Service.CapsuleMetrics
         */
        capsuleMetrics: {
            name: "CapsuleMetrics",
            I: service_pb_js_1.CapsuleMetricsRequest,
            O: service_pb_js_1.CapsuleMetricsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * GetInstanceStatus returns the current status for the given instance.
         *
         * @generated from rpc api.v1.capsule.Service.GetInstanceStatus
         */
        getInstanceStatus: {
            name: "GetInstanceStatus",
            I: service_pb_js_1.GetInstanceStatusRequest,
            O: service_pb_js_1.GetInstanceStatusResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * ListInstanceStatuses lists the status of all instances.
         *
         * @generated from rpc api.v1.capsule.Service.ListInstanceStatuses
         */
        listInstanceStatuses: {
            name: "ListInstanceStatuses",
            I: service_pb_js_1.ListInstanceStatusesRequest,
            O: service_pb_js_1.ListInstanceStatusesResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Execute executes a command in a given in instance,
         * and returns the output along with an exit code.
         *
         * @generated from rpc api.v1.capsule.Service.Execute
         */
        execute: {
            name: "Execute",
            I: service_pb_js_1.ExecuteRequest,
            O: service_pb_js_1.ExecuteResponse,
            kind: protobuf_1.MethodKind.BiDiStreaming,
        },
        /**
         * @generated from rpc api.v1.capsule.Service.GetCustomInstanceMetrics
         */
        getCustomInstanceMetrics: {
            name: "GetCustomInstanceMetrics",
            I: service_pb_js_1.GetCustomInstanceMetricsRequest,
            O: service_pb_js_1.GetCustomInstanceMetricsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get list of job executions performed by the Capsule.
         *
         * @generated from rpc api.v1.capsule.Service.GetJobExecutions
         */
        getJobExecutions: {
            name: "GetJobExecutions",
            I: service_pb_js_1.GetJobExecutionsRequest,
            O: service_pb_js_1.GetJobExecutionsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 7830:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/capsule/service.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetJobExecutionsResponse = exports.GetJobExecutionsRequest = exports.Metric = exports.GetCustomInstanceMetricsResponse = exports.GetCustomInstanceMetricsRequest = exports.CapsuleMetricsResponse = exports.CapsuleMetricsRequest = exports.ListEventsResponse = exports.ListEventsRequest = exports.AbortRolloutResponse = exports.AbortRolloutRequest = exports.GetRolloutResponse = exports.GetRolloutRequest = exports.ListRolloutsResponse = exports.ListRolloutsRequest = exports.RestartInstanceResponse = exports.RestartInstanceRequest = exports.ListInstanceStatusesResponse = exports.ListInstanceStatusesRequest = exports.GetInstanceStatusResponse = exports.GetInstanceStatusRequest = exports.ListInstancesResponse = exports.ListInstancesRequest = exports.DeployResponse = exports.DeployRequest = exports.ListResponse = exports.ListRequest = exports.UpdateResponse = exports.UpdateRequest = exports.LogsResponse = exports.LogsRequest = exports.DeleteResponse = exports.DeleteRequest = exports.GetResponse = exports.GetRequest = exports.CreateResponse = exports.CreateRequest = exports.ExecuteResponse = exports.ExecuteRequest_Resize = exports.ExecuteRequest_Start = exports.ExecuteRequest = exports.StreamData = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const capsule_pb_js_1 = __nccwpck_require__(7203);
const log_pb_js_1 = __nccwpck_require__(743);
const common_pb_js_1 = __nccwpck_require__(1101);
const change_pb_js_1 = __nccwpck_require__(7814);
const rollout_pb_js_1 = __nccwpck_require__(5638);
const instance_pb_js_1 = __nccwpck_require__(1717);
const status_pb_js_1 = __nccwpck_require__(8344);
const event_pb_js_1 = __nccwpck_require__(1607);
const metrics_pb_js_1 = __nccwpck_require__(886);
const job_pb_js_1 = __nccwpck_require__(4872);
/**
 * StreamData for Execute RPC.
 *
 * @generated from message api.v1.capsule.StreamData
 */
class StreamData extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stream data.
         *
         * @generated from field: bytes data = 1;
         */
        this.data = new Uint8Array(0);
        /**
         * If the stream is closed.
         *
         * @generated from field: bool closed = 2;
         */
        this.closed = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StreamData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StreamData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StreamData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StreamData, a, b);
    }
}
exports.StreamData = StreamData;
StreamData.runtime = protobuf_1.proto3;
StreamData.typeName = "api.v1.capsule.StreamData";
StreamData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Execute request. This can either be a request to start a request, a terminal resize msg or a stream data msg.
 *
 * @generated from message api.v1.capsule.ExecuteRequest
 */
class ExecuteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.ExecuteRequest.request
         */
        this.request = { case: undefined };
        /**
         * The project ID.
         *
         * @generated from field: string project_id = 4;
         */
        this.projectId = "";
        /**
         * The environment ID.
         *
         * @generated from field: string environment_id = 5;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExecuteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteRequest, a, b);
    }
}
exports.ExecuteRequest = ExecuteRequest;
ExecuteRequest.runtime = protobuf_1.proto3;
ExecuteRequest.typeName = "api.v1.capsule.ExecuteRequest";
ExecuteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: ExecuteRequest_Start, oneof: "request" },
    { no: 2, name: "stdin", kind: "message", T: StreamData, oneof: "request" },
    { no: 3, name: "resize", kind: "message", T: ExecuteRequest_Resize, oneof: "request" },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Exec start request
 *
 * @generated from message api.v1.capsule.ExecuteRequest.Start
 */
class ExecuteRequest_Start extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to execute in.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The instance to execute in.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        /**
         * The command to execute.
         *
         * @generated from field: string command = 3;
         */
        this.command = "";
        /**
         * The arguments to the command.
         *
         * @generated from field: repeated string arguments = 4;
         */
        this.arguments = [];
        /**
         * If the command is interactive.
         *
         * @generated from field: bool interactive = 6;
         */
        this.interactive = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExecuteRequest_Start().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteRequest_Start().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteRequest_Start().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteRequest_Start, a, b);
    }
}
exports.ExecuteRequest_Start = ExecuteRequest_Start;
ExecuteRequest_Start.runtime = protobuf_1.proto3;
ExecuteRequest_Start.typeName = "api.v1.capsule.ExecuteRequest.Start";
ExecuteRequest_Start.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "arguments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tty", kind: "message", T: ExecuteRequest_Resize },
    { no: 6, name: "interactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Terminal resize request.
 *
 * @generated from message api.v1.capsule.ExecuteRequest.Resize
 */
class ExecuteRequest_Resize extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The new terminal height.
         *
         * @generated from field: uint32 height = 1;
         */
        this.height = 0;
        /**
         * The new terminal width.
         *
         * @generated from field: uint32 width = 2;
         */
        this.width = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExecuteRequest_Resize().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteRequest_Resize().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteRequest_Resize().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteRequest_Resize, a, b);
    }
}
exports.ExecuteRequest_Resize = ExecuteRequest_Resize;
ExecuteRequest_Resize.runtime = protobuf_1.proto3;
ExecuteRequest_Resize.typeName = "api.v1.capsule.ExecuteRequest.Resize";
ExecuteRequest_Resize.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * Execute response.
 *
 * @generated from message api.v1.capsule.ExecuteResponse
 */
class ExecuteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.ExecuteResponse.response
         */
        this.response = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExecuteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteResponse, a, b);
    }
}
exports.ExecuteResponse = ExecuteResponse;
ExecuteResponse.runtime = protobuf_1.proto3;
ExecuteResponse.typeName = "api.v1.capsule.ExecuteResponse";
ExecuteResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "message", T: StreamData, oneof: "response" },
    { no: 2, name: "stderr", kind: "message", T: StreamData, oneof: "response" },
    { no: 3, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "response" },
]);
/**
 * Create capsule request.
 *
 * @generated from message api.v1.capsule.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The name of the capsule. This property must be unique for a project and cannot be changed
         * after creation.
         * Resources created in associating with the capsule will use this name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Deprecated field: The initial properties of the capsule.
         *
         * @generated from field: repeated api.v1.capsule.Update initializers = 2;
         */
        this.initializers = [];
        /**
         * The project to create the capsule in.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.capsule.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initializers", kind: "message", T: capsule_pb_js_1.Update, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Create capsule response.
 *
 * @generated from message api.v1.capsule.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the capsule. This is the same as the name.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.capsule.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Request to get a capsule.
 *
 * @generated from message api.v1.capsule.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule to get.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Project in which the capsule is.
         *
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.capsule.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response to get a capsule.
 *
 * @generated from message api.v1.capsule.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.capsule.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: capsule_pb_js_1.Capsule },
]);
/**
 * Request to delete a capsule.
 *
 * @generated from message api.v1.capsule.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to delete.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The project in which the capsule is to be deleted.
         *
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.capsule.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty delete response.
 *
 * @generated from message api.v1.capsule.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.capsule.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request to get instance logs from a capsule.
 *
 * @generated from message api.v1.capsule.LogsRequest
 */
class LogsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to read logs from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The instance in the capsule to read logs from.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        /**
         * If true, the request will stay open and stream new log messages.
         *
         * @generated from field: bool follow = 3;
         */
        this.follow = false;
        /**
         * The project in which the capsule is.
         *
         * @generated from field: string project_id = 5;
         */
        this.projectId = "";
        /**
         * Environment to get logs from.
         *
         * @generated from field: string environment_id = 6;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogsRequest, a, b);
    }
}
exports.LogsRequest = LogsRequest;
LogsRequest.runtime = protobuf_1.proto3;
LogsRequest.typeName = "api.v1.capsule.LogsRequest";
LogsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "follow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "since", kind: "message", T: protobuf_1.Duration },
    { no: 5, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a capsule.Logs RPC
 *
 * @generated from message api.v1.capsule.LogsResponse
 */
class LogsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogsResponse, a, b);
    }
}
exports.LogsResponse = LogsResponse;
LogsResponse.runtime = protobuf_1.proto3;
LogsResponse.typeName = "api.v1.capsule.LogsResponse";
LogsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: log_pb_js_1.Log },
]);
/**
 * Deprecated update - This is now a no-op
 *
 * @generated from message api.v1.capsule.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to update.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The updates to apply to the capsule.
         *
         * @generated from field: repeated api.v1.capsule.Update updates = 2;
         */
        this.updates = [];
        /**
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.capsule.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: capsule_pb_js_1.Update, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Deprecated: Empty update response.
 *
 * @generated from message api.v1.capsule.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.capsule.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * List capsule request.
 *
 * @generated from message api.v1.capsule.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Project in which to list capsules.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.capsule.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * List capsule response.
 *
 * @generated from message api.v1.capsule.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsules.
         *
         * @generated from field: repeated api.v1.capsule.Capsule capsules = 1;
         */
        this.capsules = [];
        /**
         * Total number of capsules in the project.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.capsule.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsules", kind: "message", T: capsule_pb_js_1.Capsule, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Deploy request. This will deploy a number of changes which results in a new rollout.
 *
 * @generated from message api.v1.capsule.DeployRequest
 */
class DeployRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule to deploy to.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Changes to include in the new rollout.
         *
         * @generated from field: repeated api.v1.capsule.Change changes = 2;
         */
        this.changes = [];
        /**
         * Force deploy, aborting an existing rollout if ongoing.
         *
         * @generated from field: bool force = 3;
         */
        this.force = false;
        /**
         * Project in which the capsule lives.
         *
         * @generated from field: string project_id = 4;
         */
        this.projectId = "";
        /**
         * Environment in which to deploy.
         *
         * @generated from field: string environment_id = 5;
         */
        this.environmentId = "";
        /**
         * Deploy message.
         *
         * @generated from field: string message = 6;
         */
        this.message = "";
        /**
         * if true, the deploy will not be executed, but the request will return the rollout config.
         *
         * @generated from field: bool dry_run = 7;
         */
        this.dryRun = false;
        /**
         * If not zero, this will constrain the rollout only to be created if the
         * currently running rollout matches this identifier. If this check fails, the
         * request will return an `Aborted` error.
         *
         * @generated from field: uint64 current_rollout_id = 8;
         */
        this.currentRolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeployRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeployRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeployRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeployRequest, a, b);
    }
}
exports.DeployRequest = DeployRequest;
DeployRequest.runtime = protobuf_1.proto3;
DeployRequest.typeName = "api.v1.capsule.DeployRequest";
DeployRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: change_pb_js_1.Change, repeated: true },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "current_rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Deploy response.
 *
 * @generated from message api.v1.capsule.DeployResponse
 */
class DeployResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the new rollout.
         *
         * @generated from field: uint64 rollout_id = 1;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * The YAML of the resources that will be deployed.
         *
         * @generated from field: map<string, string> resource_yaml = 2;
         */
        this.resourceYaml = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeployResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeployResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeployResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeployResponse, a, b);
    }
}
exports.DeployResponse = DeployResponse;
DeployResponse.runtime = protobuf_1.proto3;
DeployResponse.typeName = "api.v1.capsule.DeployResponse";
DeployResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "resource_yaml", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 3, name: "rollout_config", kind: "message", T: rollout_pb_js_1.RolloutConfig },
]);
/**
 * List instances request.
 *
 * @generated from message api.v1.capsule.ListInstancesRequest
 */
class ListInstancesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Capsule to list instances from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Project in which the capsule lives.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        /**
         * Environment to list instances from.
         *
         * @generated from field: string environment_id = 4;
         */
        this.environmentId = "";
        /**
         * if true, deleted instances will be included in the response.
         *
         * @generated from field: bool include_deleted = 5;
         */
        this.includeDeleted = false;
        /**
         * if true, existing instances will be excluded from the response.
         *
         * @generated from field: bool exclude_existing = 6;
         */
        this.excludeExisting = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListInstancesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListInstancesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListInstancesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListInstancesRequest, a, b);
    }
}
exports.ListInstancesRequest = ListInstancesRequest;
ListInstancesRequest.runtime = protobuf_1.proto3;
ListInstancesRequest.typeName = "api.v1.capsule.ListInstancesRequest";
ListInstancesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "exclude_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * List instances response.
 *
 * @generated from message api.v1.capsule.ListInstancesResponse
 */
class ListInstancesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The instances.
         *
         * @generated from field: repeated api.v1.capsule.Instance instances = 1;
         */
        this.instances = [];
        /**
         * Total number of instances in the capsule for the given environment.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListInstancesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListInstancesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListInstancesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListInstancesResponse, a, b);
    }
}
exports.ListInstancesResponse = ListInstancesResponse;
ListInstancesResponse.runtime = protobuf_1.proto3;
ListInstancesResponse.typeName = "api.v1.capsule.ListInstancesResponse";
ListInstancesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: instance_pb_js_1.Instance, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Get status of an instance.
 *
 * @generated from message api.v1.capsule.GetInstanceStatusRequest
 */
class GetInstanceStatusRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to get the instance status from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The instance to get.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        /**
         * The environment to get the instance from.
         *
         * @generated from field: string environment_id = 4;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetInstanceStatusRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetInstanceStatusRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetInstanceStatusRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetInstanceStatusRequest, a, b);
    }
}
exports.GetInstanceStatusRequest = GetInstanceStatusRequest;
GetInstanceStatusRequest.runtime = protobuf_1.proto3;
GetInstanceStatusRequest.typeName = "api.v1.capsule.GetInstanceStatusRequest";
GetInstanceStatusRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Get instance status response.
 *
 * @generated from message api.v1.capsule.GetInstanceStatusResponse
 */
class GetInstanceStatusResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetInstanceStatusResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetInstanceStatusResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetInstanceStatusResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetInstanceStatusResponse, a, b);
    }
}
exports.GetInstanceStatusResponse = GetInstanceStatusResponse;
GetInstanceStatusResponse.runtime = protobuf_1.proto3;
GetInstanceStatusResponse.typeName = "api.v1.capsule.GetInstanceStatusResponse";
GetInstanceStatusResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: status_pb_js_1.Status },
]);
/**
 * List multiple instance statuses
 *
 * @generated from message api.v1.capsule.ListInstanceStatusesRequest
 */
class ListInstanceStatusesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to get the instance statuses from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The project in which the capsule is.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        /**
         * The environment to get the instance statuses from.
         *
         * @generated from field: string environment_id = 4;
         */
        this.environmentId = "";
        /**
         * if true, deleted instances will be included in the response.
         *
         * @generated from field: bool include_deleted = 5;
         */
        this.includeDeleted = false;
        /**
         * if true, existing instances will be excluded from the response.
         *
         * @generated from field: bool exclude_existing = 6;
         */
        this.excludeExisting = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListInstanceStatusesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListInstanceStatusesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListInstanceStatusesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListInstanceStatusesRequest, a, b);
    }
}
exports.ListInstanceStatusesRequest = ListInstanceStatusesRequest;
ListInstanceStatusesRequest.runtime = protobuf_1.proto3;
ListInstanceStatusesRequest.typeName = "api.v1.capsule.ListInstanceStatusesRequest";
ListInstanceStatusesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "exclude_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Response for listing multiple instance statuses
 *
 * @generated from message api.v1.capsule.ListInstanceStatusesResponse
 */
class ListInstanceStatusesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The instance statuses.
         *
         * @generated from field: repeated api.v1.capsule.instance.Status instances = 1;
         */
        this.instances = [];
        /**
         * Total number of instances in the capsule for the given environment.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListInstanceStatusesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListInstanceStatusesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListInstanceStatusesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListInstanceStatusesResponse, a, b);
    }
}
exports.ListInstanceStatusesResponse = ListInstanceStatusesResponse;
ListInstanceStatusesResponse.runtime = protobuf_1.proto3;
ListInstanceStatusesResponse.typeName = "api.v1.capsule.ListInstanceStatusesResponse";
ListInstanceStatusesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: status_pb_js_1.Status, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * RestartInstanceRequest restarts a single instance.
 *
 * @generated from message api.v1.capsule.RestartInstanceRequest
 */
class RestartInstanceRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to restart the instance in.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The instance to restart.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        /**
         * The environment to restart the instance in.
         *
         * @generated from field: string environment_id = 4;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RestartInstanceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RestartInstanceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RestartInstanceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RestartInstanceRequest, a, b);
    }
}
exports.RestartInstanceRequest = RestartInstanceRequest;
RestartInstanceRequest.runtime = protobuf_1.proto3;
RestartInstanceRequest.typeName = "api.v1.capsule.RestartInstanceRequest";
RestartInstanceRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * RestartInstanceResponse is an empty response.
 *
 * @generated from message api.v1.capsule.RestartInstanceResponse
 */
class RestartInstanceResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RestartInstanceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RestartInstanceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RestartInstanceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RestartInstanceResponse, a, b);
    }
}
exports.RestartInstanceResponse = RestartInstanceResponse;
RestartInstanceResponse.runtime = protobuf_1.proto3;
RestartInstanceResponse.typeName = "api.v1.capsule.RestartInstanceResponse";
RestartInstanceResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * ListRolloutsRequest lists rollouts for a capsule.
 *
 * @generated from message api.v1.capsule.ListRolloutsRequest
 */
class ListRolloutsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to list rollouts for.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        /**
         * The environment to list rollouts for.
         *
         * @generated from field: string environment_id = 4;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRolloutsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRolloutsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRolloutsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRolloutsRequest, a, b);
    }
}
exports.ListRolloutsRequest = ListRolloutsRequest;
ListRolloutsRequest.runtime = protobuf_1.proto3;
ListRolloutsRequest.typeName = "api.v1.capsule.ListRolloutsRequest";
ListRolloutsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ListRolloutsResponse lists rollouts for a capsule and an environment.
 *
 * @generated from message api.v1.capsule.ListRolloutsResponse
 */
class ListRolloutsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The rollouts.
         *
         * @generated from field: repeated api.v1.capsule.Rollout rollouts = 1;
         */
        this.rollouts = [];
        /**
         * Total number of rollouts in the capsule for the given environment.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRolloutsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRolloutsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRolloutsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRolloutsResponse, a, b);
    }
}
exports.ListRolloutsResponse = ListRolloutsResponse;
ListRolloutsResponse.runtime = protobuf_1.proto3;
ListRolloutsResponse.typeName = "api.v1.capsule.ListRolloutsResponse";
ListRolloutsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollouts", kind: "message", T: rollout_pb_js_1.Rollout, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * GetRolloutRequest gets a single rollout.
 *
 * @generated from message api.v1.capsule.GetRolloutRequest
 */
class GetRolloutRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to get the rollout from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The rollout to get.
         *
         * @generated from field: uint64 rollout_id = 2;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRolloutRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRolloutRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRolloutRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRolloutRequest, a, b);
    }
}
exports.GetRolloutRequest = GetRolloutRequest;
GetRolloutRequest.runtime = protobuf_1.proto3;
GetRolloutRequest.typeName = "api.v1.capsule.GetRolloutRequest";
GetRolloutRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * GetRolloutResponse returns a single rollout for a capsule and an environment in a project.
 *
 * @generated from message api.v1.capsule.GetRolloutResponse
 */
class GetRolloutResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRolloutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRolloutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRolloutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRolloutResponse, a, b);
    }
}
exports.GetRolloutResponse = GetRolloutResponse;
GetRolloutResponse.runtime = protobuf_1.proto3;
GetRolloutResponse.typeName = "api.v1.capsule.GetRolloutResponse";
GetRolloutResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout", kind: "message", T: rollout_pb_js_1.Rollout },
]);
/**
 * AbortRolloutRequest aborts a rollout.
 *
 * @generated from message api.v1.capsule.AbortRolloutRequest
 */
class AbortRolloutRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to abort the rollout in.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The rollout to abort.
         *
         * @generated from field: uint64 rollout_id = 2;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AbortRolloutRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AbortRolloutRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AbortRolloutRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AbortRolloutRequest, a, b);
    }
}
exports.AbortRolloutRequest = AbortRolloutRequest;
AbortRolloutRequest.runtime = protobuf_1.proto3;
AbortRolloutRequest.typeName = "api.v1.capsule.AbortRolloutRequest";
AbortRolloutRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * AbortRolloutResponse is an empty response.
 *
 * @generated from message api.v1.capsule.AbortRolloutResponse
 */
class AbortRolloutResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AbortRolloutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AbortRolloutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AbortRolloutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AbortRolloutResponse, a, b);
    }
}
exports.AbortRolloutResponse = AbortRolloutResponse;
AbortRolloutResponse.runtime = protobuf_1.proto3;
AbortRolloutResponse.typeName = "api.v1.capsule.AbortRolloutResponse";
AbortRolloutResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * ListEvents request for listing rollout events for a given rollout in a capsule and environment.
 *
 * @generated from message api.v1.capsule.ListEventsRequest
 */
class ListEventsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to list events for.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The rollout to list events for.
         *
         * @generated from field: uint64 rollout_id = 2;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 4;
         */
        this.projectId = "";
        /**
         * The environment to list events for.
         *
         * @generated from field: string environment_id = 5;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListEventsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListEventsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListEventsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListEventsRequest, a, b);
    }
}
exports.ListEventsRequest = ListEventsRequest;
ListEventsRequest.runtime = protobuf_1.proto3;
ListEventsRequest.typeName = "api.v1.capsule.ListEventsRequest";
ListEventsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response to List Events
 *
 * @generated from message api.v1.capsule.ListEventsResponse
 */
class ListEventsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The events for a rollout in a capsule and environment for a given project.
         *
         * @generated from field: repeated api.v1.capsule.Event events = 1;
         */
        this.events = [];
        /**
         * Total number of events in the capsule for the given environment.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListEventsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListEventsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListEventsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListEventsResponse, a, b);
    }
}
exports.ListEventsResponse = ListEventsResponse;
ListEventsResponse.runtime = protobuf_1.proto3;
ListEventsResponse.typeName = "api.v1.capsule.ListEventsResponse";
ListEventsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: event_pb_js_1.Event, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Request for getting metrics for a capsule and optionally a single instance.
 *
 * @generated from message api.v1.capsule.CapsuleMetricsRequest
 */
class CapsuleMetricsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to get metrics for.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * If set, only returns metrics for the given instance_id.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 4;
         */
        this.projectId = "";
        /**
         * The environment to get metrics for.
         *
         * @generated from field: string environment_id = 5;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CapsuleMetricsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CapsuleMetricsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CapsuleMetricsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CapsuleMetricsRequest, a, b);
    }
}
exports.CapsuleMetricsRequest = CapsuleMetricsRequest;
CapsuleMetricsRequest.runtime = protobuf_1.proto3;
CapsuleMetricsRequest.typeName = "api.v1.capsule.CapsuleMetricsRequest";
CapsuleMetricsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response to getting capsule metrics.
 *
 * @generated from message api.v1.capsule.CapsuleMetricsResponse
 */
class CapsuleMetricsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Metrics
         *
         * @generated from field: repeated api.v1.capsule.InstanceMetrics instance_metrics = 1;
         */
        this.instanceMetrics = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CapsuleMetricsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CapsuleMetricsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CapsuleMetricsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CapsuleMetricsResponse, a, b);
    }
}
exports.CapsuleMetricsResponse = CapsuleMetricsResponse;
CapsuleMetricsResponse.runtime = protobuf_1.proto3;
CapsuleMetricsResponse.typeName = "api.v1.capsule.CapsuleMetricsResponse";
CapsuleMetricsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instance_metrics", kind: "message", T: metrics_pb_js_1.InstanceMetrics, repeated: true },
]);
/**
 * Request for getting custom metrics for a capsule in an environment.
 *
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsRequest
 */
class GetCustomInstanceMetricsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to get metrics for.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        /**
         * The environment to get metrics for.
         *
         * @generated from field: string environment_id = 3;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetCustomInstanceMetricsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetCustomInstanceMetricsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetCustomInstanceMetricsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetCustomInstanceMetricsRequest, a, b);
    }
}
exports.GetCustomInstanceMetricsRequest = GetCustomInstanceMetricsRequest;
GetCustomInstanceMetricsRequest.runtime = protobuf_1.proto3;
GetCustomInstanceMetricsRequest.typeName = "api.v1.capsule.GetCustomInstanceMetricsRequest";
GetCustomInstanceMetricsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response to getting custom metrics for a capsule in an environment.
 *
 * @generated from message api.v1.capsule.GetCustomInstanceMetricsResponse
 */
class GetCustomInstanceMetricsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Custom Metrics.
         *
         * @generated from field: repeated api.v1.capsule.Metric metrics = 1;
         */
        this.metrics = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetCustomInstanceMetricsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetCustomInstanceMetricsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetCustomInstanceMetricsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetCustomInstanceMetricsResponse, a, b);
    }
}
exports.GetCustomInstanceMetricsResponse = GetCustomInstanceMetricsResponse;
GetCustomInstanceMetricsResponse.runtime = protobuf_1.proto3;
GetCustomInstanceMetricsResponse.typeName = "api.v1.capsule.GetCustomInstanceMetricsResponse";
GetCustomInstanceMetricsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metrics", kind: "message", T: Metric, repeated: true },
]);
/**
 * Custom metrics
 *
 * @generated from message api.v1.capsule.Metric
 */
class Metric extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the metric.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Latest value of the metric.
         *
         * @generated from field: double latest_value = 2;
         */
        this.latestValue = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Metric().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Metric().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Metric().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Metric, a, b);
    }
}
exports.Metric = Metric;
Metric.runtime = protobuf_1.proto3;
Metric.typeName = "api.v1.capsule.Metric";
Metric.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "latest_timestamp", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * Request for getting job executions from cron jobs.
 *
 * @generated from message api.v1.capsule.GetJobExecutionsRequest
 */
class GetJobExecutionsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to get job executions for.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The name of the job to get executions for.
         *
         * @generated from field: string job_name = 2;
         */
        this.jobName = "";
        /**
         * Filtering executions by job state.
         *
         * @generated from field: repeated api.v1.capsule.JobState states = 4;
         */
        this.states = [];
        /**
         * The project in which the capsule lives.
         *
         * @generated from field: string project_id = 8;
         */
        this.projectId = "";
        /**
         * The environment to get job executions for.
         *
         * @generated from field: string environment_id = 9;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetJobExecutionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetJobExecutionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetJobExecutionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetJobExecutionsRequest, a, b);
    }
}
exports.GetJobExecutionsRequest = GetJobExecutionsRequest;
GetJobExecutionsRequest.runtime = protobuf_1.proto3;
GetJobExecutionsRequest.typeName = "api.v1.capsule.GetJobExecutionsRequest";
GetJobExecutionsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "states", kind: "enum", T: protobuf_1.proto3.getEnumType(job_pb_js_1.JobState), repeated: true },
    { no: 5, name: "created_from", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "created_to", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 8, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response to getting job executions.
 *
 * @generated from message api.v1.capsule.GetJobExecutionsResponse
 */
class GetJobExecutionsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Job executions.
         *
         * @generated from field: repeated api.v1.capsule.JobExecution job_executions = 1;
         */
        this.jobExecutions = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetJobExecutionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetJobExecutionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetJobExecutionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetJobExecutionsResponse, a, b);
    }
}
exports.GetJobExecutionsResponse = GetJobExecutionsResponse;
GetJobExecutionsResponse.runtime = protobuf_1.proto3;
GetJobExecutionsResponse.typeName = "api.v1.capsule.GetJobExecutionsResponse";
GetJobExecutionsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "job_executions", kind: "message", T: job_pb_js_1.JobExecution, repeated: true },
]);


/***/ }),

/***/ 9350:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/group/group.proto (package api.v1.group, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MemberID = exports.Update = exports.Group = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const metadata_pb_js_1 = __nccwpck_require__(4951);
/**
 * Group is a named collection of users and service accounts with optional metadata.
 *
 * @generated from message api.v1.group.Group
 */
class Group extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Unique name of the group.
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        /**
         * Number of members.
         *
         * @generated from field: uint64 num_members = 5;
         */
        this.numMembers = protobuf_1.protoInt64.zero;
        /**
         * Metadata of the group.
         *
         * @generated from field: map<string, bytes> metadata = 6;
         */
        this.metadata = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Group().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Group().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Group().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Group, a, b);
    }
}
exports.Group = Group;
Group.runtime = protobuf_1.proto3;
Group.typeName = "api.v1.group.Group";
Group.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "num_members", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 12 /* ScalarType.BYTES */ } },
    { no: 7, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * An update msg for a group.
 *
 * @generated from message api.v1.group.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.group.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.group.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 2, name: "set_metadata", kind: "message", T: metadata_pb_js_1.Metadata, oneof: "field" },
    { no: 3, name: "delete_metadata_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
]);
/**
 * MemberID is a union of service account id and user id.
 *
 * @generated from message api.v1.group.MemberID
 */
class MemberID extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.group.MemberID.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MemberID().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MemberID().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MemberID().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MemberID, a, b);
    }
}
exports.MemberID = MemberID;
MemberID.runtime = protobuf_1.proto3;
MemberID.typeName = "api.v1.group.MemberID";
MemberID.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
]);


/***/ }),

/***/ 1760:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/group/service.proto (package api.v1.group, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(4575);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage groups in Users.
 *
 * @generated from service api.v1.group.Service
 */
exports.t = {
    typeName: "api.v1.group.Service",
    methods: {
        /**
         * Create a new group.
         *
         * @generated from rpc api.v1.group.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a group.
         *
         * @generated from rpc api.v1.group.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List groups.
         *
         * @generated from rpc api.v1.group.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Update group.
         *
         * @generated from rpc api.v1.group.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get group.
         *
         * @generated from rpc api.v1.group.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Add a member to a group.
         *
         * @generated from rpc api.v1.group.Service.AddMember
         */
        addMember: {
            name: "AddMember",
            I: service_pb_js_1.AddMemberRequest,
            O: service_pb_js_1.AddMemberResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Remove member from group.
         *
         * @generated from rpc api.v1.group.Service.RemoveMember
         */
        removeMember: {
            name: "RemoveMember",
            I: service_pb_js_1.RemoveMemberRequest,
            O: service_pb_js_1.RemoveMemberResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get Group Members.
         *
         * @generated from rpc api.v1.group.Service.ListMembers
         */
        listMembers: {
            name: "ListMembers",
            I: service_pb_js_1.ListMembersRequest,
            O: service_pb_js_1.ListMembersResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get Groups.
         *
         * @generated from rpc api.v1.group.Service.ListGroupsForMember
         */
        listGroupsForMember: {
            name: "ListGroupsForMember",
            I: service_pb_js_1.ListGroupsForMemberRequest,
            O: service_pb_js_1.ListGroupsForMemberResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 4575:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/group/service.proto (package api.v1.group, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListGroupsForMemberResponse = exports.ListGroupsForMemberRequest = exports.ListMembersResponse = exports.ListMembersRequest = exports.RemoveMemberResponse = exports.RemoveMemberRequest = exports.AddMemberResponse = exports.AddMemberRequest = exports.GetResponse = exports.GetRequest = exports.UpdateResponse = exports.UpdateRequest = exports.DeleteResponse = exports.DeleteRequest = exports.ListResponse = exports.ListRequest = exports.CreateResponse = exports.CreateRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const group_pb_js_1 = __nccwpck_require__(9350);
const common_pb_js_1 = __nccwpck_require__(1101);
const user_pb_js_1 = __nccwpck_require__(3008);
/**
 * The request of a Groups.Create RPC.
 *
 * @generated from message api.v1.group.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group to create.
         *
         * @generated from field: repeated api.v1.group.Update initializers = 1;
         */
        this.initializers = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.group.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "initializers", kind: "message", T: group_pb_js_1.Update, repeated: true },
]);
/**
 * The response of a Groups.Create RPC.
 *
 * @generated from message api.v1.group.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.group.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: group_pb_js_1.Group },
]);
/**
 * The request of a Groups.List RPC.
 *
 * @generated from message api.v1.group.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Search string.
         *
         * @generated from field: string search = 2;
         */
        this.search = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.group.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 2, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Groups.List RPC.
 *
 * @generated from message api.v1.group.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * list of groups.
         *
         * @generated from field: repeated api.v1.group.Group groups = 1;
         */
        this.groups = [];
        /**
         * total amount of groups.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.group.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: group_pb_js_1.Group, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * The request of a Group.Delete RPC.
 *
 * @generated from message api.v1.group.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group to delete.
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.group.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Group.Delete RPC.
 *
 * @generated from message api.v1.group.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.group.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Groups.Update RPC.
 *
 * @generated from message api.v1.group.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The updates to apply.
         *
         * @generated from field: repeated api.v1.group.Update updates = 1;
         */
        this.updates = [];
        /**
         * The group id.
         *
         * @generated from field: string group_id = 2;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.group.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: group_pb_js_1.Update, repeated: true },
    { no: 2, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Groups.Update RPC.
 *
 * @generated from message api.v1.group.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.group.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Groups.Get RPC.
 *
 * @generated from message api.v1.group.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group id.
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.group.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Groups.Get RPC
 *
 * @generated from message api.v1.group.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.group.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: group_pb_js_1.Group },
]);
/**
 * Request for adding one or more members to a group.
 *
 * @generated from message api.v1.group.AddMemberRequest
 */
class AddMemberRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group to add members to.
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        /**
         * The members to add.
         *
         * @generated from field: repeated api.v1.group.MemberID member_ids = 2;
         */
        this.memberIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddMemberRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddMemberRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddMemberRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AddMemberRequest, a, b);
    }
}
exports.AddMemberRequest = AddMemberRequest;
AddMemberRequest.runtime = protobuf_1.proto3;
AddMemberRequest.typeName = "api.v1.group.AddMemberRequest";
AddMemberRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_ids", kind: "message", T: group_pb_js_1.MemberID, repeated: true },
]);
/**
 * Empty response for adding one or more members to a group.
 *
 * @generated from message api.v1.group.AddMemberResponse
 */
class AddMemberResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddMemberResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddMemberResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddMemberResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AddMemberResponse, a, b);
    }
}
exports.AddMemberResponse = AddMemberResponse;
AddMemberResponse.runtime = protobuf_1.proto3;
AddMemberResponse.typeName = "api.v1.group.AddMemberResponse";
AddMemberResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request for removing a member from a group.
 *
 * @generated from message api.v1.group.RemoveMemberRequest
 */
class RemoveMemberRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group to remove the member from.
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemoveMemberRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemoveMemberRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemoveMemberRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RemoveMemberRequest, a, b);
    }
}
exports.RemoveMemberRequest = RemoveMemberRequest;
RemoveMemberRequest.runtime = protobuf_1.proto3;
RemoveMemberRequest.typeName = "api.v1.group.RemoveMemberRequest";
RemoveMemberRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_id", kind: "message", T: group_pb_js_1.MemberID },
]);
/**
 * Empty response for removing a member from a group.
 *
 * @generated from message api.v1.group.RemoveMemberResponse
 */
class RemoveMemberResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemoveMemberResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemoveMemberResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemoveMemberResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RemoveMemberResponse, a, b);
    }
}
exports.RemoveMemberResponse = RemoveMemberResponse;
RemoveMemberResponse.runtime = protobuf_1.proto3;
RemoveMemberResponse.typeName = "api.v1.group.RemoveMemberResponse";
RemoveMemberResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Reqyest for listing members of a group.
 *
 * @generated from message api.v1.group.ListMembersRequest
 */
class ListMembersRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group to list members of.
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListMembersRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListMembersRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListMembersRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListMembersRequest, a, b);
    }
}
exports.ListMembersRequest = ListMembersRequest;
ListMembersRequest.runtime = protobuf_1.proto3;
ListMembersRequest.typeName = "api.v1.group.ListMembersRequest";
ListMembersRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * Response for listing members of a group.
 *
 * @generated from message api.v1.group.ListMembersResponse
 */
class ListMembersResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The members in the group.
         *
         * @generated from field: repeated model.MemberEntry members = 1;
         */
        this.members = [];
        /**
         * The total amount of members in the group.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListMembersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListMembersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListMembersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListMembersResponse, a, b);
    }
}
exports.ListMembersResponse = ListMembersResponse;
ListMembersResponse.runtime = protobuf_1.proto3;
ListMembersResponse.typeName = "api.v1.group.ListMembersResponse";
ListMembersResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: user_pb_js_1.MemberEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Request for listing the groups a member is in.
 *
 * @generated from message api.v1.group.ListGroupsForMemberRequest
 */
class ListGroupsForMemberRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListGroupsForMemberRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListGroupsForMemberRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListGroupsForMemberRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListGroupsForMemberRequest, a, b);
    }
}
exports.ListGroupsForMemberRequest = ListGroupsForMemberRequest;
ListGroupsForMemberRequest.runtime = protobuf_1.proto3;
ListGroupsForMemberRequest.typeName = "api.v1.group.ListGroupsForMemberRequest";
ListGroupsForMemberRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "member_id", kind: "message", T: group_pb_js_1.MemberID },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * Response for listing the groups a member is in.
 *
 * @generated from message api.v1.group.ListGroupsForMemberResponse
 */
class ListGroupsForMemberResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The groups the member is in.
         *
         * @generated from field: repeated api.v1.group.Group groups = 1;
         */
        this.groups = [];
        /**
         * The total amount of groups the member is in.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListGroupsForMemberResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListGroupsForMemberResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListGroupsForMemberResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListGroupsForMemberResponse, a, b);
    }
}
exports.ListGroupsForMemberResponse = ListGroupsForMemberResponse;
ListGroupsForMemberResponse.runtime = protobuf_1.proto3;
ListGroupsForMemberResponse.typeName = "api.v1.group.ListGroupsForMemberResponse";
ListGroupsForMemberResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: group_pb_js_1.Group, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);


/***/ }),

/***/ 4191:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/project/project.proto (package api.v1.project, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Update = exports.Project = exports.Plan = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The plan for a rig installation
 *
 * @generated from enum api.v1.project.Plan
 */
var Plan;
(function (Plan) {
    /**
     * Unspecified / unactivated plan.
     *
     * @generated from enum value: PLAN_UNSPECIFIED = 0;
     */
    Plan[Plan["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Free tier.
     *
     * @generated from enum value: PLAN_FREE = 1;
     */
    Plan[Plan["FREE"] = 1] = "FREE";
    /**
     * Team / Pro tier.
     *
     * @generated from enum value: PLAN_TEAM = 2;
     */
    Plan[Plan["TEAM"] = 2] = "TEAM";
    /**
     * Enterprise tier.
     *
     * @generated from enum value: PLAN_ENTERPRISE = 3;
     */
    Plan[Plan["ENTERPRISE"] = 3] = "ENTERPRISE";
})(Plan || (exports.Plan = Plan = {}));
// Retrieve enum metadata with: proto3.getEnumType(Plan)
protobuf_1.proto3.util.setEnumType(Plan, "api.v1.project.Plan", [
    { no: 0, name: "PLAN_UNSPECIFIED" },
    { no: 1, name: "PLAN_FREE" },
    { no: 2, name: "PLAN_TEAM" },
    { no: 3, name: "PLAN_ENTERPRISE" },
]);
/**
 * The top most model that capsules etc belong to.
 *
 * @generated from message api.v1.project.Project
 */
class Project extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The unique id of the project.
         *
         * @generated from field: string project_id = 1;
         */
        this.projectId = "";
        /**
         * Deprecated: Name of the project.
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * The installation id of the project.
         *
         * @generated from field: string installation_id = 5;
         */
        this.installationId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Project().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Project().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Project().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Project, a, b);
    }
}
exports.Project = Project;
Project.runtime = protobuf_1.proto3;
Project.typeName = "api.v1.project.Project";
Project.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "installation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Update msg for a project.
 *
 * @generated from message api.v1.project.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.project.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.project.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
]);


/***/ }),

/***/ 8184:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/project/service.proto (package api.v1.project, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(8355);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage your projects.
 *
 * @generated from service api.v1.project.Service
 */
exports.t = {
    typeName: "api.v1.project.Service",
    methods: {
        /**
         * Create project.
         *
         * @generated from rpc api.v1.project.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete project.
         *
         * @generated from rpc api.v1.project.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get project.
         *
         * @generated from rpc api.v1.project.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get project list.
         *
         * @generated from rpc api.v1.project.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Update updates the profile of the project.
         *
         * @generated from rpc api.v1.project.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get public key.
         *
         * @generated from rpc api.v1.project.Service.PublicKey
         */
        publicKey: {
            name: "PublicKey",
            I: service_pb_js_1.PublicKeyRequest,
            O: service_pb_js_1.PublicKeyResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get License Information.
         *
         * @generated from rpc api.v1.project.Service.GetLicenseInfo
         */
        getLicenseInfo: {
            name: "GetLicenseInfo",
            I: service_pb_js_1.GetLicenseInfoRequest,
            O: service_pb_js_1.GetLicenseInfoResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Returns all objects of a given kind.
         *
         * @generated from rpc api.v1.project.Service.GetObjectsByKind
         */
        getObjectsByKind: {
            name: "GetObjectsByKind",
            I: service_pb_js_1.GetObjectsByKindRequest,
            O: service_pb_js_1.GetObjectsByKindResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Returns all metrics of a given custom object.
         *
         * @generated from rpc api.v1.project.Service.GetCustomObjectMetrics
         */
        getCustomObjectMetrics: {
            name: "GetCustomObjectMetrics",
            I: service_pb_js_1.GetCustomObjectMetricsRequest,
            O: service_pb_js_1.GetCustomObjectMetricsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 8355:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/project/service.proto (package api.v1.project, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetObjectsByKindResponse = exports.GetObjectsByKindRequest = exports.KubernetesObject = exports.GetCustomObjectMetricsResponse = exports.GetCustomObjectMetricsRequest = exports.GetLicenseInfoResponse = exports.GetLicenseInfoRequest = exports.PublicKeyResponse = exports.PublicKeyRequest = exports.ListResponse = exports.ListRequest = exports.GetResponse = exports.GetRequest = exports.UpdateResponse = exports.UpdateRequest = exports.DeleteResponse = exports.DeleteRequest = exports.CreateResponse = exports.CreateRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const project_pb_js_1 = __nccwpck_require__(4191);
const common_pb_js_1 = __nccwpck_require__(1101);
const change_pb_js_1 = __nccwpck_require__(7814);
const service_pb_js_1 = __nccwpck_require__(7830);
/**
 * The request to create a project.
 *
 * @generated from message api.v1.project.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The initializers of the project.
         *
         * @generated from field: repeated api.v1.project.Update initializers = 1;
         */
        this.initializers = [];
        /**
         * ID of the project to create.
         *
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.project.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "initializers", kind: "message", T: project_pb_js_1.Update, repeated: true },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response to Create a project.
 *
 * @generated from message api.v1.project.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.project.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: project_pb_js_1.Project },
]);
/**
 * Request to delete a project.
 *
 * @generated from message api.v1.project.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Id of the project to delete
         *
         * @generated from field: string project_id = 1;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.project.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty response for deleting a project.
 *
 * @generated from message api.v1.project.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.project.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Update the name field of a project.
 *
 * @generated from message api.v1.project.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * the updates to apply.
         *
         * @generated from field: repeated api.v1.project.Update updates = 1;
         */
        this.updates = [];
        /**
         * The project to update.
         *
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.project.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: project_pb_js_1.Update, repeated: true },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty response for updating a project.
 *
 * @generated from message api.v1.project.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.project.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request for getting a project.
 *
 * @generated from message api.v1.project.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The project to get.
         *
         * @generated from field: string project_id = 1;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.project.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response for getting a project.
 *
 * @generated from message api.v1.project.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.project.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: project_pb_js_1.Project },
]);
/**
 * Request for listing projects.
 *
 * @generated from message api.v1.project.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.project.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * Response for listing projects.
 *
 * @generated from message api.v1.project.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The retrieved projects.
         *
         * @generated from field: repeated api.v1.project.Project projects = 1;
         */
        this.projects = [];
        /**
         * Total number of projects.
         *
         * @generated from field: int64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.project.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: project_pb_js_1.Project, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * Request to get the public key of a project.
 *
 * @generated from message api.v1.project.PublicKeyRequest
 */
class PublicKeyRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The project to get the key from.
         *
         * @generated from field: string project_id = 1;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicKeyRequest, a, b);
    }
}
exports.PublicKeyRequest = PublicKeyRequest;
PublicKeyRequest.runtime = protobuf_1.proto3;
PublicKeyRequest.typeName = "api.v1.project.PublicKeyRequest";
PublicKeyRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response for getting a projects public key.
 *
 * @generated from message api.v1.project.PublicKeyResponse
 */
class PublicKeyResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * the retrieved public key.
         *
         * @generated from field: string public_key = 1;
         */
        this.publicKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicKeyResponse, a, b);
    }
}
exports.PublicKeyResponse = PublicKeyResponse;
PublicKeyResponse.runtime = protobuf_1.proto3;
PublicKeyResponse.typeName = "api.v1.project.PublicKeyResponse";
PublicKeyResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Request to get the license information of the Rig installation.
 *
 * @generated from message api.v1.project.GetLicenseInfoRequest
 */
class GetLicenseInfoRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Deprecated: Only the Rig-Project has license information.
         *
         * @generated from field: string project_id = 1;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetLicenseInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetLicenseInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetLicenseInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetLicenseInfoRequest, a, b);
    }
}
exports.GetLicenseInfoRequest = GetLicenseInfoRequest;
GetLicenseInfoRequest.runtime = protobuf_1.proto3;
GetLicenseInfoRequest.typeName = "api.v1.project.GetLicenseInfoRequest";
GetLicenseInfoRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response for getting the license information of the Rig installation.
 *
 * @generated from message api.v1.project.GetLicenseInfoResponse
 */
class GetLicenseInfoResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The plan of the rig installation.
         *
         * @generated from field: api.v1.project.Plan plan = 1;
         */
        this.plan = project_pb_js_1.Plan.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetLicenseInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetLicenseInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetLicenseInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetLicenseInfoResponse, a, b);
    }
}
exports.GetLicenseInfoResponse = GetLicenseInfoResponse;
GetLicenseInfoResponse.runtime = protobuf_1.proto3;
GetLicenseInfoResponse.typeName = "api.v1.project.GetLicenseInfoResponse";
GetLicenseInfoResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "enum", T: protobuf_1.proto3.getEnumType(project_pb_js_1.Plan) },
    { no: 2, name: "expires_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * Request to get custom metrics for a project and environment.
 *
 * @generated from message api.v1.project.GetCustomObjectMetricsRequest
 */
class GetCustomObjectMetricsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The project to get metrics for.
         *
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        /**
         * The environment to get metrics for.
         *
         * @generated from field: string environment_id = 3;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetCustomObjectMetricsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetCustomObjectMetricsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetCustomObjectMetricsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetCustomObjectMetricsRequest, a, b);
    }
}
exports.GetCustomObjectMetricsRequest = GetCustomObjectMetricsRequest;
GetCustomObjectMetricsRequest.runtime = protobuf_1.proto3;
GetCustomObjectMetricsRequest.typeName = "api.v1.project.GetCustomObjectMetricsRequest";
GetCustomObjectMetricsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "object_reference", kind: "message", T: change_pb_js_1.ObjectReference },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response for getting custom metrics for a project and environment.
 *
 * @generated from message api.v1.project.GetCustomObjectMetricsResponse
 */
class GetCustomObjectMetricsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The metrics for the given object.
         *
         * @generated from field: repeated api.v1.capsule.Metric metrics = 1;
         */
        this.metrics = [];
        /**
         * The project the metrics are for.
         *
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        /**
         * The environment the metrics are for.
         *
         * @generated from field: string environment_id = 3;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetCustomObjectMetricsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetCustomObjectMetricsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetCustomObjectMetricsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetCustomObjectMetricsResponse, a, b);
    }
}
exports.GetCustomObjectMetricsResponse = GetCustomObjectMetricsResponse;
GetCustomObjectMetricsResponse.runtime = protobuf_1.proto3;
GetCustomObjectMetricsResponse.typeName = "api.v1.project.GetCustomObjectMetricsResponse";
GetCustomObjectMetricsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metrics", kind: "message", T: service_pb_js_1.Metric, repeated: true },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Model of a kubernetes object.
 *
 * @generated from message api.v1.project.KubernetesObject
 */
class KubernetesObject extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Type / kind of the object.
         *
         * @generated from field: string kind = 1;
         */
        this.kind = "";
        /**
         * Name of the object.
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new KubernetesObject().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new KubernetesObject().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new KubernetesObject().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(KubernetesObject, a, b);
    }
}
exports.KubernetesObject = KubernetesObject;
KubernetesObject.runtime = protobuf_1.proto3;
KubernetesObject.typeName = "api.v1.project.KubernetesObject";
KubernetesObject.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Request to get all objects of a given kind in a project and environment.
 *
 * @generated from message api.v1.project.GetObjectsByKindRequest
 */
class GetObjectsByKindRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The kind of the objects to get.
         *
         * @generated from field: string kind = 1;
         */
        this.kind = "";
        /**
         * The api version of the objects to get.
         *
         * @generated from field: string api_version = 2;
         */
        this.apiVersion = "";
        /**
         * The project to get the objects for.
         *
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        /**
         * The environment to get the objects for.
         *
         * @generated from field: string environment_id = 4;
         */
        this.environmentId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetObjectsByKindRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectsByKindRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectsByKindRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetObjectsByKindRequest, a, b);
    }
}
exports.GetObjectsByKindRequest = GetObjectsByKindRequest;
GetObjectsByKindRequest.runtime = protobuf_1.proto3;
GetObjectsByKindRequest.typeName = "api.v1.project.GetObjectsByKindRequest";
GetObjectsByKindRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "environment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response for getting all objects of a given kind in a project and environment.
 *
 * @generated from message api.v1.project.GetObjectsByKindResponse
 */
class GetObjectsByKindResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The objects of the given kind.
         *
         * @generated from field: repeated api.v1.project.KubernetesObject objects = 1;
         */
        this.objects = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetObjectsByKindResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectsByKindResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectsByKindResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetObjectsByKindResponse, a, b);
    }
}
exports.GetObjectsByKindResponse = GetObjectsByKindResponse;
GetObjectsByKindResponse.runtime = protobuf_1.proto3;
GetObjectsByKindResponse.typeName = "api.v1.project.GetObjectsByKindResponse";
GetObjectsByKindResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "message", T: KubernetesObject, repeated: true },
]);


/***/ }),

/***/ 3886:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/project/settings/service.proto (package api.v1.project.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(2205);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Service for setting and retrieving project-wide settings.
 *
 * @generated from service api.v1.project.settings.Service
 */
exports.t = {
    typeName: "api.v1.project.settings.Service",
    methods: {
        /**
         * Gets the users settings for the current project.
         *
         * @generated from rpc api.v1.project.settings.Service.GetSettings
         */
        getSettings: {
            name: "GetSettings",
            I: service_pb_js_1.GetSettingsRequest,
            O: service_pb_js_1.GetSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Sets the users settings for the current project.
         *
         * @generated from rpc api.v1.project.settings.Service.UpdateSettings
         */
        updateSettings: {
            name: "UpdateSettings",
            I: service_pb_js_1.UpdateSettingsRequest,
            O: service_pb_js_1.UpdateSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 2205:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/project/settings/service.proto (package api.v1.project.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateSettingsResponse = exports.UpdateSettingsRequest = exports.GetSettingsResponse = exports.GetSettingsRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const settings_pb_js_1 = __nccwpck_require__(2411);
/**
 * Empty get settings request
 *
 * @generated from message api.v1.project.settings.GetSettingsRequest
 */
class GetSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsRequest, a, b);
    }
}
exports.GetSettingsRequest = GetSettingsRequest;
GetSettingsRequest.runtime = protobuf_1.proto3;
GetSettingsRequest.typeName = "api.v1.project.settings.GetSettingsRequest";
GetSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Response for getting settings for the project.
 *
 * @generated from message api.v1.project.settings.GetSettingsResponse
 */
class GetSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsResponse, a, b);
    }
}
exports.GetSettingsResponse = GetSettingsResponse;
GetSettingsResponse.runtime = protobuf_1.proto3;
GetSettingsResponse.typeName = "api.v1.project.settings.GetSettingsResponse";
GetSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: settings_pb_js_1.Settings },
]);
/**
 * Request for  updating settings for a project.
 *
 * @generated from message api.v1.project.settings.UpdateSettingsRequest
 */
class UpdateSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The updates to apply.
         *
         * @generated from field: repeated api.v1.project.settings.Update updates = 1;
         */
        this.updates = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsRequest, a, b);
    }
}
exports.UpdateSettingsRequest = UpdateSettingsRequest;
UpdateSettingsRequest.runtime = protobuf_1.proto3;
UpdateSettingsRequest.typeName = "api.v1.project.settings.UpdateSettingsRequest";
UpdateSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: settings_pb_js_1.Update, repeated: true },
]);
/**
 * Empty response for updating a project's settings.
 *
 * @generated from message api.v1.project.settings.UpdateSettingsResponse
 */
class UpdateSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsResponse, a, b);
    }
}
exports.UpdateSettingsResponse = UpdateSettingsResponse;
UpdateSettingsResponse.runtime = protobuf_1.proto3;
UpdateSettingsResponse.typeName = "api.v1.project.settings.UpdateSettingsResponse";
UpdateSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 2411:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/project/settings/settings.proto (package api.v1.project.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Update = exports.DockerRegistryCredentials = exports.AddDockerRegistry = exports.DockerRegistry = exports.Settings = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Project wide settings.
 *
 * @generated from message api.v1.project.settings.Settings
 */
class Settings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Docker registries for images.
         *
         * @generated from field: repeated api.v1.project.settings.DockerRegistry docker_registries = 4;
         */
        this.dockerRegistries = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Settings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Settings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Settings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Settings, a, b);
    }
}
exports.Settings = Settings;
Settings.runtime = protobuf_1.proto3;
Settings.typeName = "api.v1.project.settings.Settings";
Settings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 4, name: "docker_registries", kind: "message", T: DockerRegistry, repeated: true },
]);
/**
 * Docker registry.
 *
 * @generated from message api.v1.project.settings.DockerRegistry
 */
class DockerRegistry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The secret id of the docker registry.
         *
         * @generated from field: string secret_id = 1;
         */
        this.secretId = "";
        /**
         * Host of the docker registry/
         *
         * @generated from field: string host = 2;
         */
        this.host = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DockerRegistry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DockerRegistry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DockerRegistry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DockerRegistry, a, b);
    }
}
exports.DockerRegistry = DockerRegistry;
DockerRegistry.runtime = protobuf_1.proto3;
DockerRegistry.typeName = "api.v1.project.settings.DockerRegistry";
DockerRegistry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Message for adding a docker registry
 *
 * @generated from message api.v1.project.settings.AddDockerRegistry
 */
class AddDockerRegistry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The host of the docker registry.
         *
         * @generated from field: string host = 1;
         */
        this.host = "";
        /**
         * @generated from oneof api.v1.project.settings.AddDockerRegistry.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddDockerRegistry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddDockerRegistry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddDockerRegistry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AddDockerRegistry, a, b);
    }
}
exports.AddDockerRegistry = AddDockerRegistry;
AddDockerRegistry.runtime = protobuf_1.proto3;
AddDockerRegistry.typeName = "api.v1.project.settings.AddDockerRegistry";
AddDockerRegistry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "credentials", kind: "message", T: DockerRegistryCredentials, oneof: "field" },
]);
/**
 * Credentials for a docker registry.
 *
 * @generated from message api.v1.project.settings.DockerRegistryCredentials
 */
class DockerRegistryCredentials extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Username for the docker registry.
         *
         * @generated from field: string username = 1;
         */
        this.username = "";
        /**
         * Password for the docker registry.
         *
         * @generated from field: string password = 2;
         */
        this.password = "";
        /**
         * Email for the docker registry.
         *
         * @generated from field: string email = 3;
         */
        this.email = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DockerRegistryCredentials().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DockerRegistryCredentials().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DockerRegistryCredentials().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DockerRegistryCredentials, a, b);
    }
}
exports.DockerRegistryCredentials = DockerRegistryCredentials;
DockerRegistryCredentials.runtime = protobuf_1.proto3;
DockerRegistryCredentials.typeName = "api.v1.project.settings.DockerRegistryCredentials";
DockerRegistryCredentials.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Update message for project settings.
 *
 * @generated from message api.v1.project.settings.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * A number of updates to apply to the project settings.
         *
         * @generated from oneof api.v1.project.settings.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.project.settings.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 4, name: "add_docker_registry", kind: "message", T: AddDockerRegistry, oneof: "field" },
    { no: 5, name: "delete_docker_registry", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
]);


/***/ }),

/***/ 7813:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/service_account/service_account.proto (package api.v1.service_account, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServiceAccount = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * Service account model.
 *
 * @generated from message api.v1.service_account.ServiceAccount
 */
class ServiceAccount extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Unique name of the service account.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Whether the service account is managed by the system.
         *
         * @generated from field: bool managed = 4;
         */
        this.managed = false;
        /**
         * List of group IDs the service account belongs to.
         *
         * @generated from field: repeated string group_ids = 5;
         */
        this.groupIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceAccount().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceAccount().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceAccount().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ServiceAccount, a, b);
    }
}
exports.ServiceAccount = ServiceAccount;
ServiceAccount.runtime = protobuf_1.proto3;
ServiceAccount.typeName = "api.v1.service_account.ServiceAccount";
ServiceAccount.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 4, name: "managed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);


/***/ }),

/***/ 2916:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/service_account/service.proto (package api.v1.service_account, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(3813);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage your Service Accounts
 *
 * @generated from service api.v1.service_account.Service
 */
exports.t = {
    typeName: "api.v1.service_account.Service",
    methods: {
        /**
         * Create a new Service Account. The returned client_id and client_secret can
         * be used as login credentials. Note that the client_secret can only be read
         * out once, at creation.
         *
         * @generated from rpc api.v1.service_account.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List all service accounts.
         *
         * @generated from rpc api.v1.service_account.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a service account. It can take up to the TTL of access tokens for
         * existing sessions using this service_account, to expire.
         *
         * @generated from rpc api.v1.service_account.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 3813:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/service_account/service.proto (package api.v1.service_account, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteResponse = exports.DeleteRequest = exports.ListResponse = exports.ListRequest = exports.CreateResponse = exports.CreateRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const service_account_pb_js_1 = __nccwpck_require__(7813);
const user_pb_js_1 = __nccwpck_require__(3008);
/**
 * Request o create a service account.
 *
 * @generated from message api.v1.service_account.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Name of the service account to create.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.service_account.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response of creating a service account.
 *
 * @generated from message api.v1.service_account.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The client id of the service account.
         *
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * The client secret of the service account.
         *
         * @generated from field: string client_secret = 3;
         */
        this.clientSecret = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.service_account.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_account", kind: "message", T: service_account_pb_js_1.ServiceAccount },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Request to list service accounts.
 *
 * @generated from message api.v1.service_account.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.service_account.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Response for listing service accounts.
 *
 * @generated from message api.v1.service_account.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * the retrieved service accounts.
         *
         * @generated from field: repeated model.ServiceAccountEntry service_accounts = 1;
         */
        this.serviceAccounts = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.service_account.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_accounts", kind: "message", T: user_pb_js_1.ServiceAccountEntry, repeated: true },
]);
/**
 * Request to delete a service account.
 *
 * @generated from message api.v1.service_account.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The id of the service account to delete.
         *
         * @generated from field: string service_account_id = 1;
         */
        this.serviceAccountId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.service_account.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty response for deleting a service account.
 *
 * @generated from message api.v1.service_account.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.service_account.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 5329:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/user/service.proto (package api.v1.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(7061);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage users in Users.
 *
 * @generated from service api.v1.user.Service
 */
exports.t = {
    typeName: "api.v1.user.Service",
    methods: {
        /**
         * Create a new user.
         *
         * @generated from rpc api.v1.user.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Update a users profile and info.
         *
         * @generated from rpc api.v1.user.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get the list of active sessions for the given user.
         *
         * @generated from rpc api.v1.user.Service.ListSessions
         */
        listSessions: {
            name: "ListSessions",
            I: service_pb_js_1.ListSessionsRequest,
            O: service_pb_js_1.ListSessionsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a user by user-id.
         *
         * @generated from rpc api.v1.user.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lookup a user by a unique identifier - email, username, phone number etc.
         *
         * @generated from rpc api.v1.user.Service.GetByIdentifier
         */
        getByIdentifier: {
            name: "GetByIdentifier",
            I: service_pb_js_1.GetByIdentifierRequest,
            O: service_pb_js_1.GetByIdentifierResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List users.
         *
         * @generated from rpc api.v1.user.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a specific user.
         *
         * @generated from rpc api.v1.user.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 7061:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/user/service.proto (package api.v1.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListResponse = exports.ListRequest = exports.DeleteResponse = exports.DeleteRequest = exports.ListSessionsResponse = exports.ListSessionsRequest = exports.GetResponse = exports.GetRequest = exports.UpdateResponse = exports.UpdateRequest = exports.CreateResponse = exports.CreateRequest = exports.GetByIdentifierResponse = exports.GetByIdentifierRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const user_pb_js_1 = __nccwpck_require__(3008);
const user_pb_js_2 = __nccwpck_require__(8554);
const common_pb_js_1 = __nccwpck_require__(1101);
/**
 * Request to get a user by an identifier.
 *
 * @generated from message api.v1.user.GetByIdentifierRequest
 */
class GetByIdentifierRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByIdentifierRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByIdentifierRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByIdentifierRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByIdentifierRequest, a, b);
    }
}
exports.GetByIdentifierRequest = GetByIdentifierRequest;
GetByIdentifierRequest.runtime = protobuf_1.proto3;
GetByIdentifierRequest.typeName = "api.v1.user.GetByIdentifierRequest";
GetByIdentifierRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: user_pb_js_1.UserIdentifier },
]);
/**
 * Response to get a user by an identifier.
 *
 * @generated from message api.v1.user.GetByIdentifierResponse
 */
class GetByIdentifierResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByIdentifierResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByIdentifierResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByIdentifierResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByIdentifierResponse, a, b);
    }
}
exports.GetByIdentifierResponse = GetByIdentifierResponse;
GetByIdentifierResponse.runtime = protobuf_1.proto3;
GetByIdentifierResponse.typeName = "api.v1.user.GetByIdentifierResponse";
GetByIdentifierResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: user_pb_js_2.User },
]);
/**
 * The request to create a user.
 *
 * @generated from message api.v1.user.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Initial fields to set.
         *
         * @generated from field: repeated api.v1.user.Update initializers = 1;
         */
        this.initializers = [];
        /**
         * If set, the user will be added to this group upon creation.
         *
         * @generated from field: string initial_group_id = 2;
         */
        this.initialGroupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.user.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "initializers", kind: "message", T: user_pb_js_2.Update, repeated: true },
    { no: 2, name: "initial_group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of creating a user.
 *
 * @generated from message api.v1.user.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.user.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: user_pb_js_2.User },
]);
/**
 * The request of updating a user.
 *
 * @generated from message api.v1.user.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user identifier of the user to update.
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        /**
         * The updates to apply to the user.
         *
         * @generated from field: repeated api.v1.user.Update updates = 2;
         */
        this.updates = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.user.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: user_pb_js_2.Update, repeated: true },
]);
/**
 * Empty update response.
 *
 * @generated from message api.v1.user.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.user.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Get request for retrieving a user.
 *
 * @generated from message api.v1.user.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user identifier to fetch the user.
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.user.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of getting a user.
 *
 * @generated from message api.v1.user.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.user.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: user_pb_js_2.User },
]);
/**
 * Request to list a users login sessions.
 *
 * @generated from message api.v1.user.ListSessionsRequest
 */
class ListSessionsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user to retrieve sessions for.
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListSessionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListSessionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListSessionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListSessionsRequest, a, b);
    }
}
exports.ListSessionsRequest = ListSessionsRequest;
ListSessionsRequest.runtime = protobuf_1.proto3;
ListSessionsRequest.typeName = "api.v1.user.ListSessionsRequest";
ListSessionsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * The response of listing a users login sessions.
 *
 * @generated from message api.v1.user.ListSessionsResponse
 */
class ListSessionsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The retrieved sessions.
         *
         * @generated from field: repeated api.v1.user.SessionEntry sessions = 1;
         */
        this.sessions = [];
        /**
         * The total number of sessions.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListSessionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListSessionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListSessionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListSessionsResponse, a, b);
    }
}
exports.ListSessionsResponse = ListSessionsResponse;
ListSessionsResponse.runtime = protobuf_1.proto3;
ListSessionsResponse.typeName = "api.v1.user.ListSessionsResponse";
ListSessionsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "sessions", kind: "message", T: user_pb_js_2.SessionEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Request for deleting a user.
 *
 * @generated from message api.v1.user.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user identifier to fetch the user.
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.user.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Empty response for deleting a user.
 *
 * @generated from message api.v1.user.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.user.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Request for listing users.
 *
 * @generated from message api.v1.user.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Search string.
         *
         * @generated from field: string search = 2;
         */
        this.search = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.user.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 2, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Response for listing users.
 *
 * @generated from message api.v1.user.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The users returned.
         *
         * @generated from field: repeated model.UserEntry users = 1;
         */
        this.users = [];
        /**
         * total number of users.
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.user.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: user_pb_js_1.UserEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);


/***/ }),

/***/ 3210:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/user/settings/service.proto (package api.v1.user.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(185);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The Settings service provides methods for getting and updating the users settings.
 *
 * @generated from service api.v1.user.settings.Service
 */
exports.t = {
    typeName: "api.v1.user.settings.Service",
    methods: {
        /**
         * Gets the users settings for the current project.
         *
         * @generated from rpc api.v1.user.settings.Service.GetSettings
         */
        getSettings: {
            name: "GetSettings",
            I: service_pb_js_1.GetSettingsRequest,
            O: service_pb_js_1.GetSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Sets the users settings for the current project.
         *
         * @generated from rpc api.v1.user.settings.Service.UpdateSettings
         */
        updateSettings: {
            name: "UpdateSettings",
            I: service_pb_js_1.UpdateSettingsRequest,
            O: service_pb_js_1.UpdateSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 185:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/user/settings/service.proto (package api.v1.user.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateSettingsResponse = exports.UpdateSettingsRequest = exports.GetSettingsResponse = exports.GetSettingsRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const settings_pb_js_1 = __nccwpck_require__(466);
/**
 * Request for getting users settings for the Rig project.
 *
 * @generated from message api.v1.user.settings.GetSettingsRequest
 */
class GetSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsRequest, a, b);
    }
}
exports.GetSettingsRequest = GetSettingsRequest;
GetSettingsRequest.runtime = protobuf_1.proto3;
GetSettingsRequest.typeName = "api.v1.user.settings.GetSettingsRequest";
GetSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Response for getting users settings for the Rig project.
 *
 * @generated from message api.v1.user.settings.GetSettingsResponse
 */
class GetSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsResponse, a, b);
    }
}
exports.GetSettingsResponse = GetSettingsResponse;
GetSettingsResponse.runtime = protobuf_1.proto3;
GetSettingsResponse.typeName = "api.v1.user.settings.GetSettingsResponse";
GetSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: settings_pb_js_1.Settings },
]);
/**
 * Request for updating users settings for the Rig project.
 *
 * @generated from message api.v1.user.settings.UpdateSettingsRequest
 */
class UpdateSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The updates to apply to the users settings.
         *
         * @generated from field: repeated api.v1.user.settings.Update settings = 1;
         */
        this.settings = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsRequest, a, b);
    }
}
exports.UpdateSettingsRequest = UpdateSettingsRequest;
UpdateSettingsRequest.runtime = protobuf_1.proto3;
UpdateSettingsRequest.typeName = "api.v1.user.settings.UpdateSettingsRequest";
UpdateSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: settings_pb_js_1.Update, repeated: true },
]);
/**
 * Empty response for updating users settings for the Rig project.
 *
 * @generated from message api.v1.user.settings.UpdateSettingsResponse
 */
class UpdateSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsResponse, a, b);
    }
}
exports.UpdateSettingsResponse = UpdateSettingsResponse;
UpdateSettingsResponse.runtime = protobuf_1.proto3;
UpdateSettingsResponse.typeName = "api.v1.user.settings.UpdateSettingsResponse";
UpdateSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 466:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/user/settings/settings.proto (package api.v1.user.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Templates = exports.Template = exports.TextProviderEntry = exports.TextProvider = exports.EmailProviderEntry = exports.EmailProvider = exports.TextInstance = exports.EmailInstance = exports.SmtpInstance = exports.TwilioInstance = exports.MailjetInstance = exports.DefaultInstance = exports.Settings = exports.AuthMethod = exports.RegisterMethod_Signup = exports.RegisterMethod_System = exports.RegisterMethod = exports.Update_LoginMechanisms = exports.Update = exports.TemplateType = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const common_pb_js_1 = __nccwpck_require__(1101);
const auth_pb_js_1 = __nccwpck_require__(7387);
const credentials_pb_js_1 = __nccwpck_require__(9705);
/**
 * The different template types.
 *
 * @generated from enum api.v1.user.settings.TemplateType
 */
var TemplateType;
(function (TemplateType) {
    /**
     * Unspecified template type.
     *
     * @generated from enum value: TEMPLATE_TYPE_UNSPECIFIED = 0;
     */
    TemplateType[TemplateType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The welcome email template.
     *
     * @generated from enum value: TEMPLATE_TYPE_WELCOME_EMAIL = 1;
     */
    TemplateType[TemplateType["WELCOME_EMAIL"] = 1] = "WELCOME_EMAIL";
    /**
     * The email verification template.
     *
     * @generated from enum value: TEMPLATE_TYPE_EMAIL_VERIFICATION = 2;
     */
    TemplateType[TemplateType["EMAIL_VERIFICATION"] = 2] = "EMAIL_VERIFICATION";
    /**
     * The reset password email template.
     *
     * @generated from enum value: TEMPLATE_TYPE_EMAIL_RESET_PASSWORD = 3;
     */
    TemplateType[TemplateType["EMAIL_RESET_PASSWORD"] = 3] = "EMAIL_RESET_PASSWORD";
    /**
     * Deprecated: Text is not supported - The welcome text template.
     *
     * @generated from enum value: TEMPLATE_TYPE_WELCOME_TEXT = 4;
     */
    TemplateType[TemplateType["WELCOME_TEXT"] = 4] = "WELCOME_TEXT";
    /**
     * Deprecated: Text is not supported - The text verification template.
     *
     * @generated from enum value: TEMPLATE_TYPE_TEXT_VERIFICATION = 5;
     */
    TemplateType[TemplateType["TEXT_VERIFICATION"] = 5] = "TEXT_VERIFICATION";
    /**
     * Deprecated: Text is not supported - The reset password text template.
     *
     * @generated from enum value: TEMPLATE_TYPE_TEXT_RESET_PASSWORD = 6;
     */
    TemplateType[TemplateType["TEXT_RESET_PASSWORD"] = 6] = "TEXT_RESET_PASSWORD";
})(TemplateType || (exports.TemplateType = TemplateType = {}));
// Retrieve enum metadata with: proto3.getEnumType(TemplateType)
protobuf_1.proto3.util.setEnumType(TemplateType, "api.v1.user.settings.TemplateType", [
    { no: 0, name: "TEMPLATE_TYPE_UNSPECIFIED" },
    { no: 1, name: "TEMPLATE_TYPE_WELCOME_EMAIL" },
    { no: 2, name: "TEMPLATE_TYPE_EMAIL_VERIFICATION" },
    { no: 3, name: "TEMPLATE_TYPE_EMAIL_RESET_PASSWORD" },
    { no: 4, name: "TEMPLATE_TYPE_WELCOME_TEXT" },
    { no: 5, name: "TEMPLATE_TYPE_TEXT_VERIFICATION" },
    { no: 6, name: "TEMPLATE_TYPE_TEXT_RESET_PASSWORD" },
]);
/**
 * Update message for updating users settings.
 *
 * @generated from message api.v1.user.settings.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * A oneof field for the different settings fields.
         *
         * @generated from oneof api.v1.user.settings.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.user.settings.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 2, name: "is_verified_email_required", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 3, name: "is_verified_phone_required", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 4, name: "access_token_ttl", kind: "message", T: protobuf_1.Duration, oneof: "field" },
    { no: 5, name: "refresh_token_ttl", kind: "message", T: protobuf_1.Duration, oneof: "field" },
    { no: 6, name: "verification_code_ttl", kind: "message", T: protobuf_1.Duration, oneof: "field" },
    { no: 7, name: "password_hashing", kind: "message", T: common_pb_js_1.HashingConfig, oneof: "field" },
    { no: 8, name: "login_mechanisms", kind: "message", T: Update_LoginMechanisms, oneof: "field" },
    { no: 9, name: "email_provider", kind: "message", T: EmailProvider, oneof: "field" },
    { no: 10, name: "text_provider", kind: "message", T: TextProvider, oneof: "field" },
    { no: 11, name: "template", kind: "message", T: Template, oneof: "field" },
]);
/**
 * The allowed login mechanisms
 *
 * @generated from message api.v1.user.settings.Update.LoginMechanisms
 */
class Update_LoginMechanisms extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated model.LoginType login_mechanisms = 1;
         */
        this.loginMechanisms = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update_LoginMechanisms().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update_LoginMechanisms().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update_LoginMechanisms().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update_LoginMechanisms, a, b);
    }
}
exports.Update_LoginMechanisms = Update_LoginMechanisms;
Update_LoginMechanisms.runtime = protobuf_1.proto3;
Update_LoginMechanisms.typeName = "api.v1.user.settings.Update.LoginMechanisms";
Update_LoginMechanisms.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_mechanisms", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), repeated: true },
]);
/**
 * Message that tells how the user was registered / created.
 *
 * @generated from message api.v1.user.settings.RegisterMethod
 */
class RegisterMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The method used to register a user.
         *
         * @generated from oneof api.v1.user.settings.RegisterMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod, a, b);
    }
}
exports.RegisterMethod = RegisterMethod;
RegisterMethod.runtime = protobuf_1.proto3;
RegisterMethod.typeName = "api.v1.user.settings.RegisterMethod";
RegisterMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "message", T: RegisterMethod_System, oneof: "method" },
    { no: 2, name: "signup", kind: "message", T: RegisterMethod_Signup, oneof: "method" },
]);
/**
 * The user was created by the system.
 *
 * @generated from message api.v1.user.settings.RegisterMethod.System
 */
class RegisterMethod_System extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_System().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_System().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_System().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_System, a, b);
    }
}
exports.RegisterMethod_System = RegisterMethod_System;
RegisterMethod_System.runtime = protobuf_1.proto3;
RegisterMethod_System.typeName = "api.v1.user.settings.RegisterMethod.System";
RegisterMethod_System.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The user was self-registered with a login-type.
 *
 * @generated from message api.v1.user.settings.RegisterMethod.Signup
 */
class RegisterMethod_Signup extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The login type used to register.
         *
         * @generated from field: model.LoginType login_type = 1;
         */
        this.loginType = auth_pb_js_1.LoginType.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_Signup().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_Signup().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_Signup().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_Signup, a, b);
    }
}
exports.RegisterMethod_Signup = RegisterMethod_Signup;
RegisterMethod_Signup.runtime = protobuf_1.proto3;
RegisterMethod_Signup.typeName = "api.v1.user.settings.RegisterMethod.Signup";
RegisterMethod_Signup.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType) },
]);
/**
 * Message that tells how the user was authenticated.
 *
 * @generated from message api.v1.user.settings.AuthMethod
 */
class AuthMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.settings.AuthMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AuthMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AuthMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AuthMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AuthMethod, a, b);
    }
}
exports.AuthMethod = AuthMethod;
AuthMethod.runtime = protobuf_1.proto3;
AuthMethod.typeName = "api.v1.user.settings.AuthMethod";
AuthMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), oneof: "method" },
]);
/**
 * The users settings configuration. Settings of everything that has to do with users.
 *
 * @generated from message api.v1.user.settings.Settings
 */
class Settings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, users can self register.
         *
         * @generated from field: bool allow_register = 1;
         */
        this.allowRegister = false;
        /**
         * If true, users must be verified via email to login.
         *
         * @generated from field: bool is_verified_email_required = 2;
         */
        this.isVerifiedEmailRequired = false;
        /**
         * Deprecated: Text is not supported - If true, users must be verified via phone to login.
         *
         * @generated from field: bool is_verified_phone_required = 3;
         */
        this.isVerifiedPhoneRequired = false;
        /**
         * The allowed login mechanisms.
         *
         * @generated from field: repeated model.LoginType login_mechanisms = 8;
         */
        this.loginMechanisms = [];
        /**
         * If true, send a welcome email to new users.
         *
         * @generated from field: bool send_welcome_mail = 10;
         */
        this.sendWelcomeMail = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Settings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Settings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Settings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Settings, a, b);
    }
}
exports.Settings = Settings;
Settings.runtime = protobuf_1.proto3;
Settings.typeName = "api.v1.user.settings.Settings";
Settings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_verified_email_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_verified_phone_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "access_token_ttl", kind: "message", T: protobuf_1.Duration },
    { no: 5, name: "refresh_token_ttl", kind: "message", T: protobuf_1.Duration },
    { no: 6, name: "verification_code_ttl", kind: "message", T: protobuf_1.Duration },
    { no: 7, name: "password_hashing", kind: "message", T: common_pb_js_1.HashingConfig },
    { no: 8, name: "login_mechanisms", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), repeated: true },
    { no: 10, name: "send_welcome_mail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "email_provider", kind: "message", T: EmailProviderEntry },
    { no: 12, name: "text_provider", kind: "message", T: TextProviderEntry },
    { no: 13, name: "templates", kind: "message", T: Templates },
]);
/**
 * Default email provider instance.
 *
 * @generated from message api.v1.user.settings.DefaultInstance
 */
class DefaultInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DefaultInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DefaultInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DefaultInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DefaultInstance, a, b);
    }
}
exports.DefaultInstance = DefaultInstance;
DefaultInstance.runtime = protobuf_1.proto3;
DefaultInstance.typeName = "api.v1.user.settings.DefaultInstance";
DefaultInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Mailjet email rpvoider instance.
 *
 * @generated from message api.v1.user.settings.MailjetInstance
 */
class MailjetInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MailjetInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MailjetInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MailjetInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MailjetInstance, a, b);
    }
}
exports.MailjetInstance = MailjetInstance;
MailjetInstance.runtime = protobuf_1.proto3;
MailjetInstance.typeName = "api.v1.user.settings.MailjetInstance";
MailjetInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Deprecated: Text is not supported - Default text provider instance.
 *
 * @generated from message api.v1.user.settings.TwilioInstance
 */
class TwilioInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TwilioInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TwilioInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TwilioInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TwilioInstance, a, b);
    }
}
exports.TwilioInstance = TwilioInstance;
TwilioInstance.runtime = protobuf_1.proto3;
TwilioInstance.typeName = "api.v1.user.settings.TwilioInstance";
TwilioInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * SMTP email provider instance.
 *
 * @generated from message api.v1.user.settings.SmtpInstance
 */
class SmtpInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Host of the smtp server.
         *
         * @generated from field: string host = 1;
         */
        this.host = "";
        /**
         * Port of the smtp server.
         *
         * @generated from field: int64 port = 2;
         */
        this.port = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SmtpInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SmtpInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SmtpInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SmtpInstance, a, b);
    }
}
exports.SmtpInstance = SmtpInstance;
SmtpInstance.runtime = protobuf_1.proto3;
SmtpInstance.typeName = "api.v1.user.settings.SmtpInstance";
SmtpInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * Type of email instance in a provider.
 *
 * @generated from message api.v1.user.settings.EmailInstance
 */
class EmailInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.settings.EmailInstance.instance
         */
        this.instance = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmailInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmailInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmailInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EmailInstance, a, b);
    }
}
exports.EmailInstance = EmailInstance;
EmailInstance.runtime = protobuf_1.proto3;
EmailInstance.typeName = "api.v1.user.settings.EmailInstance";
EmailInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "message", T: DefaultInstance, oneof: "instance" },
    { no: 2, name: "mailjet", kind: "message", T: MailjetInstance, oneof: "instance" },
    { no: 3, name: "smtp", kind: "message", T: SmtpInstance, oneof: "instance" },
]);
/**
 * Deprecated: Text is not supported - Type of text instance in a provider.
 *
 * @generated from message api.v1.user.settings.TextInstance
 */
class TextInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.settings.TextInstance.instance
         */
        this.instance = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextInstance, a, b);
    }
}
exports.TextInstance = TextInstance;
TextInstance.runtime = protobuf_1.proto3;
TextInstance.typeName = "api.v1.user.settings.TextInstance";
TextInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "message", T: DefaultInstance, oneof: "instance" },
    { no: 2, name: "twilio", kind: "message", T: TwilioInstance, oneof: "instance" },
]);
/**
 * The email provider.
 *
 * @generated from message api.v1.user.settings.EmailProvider
 */
class EmailProvider extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The email-address that the provider sends emails from.
         *
         * @generated from field: string from = 1;
         */
        this.from = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmailProvider().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmailProvider().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmailProvider().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EmailProvider, a, b);
    }
}
exports.EmailProvider = EmailProvider;
EmailProvider.runtime = protobuf_1.proto3;
EmailProvider.typeName = "api.v1.user.settings.EmailProvider";
EmailProvider.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: credentials_pb_js_1.ProviderCredentials },
    { no: 3, name: "instance", kind: "message", T: EmailInstance },
]);
/**
 * an entry model for the email provider.
 *
 * @generated from message api.v1.user.settings.EmailProviderEntry
 */
class EmailProviderEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The email-address that the provider sends emails from.
         *
         * @generated from field: string from = 1;
         */
        this.from = "";
        /**
         * The client id for the provider.
         *
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * The secret id for the provider.
         *
         * @generated from field: string secret_id = 3;
         */
        this.secretId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmailProviderEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmailProviderEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmailProviderEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EmailProviderEntry, a, b);
    }
}
exports.EmailProviderEntry = EmailProviderEntry;
EmailProviderEntry.runtime = protobuf_1.proto3;
EmailProviderEntry.typeName = "api.v1.user.settings.EmailProviderEntry";
EmailProviderEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance", kind: "message", T: EmailInstance },
]);
/**
 * Deprecated: Text is not supported - The text provider.
 *
 * @generated from message api.v1.user.settings.TextProvider
 */
class TextProvider extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The phone number that the provider sends texts from.
         *
         * @generated from field: string from = 1;
         */
        this.from = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextProvider().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextProvider().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextProvider().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextProvider, a, b);
    }
}
exports.TextProvider = TextProvider;
TextProvider.runtime = protobuf_1.proto3;
TextProvider.typeName = "api.v1.user.settings.TextProvider";
TextProvider.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: credentials_pb_js_1.ProviderCredentials },
    { no: 3, name: "instance", kind: "message", T: TextInstance },
]);
/**
 * Deprecated: Text is not supported - An entry model for the text provider.
 *
 * @generated from message api.v1.user.settings.TextProviderEntry
 */
class TextProviderEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The phone number that the provider sends texts from.
         *
         * @generated from field: string from = 1;
         */
        this.from = "";
        /**
         * The client id for the provider.
         *
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * The secret id for the provider.
         *
         * @generated from field: string secret_id = 3;
         */
        this.secretId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextProviderEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextProviderEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextProviderEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextProviderEntry, a, b);
    }
}
exports.TextProviderEntry = TextProviderEntry;
TextProviderEntry.runtime = protobuf_1.proto3;
TextProviderEntry.typeName = "api.v1.user.settings.TextProviderEntry";
TextProviderEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance", kind: "message", T: TextInstance },
]);
/**
 * A generic template model for sending emails and texts.
 *
 * @generated from message api.v1.user.settings.Template
 */
class Template extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The body of the template.
         *
         * @generated from field: string body = 1;
         */
        this.body = "";
        /**
         * The subject of the template.
         *
         * @generated from field: string subject = 2;
         */
        this.subject = "";
        /**
         * The type of the template.
         *
         * @generated from field: api.v1.user.settings.TemplateType type = 3;
         */
        this.type = TemplateType.UNSPECIFIED;
        /**
         * The format of the template.
         *
         * @generated from field: repeated string format = 4;
         */
        this.format = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Template().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Template().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Template().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Template, a, b);
    }
}
exports.Template = Template;
Template.runtime = protobuf_1.proto3;
Template.typeName = "api.v1.user.settings.Template";
Template.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(TemplateType) },
    { no: 4, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message api.v1.user.settings.Templates
 */
class Templates extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Templates().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Templates().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Templates().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Templates, a, b);
    }
}
exports.Templates = Templates;
Templates.runtime = protobuf_1.proto3;
Templates.typeName = "api.v1.user.settings.Templates";
Templates.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "welcome_email", kind: "message", T: Template },
    { no: 2, name: "welcome_text", kind: "message", T: Template },
    { no: 3, name: "reset_password_email", kind: "message", T: Template },
    { no: 4, name: "reset_password_text", kind: "message", T: Template },
    { no: 5, name: "verify_email", kind: "message", T: Template },
    { no: 6, name: "verify_phone_number", kind: "message", T: Template },
]);


/***/ }),

/***/ 8554:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/user/user.proto (package api.v1.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Session = exports.SessionEntry = exports.AuthMethod = exports.Update_ResetSessions = exports.Update = exports.User = exports.Profile = exports.VerificationCode = exports.VerificationType = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const common_pb_js_1 = __nccwpck_require__(1101);
const user_pb_js_1 = __nccwpck_require__(3008);
const metadata_pb_js_1 = __nccwpck_require__(4951);
const auth_pb_js_1 = __nccwpck_require__(7387);
/**
 * Type of verification code
 *
 * @generated from enum api.v1.user.VerificationType
 */
var VerificationType;
(function (VerificationType) {
    /**
     * Default value
     *
     * @generated from enum value: VERIFICATION_TYPE_UNSPECIFIED = 0;
     */
    VerificationType[VerificationType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Email verification code.
     *
     * @generated from enum value: VERIFICATION_TYPE_EMAIL = 1;
     */
    VerificationType[VerificationType["EMAIL"] = 1] = "EMAIL";
    /**
     * Deprecated: text is not supported - text verification code.
     *
     * @generated from enum value: VERIFICATION_TYPE_TEXT = 2;
     */
    VerificationType[VerificationType["TEXT"] = 2] = "TEXT";
    /**
     * reset password verification code.
     *
     * @generated from enum value: VERIFICATION_TYPE_RESET_PASSWORD = 3;
     */
    VerificationType[VerificationType["RESET_PASSWORD"] = 3] = "RESET_PASSWORD";
})(VerificationType || (exports.VerificationType = VerificationType = {}));
// Retrieve enum metadata with: proto3.getEnumType(VerificationType)
protobuf_1.proto3.util.setEnumType(VerificationType, "api.v1.user.VerificationType", [
    { no: 0, name: "VERIFICATION_TYPE_UNSPECIFIED" },
    { no: 1, name: "VERIFICATION_TYPE_EMAIL" },
    { no: 2, name: "VERIFICATION_TYPE_TEXT" },
    { no: 3, name: "VERIFICATION_TYPE_RESET_PASSWORD" },
]);
/**
 * short-lived verification code.
 *
 * @generated from message api.v1.user.VerificationCode
 */
class VerificationCode extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Number of attempts to verify the code.
         *
         * @generated from field: int32 attempts = 4;
         */
        this.attempts = 0;
        /**
         * Type of verification code.
         *
         * @generated from field: api.v1.user.VerificationType type = 6;
         */
        this.type = VerificationType.UNSPECIFIED;
        /**
         * User ID of the user who the code was sent to.
         *
         * @generated from field: string user_id = 7;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerificationCode().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerificationCode().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerificationCode().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerificationCode, a, b);
    }
}
exports.VerificationCode = VerificationCode;
VerificationCode.runtime = protobuf_1.proto3;
VerificationCode.typeName = "api.v1.user.VerificationCode";
VerificationCode.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "message", T: common_pb_js_1.HashingInstance },
    { no: 2, name: "sent_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "expires_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "attempts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "last_attempt", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(VerificationType) },
    { no: 7, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * User profile
 *
 * @generated from message api.v1.user.Profile
 */
class Profile extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * First name of the user.
         *
         * @generated from field: string first_name = 1;
         */
        this.firstName = "";
        /**
         * Last name of the user.
         *
         * @generated from field: string last_name = 2;
         */
        this.lastName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Profile().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Profile().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Profile().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Profile, a, b);
    }
}
exports.Profile = Profile;
Profile.runtime = protobuf_1.proto3;
Profile.typeName = "api.v1.user.Profile";
Profile.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The user model.
 *
 * @generated from message api.v1.user.User
 */
class User extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * User ID of the user.
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        /**
         * Deprecated: text is not supported - Whether the user's phone number is verified.
         *
         * @generated from field: bool is_phone_verified = 6;
         */
        this.isPhoneVerified = false;
        /**
         * Whether the user's email is verified.
         *
         * @generated from field: bool is_email_verified = 7;
         */
        this.isEmailVerified = false;
        /**
         * Metadata of the user.
         *
         * @generated from field: map<string, bytes> metadata = 9;
         */
        this.metadata = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new User().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new User().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new User().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(User, a, b);
    }
}
exports.User = User;
User.runtime = protobuf_1.proto3;
User.typeName = "api.v1.user.User";
User.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_info", kind: "message", T: user_pb_js_1.UserInfo },
    { no: 3, name: "profile", kind: "message", T: Profile },
    { no: 4, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "register_info", kind: "message", T: user_pb_js_1.RegisterInfo },
    { no: 6, name: "is_phone_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "is_email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "new_sessions_since", kind: "message", T: protobuf_1.Timestamp },
    { no: 9, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 12 /* ScalarType.BYTES */ } },
]);
/**
 * Update message to update a user.
 *
 * @generated from message api.v1.user.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * field of the user to update./
         *
         * @generated from oneof api.v1.user.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.user.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 5, name: "profile", kind: "message", T: Profile, oneof: "field" },
    { no: 6, name: "is_email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 7, name: "is_phone_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 8, name: "reset_sessions", kind: "message", T: Update_ResetSessions, oneof: "field" },
    { no: 9, name: "set_metadata", kind: "message", T: metadata_pb_js_1.Metadata, oneof: "field" },
    { no: 10, name: "delete_metadata_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 12, name: "hashed_password", kind: "message", T: common_pb_js_1.HashingInstance, oneof: "field" },
]);
/**
 * if sessions are reset, all sessions will be invalidated and a new session will be created.
 *
 * @generated from message api.v1.user.Update.ResetSessions
 */
class Update_ResetSessions extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update_ResetSessions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update_ResetSessions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update_ResetSessions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update_ResetSessions, a, b);
    }
}
exports.Update_ResetSessions = Update_ResetSessions;
Update_ResetSessions.runtime = protobuf_1.proto3;
Update_ResetSessions.typeName = "api.v1.user.Update.ResetSessions";
Update_ResetSessions.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * how a user is authenticated.
 *
 * @generated from message api.v1.user.AuthMethod
 */
class AuthMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.AuthMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AuthMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AuthMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AuthMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AuthMethod, a, b);
    }
}
exports.AuthMethod = AuthMethod;
AuthMethod.runtime = protobuf_1.proto3;
AuthMethod.typeName = "api.v1.user.AuthMethod";
AuthMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), oneof: "method" },
]);
/**
 * Session entry
 *
 * @generated from message api.v1.user.SessionEntry
 */
class SessionEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Session ID of the session.
         *
         * @generated from field: string session_id = 1;
         */
        this.sessionId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SessionEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SessionEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SessionEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SessionEntry, a, b);
    }
}
exports.SessionEntry = SessionEntry;
SessionEntry.runtime = protobuf_1.proto3;
SessionEntry.typeName = "api.v1.user.SessionEntry";
SessionEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session", kind: "message", T: Session },
]);
/**
 * A user's sessions.
 *
 * @generated from message api.v1.user.Session
 */
class Session extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * if the session is invalidated
         *
         * @generated from field: bool is_invalidated = 2;
         */
        this.isInvalidated = false;
        /**
         * Country of the session.
         *
         * @generated from field: string country = 7;
         */
        this.country = "";
        /**
         * Postal code of the session.
         *
         * @generated from field: int32 postal_code = 8;
         */
        this.postalCode = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Session().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Session().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Session().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Session, a, b);
    }
}
exports.Session = Session;
Session.runtime = protobuf_1.proto3;
Session.typeName = "api.v1.user.Session";
Session.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "auth_method", kind: "message", T: AuthMethod },
    { no: 2, name: "is_invalidated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "invalidated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "expires_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "renewed_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "postal_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);


/***/ }),

/***/ 7387:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file model/auth.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoginType = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The LoginType enum defines the type of login.
 *
 * @generated from enum model.LoginType
 */
var LoginType;
(function (LoginType) {
    /**
     * Default value.
     *
     * @generated from enum value: LOGIN_TYPE_UNSPECIFIED = 0;
     */
    LoginType[LoginType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Email and password login.
     *
     * @generated from enum value: LOGIN_TYPE_EMAIL_PASSWORD = 1;
     */
    LoginType[LoginType["EMAIL_PASSWORD"] = 1] = "EMAIL_PASSWORD";
    /**
     * deprecated: text is not supported - Phone number and password login.
     *
     * @generated from enum value: LOGIN_TYPE_PHONE_PASSWORD = 2;
     */
    LoginType[LoginType["PHONE_PASSWORD"] = 2] = "PHONE_PASSWORD";
    /**
     * Username and password login.
     *
     * @generated from enum value: LOGIN_TYPE_USERNAME_PASSWORD = 3;
     */
    LoginType[LoginType["USERNAME_PASSWORD"] = 3] = "USERNAME_PASSWORD";
})(LoginType || (exports.LoginType = LoginType = {}));
// Retrieve enum metadata with: proto3.getEnumType(LoginType)
protobuf_1.proto3.util.setEnumType(LoginType, "model.LoginType", [
    { no: 0, name: "LOGIN_TYPE_UNSPECIFIED" },
    { no: 1, name: "LOGIN_TYPE_EMAIL_PASSWORD" },
    { no: 2, name: "LOGIN_TYPE_PHONE_PASSWORD" },
    { no: 3, name: "LOGIN_TYPE_USERNAME_PASSWORD" },
]);


/***/ }),

/***/ 4810:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file model/author.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Author = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Author of a change.
 *
 * @generated from message model.Author
 */
class Author extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Cached identifier of the author, e.g. email or username at the time of
         * change.
         *
         * @generated from field: string identifier = 1;
         */
        this.identifier = "";
        /**
         * Cached pretty-printed name of the author at the time of
         * change.
         *
         * @generated from field: string printable_name = 2;
         */
        this.printableName = "";
        /**
         * User ID of the author. This should be used to get current information
         * about the author.
         *
         * @generated from oneof model.Author.account
         */
        this.account = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Author().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Author().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Author().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Author, a, b);
    }
}
exports.Author = Author;
Author.runtime = protobuf_1.proto3;
Author.typeName = "model.Author";
Author.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "printable_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "account" },
    { no: 4, name: "service_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "account" },
]);


/***/ }),

/***/ 1101:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file model/common.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pagination = exports.HashingInstance = exports.HashingConfig = exports.ScryptHashingInstance = exports.ScryptHashingConfig = exports.BcryptHashingInstance = exports.BcryptHashingConfig = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Bcrypt hashing configuration.
 *
 * @generated from message model.BcryptHashingConfig
 */
class BcryptHashingConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The cost of the hashing algorithm.
         *
         * @generated from field: int32 cost = 1;
         */
        this.cost = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BcryptHashingConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BcryptHashingConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BcryptHashingConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BcryptHashingConfig, a, b);
    }
}
exports.BcryptHashingConfig = BcryptHashingConfig;
BcryptHashingConfig.runtime = protobuf_1.proto3;
BcryptHashingConfig.typeName = "model.BcryptHashingConfig";
BcryptHashingConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "cost", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * Bcrypt hashing instance.
 *
 * @generated from message model.BcryptHashingInstance
 */
class BcryptHashingInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BcryptHashingInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BcryptHashingInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BcryptHashingInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BcryptHashingInstance, a, b);
    }
}
exports.BcryptHashingInstance = BcryptHashingInstance;
BcryptHashingInstance.runtime = protobuf_1.proto3;
BcryptHashingInstance.typeName = "model.BcryptHashingInstance";
BcryptHashingInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * Scrypt hashing configuration.
 *
 * @generated from message model.ScryptHashingConfig
 */
class ScryptHashingConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The key used to sign the salt.
         *
         * @generated from field: string signer_key = 1;
         */
        this.signerKey = "";
        /**
         * The salt separator.
         *
         * @generated from field: string salt_separator = 2;
         */
        this.saltSeparator = "";
        /**
         * The number of rounds in the algorithm.
         *
         * @generated from field: int32 rounds = 3;
         */
        this.rounds = 0;
        /**
         * The memory cost of the algorithm.
         *
         * @generated from field: int32 mem_cost = 4;
         */
        this.memCost = 0;
        /**
         * The parallelization factor of the algorithm.
         *
         * @generated from field: int32 p = 5;
         */
        this.p = 0;
        /**
         * The length of the key.
         *
         * @generated from field: int32 key_len = 6;
         */
        this.keyLen = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScryptHashingConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScryptHashingConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScryptHashingConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScryptHashingConfig, a, b);
    }
}
exports.ScryptHashingConfig = ScryptHashingConfig;
ScryptHashingConfig.runtime = protobuf_1.proto3;
ScryptHashingConfig.typeName = "model.ScryptHashingConfig";
ScryptHashingConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "signer_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "salt_separator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rounds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "mem_cost", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "p", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "key_len", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * Scrypt hashing instance.
 *
 * @generated from message model.ScryptHashingInstance
 */
class ScryptHashingInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The salt used to hash the password.
         *
         * @generated from field: bytes salt = 1;
         */
        this.salt = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScryptHashingInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScryptHashingInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScryptHashingInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScryptHashingInstance, a, b);
    }
}
exports.ScryptHashingInstance = ScryptHashingInstance;
ScryptHashingInstance.runtime = protobuf_1.proto3;
ScryptHashingInstance.typeName = "model.ScryptHashingInstance";
ScryptHashingInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * Hashing configuration.
 *
 * @generated from message model.HashingConfig
 */
class HashingConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof model.HashingConfig.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HashingConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HashingConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HashingConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HashingConfig, a, b);
    }
}
exports.HashingConfig = HashingConfig;
HashingConfig.runtime = protobuf_1.proto3;
HashingConfig.typeName = "model.HashingConfig";
HashingConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bcrypt", kind: "message", T: BcryptHashingConfig, oneof: "method" },
    { no: 2, name: "scrypt", kind: "message", T: ScryptHashingConfig, oneof: "method" },
]);
/**
 * Hashing instance.
 *
 * @generated from message model.HashingInstance
 */
class HashingInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * A hash
         *
         * @generated from field: bytes hash = 2;
         */
        this.hash = new Uint8Array(0);
        /**
         * @generated from oneof model.HashingInstance.instance
         */
        this.instance = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HashingInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HashingInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HashingInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HashingInstance, a, b);
    }
}
exports.HashingInstance = HashingInstance;
HashingInstance.runtime = protobuf_1.proto3;
HashingInstance.typeName = "model.HashingInstance";
HashingInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: HashingConfig },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "bcrypt", kind: "message", T: BcryptHashingInstance, oneof: "instance" },
    { no: 4, name: "scrypt", kind: "message", T: ScryptHashingInstance, oneof: "instance" },
]);
/**
 * Pagination option.
 *
 * @generated from message model.Pagination
 */
class Pagination extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Where to start the pagination.
         *
         * @generated from field: uint32 offset = 1;
         */
        this.offset = 0;
        /**
         * How many items to return.
         *
         * @generated from field: uint32 limit = 2;
         */
        this.limit = 0;
        /**
         * Whether to sort in descending order.
         *
         * @generated from field: bool descending = 3;
         */
        this.descending = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Pagination().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Pagination().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Pagination().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Pagination, a, b);
    }
}
exports.Pagination = Pagination;
Pagination.runtime = protobuf_1.proto3;
Pagination.typeName = "model.Pagination";
Pagination.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "descending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);


/***/ }),

/***/ 9705:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file model/credentials.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProviderCredentials = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Generic credentials model.
 *
 * @generated from message model.ProviderCredentials
 */
class ProviderCredentials extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Public key.
         *
         * @generated from field: string public_key = 1;
         */
        this.publicKey = "";
        /**
         * Private key.
         *
         * @generated from field: string private_key = 2;
         */
        this.privateKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProviderCredentials().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProviderCredentials().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProviderCredentials().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ProviderCredentials, a, b);
    }
}
exports.ProviderCredentials = ProviderCredentials;
ProviderCredentials.runtime = protobuf_1.proto3;
ProviderCredentials.typeName = "model.ProviderCredentials";
ProviderCredentials.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "private_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 4951:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file model/metadata.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Metadata = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * Generic metadata model.
 *
 * @generated from message model.Metadata
 */
class Metadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Key of the metadata.
         *
         * @generated from field: string key = 1;
         */
        this.key = "";
        /**
         * Value of the metadata.
         *
         * @generated from field: bytes value = 2;
         */
        this.value = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Metadata, a, b);
    }
}
exports.Metadata = Metadata;
Metadata.runtime = protobuf_1.proto3;
Metadata.typeName = "model.Metadata";
Metadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);


/***/ }),

/***/ 3008:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file model/user.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RegisterMethod_Signup = exports.RegisterMethod_System = exports.RegisterMethod = exports.RegisterInfo = exports.MemberEntry = exports.ServiceAccountEntry = exports.UserEntry = exports.UserInfo = exports.UserIdentifier = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
const auth_pb_js_1 = __nccwpck_require__(7387);
/**
 * different fields that can identify a user.
 *
 * @generated from message model.UserIdentifier
 */
class UserIdentifier extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof model.UserIdentifier.identifier
         */
        this.identifier = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserIdentifier().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserIdentifier().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserIdentifier().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserIdentifier, a, b);
    }
}
exports.UserIdentifier = UserIdentifier;
UserIdentifier.runtime = protobuf_1.proto3;
UserIdentifier.typeName = "model.UserIdentifier";
UserIdentifier.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
]);
/**
 * Userinfo - placed in models to prevent cyclic imports.
 *
 * @generated from message model.UserInfo
 */
class UserInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * email of the user.
         *
         * @generated from field: string email = 1;
         */
        this.email = "";
        /**
         * username of the user.
         *
         * @generated from field: string username = 2;
         */
        this.username = "";
        /**
         * Deprecated: text is not supported - phone number of the user.
         *
         * @generated from field: string phone_number = 3;
         */
        this.phoneNumber = "";
        /**
         * groups the user belongs to.
         *
         * @generated from field: repeated string group_ids = 6;
         */
        this.groupIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserInfo, a, b);
    }
}
exports.UserInfo = UserInfo;
UserInfo.runtime = protobuf_1.proto3;
UserInfo.typeName = "model.UserInfo";
UserInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * Entry model of a user - placed in models to prevent cyclic imports.
 *
 * @generated from message model.UserEntry
 */
class UserEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * unique id of the user.
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        /**
         * pretty printable name of a user.
         *
         * @generated from field: string printable_name = 2;
         */
        this.printableName = "";
        /**
         * whether the user is verified.
         *
         * @generated from field: bool verified = 4;
         */
        this.verified = false;
        /**
         * groups the user belongs to.
         *
         * @generated from field: repeated string group_ids = 5;
         */
        this.groupIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserEntry, a, b);
    }
}
exports.UserEntry = UserEntry;
UserEntry.runtime = protobuf_1.proto3;
UserEntry.typeName = "model.UserEntry";
UserEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "printable_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "register_info", kind: "message", T: RegisterInfo },
    { no: 4, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * Entry model of a service account - placed in models to prevent cyclic imports.
 *
 * @generated from message model.ServiceAccountEntry
 */
class ServiceAccountEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * unique id of the service account.
         *
         * @generated from field: string service_account_id = 1;
         */
        this.serviceAccountId = "";
        /**
         * name of the service account.
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * client id of the service account.
         *
         * @generated from field: string client_id = 3;
         */
        this.clientId = "";
        /**
         * groups the service account belongs to.
         *
         * @generated from field: repeated string group_ids = 4;
         */
        this.groupIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceAccountEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceAccountEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceAccountEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ServiceAccountEntry, a, b);
    }
}
exports.ServiceAccountEntry = ServiceAccountEntry;
ServiceAccountEntry.runtime = protobuf_1.proto3;
ServiceAccountEntry.typeName = "model.ServiceAccountEntry";
ServiceAccountEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "created_by", kind: "message", T: author_pb_js_1.Author },
]);
/**
 * Entry model of a group member - placed in models to prevent cyclic imports.
 *
 * @generated from message model.MemberEntry
 */
class MemberEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user or service account.
         *
         * @generated from oneof model.MemberEntry.entry
         */
        this.entry = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MemberEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MemberEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MemberEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MemberEntry, a, b);
    }
}
exports.MemberEntry = MemberEntry;
MemberEntry.runtime = protobuf_1.proto3;
MemberEntry.typeName = "model.MemberEntry";
MemberEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: UserEntry, oneof: "entry" },
    { no: 2, name: "service_account", kind: "message", T: ServiceAccountEntry, oneof: "entry" },
    { no: 5, name: "joined_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * Registering information of a user.
 *
 * @generated from message model.RegisterInfo
 */
class RegisterInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Who created the user.
         *
         * @generated from field: string creater_id = 1;
         */
        this.createrId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterInfo, a, b);
    }
}
exports.RegisterInfo = RegisterInfo;
RegisterInfo.runtime = protobuf_1.proto3;
RegisterInfo.typeName = "model.RegisterInfo";
RegisterInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "creater_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "message", T: RegisterMethod },
]);
/**
 * Method used to register a user.
 *
 * @generated from message model.RegisterMethod
 */
class RegisterMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof model.RegisterMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod, a, b);
    }
}
exports.RegisterMethod = RegisterMethod;
RegisterMethod.runtime = protobuf_1.proto3;
RegisterMethod.typeName = "model.RegisterMethod";
RegisterMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "message", T: RegisterMethod_System, oneof: "method" },
    { no: 2, name: "signup", kind: "message", T: RegisterMethod_Signup, oneof: "method" },
]);
/**
 * if the user was created by the system.
 *
 * @generated from message model.RegisterMethod.System
 */
class RegisterMethod_System extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_System().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_System().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_System().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_System, a, b);
    }
}
exports.RegisterMethod_System = RegisterMethod_System;
RegisterMethod_System.runtime = protobuf_1.proto3;
RegisterMethod_System.typeName = "model.RegisterMethod.System";
RegisterMethod_System.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * if the user was created by signing up.
 *
 * @generated from message model.RegisterMethod.Signup
 */
class RegisterMethod_Signup extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The login type used to sign up.
         *
         * @generated from field: model.LoginType login_type = 1;
         */
        this.loginType = auth_pb_js_1.LoginType.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_Signup().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_Signup().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_Signup().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_Signup, a, b);
    }
}
exports.RegisterMethod_Signup = RegisterMethod_Signup;
RegisterMethod_Signup.runtime = protobuf_1.proto3;
RegisterMethod_Signup.typeName = "model.RegisterMethod.Signup";
RegisterMethod_Signup.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType) },
]);


/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 5840:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(8628));

var _v2 = _interopRequireDefault(__nccwpck_require__(6409));

var _v3 = _interopRequireDefault(__nccwpck_require__(5122));

var _v4 = _interopRequireDefault(__nccwpck_require__(9120));

var _nil = _interopRequireDefault(__nccwpck_require__(5332));

var _version = _interopRequireDefault(__nccwpck_require__(1595));

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 4569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 5332:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 2746:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 814:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 5274:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 8950:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 8628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 6409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _md = _interopRequireDefault(__nccwpck_require__(4569));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 5998:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 5122:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 9120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _sha = _interopRequireDefault(__nccwpck_require__(5274));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6900:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(814));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 1595:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 9491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 6113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 2361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 2037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 4404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 3837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 1304:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinaryReader = exports.BinaryWriter = exports.WireType = void 0;
const varint_js_1 = __nccwpck_require__(9119);
const assert_js_1 = __nccwpck_require__(1594);
const proto_int64_js_1 = __nccwpck_require__(6865);
/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */
/**
 * Protobuf binary format wire types.
 *
 * A wire type provides just enough information to find the length of the
 * following value.
 *
 * See https://developers.google.com/protocol-buffers/docs/encoding#structure
 */
var WireType;
(function (WireType) {
    /**
     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum
     */
    WireType[WireType["Varint"] = 0] = "Varint";
    /**
     * Used for fixed64, sfixed64, double.
     * Always 8 bytes with little-endian byte order.
     */
    WireType[WireType["Bit64"] = 1] = "Bit64";
    /**
     * Used for string, bytes, embedded messages, packed repeated fields
     *
     * Only repeated numeric types (types which use the varint, 32-bit,
     * or 64-bit wire types) can be packed. In proto3, such fields are
     * packed by default.
     */
    WireType[WireType["LengthDelimited"] = 2] = "LengthDelimited";
    /**
     * Start of a tag-delimited aggregate, such as a proto2 group, or a message
     * in editions with message_encoding = DELIMITED.
     */
    WireType[WireType["StartGroup"] = 3] = "StartGroup";
    /**
     * End of a tag-delimited aggregate.
     */
    WireType[WireType["EndGroup"] = 4] = "EndGroup";
    /**
     * Used for fixed32, sfixed32, float.
     * Always 4 bytes with little-endian byte order.
     */
    WireType[WireType["Bit32"] = 5] = "Bit32";
})(WireType || (exports.WireType = WireType = {}));
class BinaryWriter {
    constructor(textEncoder) {
        /**
         * Previous fork states.
         */
        this.stack = [];
        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
        this.chunks = [];
        this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer
        let len = 0;
        for (let i = 0; i < this.chunks.length; i++)
            len += this.chunks[i].length;
        let bytes = new Uint8Array(len);
        let offset = 0;
        for (let i = 0; i < this.chunks.length; i++) {
            bytes.set(this.chunks[i], offset);
            offset += this.chunks[i].length;
        }
        this.chunks = [];
        return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
        this.stack.push({ chunks: this.chunks, buf: this.buf });
        this.chunks = [];
        this.buf = [];
        return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
        // get chunk of fork
        let chunk = this.finish();
        // restore previous state
        let prev = this.stack.pop();
        if (!prev)
            throw new Error("invalid state, fork stack empty");
        this.chunks = prev.chunks;
        this.buf = prev.buf;
        // write length of chunk as varint
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
        return this.uint32(((fieldNo << 3) | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
        if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf));
            this.buf = [];
        }
        this.chunks.push(chunk);
        return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
        (0, assert_js_1.assertUInt32)(value);
        // write value as varint 32, inlined for speed
        while (value > 0x7f) {
            this.buf.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        this.buf.push(value);
        return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
        (0, assert_js_1.assertInt32)(value);
        (0, varint_js_1.varint32write)(value, this.buf);
        return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
        this.buf.push(value ? 1 : 0);
        return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
        this.uint32(value.byteLength); // write length of chunk as varint
        return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
        let chunk = this.textEncoder.encode(value);
        this.uint32(chunk.byteLength); // write length of chunk as varint
        return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
        (0, assert_js_1.assertFloat32)(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setFloat32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
        let chunk = new Uint8Array(8);
        new DataView(chunk.buffer).setFloat64(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
        (0, assert_js_1.assertUInt32)(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setUint32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
        (0, assert_js_1.assertInt32)(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setInt32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
        (0, assert_js_1.assertInt32)(value);
        // zigzag encode
        value = ((value << 1) ^ (value >> 31)) >>> 0;
        (0, varint_js_1.varint32write)(value, this.buf);
        return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = proto_int64_js_1.protoInt64.enc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = proto_int64_js_1.protoInt64.uEnc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
        let tc = proto_int64_js_1.protoInt64.enc(value);
        (0, varint_js_1.varint64write)(tc.lo, tc.hi, this.buf);
        return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
        let tc = proto_int64_js_1.protoInt64.enc(value), 
        // zigzag encode
        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;
        (0, varint_js_1.varint64write)(lo, hi, this.buf);
        return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
        let tc = proto_int64_js_1.protoInt64.uEnc(value);
        (0, varint_js_1.varint64write)(tc.lo, tc.hi, this.buf);
        return this;
    }
}
exports.BinaryWriter = BinaryWriter;
class BinaryReader {
    constructor(buf, textDecoder) {
        this.varint64 = varint_js_1.varint64read; // dirty cast for `this`
        /**
         * Read a `uint32` field, an unsigned 32 bit varint.
         */
        this.uint32 = varint_js_1.varint32read; // dirty cast for `this` and access to protected `buf`
        this.buf = buf;
        this.len = buf.length;
        this.pos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
        if (fieldNo <= 0 || wireType < 0 || wireType > 5)
            throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
        return [fieldNo, wireType];
    }
    /**
     * Skip one element on the wire and return the skipped data.
     * Supports WireType.StartGroup since v2.0.0-alpha.23.
     */
    skip(wireType) {
        let start = this.pos;
        switch (wireType) {
            case WireType.Varint:
                while (this.buf[this.pos++] & 0x80) {
                    // ignore
                }
                break;
            // eslint-disable-next-line
            // @ts-ignore TS7029: Fallthrough case in switch
            case WireType.Bit64:
                this.pos += 4;
            // eslint-disable-next-line
            // @ts-ignore TS7029: Fallthrough case in switch
            case WireType.Bit32:
                this.pos += 4;
                break;
            case WireType.LengthDelimited:
                let len = this.uint32();
                this.pos += len;
                break;
            case WireType.StartGroup:
                // From descriptor.proto: Group type is deprecated, not supported in proto3.
                // But we must still be able to parse and treat as unknown.
                let t;
                while ((t = this.tag()[1]) !== WireType.EndGroup) {
                    this.skip(t);
                }
                break;
            default:
                throw new Error("cant skip wire type " + wireType);
        }
        this.assertBounds();
        return this.buf.subarray(start, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
        if (this.pos > this.len)
            throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
        return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
        let zze = this.uint32();
        // decode zigzag
        return (zze >>> 1) ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
        return proto_int64_js_1.protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
        return proto_int64_js_1.protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
        let [lo, hi] = this.varint64();
        // decode zig zag
        let s = -(lo & 1);
        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;
        hi = (hi >>> 1) ^ s;
        return proto_int64_js_1.protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
        let [lo, hi] = this.varint64();
        return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
        return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
        return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
        return proto_int64_js_1.protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
        return proto_int64_js_1.protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
        return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
        return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
        let len = this.uint32(), start = this.pos;
        this.pos += len;
        this.assertBounds();
        return this.buf.subarray(start, start + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
        return this.textDecoder.decode(this.bytes());
    }
}
exports.BinaryReader = BinaryReader;


/***/ }),

/***/ 4193:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codegenInfo = void 0;
const names_js_1 = __nccwpck_require__(9214);
const field_wrapper_js_1 = __nccwpck_require__(7579);
const scalars_js_1 = __nccwpck_require__(5618);
const reify_wkt_js_1 = __nccwpck_require__(514);
const packageName = "@bufbuild/protobuf";
exports.codegenInfo = {
    packageName: "@bufbuild/protobuf",
    localName: names_js_1.localName,
    reifyWkt: reify_wkt_js_1.reifyWkt,
    getUnwrappedFieldType: field_wrapper_js_1.getUnwrappedFieldType,
    scalarDefaultValue: scalars_js_1.scalarDefaultValue,
    safeIdentifier: names_js_1.safeIdentifier,
    safeObjectProperty: names_js_1.safeObjectProperty,
    // prettier-ignore
    symbols: {
        proto2: { typeOnly: false, privateImportPath: "./proto2.js", publicImportPath: packageName },
        proto3: { typeOnly: false, privateImportPath: "./proto3.js", publicImportPath: packageName },
        Message: { typeOnly: false, privateImportPath: "./message.js", publicImportPath: packageName },
        PartialMessage: { typeOnly: true, privateImportPath: "./message.js", publicImportPath: packageName },
        PlainMessage: { typeOnly: true, privateImportPath: "./message.js", publicImportPath: packageName },
        FieldList: { typeOnly: true, privateImportPath: "./field-list.js", publicImportPath: packageName },
        MessageType: { typeOnly: true, privateImportPath: "./message-type.js", publicImportPath: packageName },
        BinaryReadOptions: { typeOnly: true, privateImportPath: "./binary-format.js", publicImportPath: packageName },
        BinaryWriteOptions: { typeOnly: true, privateImportPath: "./binary-format.js", publicImportPath: packageName },
        JsonReadOptions: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        JsonWriteOptions: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        JsonValue: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        JsonObject: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        protoDouble: { typeOnly: false, privateImportPath: "./proto-double.js", publicImportPath: packageName },
        protoInt64: { typeOnly: false, privateImportPath: "./proto-int64.js", publicImportPath: packageName },
        ScalarType: { typeOnly: false, privateImportPath: "./field.js", publicImportPath: packageName },
        LongType: { typeOnly: false, privateImportPath: "./field.js", publicImportPath: packageName },
        MethodKind: { typeOnly: false, privateImportPath: "./service-type.js", publicImportPath: packageName },
        MethodIdempotency: { typeOnly: false, privateImportPath: "./service-type.js", publicImportPath: packageName },
        IMessageTypeRegistry: { typeOnly: true, privateImportPath: "./type-registry.js", publicImportPath: packageName },
    },
    wktSourceFiles: [
        "google/protobuf/compiler/plugin.proto",
        "google/protobuf/any.proto",
        "google/protobuf/api.proto",
        "google/protobuf/descriptor.proto",
        "google/protobuf/duration.proto",
        "google/protobuf/empty.proto",
        "google/protobuf/field_mask.proto",
        "google/protobuf/source_context.proto",
        "google/protobuf/struct.proto",
        "google/protobuf/timestamp.proto",
        "google/protobuf/type.proto",
        "google/protobuf/wrappers.proto",
    ],
};


/***/ }),

/***/ 6619:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDescriptorSet = void 0;
const descriptor_pb_js_1 = __nccwpck_require__(2959);
const assert_js_1 = __nccwpck_require__(1594);
const field_js_1 = __nccwpck_require__(4756);
const service_type_js_1 = __nccwpck_require__(9552);
const names_js_1 = __nccwpck_require__(9214);
const text_format_js_1 = __nccwpck_require__(9572);
const feature_set_js_1 = __nccwpck_require__(2652);
/**
 * Create a DescriptorSet, a convenient interface for working with a set of
 * google.protobuf.FileDescriptorProto.
 *
 * Note that files must be given in topological order, so each file appears
 * before any file that imports it. Protocol buffer compilers always produce
 * files in topological order.
 */
function createDescriptorSet(input, options) {
    var _a;
    const cart = {
        enums: new Map(),
        messages: new Map(),
        services: new Map(),
        extensions: new Map(),
        mapEntries: new Map(),
        resolveFeatures: (0, feature_set_js_1.createFeatureResolver)((_a = options === null || options === void 0 ? void 0 : options.featureSetDefaults) !== null && _a !== void 0 ? _a : feature_set_js_1.featureSetDefaults),
    };
    const fileDescriptors = input instanceof descriptor_pb_js_1.FileDescriptorSet
        ? input.file
        : input instanceof Uint8Array
            ? descriptor_pb_js_1.FileDescriptorSet.fromBinary(input).file
            : input;
    const files = fileDescriptors.map((proto) => newFile(proto, cart));
    return Object.assign({ files }, cart);
}
exports.createDescriptorSet = createDescriptorSet;
/**
 * Create a descriptor for a file.
 */
function newFile(proto, cart) {
    var _a, _b;
    (0, assert_js_1.assert)(proto.name, `invalid FileDescriptorProto: missing name`);
    const file = Object.assign(Object.assign({ kind: "file", proto, deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false }, parseFileSyntax(proto.syntax, proto.edition)), { name: proto.name.replace(/\.proto/, ""), enums: [], messages: [], extensions: [], services: [], toString() {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- we asserted above
            return `file ${this.proto.name}`;
        },
        getSyntaxComments() {
            return findComments(this.proto.sourceCodeInfo, [
                FieldNumber.FileDescriptorProto_Syntax,
            ]);
        },
        getPackageComments() {
            return findComments(this.proto.sourceCodeInfo, [
                FieldNumber.FileDescriptorProto_Package,
            ]);
        },
        getFeatures() {
            var _a;
            return cart.resolveFeatures(this.edition, (_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.features);
        } });
    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard
    for (const enumProto of proto.enumType) {
        addEnum(enumProto, file, undefined, cart);
    }
    for (const messageProto of proto.messageType) {
        addMessage(messageProto, file, undefined, cart);
    }
    for (const serviceProto of proto.service) {
        addService(serviceProto, file, cart);
    }
    addExtensions(file, cart);
    for (const mapEntry of cart.mapEntries.values()) {
        addFields(mapEntry, cart);
    }
    for (const message of file.messages) {
        addFields(message, cart);
        addExtensions(message, cart);
    }
    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard
    return file;
}
/**
 * Create descriptors for extensions, and add them to the message / file,
 * and to our cart.
 * Recurses into nested types.
 */
function addExtensions(desc, cart) {
    switch (desc.kind) {
        case "file":
            for (const proto of desc.proto.extension) {
                const ext = newExtension(proto, desc, undefined, cart);
                desc.extensions.push(ext);
                cart.extensions.set(ext.typeName, ext);
            }
            break;
        case "message":
            for (const proto of desc.proto.extension) {
                const ext = newExtension(proto, desc.file, desc, cart);
                desc.nestedExtensions.push(ext);
                cart.extensions.set(ext.typeName, ext);
            }
            for (const message of desc.nestedMessages) {
                addExtensions(message, cart);
            }
            break;
    }
}
/**
 * Create descriptors for fields and oneof groups, and add them to the message.
 * Recurses into nested types.
 */
function addFields(message, cart) {
    const allOneofs = message.proto.oneofDecl.map((proto) => newOneof(proto, message, cart));
    const oneofsSeen = new Set();
    for (const proto of message.proto.field) {
        const oneof = findOneof(proto, allOneofs);
        const field = newField(proto, message.file, message, oneof, cart);
        message.fields.push(field);
        if (oneof === undefined) {
            message.members.push(field);
        }
        else {
            oneof.fields.push(field);
            if (!oneofsSeen.has(oneof)) {
                oneofsSeen.add(oneof);
                message.members.push(oneof);
            }
        }
    }
    for (const oneof of allOneofs.filter((o) => oneofsSeen.has(o))) {
        message.oneofs.push(oneof);
    }
    for (const child of message.nestedMessages) {
        addFields(child, cart);
    }
}
/**
 * Create a descriptor for an enumeration, and add it our cart and to the
 * parent type, if any.
 */
function addEnum(proto, file, parent, cart) {
    var _a, _b, _c;
    (0, assert_js_1.assert)(proto.name, `invalid EnumDescriptorProto: missing name`);
    const desc = {
        kind: "enum",
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        file,
        parent,
        name: proto.name,
        typeName: makeTypeName(proto, parent, file),
        values: [],
        sharedPrefix: (0, names_js_1.findEnumSharedPrefix)(proto.name, proto.value.map((v) => { var _a; return (_a = v.name) !== null && _a !== void 0 ? _a : ""; })),
        toString() {
            return `enum ${this.typeName}`;
        },
        getComments() {
            const path = this.parent
                ? [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.DescriptorProto_EnumType,
                    this.parent.proto.enumType.indexOf(this.proto),
                ]
                : [
                    FieldNumber.FileDescriptorProto_EnumType,
                    this.file.proto.enumType.indexOf(this.proto),
                ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
        getFeatures() {
            var _a, _b, _c;
            const parentFeatures = (_b = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getFeatures()) !== null && _b !== void 0 ? _b : this.file.getFeatures();
            return cart.resolveFeatures(this.file.edition, parentFeatures, (_c = this.proto.options) === null || _c === void 0 ? void 0 : _c.features);
        },
    };
    cart.enums.set(desc.typeName, desc);
    proto.value.forEach((proto) => {
        var _a, _b;
        (0, assert_js_1.assert)(proto.name, `invalid EnumValueDescriptorProto: missing name`);
        (0, assert_js_1.assert)(proto.number !== undefined, `invalid EnumValueDescriptorProto: missing number`);
        desc.values.push({
            kind: "enum_value",
            proto,
            deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
            parent: desc,
            name: proto.name,
            number: proto.number,
            toString() {
                return `enum value ${desc.typeName}.${this.name}`;
            },
            declarationString() {
                var _a;
                let str = `${this.name} = ${this.number}`;
                if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) === true) {
                    str += " [deprecated = true]";
                }
                return str;
            },
            getComments() {
                const path = [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.EnumDescriptorProto_Value,
                    this.parent.proto.value.indexOf(this.proto),
                ];
                return findComments(file.proto.sourceCodeInfo, path);
            },
            getFeatures() {
                var _a;
                return cart.resolveFeatures(this.parent.file.edition, this.parent.getFeatures(), (_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.features);
            },
        });
    });
    ((_c = parent === null || parent === void 0 ? void 0 : parent.nestedEnums) !== null && _c !== void 0 ? _c : file.enums).push(desc);
}
/**
 * Create a descriptor for a message, including nested types, and add it to our
 * cart. Note that this does not create descriptors fields.
 */
function addMessage(proto, file, parent, cart) {
    var _a, _b, _c, _d;
    (0, assert_js_1.assert)(proto.name, `invalid DescriptorProto: missing name`);
    const desc = {
        kind: "message",
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        file,
        parent,
        name: proto.name,
        typeName: makeTypeName(proto, parent, file),
        fields: [],
        oneofs: [],
        members: [],
        nestedEnums: [],
        nestedMessages: [],
        nestedExtensions: [],
        toString() {
            return `message ${this.typeName}`;
        },
        getComments() {
            const path = this.parent
                ? [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.DescriptorProto_NestedType,
                    this.parent.proto.nestedType.indexOf(this.proto),
                ]
                : [
                    FieldNumber.FileDescriptorProto_MessageType,
                    this.file.proto.messageType.indexOf(this.proto),
                ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
        getFeatures() {
            var _a, _b, _c;
            const parentFeatures = (_b = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getFeatures()) !== null && _b !== void 0 ? _b : this.file.getFeatures();
            return cart.resolveFeatures(this.file.edition, parentFeatures, (_c = this.proto.options) === null || _c === void 0 ? void 0 : _c.features);
        },
    };
    if (((_c = proto.options) === null || _c === void 0 ? void 0 : _c.mapEntry) === true) {
        cart.mapEntries.set(desc.typeName, desc);
    }
    else {
        ((_d = parent === null || parent === void 0 ? void 0 : parent.nestedMessages) !== null && _d !== void 0 ? _d : file.messages).push(desc);
        cart.messages.set(desc.typeName, desc);
    }
    for (const enumProto of proto.enumType) {
        addEnum(enumProto, file, desc, cart);
    }
    for (const messageProto of proto.nestedType) {
        addMessage(messageProto, file, desc, cart);
    }
}
/**
 * Create a descriptor for a service, including methods, and add it to our
 * cart.
 */
function addService(proto, file, cart) {
    var _a, _b;
    (0, assert_js_1.assert)(proto.name, `invalid ServiceDescriptorProto: missing name`);
    const desc = {
        kind: "service",
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        file,
        name: proto.name,
        typeName: makeTypeName(proto, undefined, file),
        methods: [],
        toString() {
            return `service ${this.typeName}`;
        },
        getComments() {
            const path = [
                FieldNumber.FileDescriptorProto_Service,
                this.file.proto.service.indexOf(this.proto),
            ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
        getFeatures() {
            var _a;
            return cart.resolveFeatures(this.file.edition, this.file.getFeatures(), (_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.features);
        },
    };
    file.services.push(desc);
    cart.services.set(desc.typeName, desc);
    for (const methodProto of proto.method) {
        desc.methods.push(newMethod(methodProto, desc, cart));
    }
}
/**
 * Create a descriptor for a method.
 */
function newMethod(proto, parent, cart) {
    var _a, _b, _c;
    (0, assert_js_1.assert)(proto.name, `invalid MethodDescriptorProto: missing name`);
    (0, assert_js_1.assert)(proto.inputType, `invalid MethodDescriptorProto: missing input_type`);
    (0, assert_js_1.assert)(proto.outputType, `invalid MethodDescriptorProto: missing output_type`);
    let methodKind;
    if (proto.clientStreaming === true && proto.serverStreaming === true) {
        methodKind = service_type_js_1.MethodKind.BiDiStreaming;
    }
    else if (proto.clientStreaming === true) {
        methodKind = service_type_js_1.MethodKind.ClientStreaming;
    }
    else if (proto.serverStreaming === true) {
        methodKind = service_type_js_1.MethodKind.ServerStreaming;
    }
    else {
        methodKind = service_type_js_1.MethodKind.Unary;
    }
    let idempotency;
    switch ((_a = proto.options) === null || _a === void 0 ? void 0 : _a.idempotencyLevel) {
        case descriptor_pb_js_1.MethodOptions_IdempotencyLevel.IDEMPOTENT:
            idempotency = service_type_js_1.MethodIdempotency.Idempotent;
            break;
        case descriptor_pb_js_1.MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:
            idempotency = service_type_js_1.MethodIdempotency.NoSideEffects;
            break;
        case descriptor_pb_js_1.MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:
        case undefined:
            idempotency = undefined;
            break;
    }
    const input = cart.messages.get(trimLeadingDot(proto.inputType));
    const output = cart.messages.get(trimLeadingDot(proto.outputType));
    (0, assert_js_1.assert)(input, `invalid MethodDescriptorProto: input_type ${proto.inputType} not found`);
    (0, assert_js_1.assert)(output, `invalid MethodDescriptorProto: output_type ${proto.inputType} not found`);
    const name = proto.name;
    return {
        kind: "rpc",
        proto,
        deprecated: (_c = (_b = proto.options) === null || _b === void 0 ? void 0 : _b.deprecated) !== null && _c !== void 0 ? _c : false,
        parent,
        name,
        methodKind,
        input,
        output,
        idempotency,
        toString() {
            return `rpc ${parent.typeName}.${name}`;
        },
        getComments() {
            const path = [
                ...this.parent.getComments().sourcePath,
                FieldNumber.ServiceDescriptorProto_Method,
                this.parent.proto.method.indexOf(this.proto),
            ];
            return findComments(parent.file.proto.sourceCodeInfo, path);
        },
        getFeatures() {
            var _a;
            return cart.resolveFeatures(this.parent.file.edition, this.parent.getFeatures(), (_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.features);
        },
    };
}
/**
 * Create a descriptor for a oneof group.
 */
function newOneof(proto, parent, cart) {
    (0, assert_js_1.assert)(proto.name, `invalid OneofDescriptorProto: missing name`);
    return {
        kind: "oneof",
        proto,
        deprecated: false,
        parent,
        fields: [],
        name: proto.name,
        toString() {
            return `oneof ${parent.typeName}.${this.name}`;
        },
        getComments() {
            const path = [
                ...this.parent.getComments().sourcePath,
                FieldNumber.DescriptorProto_OneofDecl,
                this.parent.proto.oneofDecl.indexOf(this.proto),
            ];
            return findComments(parent.file.proto.sourceCodeInfo, path);
        },
        getFeatures() {
            var _a;
            return cart.resolveFeatures(this.parent.file.edition, this.parent.getFeatures(), (_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.features);
        },
    };
}
/**
 * Create a descriptor for a field.
 */
function newField(proto, file, parent, oneof, cart) {
    var _a, _b, _c;
    (0, assert_js_1.assert)(proto.name, `invalid FieldDescriptorProto: missing name`);
    (0, assert_js_1.assert)(proto.number, `invalid FieldDescriptorProto: missing number`);
    (0, assert_js_1.assert)(proto.type, `invalid FieldDescriptorProto: missing type`);
    const common = {
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        name: proto.name,
        number: proto.number,
        parent,
        oneof,
        optional: isOptionalField(proto, file.syntax),
        packedByDefault: isPackedFieldByDefault(file, proto, cart.resolveFeatures),
        packed: isPackedField(file, parent, proto, cart.resolveFeatures),
        jsonName: proto.jsonName === (0, names_js_1.fieldJsonName)(proto.name) ? undefined : proto.jsonName,
        scalar: undefined,
        longType: undefined,
        message: undefined,
        enum: undefined,
        mapKey: undefined,
        mapValue: undefined,
        declarationString,
        // toString, getComments, getFeatures are overridden in newExtension
        toString() {
            return `field ${this.parent.typeName}.${this.name}`;
        },
        getComments() {
            const path = [
                ...this.parent.getComments().sourcePath,
                FieldNumber.DescriptorProto_Field,
                this.parent.proto.field.indexOf(this.proto),
            ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
        getFeatures() {
            var _a;
            return cart.resolveFeatures(file.edition, this.parent.getFeatures(), (_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.features);
        },
    };
    const repeated = proto.label === descriptor_pb_js_1.FieldDescriptorProto_Label.REPEATED;
    switch (proto.type) {
        case descriptor_pb_js_1.FieldDescriptorProto_Type.MESSAGE:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.GROUP: {
            (0, assert_js_1.assert)(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);
            const mapEntry = cart.mapEntries.get(trimLeadingDot(proto.typeName));
            if (mapEntry !== undefined) {
                (0, assert_js_1.assert)(repeated, `invalid FieldDescriptorProto: expected map entry to be repeated`);
                return Object.assign(Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "map", repeated: false }), getMapFieldTypes(mapEntry));
            }
            const message = cart.messages.get(trimLeadingDot(proto.typeName));
            (0, assert_js_1.assert)(message !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);
            return Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "message", repeated,
                message });
        }
        case descriptor_pb_js_1.FieldDescriptorProto_Type.ENUM: {
            (0, assert_js_1.assert)(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);
            const e = cart.enums.get(trimLeadingDot(proto.typeName));
            (0, assert_js_1.assert)(e !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);
            return Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "enum", getDefaultValue,
                repeated, enum: e });
        }
        default: {
            const scalar = fieldTypeToScalarType[proto.type];
            (0, assert_js_1.assert)(scalar, `invalid FieldDescriptorProto: unknown type ${proto.type}`);
            return Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "scalar", getDefaultValue,
                repeated,
                scalar, longType: ((_c = proto.options) === null || _c === void 0 ? void 0 : _c.jstype) == descriptor_pb_js_1.FieldOptions_JSType.JS_STRING
                    ? field_js_1.LongType.STRING
                    : field_js_1.LongType.BIGINT });
        }
    }
}
/**
 * Create a descriptor for an extension field.
 */
function newExtension(proto, file, parent, cart) {
    (0, assert_js_1.assert)(proto.extendee, `invalid FieldDescriptorProto: missing extendee`);
    const field = newField(proto, file, null, // to safe us many lines of duplicated code, we trick the type system
    undefined, cart);
    const extendee = cart.messages.get(trimLeadingDot(proto.extendee));
    (0, assert_js_1.assert)(extendee, `invalid FieldDescriptorProto: extendee ${proto.extendee} not found`);
    return Object.assign(Object.assign({}, field), { kind: "extension", typeName: makeTypeName(proto, parent, file), parent,
        file,
        extendee,
        // Must override toString, getComments, getFeatures from newField, because we
        // call newField with parent undefined.
        toString() {
            return `extension ${this.typeName}`;
        },
        getComments() {
            const path = this.parent
                ? [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.DescriptorProto_Extension,
                    this.parent.proto.extension.indexOf(proto),
                ]
                : [
                    FieldNumber.FileDescriptorProto_Extension,
                    this.file.proto.extension.indexOf(proto),
                ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
        getFeatures() {
            var _a, _b;
            return cart.resolveFeatures(this.file.edition, ((_a = this.parent) !== null && _a !== void 0 ? _a : this.file).getFeatures(), (_b = this.proto.options) === null || _b === void 0 ? void 0 : _b.features);
        } });
}
/**
 * Parse the "syntax" and "edition" fields, stripping test editions.
 */
function parseFileSyntax(syntax, edition) {
    let e;
    let s;
    switch (syntax) {
        case undefined:
        case "proto2":
            s = "proto2";
            e = descriptor_pb_js_1.Edition.EDITION_PROTO2;
            break;
        case "proto3":
            s = "proto3";
            e = descriptor_pb_js_1.Edition.EDITION_PROTO3;
            break;
        case "editions":
            s = "editions";
            switch (edition) {
                case undefined:
                case descriptor_pb_js_1.Edition.EDITION_1_TEST_ONLY:
                case descriptor_pb_js_1.Edition.EDITION_2_TEST_ONLY:
                case descriptor_pb_js_1.Edition.EDITION_99997_TEST_ONLY:
                case descriptor_pb_js_1.Edition.EDITION_99998_TEST_ONLY:
                case descriptor_pb_js_1.Edition.EDITION_99999_TEST_ONLY:
                case descriptor_pb_js_1.Edition.EDITION_UNKNOWN:
                    e = descriptor_pb_js_1.Edition.EDITION_UNKNOWN;
                    break;
                default:
                    e = edition;
                    break;
            }
            break;
        default:
            throw new Error(`invalid FileDescriptorProto: unsupported syntax: ${syntax}`);
    }
    if (syntax === "editions" && edition === descriptor_pb_js_1.Edition.EDITION_UNKNOWN) {
        throw new Error(`invalid FileDescriptorProto: syntax ${syntax} cannot have edition ${String(edition)}`);
    }
    return {
        syntax: s,
        edition: e,
    };
}
/**
 * Create a fully qualified name for a protobuf type or extension field.
 *
 * The fully qualified name for messages, enumerations, and services is
 * constructed by concatenating the package name (if present), parent
 * message names (for nested types), and the type name. We omit the leading
 * dot added by protobuf compilers. Examples:
 * - mypackage.MyMessage
 * - mypackage.MyMessage.NestedMessage
 *
 * The fully qualified name for extension fields is constructed by
 * concatenating the package name (if present), parent message names (for
 * extensions declared within a message), and the field name. Examples:
 * - mypackage.extfield
 * - mypackage.MyMessage.extfield
 */
function makeTypeName(proto, parent, file) {
    (0, assert_js_1.assert)(proto.name, `invalid ${proto.getType().typeName}: missing name`);
    let typeName;
    if (parent) {
        typeName = `${parent.typeName}.${proto.name}`;
    }
    else if (file.proto.package !== undefined) {
        typeName = `${file.proto.package}.${proto.name}`;
    }
    else {
        typeName = `${proto.name}`;
    }
    return typeName;
}
/**
 * Remove the leading dot from a fully qualified type name.
 */
function trimLeadingDot(typeName) {
    return typeName.startsWith(".") ? typeName.substring(1) : typeName;
}
function getMapFieldTypes(mapEntry) {
    var _a, _b;
    (0, assert_js_1.assert)((_a = mapEntry.proto.options) === null || _a === void 0 ? void 0 : _a.mapEntry, `invalid DescriptorProto: expected ${mapEntry.toString()} to be a map entry`);
    (0, assert_js_1.assert)(mapEntry.fields.length === 2, `invalid DescriptorProto: map entry ${mapEntry.toString()} has ${mapEntry.fields.length} fields`);
    const keyField = mapEntry.fields.find((f) => f.proto.number === 1);
    (0, assert_js_1.assert)(keyField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing key field`);
    const mapKey = keyField.scalar;
    (0, assert_js_1.assert)(mapKey !== undefined &&
        mapKey !== field_js_1.ScalarType.BYTES &&
        mapKey !== field_js_1.ScalarType.FLOAT &&
        mapKey !== field_js_1.ScalarType.DOUBLE, `invalid DescriptorProto: map entry ${mapEntry.toString()} has unexpected key type ${(_b = keyField.proto.type) !== null && _b !== void 0 ? _b : -1}`);
    const valueField = mapEntry.fields.find((f) => f.proto.number === 2);
    (0, assert_js_1.assert)(valueField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing value field`);
    switch (valueField.fieldKind) {
        case "scalar":
            return {
                mapKey,
                mapValue: Object.assign(Object.assign({}, valueField), { kind: "scalar" }),
            };
        case "message":
            return {
                mapKey,
                mapValue: Object.assign(Object.assign({}, valueField), { kind: "message" }),
            };
        case "enum":
            return {
                mapKey,
                mapValue: Object.assign(Object.assign({}, valueField), { kind: "enum" }),
            };
        default:
            throw new Error("invalid DescriptorProto: unsupported map entry value field");
    }
}
/**
 * Did the user put the field in a oneof group?
 * This handles proto3 optionals.
 */
function findOneof(proto, allOneofs) {
    var _a;
    const oneofIndex = proto.oneofIndex;
    if (oneofIndex === undefined) {
        return undefined;
    }
    let oneof;
    if (proto.proto3Optional !== true) {
        oneof = allOneofs[oneofIndex];
        (0, assert_js_1.assert)(oneof, `invalid FieldDescriptorProto: oneof #${oneofIndex} for field #${(_a = proto.number) !== null && _a !== void 0 ? _a : -1} not found`);
    }
    return oneof;
}
/**
 * Did the user use the `optional` keyword?
 * This handles proto3 optionals.
 */
function isOptionalField(proto, syntax) {
    switch (syntax) {
        case "proto2":
            return (proto.oneofIndex === undefined &&
                proto.label === descriptor_pb_js_1.FieldDescriptorProto_Label.OPTIONAL);
        case "proto3":
            return proto.proto3Optional === true;
        case "editions":
            return false;
    }
}
/**
 * Is this field packed by default? Only valid for repeated enum fields, and
 * for repeated scalar fields except BYTES and STRING.
 *
 * In proto3 syntax, fields are packed by default. In proto2 syntax, fields
 * are unpacked by default. With editions, the default is whatever the edition
 * specifies as a default. In edition 2023, fields are packed by default.
 */
function isPackedFieldByDefault(file, proto, resolveFeatures) {
    const { repeatedFieldEncoding } = resolveFeatures(file.edition);
    if (repeatedFieldEncoding != descriptor_pb_js_1.FeatureSet_RepeatedFieldEncoding.PACKED) {
        return false;
    }
    // From the proto3 language guide:
    // > In proto3, repeated fields of scalar numeric types are packed by default.
    // This information is incomplete - according to the conformance tests, BOOL
    // and ENUM are packed by default as well. This means only STRING and BYTES
    // are not packed by default, which makes sense because they are length-delimited.
    switch (proto.type) {
        case descriptor_pb_js_1.FieldDescriptorProto_Type.STRING:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.BYTES:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.GROUP:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.MESSAGE:
            return false;
        default:
            return true;
    }
}
/**
 * Pack this repeated field?
 *
 * Respects field type, proto2/proto3 defaults and the `packed` option, or
 * edition defaults and the edition features.repeated_field_encoding options.
 */
function isPackedField(file, parent, proto, resolveFeatures) {
    var _a, _b, _c, _d, _e, _f;
    switch (proto.type) {
        case descriptor_pb_js_1.FieldDescriptorProto_Type.STRING:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.BYTES:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.GROUP:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.MESSAGE:
            // length-delimited types cannot be packed
            return false;
        default:
            switch (file.edition) {
                case descriptor_pb_js_1.Edition.EDITION_PROTO2:
                    return (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.packed) !== null && _b !== void 0 ? _b : false;
                case descriptor_pb_js_1.Edition.EDITION_PROTO3:
                    return (_d = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.packed) !== null && _d !== void 0 ? _d : true;
                default: {
                    const { repeatedFieldEncoding } = resolveFeatures(file.edition, (_e = parent === null || parent === void 0 ? void 0 : parent.getFeatures()) !== null && _e !== void 0 ? _e : file.getFeatures(), (_f = proto.options) === null || _f === void 0 ? void 0 : _f.features);
                    return (repeatedFieldEncoding == descriptor_pb_js_1.FeatureSet_RepeatedFieldEncoding.PACKED);
                }
            }
    }
}
/**
 * Map from a compiler-generated field type to our ScalarType, which is a
 * subset of field types declared by protobuf enum google.protobuf.FieldDescriptorProto.
 */
const fieldTypeToScalarType = {
    [descriptor_pb_js_1.FieldDescriptorProto_Type.DOUBLE]: field_js_1.ScalarType.DOUBLE,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.FLOAT]: field_js_1.ScalarType.FLOAT,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.INT64]: field_js_1.ScalarType.INT64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.UINT64]: field_js_1.ScalarType.UINT64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.INT32]: field_js_1.ScalarType.INT32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.FIXED64]: field_js_1.ScalarType.FIXED64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.FIXED32]: field_js_1.ScalarType.FIXED32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.BOOL]: field_js_1.ScalarType.BOOL,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.STRING]: field_js_1.ScalarType.STRING,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.GROUP]: undefined,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.MESSAGE]: undefined,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.BYTES]: field_js_1.ScalarType.BYTES,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.UINT32]: field_js_1.ScalarType.UINT32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.ENUM]: undefined,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SFIXED32]: field_js_1.ScalarType.SFIXED32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SFIXED64]: field_js_1.ScalarType.SFIXED64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SINT32]: field_js_1.ScalarType.SINT32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SINT64]: field_js_1.ScalarType.SINT64,
};
/**
 * Find comments.
 */
function findComments(sourceCodeInfo, sourcePath) {
    if (!sourceCodeInfo) {
        return {
            leadingDetached: [],
            sourcePath,
        };
    }
    for (const location of sourceCodeInfo.location) {
        if (location.path.length !== sourcePath.length) {
            continue;
        }
        if (location.path.some((value, index) => sourcePath[index] !== value)) {
            continue;
        }
        return {
            leadingDetached: location.leadingDetachedComments,
            leading: location.leadingComments,
            trailing: location.trailingComments,
            sourcePath,
        };
    }
    return {
        leadingDetached: [],
        sourcePath,
    };
}
/**
 * The following field numbers are used to find comments in
 * google.protobuf.SourceCodeInfo.
 */
var FieldNumber;
(function (FieldNumber) {
    FieldNumber[FieldNumber["FileDescriptorProto_Package"] = 2] = "FileDescriptorProto_Package";
    FieldNumber[FieldNumber["FileDescriptorProto_MessageType"] = 4] = "FileDescriptorProto_MessageType";
    FieldNumber[FieldNumber["FileDescriptorProto_EnumType"] = 5] = "FileDescriptorProto_EnumType";
    FieldNumber[FieldNumber["FileDescriptorProto_Service"] = 6] = "FileDescriptorProto_Service";
    FieldNumber[FieldNumber["FileDescriptorProto_Extension"] = 7] = "FileDescriptorProto_Extension";
    FieldNumber[FieldNumber["FileDescriptorProto_Syntax"] = 12] = "FileDescriptorProto_Syntax";
    FieldNumber[FieldNumber["DescriptorProto_Field"] = 2] = "DescriptorProto_Field";
    FieldNumber[FieldNumber["DescriptorProto_NestedType"] = 3] = "DescriptorProto_NestedType";
    FieldNumber[FieldNumber["DescriptorProto_EnumType"] = 4] = "DescriptorProto_EnumType";
    FieldNumber[FieldNumber["DescriptorProto_Extension"] = 6] = "DescriptorProto_Extension";
    FieldNumber[FieldNumber["DescriptorProto_OneofDecl"] = 8] = "DescriptorProto_OneofDecl";
    FieldNumber[FieldNumber["EnumDescriptorProto_Value"] = 2] = "EnumDescriptorProto_Value";
    FieldNumber[FieldNumber["ServiceDescriptorProto_Method"] = 2] = "ServiceDescriptorProto_Method";
})(FieldNumber || (FieldNumber = {}));
/**
 * Return a string that matches the definition of a field in the protobuf
 * source. Does not take custom options into account.
 */
function declarationString() {
    var _a, _b, _c;
    const parts = [];
    if (this.repeated) {
        parts.push("repeated");
    }
    if (this.optional) {
        parts.push("optional");
    }
    const file = this.kind === "extension" ? this.file : this.parent.file;
    if (file.syntax == "proto2" &&
        this.proto.label === descriptor_pb_js_1.FieldDescriptorProto_Label.REQUIRED) {
        parts.push("required");
    }
    let type;
    switch (this.fieldKind) {
        case "scalar":
            type = field_js_1.ScalarType[this.scalar].toLowerCase();
            break;
        case "enum":
            type = this.enum.typeName;
            break;
        case "message":
            type = this.message.typeName;
            break;
        case "map": {
            const k = field_js_1.ScalarType[this.mapKey].toLowerCase();
            let v;
            switch (this.mapValue.kind) {
                case "scalar":
                    v = field_js_1.ScalarType[this.mapValue.scalar].toLowerCase();
                    break;
                case "enum":
                    v = this.mapValue.enum.typeName;
                    break;
                case "message":
                    v = this.mapValue.message.typeName;
                    break;
            }
            type = `map<${k}, ${v}>`;
            break;
        }
    }
    parts.push(`${type} ${this.name} = ${this.number}`);
    const options = [];
    if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.packed) !== undefined) {
        options.push(`packed = ${this.proto.options.packed.toString()}`);
    }
    let defaultValue = this.proto.defaultValue;
    if (defaultValue !== undefined) {
        if (this.proto.type == descriptor_pb_js_1.FieldDescriptorProto_Type.BYTES ||
            this.proto.type == descriptor_pb_js_1.FieldDescriptorProto_Type.STRING) {
            defaultValue = '"' + defaultValue.replace('"', '\\"') + '"';
        }
        options.push(`default = ${defaultValue}`);
    }
    if (this.jsonName !== undefined) {
        options.push(`json_name = "${this.jsonName}"`);
    }
    if (((_b = this.proto.options) === null || _b === void 0 ? void 0 : _b.jstype) !== undefined) {
        options.push(`jstype = ${descriptor_pb_js_1.FieldOptions_JSType[this.proto.options.jstype]}`);
    }
    if (((_c = this.proto.options) === null || _c === void 0 ? void 0 : _c.deprecated) === true) {
        options.push(`deprecated = true`);
    }
    if (options.length > 0) {
        parts.push("[" + options.join(", ") + "]");
    }
    return parts.join(" ");
}
/**
 * Parses a text-encoded default value (proto2) of a scalar or enum field.
 */
function getDefaultValue() {
    const d = this.proto.defaultValue;
    if (d === undefined) {
        return undefined;
    }
    switch (this.fieldKind) {
        case "enum":
            return (0, text_format_js_1.parseTextFormatEnumValue)(this.enum, d);
        case "scalar":
            return (0, text_format_js_1.parseTextFormatScalarValue)(this.scalar, d);
        default:
            return undefined;
    }
}


/***/ }),

/***/ 6804:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createRegistryFromDescriptors = void 0;
const assert_js_1 = __nccwpck_require__(1594);
const proto3_js_1 = __nccwpck_require__(9947);
const proto2_js_1 = __nccwpck_require__(3605);
const field_js_1 = __nccwpck_require__(4756);
const names_js_1 = __nccwpck_require__(9214);
const timestamp_pb_js_1 = __nccwpck_require__(7974);
const duration_pb_js_1 = __nccwpck_require__(2183);
const any_pb_js_1 = __nccwpck_require__(8466);
const empty_pb_js_1 = __nccwpck_require__(4261);
const field_mask_pb_js_1 = __nccwpck_require__(8080);
const struct_pb_js_1 = __nccwpck_require__(6400);
const enum_js_1 = __nccwpck_require__(8504);
const wrappers_pb_js_1 = __nccwpck_require__(7854);
const descriptor_pb_js_1 = __nccwpck_require__(2959);
const create_descriptor_set_js_1 = __nccwpck_require__(6619);
// well-known message types with specialized JSON representation
const wkMessages = [
    any_pb_js_1.Any,
    duration_pb_js_1.Duration,
    empty_pb_js_1.Empty,
    field_mask_pb_js_1.FieldMask,
    struct_pb_js_1.Struct,
    struct_pb_js_1.Value,
    struct_pb_js_1.ListValue,
    timestamp_pb_js_1.Timestamp,
    duration_pb_js_1.Duration,
    wrappers_pb_js_1.DoubleValue,
    wrappers_pb_js_1.FloatValue,
    wrappers_pb_js_1.Int64Value,
    wrappers_pb_js_1.Int32Value,
    wrappers_pb_js_1.UInt32Value,
    wrappers_pb_js_1.UInt64Value,
    wrappers_pb_js_1.BoolValue,
    wrappers_pb_js_1.StringValue,
    wrappers_pb_js_1.BytesValue,
];
// well-known enum types with specialized JSON representation
const wkEnums = [(0, enum_js_1.getEnumType)(struct_pb_js_1.NullValue)];
/**
 * Create a registry from a set of descriptors. The types returned by this
 * registry behave exactly like types from generated code.
 *
 * This function accepts google.protobuf.FileDescriptorSet in serialized or
 * deserialized form. Alternatively, it also accepts a DescriptorSet (see
 * createDescriptorSet()).
 *
 * By default, all well-known types with a specialized JSON representation
 * are replaced with their generated counterpart in this package.
 */
function createRegistryFromDescriptors(input, replaceWkt = true) {
    const set = input instanceof Uint8Array || input instanceof descriptor_pb_js_1.FileDescriptorSet
        ? (0, create_descriptor_set_js_1.createDescriptorSet)(input)
        : input;
    const enums = {};
    const messages = {};
    const services = {};
    if (replaceWkt) {
        for (const mt of wkMessages) {
            messages[mt.typeName] = mt;
        }
        for (const et of wkEnums) {
            enums[et.typeName] = et;
        }
    }
    return {
        /**
         * May raise an error on invalid descriptors.
         */
        findEnum(typeName) {
            const existing = enums[typeName];
            if (existing) {
                return existing;
            }
            const desc = set.enums.get(typeName);
            if (!desc) {
                return undefined;
            }
            const runtime = desc.file.syntax == "proto3" ? proto3_js_1.proto3 : proto2_js_1.proto2;
            const type = runtime.makeEnumType(typeName, desc.values.map((u) => ({
                no: u.number,
                name: u.name,
                localName: (0, names_js_1.localName)(u),
            })), {});
            enums[typeName] = type;
            return type;
        },
        /**
         * May raise an error on invalid descriptors.
         */
        findMessage(typeName) {
            const existing = messages[typeName];
            if (existing) {
                return existing;
            }
            const desc = set.messages.get(typeName);
            if (!desc) {
                return undefined;
            }
            const runtime = desc.file.syntax == "proto3" ? proto3_js_1.proto3 : proto2_js_1.proto2;
            const fields = [];
            const type = runtime.makeMessageType(typeName, () => fields, {
                localName: (0, names_js_1.localName)(desc),
            });
            messages[typeName] = type;
            for (const field of desc.fields) {
                const fieldInfo = makeFieldInfo(field, this);
                fields.push(fieldInfo);
            }
            return type;
        },
        /**
         * May raise an error on invalid descriptors.
         */
        findService(typeName) {
            const existing = services[typeName];
            if (existing) {
                return existing;
            }
            const desc = set.services.get(typeName);
            if (!desc) {
                return undefined;
            }
            const methods = {};
            for (const method of desc.methods) {
                const I = this.findMessage(method.input.typeName);
                const O = this.findMessage(method.output.typeName);
                (0, assert_js_1.assert)(I, `message "${method.input.typeName}" for ${method.toString()} not found`);
                (0, assert_js_1.assert)(O, `output message "${method.output.typeName}" for ${method.toString()} not found`);
                methods[(0, names_js_1.localName)(method)] = {
                    name: method.name,
                    I,
                    O,
                    kind: method.methodKind,
                    idempotency: method.idempotency,
                    // We do not surface options at this time
                    // options: {},
                };
            }
            return (services[typeName] = {
                typeName: desc.typeName,
                methods,
            });
        },
    };
}
exports.createRegistryFromDescriptors = createRegistryFromDescriptors;
function makeFieldInfo(desc, resolver) {
    switch (desc.fieldKind) {
        case "map":
            return makeMapFieldInfo(desc, resolver);
        case "message":
            return makeMessageFieldInfo(desc, resolver);
        case "enum": {
            const fi = makeEnumFieldInfo(desc, resolver);
            fi.default = desc.getDefaultValue();
            return fi;
        }
        case "scalar": {
            const fi = makeScalarFieldInfo(desc);
            fi.default = desc.getDefaultValue();
            return fi;
        }
    }
}
function makeMapFieldInfo(field, resolver) {
    const base = {
        kind: "map",
        no: field.number,
        name: field.name,
        jsonName: field.jsonName,
        K: field.mapKey,
    };
    if (field.mapValue.message) {
        const messageType = resolver.findMessage(field.mapValue.message.typeName);
        (0, assert_js_1.assert)(messageType, `message "${field.mapValue.message.typeName}" for ${field.toString()} not found`);
        return Object.assign(Object.assign({}, base), { V: {
                kind: "message",
                T: messageType,
            } });
    }
    if (field.mapValue.enum) {
        const enumType = resolver.findEnum(field.mapValue.enum.typeName);
        (0, assert_js_1.assert)(enumType, `enum "${field.mapValue.enum.typeName}" for ${field.toString()} not found`);
        return Object.assign(Object.assign({}, base), { V: {
                kind: "enum",
                T: enumType,
            } });
    }
    return Object.assign(Object.assign({}, base), { V: {
            kind: "scalar",
            T: field.mapValue.scalar,
        } });
}
function makeScalarFieldInfo(field) {
    // We are creating _partial_ field info here, so we omit long type bigint,
    // which is the default.
    const longType = field.longType == field_js_1.LongType.STRING
        ? { L: field_js_1.LongType.STRING }
        : {};
    const base = Object.assign({ kind: "scalar", no: field.number, name: field.name, jsonName: field.jsonName, T: field.scalar }, longType);
    if (field.repeated) {
        return Object.assign(Object.assign({}, base), { repeated: true, packed: field.packed, oneof: undefined, T: field.scalar });
    }
    if (field.oneof) {
        return Object.assign(Object.assign({}, base), { oneof: field.oneof.name });
    }
    if (field.optional) {
        return Object.assign(Object.assign({}, base), { opt: true });
    }
    return base;
}
function makeMessageFieldInfo(field, resolver) {
    const messageType = resolver.findMessage(field.message.typeName);
    (0, assert_js_1.assert)(messageType, `message "${field.message.typeName}" for ${field.toString()} not found`);
    const base = {
        kind: "message",
        no: field.number,
        name: field.name,
        jsonName: field.jsonName,
        T: messageType,
        delimited: field.proto.type == descriptor_pb_js_1.FieldDescriptorProto_Type.GROUP,
    };
    if (field.repeated) {
        return Object.assign(Object.assign({}, base), { repeated: true, packed: field.packed, oneof: undefined });
    }
    if (field.oneof) {
        return Object.assign(Object.assign({}, base), { oneof: field.oneof.name });
    }
    if (field.optional) {
        return Object.assign(Object.assign({}, base), { opt: true });
    }
    return base;
}
function makeEnumFieldInfo(field, resolver) {
    const enumType = resolver.findEnum(field.enum.typeName);
    (0, assert_js_1.assert)(enumType, `enum "${field.enum.typeName}" for ${field.toString()} not found`);
    const base = {
        kind: "enum",
        no: field.number,
        name: field.name,
        jsonName: field.jsonName,
        T: enumType,
    };
    if (field.repeated) {
        return Object.assign(Object.assign({}, base), { repeated: true, packed: field.packed, oneof: undefined });
    }
    if (field.oneof) {
        return Object.assign(Object.assign({}, base), { oneof: field.oneof.name });
    }
    if (field.optional) {
        return Object.assign(Object.assign({}, base), { opt: true });
    }
    return base;
}


/***/ }),

/***/ 1948:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createRegistry = void 0;
/**
 * Create a new registry from the given types.
 */
function createRegistry(...types) {
    const messages = {};
    const enums = {};
    const services = {};
    const registry = {
        /**
         * Add a type to the registry. For messages, the types used in message
         * fields are added recursively. For services, the message types used
         * for requests and responses are added recursively.
         */
        add(type) {
            if ("fields" in type) {
                if (!this.findMessage(type.typeName)) {
                    messages[type.typeName] = type;
                    for (const field of type.fields.list()) {
                        if (field.kind == "message") {
                            this.add(field.T);
                        }
                        else if (field.kind == "map" && field.V.kind == "message") {
                            this.add(field.V.T);
                        }
                        else if (field.kind == "enum") {
                            this.add(field.T);
                        }
                    }
                }
            }
            else if ("methods" in type) {
                if (!this.findService(type.typeName)) {
                    services[type.typeName] = type;
                    for (const method of Object.values(type.methods)) {
                        this.add(method.I);
                        this.add(method.O);
                    }
                }
            }
            else {
                enums[type.typeName] = type;
            }
        },
        findMessage(typeName) {
            return messages[typeName];
        },
        findEnum(typeName) {
            return enums[typeName];
        },
        findService(typeName) {
            return services[typeName];
        },
    };
    for (const type of types) {
        registry.add(type);
    }
    return registry;
}
exports.createRegistry = createRegistry;


/***/ }),

/***/ 4756:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LongType = exports.ScalarType = void 0;
/**
 * Scalar value types. This is a subset of field types declared by protobuf
 * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE
 * are omitted, but the numerical values are identical.
 */
var ScalarType;
(function (ScalarType) {
    // 0 is reserved for errors.
    // Order is weird for historical reasons.
    ScalarType[ScalarType["DOUBLE"] = 1] = "DOUBLE";
    ScalarType[ScalarType["FLOAT"] = 2] = "FLOAT";
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
    // negative values are likely.
    ScalarType[ScalarType["INT64"] = 3] = "INT64";
    ScalarType[ScalarType["UINT64"] = 4] = "UINT64";
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
    // negative values are likely.
    ScalarType[ScalarType["INT32"] = 5] = "INT32";
    ScalarType[ScalarType["FIXED64"] = 6] = "FIXED64";
    ScalarType[ScalarType["FIXED32"] = 7] = "FIXED32";
    ScalarType[ScalarType["BOOL"] = 8] = "BOOL";
    ScalarType[ScalarType["STRING"] = 9] = "STRING";
    // Tag-delimited aggregate.
    // Group type is deprecated and not supported in proto3. However, Proto3
    // implementations should still be able to parse the group wire format and
    // treat group fields as unknown fields.
    // TYPE_GROUP = 10,
    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.
    // New in version 2.
    ScalarType[ScalarType["BYTES"] = 12] = "BYTES";
    ScalarType[ScalarType["UINT32"] = 13] = "UINT32";
    // TYPE_ENUM = 14,
    ScalarType[ScalarType["SFIXED32"] = 15] = "SFIXED32";
    ScalarType[ScalarType["SFIXED64"] = 16] = "SFIXED64";
    ScalarType[ScalarType["SINT32"] = 17] = "SINT32";
    ScalarType[ScalarType["SINT64"] = 18] = "SINT64";
})(ScalarType || (exports.ScalarType = ScalarType = {}));
/**
 * JavaScript representation of fields with 64 bit integral types (int64, uint64,
 * sint64, fixed64, sfixed64).
 *
 * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,
 * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use
 * String if `[jstype = JS_STRING]` is specified.
 *
 * ```protobuf
 * uint64 field_a = 1; // BigInt
 * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt
 * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt
 * uint64 field_b = 2 [jstype = JS_STRING]; // String
 * ```
 */
var LongType;
(function (LongType) {
    /**
     * Use JavaScript BigInt.
     */
    LongType[LongType["BIGINT"] = 0] = "BIGINT";
    /**
     * Use JavaScript String.
     *
     * Field option `[jstype = JS_STRING]`.
     */
    LongType[LongType["STRING"] = 1] = "STRING";
})(LongType || (exports.LongType = LongType = {}));


/***/ }),

/***/ 8466:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Any = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a
 * URL that describes the type of the serialized message.
 *
 * Protobuf library provides support to pack/unpack Any values in the form
 * of utility functions or additional generated methods of the Any type.
 *
 * Example 1: Pack and unpack a message in C++.
 *
 *     Foo foo = ...;
 *     Any any;
 *     any.PackFrom(foo);
 *     ...
 *     if (any.UnpackTo(&foo)) {
 *       ...
 *     }
 *
 * Example 2: Pack and unpack a message in Java.
 *
 *     Foo foo = ...;
 *     Any any = Any.pack(foo);
 *     ...
 *     if (any.is(Foo.class)) {
 *       foo = any.unpack(Foo.class);
 *     }
 *     // or ...
 *     if (any.isSameTypeAs(Foo.getDefaultInstance())) {
 *       foo = any.unpack(Foo.getDefaultInstance());
 *     }
 *
 *  Example 3: Pack and unpack a message in Python.
 *
 *     foo = Foo(...)
 *     any = Any()
 *     any.Pack(foo)
 *     ...
 *     if any.Is(Foo.DESCRIPTOR):
 *       any.Unpack(foo)
 *       ...
 *
 *  Example 4: Pack and unpack a message in Go
 *
 *      foo := &pb.Foo{...}
 *      any, err := anypb.New(foo)
 *      if err != nil {
 *        ...
 *      }
 *      ...
 *      foo := &pb.Foo{}
 *      if err := any.UnmarshalTo(foo); err != nil {
 *        ...
 *      }
 *
 * The pack methods provided by protobuf library will by default use
 * 'type.googleapis.com/full.type.name' as the type URL and the unpack
 * methods only use the fully qualified type name after the last '/'
 * in the type URL, for example "foo.bar.com/x/y.z" will yield type
 * name "y.z".
 *
 * JSON
 * ====
 * The JSON representation of an `Any` value uses the regular
 * representation of the deserialized, embedded message, with an
 * additional field `@type` which contains the type URL. Example:
 *
 *     package google.profile;
 *     message Person {
 *       string first_name = 1;
 *       string last_name = 2;
 *     }
 *
 *     {
 *       "@type": "type.googleapis.com/google.profile.Person",
 *       "firstName": <string>,
 *       "lastName": <string>
 *     }
 *
 * If the embedded message type is well-known and has a custom JSON
 * representation, that representation will be embedded adding a field
 * `value` which holds the custom JSON in addition to the `@type`
 * field. Example (for message [google.protobuf.Duration][]):
 *
 *     {
 *       "@type": "type.googleapis.com/google.protobuf.Duration",
 *       "value": "1.212s"
 *     }
 *
 *
 * @generated from message google.protobuf.Any
 */
class Any extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * A URL/resource name that uniquely identifies the type of the serialized
         * protocol buffer message. This string must contain at least
         * one "/" character. The last segment of the URL's path must represent
         * the fully qualified name of the type (as in
         * `path/google.protobuf.Duration`). The name should be in a canonical form
         * (e.g., leading "." is not accepted).
         *
         * In practice, teams usually precompile into the binary all types that they
         * expect it to use in the context of Any. However, for URLs which use the
         * scheme `http`, `https`, or no scheme, one can optionally set up a type
         * server that maps type URLs to message definitions as follows:
         *
         * * If no scheme is provided, `https` is assumed.
         * * An HTTP GET on the URL must yield a [google.protobuf.Type][]
         *   value in binary format, or produce an error.
         * * Applications are allowed to cache lookup results based on the
         *   URL, or have them precompiled into a binary to avoid any
         *   lookup. Therefore, binary compatibility needs to be preserved
         *   on changes to types. (Use versioned type names to manage
         *   breaking changes.)
         *
         * Note: this functionality is not currently available in the official
         * protobuf release, and it is not used for type URLs beginning with
         * type.googleapis.com. As of May 2023, there are no widely used type server
         * implementations and no plans to implement one.
         *
         * Schemes other than `http`, `https` (or the empty scheme) might be
         * used with implementation specific semantics.
         *
         *
         * @generated from field: string type_url = 1;
         */
        this.typeUrl = "";
        /**
         * Must be a valid serialized protocol buffer of the above specified type.
         *
         * @generated from field: bytes value = 2;
         */
        this.value = new Uint8Array(0);
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        var _a;
        if (this.typeUrl === "") {
            return {};
        }
        const typeName = this.typeUrlToName(this.typeUrl);
        const messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);
        if (!messageType) {
            throw new Error(`cannot encode message google.protobuf.Any to JSON: "${this.typeUrl}" is not in the type registry`);
        }
        const message = messageType.fromBinary(this.value);
        let json = message.toJson(options);
        if (typeName.startsWith("google.protobuf.") || (json === null || Array.isArray(json) || typeof json !== "object")) {
            json = { value: json };
        }
        json["@type"] = this.typeUrl;
        return json;
    }
    fromJson(json, options) {
        var _a;
        if (json === null || Array.isArray(json) || typeof json != "object") {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: expected object but got ${json === null ? "null" : Array.isArray(json) ? "array" : typeof json}`);
        }
        if (Object.keys(json).length == 0) {
            return this;
        }
        const typeUrl = json["@type"];
        if (typeof typeUrl != "string" || typeUrl == "") {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: "@type" is empty`);
        }
        const typeName = this.typeUrlToName(typeUrl), messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);
        if (!messageType) {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: ${typeUrl} is not in the type registry`);
        }
        let message;
        if (typeName.startsWith("google.protobuf.") && Object.prototype.hasOwnProperty.call(json, "value")) {
            message = messageType.fromJson(json["value"], options);
        }
        else {
            const copy = Object.assign({}, json);
            delete copy["@type"];
            message = messageType.fromJson(copy, options);
        }
        this.packFrom(message);
        return this;
    }
    packFrom(message) {
        this.value = message.toBinary();
        this.typeUrl = this.typeNameToUrl(message.getType().typeName);
    }
    unpackTo(target) {
        if (!this.is(target.getType())) {
            return false;
        }
        target.fromBinary(this.value);
        return true;
    }
    unpack(registry) {
        if (this.typeUrl === "") {
            return undefined;
        }
        const messageType = registry.findMessage(this.typeUrlToName(this.typeUrl));
        if (!messageType) {
            return undefined;
        }
        return messageType.fromBinary(this.value);
    }
    is(type) {
        if (this.typeUrl === '') {
            return false;
        }
        const name = this.typeUrlToName(this.typeUrl);
        let typeName = '';
        if (typeof type === 'string') {
            typeName = type;
        }
        else {
            typeName = type.typeName;
        }
        return name === typeName;
    }
    typeNameToUrl(name) {
        return `type.googleapis.com/${name}`;
    }
    typeUrlToName(url) {
        if (!url.length) {
            throw new Error(`invalid type url: ${url}`);
        }
        const slash = url.lastIndexOf("/");
        const name = slash >= 0 ? url.substring(slash + 1) : url;
        if (!name.length) {
            throw new Error(`invalid type url: ${url}`);
        }
        return name;
    }
    static pack(message) {
        const any = new Any();
        any.packFrom(message);
        return any;
    }
    static fromBinary(bytes, options) {
        return new Any().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Any().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Any().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Any, a, b);
    }
}
exports.Any = Any;
Any.runtime = proto3_js_1.proto3;
Any.typeName = "google.protobuf.Any";
Any.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);


/***/ }),

/***/ 1731:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Mixin = exports.Method = exports.Api = void 0;
const message_js_1 = __nccwpck_require__(2779);
const type_pb_js_1 = __nccwpck_require__(3672);
const source_context_pb_js_1 = __nccwpck_require__(1280);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * Api is a light-weight descriptor for an API Interface.
 *
 * Interfaces are also described as "protocol buffer services" in some contexts,
 * such as by the "service" keyword in a .proto file, but they are different
 * from API Services, which represent a concrete implementation of an interface
 * as opposed to simply a description of methods and bindings. They are also
 * sometimes simply referred to as "APIs" in other contexts, such as the name of
 * this message itself. See https://cloud.google.com/apis/design/glossary for
 * detailed terminology.
 *
 * @generated from message google.protobuf.Api
 */
class Api extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The fully qualified name of this interface, including package name
         * followed by the interface's simple name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The methods of this interface, in unspecified order.
         *
         * @generated from field: repeated google.protobuf.Method methods = 2;
         */
        this.methods = [];
        /**
         * Any metadata attached to the interface.
         *
         * @generated from field: repeated google.protobuf.Option options = 3;
         */
        this.options = [];
        /**
         * A version string for this interface. If specified, must have the form
         * `major-version.minor-version`, as in `1.10`. If the minor version is
         * omitted, it defaults to zero. If the entire version field is empty, the
         * major version is derived from the package name, as outlined below. If the
         * field is not empty, the version in the package name will be verified to be
         * consistent with what is provided here.
         *
         * The versioning schema uses [semantic
         * versioning](http://semver.org) where the major version number
         * indicates a breaking change and the minor version an additive,
         * non-breaking change. Both version numbers are signals to users
         * what to expect from different versions, and should be carefully
         * chosen based on the product plan.
         *
         * The major version is also reflected in the package name of the
         * interface, which must end in `v<major-version>`, as in
         * `google.feature.v1`. For major versions 0 and 1, the suffix can
         * be omitted. Zero major versions must only be used for
         * experimental, non-GA interfaces.
         *
         *
         * @generated from field: string version = 4;
         */
        this.version = "";
        /**
         * Included interfaces. See [Mixin][].
         *
         * @generated from field: repeated google.protobuf.Mixin mixins = 6;
         */
        this.mixins = [];
        /**
         * The source syntax of the service.
         *
         * @generated from field: google.protobuf.Syntax syntax = 7;
         */
        this.syntax = type_pb_js_1.Syntax.PROTO2;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Api().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Api().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Api().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Api, a, b);
    }
}
exports.Api = Api;
Api.runtime = proto3_js_1.proto3;
Api.typeName = "google.protobuf.Api";
Api.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "methods", kind: "message", T: Method, repeated: true },
    { no: 3, name: "options", kind: "message", T: type_pb_js_1.Option, repeated: true },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "source_context", kind: "message", T: source_context_pb_js_1.SourceContext },
    { no: 6, name: "mixins", kind: "message", T: Mixin, repeated: true },
    { no: 7, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(type_pb_js_1.Syntax) },
]);
/**
 * Method represents a method of an API interface.
 *
 * @generated from message google.protobuf.Method
 */
class Method extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The simple name of this method.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * A URL of the input message type.
         *
         * @generated from field: string request_type_url = 2;
         */
        this.requestTypeUrl = "";
        /**
         * If true, the request is streamed.
         *
         * @generated from field: bool request_streaming = 3;
         */
        this.requestStreaming = false;
        /**
         * The URL of the output message type.
         *
         * @generated from field: string response_type_url = 4;
         */
        this.responseTypeUrl = "";
        /**
         * If true, the response is streamed.
         *
         * @generated from field: bool response_streaming = 5;
         */
        this.responseStreaming = false;
        /**
         * Any metadata attached to the method.
         *
         * @generated from field: repeated google.protobuf.Option options = 6;
         */
        this.options = [];
        /**
         * The source syntax of this method.
         *
         * @generated from field: google.protobuf.Syntax syntax = 7;
         */
        this.syntax = type_pb_js_1.Syntax.PROTO2;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Method().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Method().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Method().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Method, a, b);
    }
}
exports.Method = Method;
Method.runtime = proto3_js_1.proto3;
Method.typeName = "google.protobuf.Method";
Method.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "response_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "response_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "options", kind: "message", T: type_pb_js_1.Option, repeated: true },
    { no: 7, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(type_pb_js_1.Syntax) },
]);
/**
 * Declares an API Interface to be included in this interface. The including
 * interface must redeclare all the methods from the included interface, but
 * documentation and options are inherited as follows:
 *
 * - If after comment and whitespace stripping, the documentation
 *   string of the redeclared method is empty, it will be inherited
 *   from the original method.
 *
 * - Each annotation belonging to the service config (http,
 *   visibility) which is not set in the redeclared method will be
 *   inherited.
 *
 * - If an http annotation is inherited, the path pattern will be
 *   modified as follows. Any version prefix will be replaced by the
 *   version of the including interface plus the [root][] path if
 *   specified.
 *
 * Example of a simple mixin:
 *
 *     package google.acl.v1;
 *     service AccessControl {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v1/{resource=**}:getAcl";
 *       }
 *     }
 *
 *     package google.storage.v2;
 *     service Storage {
 *       rpc GetAcl(GetAclRequest) returns (Acl);
 *
 *       // Get a data record.
 *       rpc GetData(GetDataRequest) returns (Data) {
 *         option (google.api.http).get = "/v2/{resource=**}";
 *       }
 *     }
 *
 * Example of a mixin configuration:
 *
 *     apis:
 *     - name: google.storage.v2.Storage
 *       mixins:
 *       - name: google.acl.v1.AccessControl
 *
 * The mixin construct implies that all methods in `AccessControl` are
 * also declared with same name and request/response types in
 * `Storage`. A documentation generator or annotation processor will
 * see the effective `Storage.GetAcl` method after inherting
 * documentation and annotations as follows:
 *
 *     service Storage {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v2/{resource=**}:getAcl";
 *       }
 *       ...
 *     }
 *
 * Note how the version in the path pattern changed from `v1` to `v2`.
 *
 * If the `root` field in the mixin is specified, it should be a
 * relative path under which inherited HTTP paths are placed. Example:
 *
 *     apis:
 *     - name: google.storage.v2.Storage
 *       mixins:
 *       - name: google.acl.v1.AccessControl
 *         root: acls
 *
 * This implies the following inherited HTTP annotation:
 *
 *     service Storage {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
 *       }
 *       ...
 *     }
 *
 * @generated from message google.protobuf.Mixin
 */
class Mixin extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The fully qualified name of the interface which is included.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * If non-empty specifies a path under which inherited HTTP paths
         * are rooted.
         *
         * @generated from field: string root = 2;
         */
        this.root = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Mixin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mixin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mixin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Mixin, a, b);
    }
}
exports.Mixin = Mixin;
Mixin.runtime = proto3_js_1.proto3;
Mixin.typeName = "google.protobuf.Mixin";
Mixin.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 7291:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeGeneratorResponse_File = exports.CodeGeneratorResponse_Feature = exports.CodeGeneratorResponse = exports.CodeGeneratorRequest = exports.Version = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto2_js_1 = __nccwpck_require__(3605);
const descriptor_pb_js_1 = __nccwpck_require__(2959);
/**
 * The version number of protocol compiler.
 *
 * @generated from message google.protobuf.compiler.Version
 */
class Version extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Version().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Version().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Version().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(Version, a, b);
    }
}
exports.Version = Version;
Version.runtime = proto2_js_1.proto2;
Version.typeName = "google.protobuf.compiler.Version";
Version.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "major", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "minor", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "patch", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * An encoded CodeGeneratorRequest is written to the plugin's stdin.
 *
 * @generated from message google.protobuf.compiler.CodeGeneratorRequest
 */
class CodeGeneratorRequest extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The .proto files that were explicitly listed on the command-line.  The
         * code generator should generate code only for these files.  Each file's
         * descriptor will be included in proto_file, below.
         *
         * @generated from field: repeated string file_to_generate = 1;
         */
        this.fileToGenerate = [];
        /**
         * FileDescriptorProtos for all files in files_to_generate and everything
         * they import.  The files will appear in topological order, so each file
         * appears before any file that imports it.
         *
         * Note: the files listed in files_to_generate will include runtime-retention
         * options only, but all other files will include source-retention options.
         * The source_file_descriptors field below is available in case you need
         * source-retention options for files_to_generate.
         *
         * protoc guarantees that all proto_files will be written after
         * the fields above, even though this is not technically guaranteed by the
         * protobuf wire format.  This theoretically could allow a plugin to stream
         * in the FileDescriptorProtos and handle them one by one rather than read
         * the entire set into memory at once.  However, as of this writing, this
         * is not similarly optimized on protoc's end -- it will store all fields in
         * memory at once before sending them to the plugin.
         *
         * Type names of fields and extensions in the FileDescriptorProto are always
         * fully qualified.
         *
         * @generated from field: repeated google.protobuf.FileDescriptorProto proto_file = 15;
         */
        this.protoFile = [];
        /**
         * File descriptors with all options, including source-retention options.
         * These descriptors are only provided for the files listed in
         * files_to_generate.
         *
         * @generated from field: repeated google.protobuf.FileDescriptorProto source_file_descriptors = 17;
         */
        this.sourceFileDescriptors = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CodeGeneratorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CodeGeneratorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CodeGeneratorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(CodeGeneratorRequest, a, b);
    }
}
exports.CodeGeneratorRequest = CodeGeneratorRequest;
CodeGeneratorRequest.runtime = proto2_js_1.proto2;
CodeGeneratorRequest.typeName = "google.protobuf.compiler.CodeGeneratorRequest";
CodeGeneratorRequest.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "file_to_generate", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "parameter", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "proto_file", kind: "message", T: descriptor_pb_js_1.FileDescriptorProto, repeated: true },
    { no: 17, name: "source_file_descriptors", kind: "message", T: descriptor_pb_js_1.FileDescriptorProto, repeated: true },
    { no: 3, name: "compiler_version", kind: "message", T: Version, opt: true },
]);
/**
 * The plugin writes an encoded CodeGeneratorResponse to stdout.
 *
 * @generated from message google.protobuf.compiler.CodeGeneratorResponse
 */
class CodeGeneratorResponse extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.compiler.CodeGeneratorResponse.File file = 15;
         */
        this.file = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CodeGeneratorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CodeGeneratorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CodeGeneratorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(CodeGeneratorResponse, a, b);
    }
}
exports.CodeGeneratorResponse = CodeGeneratorResponse;
CodeGeneratorResponse.runtime = proto2_js_1.proto2;
CodeGeneratorResponse.typeName = "google.protobuf.compiler.CodeGeneratorResponse";
CodeGeneratorResponse.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "supported_features", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 15, name: "file", kind: "message", T: CodeGeneratorResponse_File, repeated: true },
]);
/**
 * Sync with code_generator.h.
 *
 * @generated from enum google.protobuf.compiler.CodeGeneratorResponse.Feature
 */
var CodeGeneratorResponse_Feature;
(function (CodeGeneratorResponse_Feature) {
    /**
     * @generated from enum value: FEATURE_NONE = 0;
     */
    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature["NONE"] = 0] = "NONE";
    /**
     * @generated from enum value: FEATURE_PROTO3_OPTIONAL = 1;
     */
    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature["PROTO3_OPTIONAL"] = 1] = "PROTO3_OPTIONAL";
    /**
     * @generated from enum value: FEATURE_SUPPORTS_EDITIONS = 2;
     */
    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature["SUPPORTS_EDITIONS"] = 2] = "SUPPORTS_EDITIONS";
})(CodeGeneratorResponse_Feature || (exports.CodeGeneratorResponse_Feature = CodeGeneratorResponse_Feature = {}));
// Retrieve enum metadata with: proto2.getEnumType(CodeGeneratorResponse_Feature)
proto2_js_1.proto2.util.setEnumType(CodeGeneratorResponse_Feature, "google.protobuf.compiler.CodeGeneratorResponse.Feature", [
    { no: 0, name: "FEATURE_NONE" },
    { no: 1, name: "FEATURE_PROTO3_OPTIONAL" },
    { no: 2, name: "FEATURE_SUPPORTS_EDITIONS" },
]);
/**
 * Represents a single generated file.
 *
 * @generated from message google.protobuf.compiler.CodeGeneratorResponse.File
 */
class CodeGeneratorResponse_File extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CodeGeneratorResponse_File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CodeGeneratorResponse_File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CodeGeneratorResponse_File().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(CodeGeneratorResponse_File, a, b);
    }
}
exports.CodeGeneratorResponse_File = CodeGeneratorResponse_File;
CodeGeneratorResponse_File.runtime = proto2_js_1.proto2;
CodeGeneratorResponse_File.typeName = "google.protobuf.compiler.CodeGeneratorResponse.File";
CodeGeneratorResponse_File.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "insertion_point", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "generated_code_info", kind: "message", T: descriptor_pb_js_1.GeneratedCodeInfo, opt: true },
]);


/***/ }),

/***/ 2959:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GeneratedCodeInfo_Annotation_Semantic = exports.GeneratedCodeInfo_Annotation = exports.GeneratedCodeInfo = exports.SourceCodeInfo_Location = exports.SourceCodeInfo = exports.FeatureSetDefaults_FeatureSetEditionDefault = exports.FeatureSetDefaults = exports.FeatureSet_JsonFormat = exports.FeatureSet_MessageEncoding = exports.FeatureSet_Utf8Validation = exports.FeatureSet_RepeatedFieldEncoding = exports.FeatureSet_EnumType = exports.FeatureSet_FieldPresence = exports.FeatureSet = exports.UninterpretedOption_NamePart = exports.UninterpretedOption = exports.MethodOptions_IdempotencyLevel = exports.MethodOptions = exports.ServiceOptions = exports.EnumValueOptions = exports.EnumOptions = exports.OneofOptions = exports.FieldOptions_EditionDefault = exports.FieldOptions_OptionTargetType = exports.FieldOptions_OptionRetention = exports.FieldOptions_JSType = exports.FieldOptions_CType = exports.FieldOptions = exports.MessageOptions = exports.FileOptions_OptimizeMode = exports.FileOptions = exports.MethodDescriptorProto = exports.ServiceDescriptorProto = exports.EnumValueDescriptorProto = exports.EnumDescriptorProto_EnumReservedRange = exports.EnumDescriptorProto = exports.OneofDescriptorProto = exports.FieldDescriptorProto_Label = exports.FieldDescriptorProto_Type = exports.FieldDescriptorProto = exports.ExtensionRangeOptions_Declaration = exports.ExtensionRangeOptions_VerificationState = exports.ExtensionRangeOptions = exports.DescriptorProto_ReservedRange = exports.DescriptorProto_ExtensionRange = exports.DescriptorProto = exports.FileDescriptorProto = exports.FileDescriptorSet = exports.Edition = void 0;
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// The messages in this file describe the definitions found in .proto files.
// A valid .proto file can be translated directly to a FileDescriptorProto
// without any other information (e.g. without reading its imports).
// @generated by protoc-gen-es v1.6.0 with parameter "bootstrap_wkt=true,ts_nocheck=false,target=ts"
// @generated from file google/protobuf/descriptor.proto (package google.protobuf, syntax proto2)
/* eslint-disable */
const proto2_js_1 = __nccwpck_require__(3605);
const message_js_1 = __nccwpck_require__(2779);
/**
 * The full set of known editions.
 *
 * @generated from enum google.protobuf.Edition
 */
var Edition;
(function (Edition) {
    /**
     * A placeholder for an unknown edition value.
     *
     * @generated from enum value: EDITION_UNKNOWN = 0;
     */
    Edition[Edition["EDITION_UNKNOWN"] = 0] = "EDITION_UNKNOWN";
    /**
     * Legacy syntax "editions".  These pre-date editions, but behave much like
     * distinct editions.  These can't be used to specify the edition of proto
     * files, but feature definitions must supply proto2/proto3 defaults for
     * backwards compatibility.
     *
     * @generated from enum value: EDITION_PROTO2 = 998;
     */
    Edition[Edition["EDITION_PROTO2"] = 998] = "EDITION_PROTO2";
    /**
     * @generated from enum value: EDITION_PROTO3 = 999;
     */
    Edition[Edition["EDITION_PROTO3"] = 999] = "EDITION_PROTO3";
    /**
     * Editions that have been released.  The specific values are arbitrary and
     * should not be depended on, but they will always be time-ordered for easy
     * comparison.
     *
     * @generated from enum value: EDITION_2023 = 1000;
     */
    Edition[Edition["EDITION_2023"] = 1000] = "EDITION_2023";
    /**
     * Placeholder editions for testing feature resolution.  These should not be
     * used or relyed on outside of tests.
     *
     * @generated from enum value: EDITION_1_TEST_ONLY = 1;
     */
    Edition[Edition["EDITION_1_TEST_ONLY"] = 1] = "EDITION_1_TEST_ONLY";
    /**
     * @generated from enum value: EDITION_2_TEST_ONLY = 2;
     */
    Edition[Edition["EDITION_2_TEST_ONLY"] = 2] = "EDITION_2_TEST_ONLY";
    /**
     * @generated from enum value: EDITION_99997_TEST_ONLY = 99997;
     */
    Edition[Edition["EDITION_99997_TEST_ONLY"] = 99997] = "EDITION_99997_TEST_ONLY";
    /**
     * @generated from enum value: EDITION_99998_TEST_ONLY = 99998;
     */
    Edition[Edition["EDITION_99998_TEST_ONLY"] = 99998] = "EDITION_99998_TEST_ONLY";
    /**
     * @generated from enum value: EDITION_99999_TEST_ONLY = 99999;
     */
    Edition[Edition["EDITION_99999_TEST_ONLY"] = 99999] = "EDITION_99999_TEST_ONLY";
})(Edition || (exports.Edition = Edition = {}));
// Retrieve enum metadata with: proto2.getEnumType(Edition)
proto2_js_1.proto2.util.setEnumType(Edition, "google.protobuf.Edition", [
    { no: 0, name: "EDITION_UNKNOWN" },
    { no: 998, name: "EDITION_PROTO2" },
    { no: 999, name: "EDITION_PROTO3" },
    { no: 1000, name: "EDITION_2023" },
    { no: 1, name: "EDITION_1_TEST_ONLY" },
    { no: 2, name: "EDITION_2_TEST_ONLY" },
    { no: 99997, name: "EDITION_99997_TEST_ONLY" },
    { no: 99998, name: "EDITION_99998_TEST_ONLY" },
    { no: 99999, name: "EDITION_99999_TEST_ONLY" },
]);
/**
 * The protocol compiler can output a FileDescriptorSet containing the .proto
 * files it parses.
 *
 * @generated from message google.protobuf.FileDescriptorSet
 */
class FileDescriptorSet extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.FileDescriptorProto file = 1;
         */
        this.file = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileDescriptorSet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileDescriptorSet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileDescriptorSet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FileDescriptorSet, a, b);
    }
}
exports.FileDescriptorSet = FileDescriptorSet;
FileDescriptorSet.runtime = proto2_js_1.proto2;
FileDescriptorSet.typeName = "google.protobuf.FileDescriptorSet";
FileDescriptorSet.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "file", kind: "message", T: FileDescriptorProto, repeated: true },
]);
/**
 * Describes a complete .proto file.
 *
 * @generated from message google.protobuf.FileDescriptorProto
 */
class FileDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Names of files imported by this file.
         *
         * @generated from field: repeated string dependency = 3;
         */
        this.dependency = [];
        /**
         * Indexes of the public imported files in the dependency list above.
         *
         * @generated from field: repeated int32 public_dependency = 10;
         */
        this.publicDependency = [];
        /**
         * Indexes of the weak imported files in the dependency list.
         * For Google-internal migration only. Do not use.
         *
         * @generated from field: repeated int32 weak_dependency = 11;
         */
        this.weakDependency = [];
        /**
         * All top-level definitions in this file.
         *
         * @generated from field: repeated google.protobuf.DescriptorProto message_type = 4;
         */
        this.messageType = [];
        /**
         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 5;
         */
        this.enumType = [];
        /**
         * @generated from field: repeated google.protobuf.ServiceDescriptorProto service = 6;
         */
        this.service = [];
        /**
         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 7;
         */
        this.extension = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FileDescriptorProto, a, b);
    }
}
exports.FileDescriptorProto = FileDescriptorProto;
FileDescriptorProto.runtime = proto2_js_1.proto2;
FileDescriptorProto.typeName = "google.protobuf.FileDescriptorProto";
FileDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "dependency", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "public_dependency", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 11, name: "weak_dependency", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "message_type", kind: "message", T: DescriptorProto, repeated: true },
    { no: 5, name: "enum_type", kind: "message", T: EnumDescriptorProto, repeated: true },
    { no: 6, name: "service", kind: "message", T: ServiceDescriptorProto, repeated: true },
    { no: 7, name: "extension", kind: "message", T: FieldDescriptorProto, repeated: true },
    { no: 8, name: "options", kind: "message", T: FileOptions, opt: true },
    { no: 9, name: "source_code_info", kind: "message", T: SourceCodeInfo, opt: true },
    { no: 12, name: "syntax", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "edition", kind: "enum", T: proto2_js_1.proto2.getEnumType(Edition), opt: true },
]);
/**
 * Describes a message type.
 *
 * @generated from message google.protobuf.DescriptorProto
 */
class DescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.FieldDescriptorProto field = 2;
         */
        this.field = [];
        /**
         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 6;
         */
        this.extension = [];
        /**
         * @generated from field: repeated google.protobuf.DescriptorProto nested_type = 3;
         */
        this.nestedType = [];
        /**
         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 4;
         */
        this.enumType = [];
        /**
         * @generated from field: repeated google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;
         */
        this.extensionRange = [];
        /**
         * @generated from field: repeated google.protobuf.OneofDescriptorProto oneof_decl = 8;
         */
        this.oneofDecl = [];
        /**
         * @generated from field: repeated google.protobuf.DescriptorProto.ReservedRange reserved_range = 9;
         */
        this.reservedRange = [];
        /**
         * Reserved field names, which may not be used by fields in the same message.
         * A given name may only be reserved once.
         *
         * @generated from field: repeated string reserved_name = 10;
         */
        this.reservedName = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(DescriptorProto, a, b);
    }
}
exports.DescriptorProto = DescriptorProto;
DescriptorProto.runtime = proto2_js_1.proto2;
DescriptorProto.typeName = "google.protobuf.DescriptorProto";
DescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "field", kind: "message", T: FieldDescriptorProto, repeated: true },
    { no: 6, name: "extension", kind: "message", T: FieldDescriptorProto, repeated: true },
    { no: 3, name: "nested_type", kind: "message", T: DescriptorProto, repeated: true },
    { no: 4, name: "enum_type", kind: "message", T: EnumDescriptorProto, repeated: true },
    { no: 5, name: "extension_range", kind: "message", T: DescriptorProto_ExtensionRange, repeated: true },
    { no: 8, name: "oneof_decl", kind: "message", T: OneofDescriptorProto, repeated: true },
    { no: 7, name: "options", kind: "message", T: MessageOptions, opt: true },
    { no: 9, name: "reserved_range", kind: "message", T: DescriptorProto_ReservedRange, repeated: true },
    { no: 10, name: "reserved_name", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message google.protobuf.DescriptorProto.ExtensionRange
 */
class DescriptorProto_ExtensionRange extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DescriptorProto_ExtensionRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DescriptorProto_ExtensionRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DescriptorProto_ExtensionRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(DescriptorProto_ExtensionRange, a, b);
    }
}
exports.DescriptorProto_ExtensionRange = DescriptorProto_ExtensionRange;
DescriptorProto_ExtensionRange.runtime = proto2_js_1.proto2;
DescriptorProto_ExtensionRange.typeName = "google.protobuf.DescriptorProto.ExtensionRange";
DescriptorProto_ExtensionRange.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "options", kind: "message", T: ExtensionRangeOptions, opt: true },
]);
/**
 * Range of reserved tag numbers. Reserved tag numbers may not be used by
 * fields or extension ranges in the same message. Reserved ranges may
 * not overlap.
 *
 * @generated from message google.protobuf.DescriptorProto.ReservedRange
 */
class DescriptorProto_ReservedRange extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DescriptorProto_ReservedRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DescriptorProto_ReservedRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DescriptorProto_ReservedRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(DescriptorProto_ReservedRange, a, b);
    }
}
exports.DescriptorProto_ReservedRange = DescriptorProto_ReservedRange;
DescriptorProto_ReservedRange.runtime = proto2_js_1.proto2;
DescriptorProto_ReservedRange.typeName = "google.protobuf.DescriptorProto.ReservedRange";
DescriptorProto_ReservedRange.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
]);
/**
 * @generated from message google.protobuf.ExtensionRangeOptions
 */
class ExtensionRangeOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        /**
         * For external users: DO NOT USE. We are in the process of open sourcing
         * extension declaration and executing internal cleanups before it can be
         * used externally.
         *
         * @generated from field: repeated google.protobuf.ExtensionRangeOptions.Declaration declaration = 2;
         */
        this.declaration = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExtensionRangeOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExtensionRangeOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExtensionRangeOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ExtensionRangeOptions, a, b);
    }
}
exports.ExtensionRangeOptions = ExtensionRangeOptions;
ExtensionRangeOptions.runtime = proto2_js_1.proto2;
ExtensionRangeOptions.typeName = "google.protobuf.ExtensionRangeOptions";
ExtensionRangeOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
    { no: 2, name: "declaration", kind: "message", T: ExtensionRangeOptions_Declaration, repeated: true },
    { no: 50, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 3, name: "verification", kind: "enum", T: proto2_js_1.proto2.getEnumType(ExtensionRangeOptions_VerificationState), opt: true, default: ExtensionRangeOptions_VerificationState.UNVERIFIED },
]);
/**
 * The verification state of the extension range.
 *
 * @generated from enum google.protobuf.ExtensionRangeOptions.VerificationState
 */
var ExtensionRangeOptions_VerificationState;
(function (ExtensionRangeOptions_VerificationState) {
    /**
     * All the extensions of the range must be declared.
     *
     * @generated from enum value: DECLARATION = 0;
     */
    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState["DECLARATION"] = 0] = "DECLARATION";
    /**
     * @generated from enum value: UNVERIFIED = 1;
     */
    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState["UNVERIFIED"] = 1] = "UNVERIFIED";
})(ExtensionRangeOptions_VerificationState || (exports.ExtensionRangeOptions_VerificationState = ExtensionRangeOptions_VerificationState = {}));
// Retrieve enum metadata with: proto2.getEnumType(ExtensionRangeOptions_VerificationState)
proto2_js_1.proto2.util.setEnumType(ExtensionRangeOptions_VerificationState, "google.protobuf.ExtensionRangeOptions.VerificationState", [
    { no: 0, name: "DECLARATION" },
    { no: 1, name: "UNVERIFIED" },
]);
/**
 * @generated from message google.protobuf.ExtensionRangeOptions.Declaration
 */
class ExtensionRangeOptions_Declaration extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExtensionRangeOptions_Declaration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExtensionRangeOptions_Declaration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExtensionRangeOptions_Declaration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ExtensionRangeOptions_Declaration, a, b);
    }
}
exports.ExtensionRangeOptions_Declaration = ExtensionRangeOptions_Declaration;
ExtensionRangeOptions_Declaration.runtime = proto2_js_1.proto2;
ExtensionRangeOptions_Declaration.typeName = "google.protobuf.ExtensionRangeOptions.Declaration";
ExtensionRangeOptions_Declaration.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "reserved", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "repeated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * Describes a field within a message.
 *
 * @generated from message google.protobuf.FieldDescriptorProto
 */
class FieldDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FieldDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FieldDescriptorProto, a, b);
    }
}
exports.FieldDescriptorProto = FieldDescriptorProto;
FieldDescriptorProto.runtime = proto2_js_1.proto2;
FieldDescriptorProto.typeName = "google.protobuf.FieldDescriptorProto";
FieldDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "label", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldDescriptorProto_Label), opt: true },
    { no: 5, name: "type", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldDescriptorProto_Type), opt: true },
    { no: 6, name: "type_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "extendee", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "oneof_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "json_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "options", kind: "message", T: FieldOptions, opt: true },
    { no: 17, name: "proto3_optional", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * @generated from enum google.protobuf.FieldDescriptorProto.Type
 */
var FieldDescriptorProto_Type;
(function (FieldDescriptorProto_Type) {
    /**
     * 0 is reserved for errors.
     * Order is weird for historical reasons.
     *
     * @generated from enum value: TYPE_DOUBLE = 1;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["DOUBLE"] = 1] = "DOUBLE";
    /**
     * @generated from enum value: TYPE_FLOAT = 2;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["FLOAT"] = 2] = "FLOAT";
    /**
     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
     * negative values are likely.
     *
     * @generated from enum value: TYPE_INT64 = 3;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["INT64"] = 3] = "INT64";
    /**
     * @generated from enum value: TYPE_UINT64 = 4;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["UINT64"] = 4] = "UINT64";
    /**
     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
     * negative values are likely.
     *
     * @generated from enum value: TYPE_INT32 = 5;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["INT32"] = 5] = "INT32";
    /**
     * @generated from enum value: TYPE_FIXED64 = 6;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["FIXED64"] = 6] = "FIXED64";
    /**
     * @generated from enum value: TYPE_FIXED32 = 7;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["FIXED32"] = 7] = "FIXED32";
    /**
     * @generated from enum value: TYPE_BOOL = 8;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["BOOL"] = 8] = "BOOL";
    /**
     * @generated from enum value: TYPE_STRING = 9;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["STRING"] = 9] = "STRING";
    /**
     * Tag-delimited aggregate.
     * Group type is deprecated and not supported after google.protobuf. However, Proto3
     * implementations should still be able to parse the group wire format and
     * treat group fields as unknown fields.  In Editions, the group wire format
     * can be enabled via the `message_encoding` feature.
     *
     * @generated from enum value: TYPE_GROUP = 10;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["GROUP"] = 10] = "GROUP";
    /**
     * Length-delimited aggregate.
     *
     * @generated from enum value: TYPE_MESSAGE = 11;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["MESSAGE"] = 11] = "MESSAGE";
    /**
     * New in version 2.
     *
     * @generated from enum value: TYPE_BYTES = 12;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["BYTES"] = 12] = "BYTES";
    /**
     * @generated from enum value: TYPE_UINT32 = 13;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["UINT32"] = 13] = "UINT32";
    /**
     * @generated from enum value: TYPE_ENUM = 14;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["ENUM"] = 14] = "ENUM";
    /**
     * @generated from enum value: TYPE_SFIXED32 = 15;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SFIXED32"] = 15] = "SFIXED32";
    /**
     * @generated from enum value: TYPE_SFIXED64 = 16;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SFIXED64"] = 16] = "SFIXED64";
    /**
     * Uses ZigZag encoding.
     *
     * @generated from enum value: TYPE_SINT32 = 17;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SINT32"] = 17] = "SINT32";
    /**
     * Uses ZigZag encoding.
     *
     * @generated from enum value: TYPE_SINT64 = 18;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SINT64"] = 18] = "SINT64";
})(FieldDescriptorProto_Type || (exports.FieldDescriptorProto_Type = FieldDescriptorProto_Type = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Type)
proto2_js_1.proto2.util.setEnumType(FieldDescriptorProto_Type, "google.protobuf.FieldDescriptorProto.Type", [
    { no: 1, name: "TYPE_DOUBLE" },
    { no: 2, name: "TYPE_FLOAT" },
    { no: 3, name: "TYPE_INT64" },
    { no: 4, name: "TYPE_UINT64" },
    { no: 5, name: "TYPE_INT32" },
    { no: 6, name: "TYPE_FIXED64" },
    { no: 7, name: "TYPE_FIXED32" },
    { no: 8, name: "TYPE_BOOL" },
    { no: 9, name: "TYPE_STRING" },
    { no: 10, name: "TYPE_GROUP" },
    { no: 11, name: "TYPE_MESSAGE" },
    { no: 12, name: "TYPE_BYTES" },
    { no: 13, name: "TYPE_UINT32" },
    { no: 14, name: "TYPE_ENUM" },
    { no: 15, name: "TYPE_SFIXED32" },
    { no: 16, name: "TYPE_SFIXED64" },
    { no: 17, name: "TYPE_SINT32" },
    { no: 18, name: "TYPE_SINT64" },
]);
/**
 * @generated from enum google.protobuf.FieldDescriptorProto.Label
 */
var FieldDescriptorProto_Label;
(function (FieldDescriptorProto_Label) {
    /**
     * 0 is reserved for errors
     *
     * @generated from enum value: LABEL_OPTIONAL = 1;
     */
    FieldDescriptorProto_Label[FieldDescriptorProto_Label["OPTIONAL"] = 1] = "OPTIONAL";
    /**
     * @generated from enum value: LABEL_REPEATED = 3;
     */
    FieldDescriptorProto_Label[FieldDescriptorProto_Label["REPEATED"] = 3] = "REPEATED";
    /**
     * The required label is only allowed in google.protobuf.  In proto3 and Editions
     * it's explicitly prohibited.  In Editions, the `field_presence` feature
     * can be used to get this behavior.
     *
     * @generated from enum value: LABEL_REQUIRED = 2;
     */
    FieldDescriptorProto_Label[FieldDescriptorProto_Label["REQUIRED"] = 2] = "REQUIRED";
})(FieldDescriptorProto_Label || (exports.FieldDescriptorProto_Label = FieldDescriptorProto_Label = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Label)
proto2_js_1.proto2.util.setEnumType(FieldDescriptorProto_Label, "google.protobuf.FieldDescriptorProto.Label", [
    { no: 1, name: "LABEL_OPTIONAL" },
    { no: 3, name: "LABEL_REPEATED" },
    { no: 2, name: "LABEL_REQUIRED" },
]);
/**
 * Describes a oneof.
 *
 * @generated from message google.protobuf.OneofDescriptorProto
 */
class OneofDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OneofDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OneofDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OneofDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(OneofDescriptorProto, a, b);
    }
}
exports.OneofDescriptorProto = OneofDescriptorProto;
OneofDescriptorProto.runtime = proto2_js_1.proto2;
OneofDescriptorProto.typeName = "google.protobuf.OneofDescriptorProto";
OneofDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "options", kind: "message", T: OneofOptions, opt: true },
]);
/**
 * Describes an enum type.
 *
 * @generated from message google.protobuf.EnumDescriptorProto
 */
class EnumDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.EnumValueDescriptorProto value = 2;
         */
        this.value = [];
        /**
         * Range of reserved numeric values. Reserved numeric values may not be used
         * by enum values in the same enum declaration. Reserved ranges may not
         * overlap.
         *
         * @generated from field: repeated google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range = 4;
         */
        this.reservedRange = [];
        /**
         * Reserved enum value names, which may not be reused. A given name may only
         * be reserved once.
         *
         * @generated from field: repeated string reserved_name = 5;
         */
        this.reservedName = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumDescriptorProto, a, b);
    }
}
exports.EnumDescriptorProto = EnumDescriptorProto;
EnumDescriptorProto.runtime = proto2_js_1.proto2;
EnumDescriptorProto.typeName = "google.protobuf.EnumDescriptorProto";
EnumDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "value", kind: "message", T: EnumValueDescriptorProto, repeated: true },
    { no: 3, name: "options", kind: "message", T: EnumOptions, opt: true },
    { no: 4, name: "reserved_range", kind: "message", T: EnumDescriptorProto_EnumReservedRange, repeated: true },
    { no: 5, name: "reserved_name", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * Range of reserved numeric values. Reserved values may not be used by
 * entries in the same enum. Reserved ranges may not overlap.
 *
 * Note that this is distinct from DescriptorProto.ReservedRange in that it
 * is inclusive such that it can appropriately represent the entire int32
 * domain.
 *
 * @generated from message google.protobuf.EnumDescriptorProto.EnumReservedRange
 */
class EnumDescriptorProto_EnumReservedRange extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumDescriptorProto_EnumReservedRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumDescriptorProto_EnumReservedRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumDescriptorProto_EnumReservedRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumDescriptorProto_EnumReservedRange, a, b);
    }
}
exports.EnumDescriptorProto_EnumReservedRange = EnumDescriptorProto_EnumReservedRange;
EnumDescriptorProto_EnumReservedRange.runtime = proto2_js_1.proto2;
EnumDescriptorProto_EnumReservedRange.typeName = "google.protobuf.EnumDescriptorProto.EnumReservedRange";
EnumDescriptorProto_EnumReservedRange.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
]);
/**
 * Describes a value within an enum.
 *
 * @generated from message google.protobuf.EnumValueDescriptorProto
 */
class EnumValueDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumValueDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumValueDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumValueDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumValueDescriptorProto, a, b);
    }
}
exports.EnumValueDescriptorProto = EnumValueDescriptorProto;
EnumValueDescriptorProto.runtime = proto2_js_1.proto2;
EnumValueDescriptorProto.typeName = "google.protobuf.EnumValueDescriptorProto";
EnumValueDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "options", kind: "message", T: EnumValueOptions, opt: true },
]);
/**
 * Describes a service.
 *
 * @generated from message google.protobuf.ServiceDescriptorProto
 */
class ServiceDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.MethodDescriptorProto method = 2;
         */
        this.method = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ServiceDescriptorProto, a, b);
    }
}
exports.ServiceDescriptorProto = ServiceDescriptorProto;
ServiceDescriptorProto.runtime = proto2_js_1.proto2;
ServiceDescriptorProto.typeName = "google.protobuf.ServiceDescriptorProto";
ServiceDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "method", kind: "message", T: MethodDescriptorProto, repeated: true },
    { no: 3, name: "options", kind: "message", T: ServiceOptions, opt: true },
]);
/**
 * Describes a method of a service.
 *
 * @generated from message google.protobuf.MethodDescriptorProto
 */
class MethodDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(MethodDescriptorProto, a, b);
    }
}
exports.MethodDescriptorProto = MethodDescriptorProto;
MethodDescriptorProto.runtime = proto2_js_1.proto2;
MethodDescriptorProto.typeName = "google.protobuf.MethodDescriptorProto";
MethodDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "input_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "output_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "options", kind: "message", T: MethodOptions, opt: true },
    { no: 5, name: "client_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 6, name: "server_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
]);
/**
 * @generated from message google.protobuf.FileOptions
 */
class FileOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here.
         * See the documentation for the "Options" section above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FileOptions, a, b);
    }
}
exports.FileOptions = FileOptions;
FileOptions.runtime = proto2_js_1.proto2;
FileOptions.typeName = "google.protobuf.FileOptions";
FileOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "java_package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "java_outer_classname", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "java_multiple_files", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 20, name: "java_generate_equals_and_hash", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 27, name: "java_string_check_utf8", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 9, name: "optimize_for", kind: "enum", T: proto2_js_1.proto2.getEnumType(FileOptions_OptimizeMode), opt: true, default: FileOptions_OptimizeMode.SPEED },
    { no: 11, name: "go_package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "cc_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 17, name: "java_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 18, name: "py_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 42, name: "php_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 23, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 31, name: "cc_enable_arenas", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: true },
    { no: 36, name: "objc_class_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 37, name: "csharp_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 39, name: "swift_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 40, name: "php_class_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 41, name: "php_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 44, name: "php_metadata_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 45, name: "ruby_package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 50, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * Generated classes can be optimized for speed or code size.
 *
 * @generated from enum google.protobuf.FileOptions.OptimizeMode
 */
var FileOptions_OptimizeMode;
(function (FileOptions_OptimizeMode) {
    /**
     * Generate complete code for parsing, serialization,
     *
     * @generated from enum value: SPEED = 1;
     */
    FileOptions_OptimizeMode[FileOptions_OptimizeMode["SPEED"] = 1] = "SPEED";
    /**
     * etc.
     *
     * Use ReflectionOps to implement these methods.
     *
     * @generated from enum value: CODE_SIZE = 2;
     */
    FileOptions_OptimizeMode[FileOptions_OptimizeMode["CODE_SIZE"] = 2] = "CODE_SIZE";
    /**
     * Generate code using MessageLite and the lite runtime.
     *
     * @generated from enum value: LITE_RUNTIME = 3;
     */
    FileOptions_OptimizeMode[FileOptions_OptimizeMode["LITE_RUNTIME"] = 3] = "LITE_RUNTIME";
})(FileOptions_OptimizeMode || (exports.FileOptions_OptimizeMode = FileOptions_OptimizeMode = {}));
// Retrieve enum metadata with: proto2.getEnumType(FileOptions_OptimizeMode)
proto2_js_1.proto2.util.setEnumType(FileOptions_OptimizeMode, "google.protobuf.FileOptions.OptimizeMode", [
    { no: 1, name: "SPEED" },
    { no: 2, name: "CODE_SIZE" },
    { no: 3, name: "LITE_RUNTIME" },
]);
/**
 * @generated from message google.protobuf.MessageOptions
 */
class MessageOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MessageOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MessageOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MessageOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(MessageOptions, a, b);
    }
}
exports.MessageOptions = MessageOptions;
MessageOptions.runtime = proto2_js_1.proto2;
MessageOptions.typeName = "google.protobuf.MessageOptions";
MessageOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "message_set_wire_format", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 2, name: "no_standard_descriptor_accessor", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 3, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 7, name: "map_entry", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "deprecated_legacy_json_field_conflicts", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.FieldOptions
 */
class FieldOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.FieldOptions.OptionTargetType targets = 19;
         */
        this.targets = [];
        /**
         * @generated from field: repeated google.protobuf.FieldOptions.EditionDefault edition_defaults = 20;
         */
        this.editionDefaults = [];
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FieldOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FieldOptions, a, b);
    }
}
exports.FieldOptions = FieldOptions;
FieldOptions.runtime = proto2_js_1.proto2;
FieldOptions.typeName = "google.protobuf.FieldOptions";
FieldOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "ctype", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_CType), opt: true, default: FieldOptions_CType.STRING },
    { no: 2, name: "packed", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "jstype", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_JSType), opt: true, default: FieldOptions_JSType.JS_NORMAL },
    { no: 5, name: "lazy", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 15, name: "unverified_lazy", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 3, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 10, name: "weak", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 16, name: "debug_redact", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 17, name: "retention", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_OptionRetention), opt: true },
    { no: 19, name: "targets", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_OptionTargetType), repeated: true },
    { no: 20, name: "edition_defaults", kind: "message", T: FieldOptions_EditionDefault, repeated: true },
    { no: 21, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from enum google.protobuf.FieldOptions.CType
 */
var FieldOptions_CType;
(function (FieldOptions_CType) {
    /**
     * Default mode.
     *
     * @generated from enum value: STRING = 0;
     */
    FieldOptions_CType[FieldOptions_CType["STRING"] = 0] = "STRING";
    /**
     * The option [ctype=CORD] may be applied to a non-repeated field of type
     * "bytes". It indicates that in C++, the data should be stored in a Cord
     * instead of a string.  For very large strings, this may reduce memory
     * fragmentation. It may also allow better performance when parsing from a
     * Cord, or when parsing with aliasing enabled, as the parsed Cord may then
     * alias the original buffer.
     *
     * @generated from enum value: CORD = 1;
     */
    FieldOptions_CType[FieldOptions_CType["CORD"] = 1] = "CORD";
    /**
     * @generated from enum value: STRING_PIECE = 2;
     */
    FieldOptions_CType[FieldOptions_CType["STRING_PIECE"] = 2] = "STRING_PIECE";
})(FieldOptions_CType || (exports.FieldOptions_CType = FieldOptions_CType = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_CType)
proto2_js_1.proto2.util.setEnumType(FieldOptions_CType, "google.protobuf.FieldOptions.CType", [
    { no: 0, name: "STRING" },
    { no: 1, name: "CORD" },
    { no: 2, name: "STRING_PIECE" },
]);
/**
 * @generated from enum google.protobuf.FieldOptions.JSType
 */
var FieldOptions_JSType;
(function (FieldOptions_JSType) {
    /**
     * Use the default type.
     *
     * @generated from enum value: JS_NORMAL = 0;
     */
    FieldOptions_JSType[FieldOptions_JSType["JS_NORMAL"] = 0] = "JS_NORMAL";
    /**
     * Use JavaScript strings.
     *
     * @generated from enum value: JS_STRING = 1;
     */
    FieldOptions_JSType[FieldOptions_JSType["JS_STRING"] = 1] = "JS_STRING";
    /**
     * Use JavaScript numbers.
     *
     * @generated from enum value: JS_NUMBER = 2;
     */
    FieldOptions_JSType[FieldOptions_JSType["JS_NUMBER"] = 2] = "JS_NUMBER";
})(FieldOptions_JSType || (exports.FieldOptions_JSType = FieldOptions_JSType = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_JSType)
proto2_js_1.proto2.util.setEnumType(FieldOptions_JSType, "google.protobuf.FieldOptions.JSType", [
    { no: 0, name: "JS_NORMAL" },
    { no: 1, name: "JS_STRING" },
    { no: 2, name: "JS_NUMBER" },
]);
/**
 * If set to RETENTION_SOURCE, the option will be omitted from the binary.
 * Note: as of January 2023, support for this is in progress and does not yet
 * have an effect (b/264593489).
 *
 * @generated from enum google.protobuf.FieldOptions.OptionRetention
 */
var FieldOptions_OptionRetention;
(function (FieldOptions_OptionRetention) {
    /**
     * @generated from enum value: RETENTION_UNKNOWN = 0;
     */
    FieldOptions_OptionRetention[FieldOptions_OptionRetention["RETENTION_UNKNOWN"] = 0] = "RETENTION_UNKNOWN";
    /**
     * @generated from enum value: RETENTION_RUNTIME = 1;
     */
    FieldOptions_OptionRetention[FieldOptions_OptionRetention["RETENTION_RUNTIME"] = 1] = "RETENTION_RUNTIME";
    /**
     * @generated from enum value: RETENTION_SOURCE = 2;
     */
    FieldOptions_OptionRetention[FieldOptions_OptionRetention["RETENTION_SOURCE"] = 2] = "RETENTION_SOURCE";
})(FieldOptions_OptionRetention || (exports.FieldOptions_OptionRetention = FieldOptions_OptionRetention = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionRetention)
proto2_js_1.proto2.util.setEnumType(FieldOptions_OptionRetention, "google.protobuf.FieldOptions.OptionRetention", [
    { no: 0, name: "RETENTION_UNKNOWN" },
    { no: 1, name: "RETENTION_RUNTIME" },
    { no: 2, name: "RETENTION_SOURCE" },
]);
/**
 * This indicates the types of entities that the field may apply to when used
 * as an option. If it is unset, then the field may be freely used as an
 * option on any kind of entity. Note: as of January 2023, support for this is
 * in progress and does not yet have an effect (b/264593489).
 *
 * @generated from enum google.protobuf.FieldOptions.OptionTargetType
 */
var FieldOptions_OptionTargetType;
(function (FieldOptions_OptionTargetType) {
    /**
     * @generated from enum value: TARGET_TYPE_UNKNOWN = 0;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_UNKNOWN"] = 0] = "TARGET_TYPE_UNKNOWN";
    /**
     * @generated from enum value: TARGET_TYPE_FILE = 1;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_FILE"] = 1] = "TARGET_TYPE_FILE";
    /**
     * @generated from enum value: TARGET_TYPE_EXTENSION_RANGE = 2;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_EXTENSION_RANGE"] = 2] = "TARGET_TYPE_EXTENSION_RANGE";
    /**
     * @generated from enum value: TARGET_TYPE_MESSAGE = 3;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_MESSAGE"] = 3] = "TARGET_TYPE_MESSAGE";
    /**
     * @generated from enum value: TARGET_TYPE_FIELD = 4;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_FIELD"] = 4] = "TARGET_TYPE_FIELD";
    /**
     * @generated from enum value: TARGET_TYPE_ONEOF = 5;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_ONEOF"] = 5] = "TARGET_TYPE_ONEOF";
    /**
     * @generated from enum value: TARGET_TYPE_ENUM = 6;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_ENUM"] = 6] = "TARGET_TYPE_ENUM";
    /**
     * @generated from enum value: TARGET_TYPE_ENUM_ENTRY = 7;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_ENUM_ENTRY"] = 7] = "TARGET_TYPE_ENUM_ENTRY";
    /**
     * @generated from enum value: TARGET_TYPE_SERVICE = 8;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_SERVICE"] = 8] = "TARGET_TYPE_SERVICE";
    /**
     * @generated from enum value: TARGET_TYPE_METHOD = 9;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_METHOD"] = 9] = "TARGET_TYPE_METHOD";
})(FieldOptions_OptionTargetType || (exports.FieldOptions_OptionTargetType = FieldOptions_OptionTargetType = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionTargetType)
proto2_js_1.proto2.util.setEnumType(FieldOptions_OptionTargetType, "google.protobuf.FieldOptions.OptionTargetType", [
    { no: 0, name: "TARGET_TYPE_UNKNOWN" },
    { no: 1, name: "TARGET_TYPE_FILE" },
    { no: 2, name: "TARGET_TYPE_EXTENSION_RANGE" },
    { no: 3, name: "TARGET_TYPE_MESSAGE" },
    { no: 4, name: "TARGET_TYPE_FIELD" },
    { no: 5, name: "TARGET_TYPE_ONEOF" },
    { no: 6, name: "TARGET_TYPE_ENUM" },
    { no: 7, name: "TARGET_TYPE_ENUM_ENTRY" },
    { no: 8, name: "TARGET_TYPE_SERVICE" },
    { no: 9, name: "TARGET_TYPE_METHOD" },
]);
/**
 * @generated from message google.protobuf.FieldOptions.EditionDefault
 */
class FieldOptions_EditionDefault extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FieldOptions_EditionDefault().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldOptions_EditionDefault().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldOptions_EditionDefault().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FieldOptions_EditionDefault, a, b);
    }
}
exports.FieldOptions_EditionDefault = FieldOptions_EditionDefault;
FieldOptions_EditionDefault.runtime = proto2_js_1.proto2;
FieldOptions_EditionDefault.typeName = "google.protobuf.FieldOptions.EditionDefault";
FieldOptions_EditionDefault.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 3, name: "edition", kind: "enum", T: proto2_js_1.proto2.getEnumType(Edition), opt: true },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * @generated from message google.protobuf.OneofOptions
 */
class OneofOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OneofOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OneofOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OneofOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(OneofOptions, a, b);
    }
}
exports.OneofOptions = OneofOptions;
OneofOptions.runtime = proto2_js_1.proto2;
OneofOptions.typeName = "google.protobuf.OneofOptions";
OneofOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.EnumOptions
 */
class EnumOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumOptions, a, b);
    }
}
exports.EnumOptions = EnumOptions;
EnumOptions.runtime = proto2_js_1.proto2;
EnumOptions.typeName = "google.protobuf.EnumOptions";
EnumOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 2, name: "allow_alias", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 6, name: "deprecated_legacy_json_field_conflicts", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.EnumValueOptions
 */
class EnumValueOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumValueOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumValueOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumValueOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumValueOptions, a, b);
    }
}
exports.EnumValueOptions = EnumValueOptions;
EnumValueOptions.runtime = proto2_js_1.proto2;
EnumValueOptions.typeName = "google.protobuf.EnumValueOptions";
EnumValueOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 2, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 3, name: "debug_redact", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.ServiceOptions
 */
class ServiceOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ServiceOptions, a, b);
    }
}
exports.ServiceOptions = ServiceOptions;
ServiceOptions.runtime = proto2_js_1.proto2;
ServiceOptions.typeName = "google.protobuf.ServiceOptions";
ServiceOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 34, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 33, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.MethodOptions
 */
class MethodOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(MethodOptions, a, b);
    }
}
exports.MethodOptions = MethodOptions;
MethodOptions.runtime = proto2_js_1.proto2;
MethodOptions.typeName = "google.protobuf.MethodOptions";
MethodOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 33, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 34, name: "idempotency_level", kind: "enum", T: proto2_js_1.proto2.getEnumType(MethodOptions_IdempotencyLevel), opt: true, default: MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN },
    { no: 35, name: "features", kind: "message", T: FeatureSet, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
 * or neither? HTTP based RPC implementation may choose GET verb for safe
 * methods, and PUT verb for idempotent methods instead of the default POST.
 *
 * @generated from enum google.protobuf.MethodOptions.IdempotencyLevel
 */
var MethodOptions_IdempotencyLevel;
(function (MethodOptions_IdempotencyLevel) {
    /**
     * @generated from enum value: IDEMPOTENCY_UNKNOWN = 0;
     */
    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel["IDEMPOTENCY_UNKNOWN"] = 0] = "IDEMPOTENCY_UNKNOWN";
    /**
     * implies idempotent
     *
     * @generated from enum value: NO_SIDE_EFFECTS = 1;
     */
    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel["NO_SIDE_EFFECTS"] = 1] = "NO_SIDE_EFFECTS";
    /**
     * idempotent, but may have side effects
     *
     * @generated from enum value: IDEMPOTENT = 2;
     */
    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel["IDEMPOTENT"] = 2] = "IDEMPOTENT";
})(MethodOptions_IdempotencyLevel || (exports.MethodOptions_IdempotencyLevel = MethodOptions_IdempotencyLevel = {}));
// Retrieve enum metadata with: proto2.getEnumType(MethodOptions_IdempotencyLevel)
proto2_js_1.proto2.util.setEnumType(MethodOptions_IdempotencyLevel, "google.protobuf.MethodOptions.IdempotencyLevel", [
    { no: 0, name: "IDEMPOTENCY_UNKNOWN" },
    { no: 1, name: "NO_SIDE_EFFECTS" },
    { no: 2, name: "IDEMPOTENT" },
]);
/**
 * A message representing a option the parser does not recognize. This only
 * appears in options protos created by the compiler::Parser class.
 * DescriptorPool resolves these when building Descriptor objects. Therefore,
 * options protos in descriptor objects (e.g. returned by Descriptor::options(),
 * or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
 * in them.
 *
 * @generated from message google.protobuf.UninterpretedOption
 */
class UninterpretedOption extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.UninterpretedOption.NamePart name = 2;
         */
        this.name = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UninterpretedOption().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UninterpretedOption().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UninterpretedOption().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(UninterpretedOption, a, b);
    }
}
exports.UninterpretedOption = UninterpretedOption;
UninterpretedOption.runtime = proto2_js_1.proto2;
UninterpretedOption.typeName = "google.protobuf.UninterpretedOption";
UninterpretedOption.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 2, name: "name", kind: "message", T: UninterpretedOption_NamePart, repeated: true },
    { no: 3, name: "identifier_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "positive_int_value", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "negative_int_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 6, name: "double_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 7, name: "string_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 8, name: "aggregate_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * The name of the uninterpreted option.  Each string represents a segment in
 * a dot-separated name.  is_extension is true iff a segment represents an
 * extension (denoted with parentheses in options specs in .proto files).
 * E.g.,{ ["foo", false], ["bar.baz", true], ["moo", false] } represents
 * "foo.(bar.baz).moo".
 *
 * @generated from message google.protobuf.UninterpretedOption.NamePart
 */
class UninterpretedOption_NamePart extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UninterpretedOption_NamePart().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UninterpretedOption_NamePart().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UninterpretedOption_NamePart().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(UninterpretedOption_NamePart, a, b);
    }
}
exports.UninterpretedOption_NamePart = UninterpretedOption_NamePart;
UninterpretedOption_NamePart.runtime = proto2_js_1.proto2;
UninterpretedOption_NamePart.typeName = "google.protobuf.UninterpretedOption.NamePart";
UninterpretedOption_NamePart.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name_part", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_extension", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * TODO Enums in C++ gencode (and potentially other languages) are
 * not well scoped.  This means that each of the feature enums below can clash
 * with each other.  The short names we've chosen maximize call-site
 * readability, but leave us very open to this scenario.  A future feature will
 * be designed and implemented to handle this, hopefully before we ever hit a
 * conflict here.
 *
 * @generated from message google.protobuf.FeatureSet
 */
class FeatureSet extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeatureSet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeatureSet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeatureSet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FeatureSet, a, b);
    }
}
exports.FeatureSet = FeatureSet;
FeatureSet.runtime = proto2_js_1.proto2;
FeatureSet.typeName = "google.protobuf.FeatureSet";
FeatureSet.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "field_presence", kind: "enum", T: proto2_js_1.proto2.getEnumType(FeatureSet_FieldPresence), opt: true },
    { no: 2, name: "enum_type", kind: "enum", T: proto2_js_1.proto2.getEnumType(FeatureSet_EnumType), opt: true },
    { no: 3, name: "repeated_field_encoding", kind: "enum", T: proto2_js_1.proto2.getEnumType(FeatureSet_RepeatedFieldEncoding), opt: true },
    { no: 4, name: "utf8_validation", kind: "enum", T: proto2_js_1.proto2.getEnumType(FeatureSet_Utf8Validation), opt: true },
    { no: 5, name: "message_encoding", kind: "enum", T: proto2_js_1.proto2.getEnumType(FeatureSet_MessageEncoding), opt: true },
    { no: 6, name: "json_format", kind: "enum", T: proto2_js_1.proto2.getEnumType(FeatureSet_JsonFormat), opt: true },
]);
/**
 * @generated from enum google.protobuf.FeatureSet.FieldPresence
 */
var FeatureSet_FieldPresence;
(function (FeatureSet_FieldPresence) {
    /**
     * @generated from enum value: FIELD_PRESENCE_UNKNOWN = 0;
     */
    FeatureSet_FieldPresence[FeatureSet_FieldPresence["FIELD_PRESENCE_UNKNOWN"] = 0] = "FIELD_PRESENCE_UNKNOWN";
    /**
     * @generated from enum value: EXPLICIT = 1;
     */
    FeatureSet_FieldPresence[FeatureSet_FieldPresence["EXPLICIT"] = 1] = "EXPLICIT";
    /**
     * @generated from enum value: IMPLICIT = 2;
     */
    FeatureSet_FieldPresence[FeatureSet_FieldPresence["IMPLICIT"] = 2] = "IMPLICIT";
    /**
     * @generated from enum value: LEGACY_REQUIRED = 3;
     */
    FeatureSet_FieldPresence[FeatureSet_FieldPresence["LEGACY_REQUIRED"] = 3] = "LEGACY_REQUIRED";
})(FeatureSet_FieldPresence || (exports.FeatureSet_FieldPresence = FeatureSet_FieldPresence = {}));
// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_FieldPresence)
proto2_js_1.proto2.util.setEnumType(FeatureSet_FieldPresence, "google.protobuf.FeatureSet.FieldPresence", [
    { no: 0, name: "FIELD_PRESENCE_UNKNOWN" },
    { no: 1, name: "EXPLICIT" },
    { no: 2, name: "IMPLICIT" },
    { no: 3, name: "LEGACY_REQUIRED" },
]);
/**
 * @generated from enum google.protobuf.FeatureSet.EnumType
 */
var FeatureSet_EnumType;
(function (FeatureSet_EnumType) {
    /**
     * @generated from enum value: ENUM_TYPE_UNKNOWN = 0;
     */
    FeatureSet_EnumType[FeatureSet_EnumType["ENUM_TYPE_UNKNOWN"] = 0] = "ENUM_TYPE_UNKNOWN";
    /**
     * @generated from enum value: OPEN = 1;
     */
    FeatureSet_EnumType[FeatureSet_EnumType["OPEN"] = 1] = "OPEN";
    /**
     * @generated from enum value: CLOSED = 2;
     */
    FeatureSet_EnumType[FeatureSet_EnumType["CLOSED"] = 2] = "CLOSED";
})(FeatureSet_EnumType || (exports.FeatureSet_EnumType = FeatureSet_EnumType = {}));
// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_EnumType)
proto2_js_1.proto2.util.setEnumType(FeatureSet_EnumType, "google.protobuf.FeatureSet.EnumType", [
    { no: 0, name: "ENUM_TYPE_UNKNOWN" },
    { no: 1, name: "OPEN" },
    { no: 2, name: "CLOSED" },
]);
/**
 * @generated from enum google.protobuf.FeatureSet.RepeatedFieldEncoding
 */
var FeatureSet_RepeatedFieldEncoding;
(function (FeatureSet_RepeatedFieldEncoding) {
    /**
     * @generated from enum value: REPEATED_FIELD_ENCODING_UNKNOWN = 0;
     */
    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding["REPEATED_FIELD_ENCODING_UNKNOWN"] = 0] = "REPEATED_FIELD_ENCODING_UNKNOWN";
    /**
     * @generated from enum value: PACKED = 1;
     */
    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding["PACKED"] = 1] = "PACKED";
    /**
     * @generated from enum value: EXPANDED = 2;
     */
    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding["EXPANDED"] = 2] = "EXPANDED";
})(FeatureSet_RepeatedFieldEncoding || (exports.FeatureSet_RepeatedFieldEncoding = FeatureSet_RepeatedFieldEncoding = {}));
// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_RepeatedFieldEncoding)
proto2_js_1.proto2.util.setEnumType(FeatureSet_RepeatedFieldEncoding, "google.protobuf.FeatureSet.RepeatedFieldEncoding", [
    { no: 0, name: "REPEATED_FIELD_ENCODING_UNKNOWN" },
    { no: 1, name: "PACKED" },
    { no: 2, name: "EXPANDED" },
]);
/**
 * @generated from enum google.protobuf.FeatureSet.Utf8Validation
 */
var FeatureSet_Utf8Validation;
(function (FeatureSet_Utf8Validation) {
    /**
     * @generated from enum value: UTF8_VALIDATION_UNKNOWN = 0;
     */
    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation["UTF8_VALIDATION_UNKNOWN"] = 0] = "UTF8_VALIDATION_UNKNOWN";
    /**
     * @generated from enum value: NONE = 1;
     */
    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation["NONE"] = 1] = "NONE";
    /**
     * @generated from enum value: VERIFY = 2;
     */
    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation["VERIFY"] = 2] = "VERIFY";
})(FeatureSet_Utf8Validation || (exports.FeatureSet_Utf8Validation = FeatureSet_Utf8Validation = {}));
// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_Utf8Validation)
proto2_js_1.proto2.util.setEnumType(FeatureSet_Utf8Validation, "google.protobuf.FeatureSet.Utf8Validation", [
    { no: 0, name: "UTF8_VALIDATION_UNKNOWN" },
    { no: 1, name: "NONE" },
    { no: 2, name: "VERIFY" },
]);
/**
 * @generated from enum google.protobuf.FeatureSet.MessageEncoding
 */
var FeatureSet_MessageEncoding;
(function (FeatureSet_MessageEncoding) {
    /**
     * @generated from enum value: MESSAGE_ENCODING_UNKNOWN = 0;
     */
    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding["MESSAGE_ENCODING_UNKNOWN"] = 0] = "MESSAGE_ENCODING_UNKNOWN";
    /**
     * @generated from enum value: LENGTH_PREFIXED = 1;
     */
    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding["LENGTH_PREFIXED"] = 1] = "LENGTH_PREFIXED";
    /**
     * @generated from enum value: DELIMITED = 2;
     */
    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding["DELIMITED"] = 2] = "DELIMITED";
})(FeatureSet_MessageEncoding || (exports.FeatureSet_MessageEncoding = FeatureSet_MessageEncoding = {}));
// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_MessageEncoding)
proto2_js_1.proto2.util.setEnumType(FeatureSet_MessageEncoding, "google.protobuf.FeatureSet.MessageEncoding", [
    { no: 0, name: "MESSAGE_ENCODING_UNKNOWN" },
    { no: 1, name: "LENGTH_PREFIXED" },
    { no: 2, name: "DELIMITED" },
]);
/**
 * @generated from enum google.protobuf.FeatureSet.JsonFormat
 */
var FeatureSet_JsonFormat;
(function (FeatureSet_JsonFormat) {
    /**
     * @generated from enum value: JSON_FORMAT_UNKNOWN = 0;
     */
    FeatureSet_JsonFormat[FeatureSet_JsonFormat["JSON_FORMAT_UNKNOWN"] = 0] = "JSON_FORMAT_UNKNOWN";
    /**
     * @generated from enum value: ALLOW = 1;
     */
    FeatureSet_JsonFormat[FeatureSet_JsonFormat["ALLOW"] = 1] = "ALLOW";
    /**
     * @generated from enum value: LEGACY_BEST_EFFORT = 2;
     */
    FeatureSet_JsonFormat[FeatureSet_JsonFormat["LEGACY_BEST_EFFORT"] = 2] = "LEGACY_BEST_EFFORT";
})(FeatureSet_JsonFormat || (exports.FeatureSet_JsonFormat = FeatureSet_JsonFormat = {}));
// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_JsonFormat)
proto2_js_1.proto2.util.setEnumType(FeatureSet_JsonFormat, "google.protobuf.FeatureSet.JsonFormat", [
    { no: 0, name: "JSON_FORMAT_UNKNOWN" },
    { no: 1, name: "ALLOW" },
    { no: 2, name: "LEGACY_BEST_EFFORT" },
]);
/**
 * A compiled specification for the defaults of a set of features.  These
 * messages are generated from FeatureSet extensions and can be used to seed
 * feature resolution. The resolution with this object becomes a simple search
 * for the closest matching edition, followed by proto merges.
 *
 * @generated from message google.protobuf.FeatureSetDefaults
 */
class FeatureSetDefaults extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault defaults = 1;
         */
        this.defaults = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeatureSetDefaults().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeatureSetDefaults().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeatureSetDefaults().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FeatureSetDefaults, a, b);
    }
}
exports.FeatureSetDefaults = FeatureSetDefaults;
FeatureSetDefaults.runtime = proto2_js_1.proto2;
FeatureSetDefaults.typeName = "google.protobuf.FeatureSetDefaults";
FeatureSetDefaults.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "defaults", kind: "message", T: FeatureSetDefaults_FeatureSetEditionDefault, repeated: true },
    { no: 4, name: "minimum_edition", kind: "enum", T: proto2_js_1.proto2.getEnumType(Edition), opt: true },
    { no: 5, name: "maximum_edition", kind: "enum", T: proto2_js_1.proto2.getEnumType(Edition), opt: true },
]);
/**
 * A map from every known edition with a unique set of defaults to its
 * defaults. Not all editions may be contained here.  For a given edition,
 * the defaults at the closest matching edition ordered at or before it should
 * be used.  This field must be in strict ascending order by edition.
 *
 * @generated from message google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
 */
class FeatureSetDefaults_FeatureSetEditionDefault extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeatureSetDefaults_FeatureSetEditionDefault().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeatureSetDefaults_FeatureSetEditionDefault().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeatureSetDefaults_FeatureSetEditionDefault().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FeatureSetDefaults_FeatureSetEditionDefault, a, b);
    }
}
exports.FeatureSetDefaults_FeatureSetEditionDefault = FeatureSetDefaults_FeatureSetEditionDefault;
FeatureSetDefaults_FeatureSetEditionDefault.runtime = proto2_js_1.proto2;
FeatureSetDefaults_FeatureSetEditionDefault.typeName = "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";
FeatureSetDefaults_FeatureSetEditionDefault.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 3, name: "edition", kind: "enum", T: proto2_js_1.proto2.getEnumType(Edition), opt: true },
    { no: 2, name: "features", kind: "message", T: FeatureSet, opt: true },
]);
/**
 * Encapsulates information about the original source file from which a
 * FileDescriptorProto was generated.
 *
 * @generated from message google.protobuf.SourceCodeInfo
 */
class SourceCodeInfo extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * A Location identifies a piece of source code in a .proto file which
         * corresponds to a particular definition.  This information is intended
         * to be useful to IDEs, code indexers, documentation generators, and similar
         * tools.
         *
         * For example, say we have a file like:
         *   message Foo {
         *     optional string foo = 1;
         *   }
         * Let's look at just the field definition:
         *   optional string foo = 1;
         *   ^       ^^     ^^  ^  ^^^
         *   a       bc     de  f  ghi
         * We have the following locations:
         *   span   path               represents
         *   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
         *   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
         *   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
         *   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
         *   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
         *
         * Notes:
         * - A location may refer to a repeated field itself (i.e. not to any
         *   particular index within it).  This is used whenever a set of elements are
         *   logically enclosed in a single code segment.  For example, an entire
         *   extend block (possibly containing multiple extension definitions) will
         *   have an outer location whose path refers to the "extensions" repeated
         *   field without an index.
         * - Multiple locations may have the same path.  This happens when a single
         *   logical declaration is spread out across multiple places.  The most
         *   obvious example is the "extend" block again -- there may be multiple
         *   extend blocks in the same scope, each of which will have the same path.
         * - A location's span is not always a subset of its parent's span.  For
         *   example, the "extendee" of an extension declaration appears at the
         *   beginning of the "extend" block and is shared by all extensions within
         *   the block.
         * - Just because a location's span is a subset of some other location's span
         *   does not mean that it is a descendant.  For example, a "group" defines
         *   both a type and a field in a single declaration.  Thus, the locations
         *   corresponding to the type and field and their components will overlap.
         * - Code which tries to interpret locations should probably be designed to
         *   ignore those that it doesn't understand, as more types of locations could
         *   be recorded in the future.
         *
         * @generated from field: repeated google.protobuf.SourceCodeInfo.Location location = 1;
         */
        this.location = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SourceCodeInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SourceCodeInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SourceCodeInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(SourceCodeInfo, a, b);
    }
}
exports.SourceCodeInfo = SourceCodeInfo;
SourceCodeInfo.runtime = proto2_js_1.proto2;
SourceCodeInfo.typeName = "google.protobuf.SourceCodeInfo";
SourceCodeInfo.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "location", kind: "message", T: SourceCodeInfo_Location, repeated: true },
]);
/**
 * @generated from message google.protobuf.SourceCodeInfo.Location
 */
class SourceCodeInfo_Location extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Identifies which part of the FileDescriptorProto was defined at this
         * location.
         *
         * Each element is a field number or an index.  They form a path from
         * the root FileDescriptorProto to the place where the definition occurs.
         * For example, this path:
         *   [ 4, 3, 2, 7, 1 ]
         * refers to:
         *   file.message_type(3)  // 4, 3
         *       .field(7)         // 2, 7
         *       .name()           // 1
         * This is because FileDescriptorProto.message_type has field number 4:
         *   repeated DescriptorProto message_type = 4;
         * and DescriptorProto.field has field number 2:
         *   repeated FieldDescriptorProto field = 2;
         * and FieldDescriptorProto.name has field number 1:
         *   optional string name = 1;
         *
         * Thus, the above path gives the location of a field name.  If we removed
         * the last element:
         *   [ 4, 3, 2, 7 ]
         * this path refers to the whole field declaration (from the beginning
         * of the label to the terminating semicolon).
         *
         * @generated from field: repeated int32 path = 1 [packed = true];
         */
        this.path = [];
        /**
         * Always has exactly three or four elements: start line, start column,
         * end line (optional, otherwise assumed same as start line), end column.
         * These are packed into a single field for efficiency.  Note that line
         * and column numbers are zero-based -- typically you will want to add
         * 1 to each before displaying to a user.
         *
         * @generated from field: repeated int32 span = 2 [packed = true];
         */
        this.span = [];
        /**
         * @generated from field: repeated string leading_detached_comments = 6;
         */
        this.leadingDetachedComments = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SourceCodeInfo_Location().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SourceCodeInfo_Location().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SourceCodeInfo_Location().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(SourceCodeInfo_Location, a, b);
    }
}
exports.SourceCodeInfo_Location = SourceCodeInfo_Location;
SourceCodeInfo_Location.runtime = proto2_js_1.proto2;
SourceCodeInfo_Location.typeName = "google.protobuf.SourceCodeInfo.Location";
SourceCodeInfo_Location.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 2, name: "span", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 3, name: "leading_comments", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "trailing_comments", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "leading_detached_comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * Describes the relationship between generated code and its original source
 * file. A GeneratedCodeInfo message is associated with only one generated
 * source file, but may contain references to different source .proto files.
 *
 * @generated from message google.protobuf.GeneratedCodeInfo
 */
class GeneratedCodeInfo extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * An Annotation connects some span of text in generated code to an element
         * of its generating .proto file.
         *
         * @generated from field: repeated google.protobuf.GeneratedCodeInfo.Annotation annotation = 1;
         */
        this.annotation = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeneratedCodeInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeneratedCodeInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeneratedCodeInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(GeneratedCodeInfo, a, b);
    }
}
exports.GeneratedCodeInfo = GeneratedCodeInfo;
GeneratedCodeInfo.runtime = proto2_js_1.proto2;
GeneratedCodeInfo.typeName = "google.protobuf.GeneratedCodeInfo";
GeneratedCodeInfo.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "annotation", kind: "message", T: GeneratedCodeInfo_Annotation, repeated: true },
]);
/**
 * @generated from message google.protobuf.GeneratedCodeInfo.Annotation
 */
class GeneratedCodeInfo_Annotation extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Identifies the element in the original source .proto file. This field
         * is formatted the same as SourceCodeInfo.Location.path.
         *
         * @generated from field: repeated int32 path = 1 [packed = true];
         */
        this.path = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeneratedCodeInfo_Annotation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeneratedCodeInfo_Annotation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeneratedCodeInfo_Annotation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(GeneratedCodeInfo_Annotation, a, b);
    }
}
exports.GeneratedCodeInfo_Annotation = GeneratedCodeInfo_Annotation;
GeneratedCodeInfo_Annotation.runtime = proto2_js_1.proto2;
GeneratedCodeInfo_Annotation.typeName = "google.protobuf.GeneratedCodeInfo.Annotation";
GeneratedCodeInfo_Annotation.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 2, name: "source_file", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "begin", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "semantic", kind: "enum", T: proto2_js_1.proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic), opt: true },
]);
/**
 * Represents the identified object's effect on the element in the original
 * .proto file.
 *
 * @generated from enum google.protobuf.GeneratedCodeInfo.Annotation.Semantic
 */
var GeneratedCodeInfo_Annotation_Semantic;
(function (GeneratedCodeInfo_Annotation_Semantic) {
    /**
     * There is no effect or the effect is indescribable.
     *
     * @generated from enum value: NONE = 0;
     */
    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic["NONE"] = 0] = "NONE";
    /**
     * The element is set or otherwise mutated.
     *
     * @generated from enum value: SET = 1;
     */
    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic["SET"] = 1] = "SET";
    /**
     * An alias to the element is returned.
     *
     * @generated from enum value: ALIAS = 2;
     */
    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic["ALIAS"] = 2] = "ALIAS";
})(GeneratedCodeInfo_Annotation_Semantic || (exports.GeneratedCodeInfo_Annotation_Semantic = GeneratedCodeInfo_Annotation_Semantic = {}));
// Retrieve enum metadata with: proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic)
proto2_js_1.proto2.util.setEnumType(GeneratedCodeInfo_Annotation_Semantic, "google.protobuf.GeneratedCodeInfo.Annotation.Semantic", [
    { no: 0, name: "NONE" },
    { no: 1, name: "SET" },
    { no: 2, name: "ALIAS" },
]);


/***/ }),

/***/ 2183:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Duration = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto_int64_js_1 = __nccwpck_require__(6865);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * A Duration represents a signed, fixed-length span of time represented
 * as a count of seconds and fractions of seconds at nanosecond
 * resolution. It is independent of any calendar and concepts like "day"
 * or "month". It is related to Timestamp in that the difference between
 * two Timestamp values is a Duration and it can be added or subtracted
 * from a Timestamp. Range is approximately +-10,000 years.
 *
 * # Examples
 *
 * Example 1: Compute Duration from two Timestamps in pseudo code.
 *
 *     Timestamp start = ...;
 *     Timestamp end = ...;
 *     Duration duration = ...;
 *
 *     duration.seconds = end.seconds - start.seconds;
 *     duration.nanos = end.nanos - start.nanos;
 *
 *     if (duration.seconds < 0 && duration.nanos > 0) {
 *       duration.seconds += 1;
 *       duration.nanos -= 1000000000;
 *     } else if (duration.seconds > 0 && duration.nanos < 0) {
 *       duration.seconds -= 1;
 *       duration.nanos += 1000000000;
 *     }
 *
 * Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.
 *
 *     Timestamp start = ...;
 *     Duration duration = ...;
 *     Timestamp end = ...;
 *
 *     end.seconds = start.seconds + duration.seconds;
 *     end.nanos = start.nanos + duration.nanos;
 *
 *     if (end.nanos < 0) {
 *       end.seconds -= 1;
 *       end.nanos += 1000000000;
 *     } else if (end.nanos >= 1000000000) {
 *       end.seconds += 1;
 *       end.nanos -= 1000000000;
 *     }
 *
 * Example 3: Compute Duration from datetime.timedelta in Python.
 *
 *     td = datetime.timedelta(days=3, minutes=10)
 *     duration = Duration()
 *     duration.FromTimedelta(td)
 *
 * # JSON Mapping
 *
 * In JSON format, the Duration type is encoded as a string rather than an
 * object, where the string ends in the suffix "s" (indicating seconds) and
 * is preceded by the number of seconds, with nanoseconds expressed as
 * fractional seconds. For example, 3 seconds with 0 nanoseconds should be
 * encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
 * be expressed in JSON format as "3.000000001s", and 3 seconds and 1
 * microsecond should be expressed in JSON format as "3.000001s".
 *
 *
 * @generated from message google.protobuf.Duration
 */
class Duration extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Signed seconds of the span of time. Must be from -315,576,000,000
         * to +315,576,000,000 inclusive. Note: these bounds are computed from:
         * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
         *
         * @generated from field: int64 seconds = 1;
         */
        this.seconds = proto_int64_js_1.protoInt64.zero;
        /**
         * Signed fractions of a second at nanosecond resolution of the span
         * of time. Durations less than one second are represented with a 0
         * `seconds` field and a positive or negative `nanos` field. For durations
         * of one second or more, a non-zero value for the `nanos` field must be
         * of the same sign as the `seconds` field. Must be from -999,999,999
         * to +999,999,999 inclusive.
         *
         * @generated from field: int32 nanos = 2;
         */
        this.nanos = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    fromJson(json, options) {
        if (typeof json !== "string") {
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        const match = json.match(/^(-?[0-9]+)(?:\.([0-9]+))?s/);
        if (match === null) {
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        const longSeconds = Number(match[1]);
        if (longSeconds > 315576000000 || longSeconds < -315576000000) {
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        this.seconds = proto_int64_js_1.protoInt64.parse(longSeconds);
        if (typeof match[2] == "string") {
            const nanosStr = match[2] + "0".repeat(9 - match[2].length);
            this.nanos = parseInt(nanosStr);
            if (longSeconds < 0 || Object.is(longSeconds, -0)) {
                this.nanos = -this.nanos;
            }
        }
        return this;
    }
    toJson(options) {
        if (Number(this.seconds) > 315576000000 || Number(this.seconds) < -315576000000) {
            throw new Error(`cannot encode google.protobuf.Duration to JSON: value out of range`);
        }
        let text = this.seconds.toString();
        if (this.nanos !== 0) {
            let nanosStr = Math.abs(this.nanos).toString();
            nanosStr = "0".repeat(9 - nanosStr.length) + nanosStr;
            if (nanosStr.substring(3) === "000000") {
                nanosStr = nanosStr.substring(0, 3);
            }
            else if (nanosStr.substring(6) === "000") {
                nanosStr = nanosStr.substring(0, 6);
            }
            text += "." + nanosStr;
            if (this.nanos < 0 && Number(this.seconds) == 0) {
                text = "-" + text;
            }
        }
        return text + "s";
    }
    static fromBinary(bytes, options) {
        return new Duration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Duration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Duration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Duration, a, b);
    }
}
exports.Duration = Duration;
Duration.runtime = proto3_js_1.proto3;
Duration.typeName = "google.protobuf.Duration";
Duration.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "nanos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);


/***/ }),

/***/ 4261:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Empty = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * A generic empty message that you can re-use to avoid defining duplicated
 * empty messages in your APIs. A typical example is to use it as the request
 * or the response type of an API method. For instance:
 *
 *     service Foo {
 *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *     }
 *
 *
 * @generated from message google.protobuf.Empty
 */
class Empty extends message_js_1.Message {
    constructor(data) {
        super();
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Empty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Empty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Empty().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Empty, a, b);
    }
}
exports.Empty = Empty;
Empty.runtime = proto3_js_1.proto3;
Empty.typeName = "google.protobuf.Empty";
Empty.fields = proto3_js_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 8080:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldMask = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * `FieldMask` represents a set of symbolic field paths, for example:
 *
 *     paths: "f.a"
 *     paths: "f.b.d"
 *
 * Here `f` represents a field in some root message, `a` and `b`
 * fields in the message found in `f`, and `d` a field found in the
 * message in `f.b`.
 *
 * Field masks are used to specify a subset of fields that should be
 * returned by a get operation or modified by an update operation.
 * Field masks also have a custom JSON encoding (see below).
 *
 * # Field Masks in Projections
 *
 * When used in the context of a projection, a response message or
 * sub-message is filtered by the API to only contain those fields as
 * specified in the mask. For example, if the mask in the previous
 * example is applied to a response message as follows:
 *
 *     f {
 *       a : 22
 *       b {
 *         d : 1
 *         x : 2
 *       }
 *       y : 13
 *     }
 *     z: 8
 *
 * The result will not contain specific values for fields x,y and z
 * (their value will be set to the default, and omitted in proto text
 * output):
 *
 *
 *     f {
 *       a : 22
 *       b {
 *         d : 1
 *       }
 *     }
 *
 * A repeated field is not allowed except at the last position of a
 * paths string.
 *
 * If a FieldMask object is not present in a get operation, the
 * operation applies to all fields (as if a FieldMask of all fields
 * had been specified).
 *
 * Note that a field mask does not necessarily apply to the
 * top-level response message. In case of a REST get operation, the
 * field mask applies directly to the response, but in case of a REST
 * list operation, the mask instead applies to each individual message
 * in the returned resource list. In case of a REST custom method,
 * other definitions may be used. Where the mask applies will be
 * clearly documented together with its declaration in the API.  In
 * any case, the effect on the returned resource/resources is required
 * behavior for APIs.
 *
 * # Field Masks in Update Operations
 *
 * A field mask in update operations specifies which fields of the
 * targeted resource are going to be updated. The API is required
 * to only change the values of the fields as specified in the mask
 * and leave the others untouched. If a resource is passed in to
 * describe the updated values, the API ignores the values of all
 * fields not covered by the mask.
 *
 * If a repeated field is specified for an update operation, new values will
 * be appended to the existing repeated field in the target resource. Note that
 * a repeated field is only allowed in the last position of a `paths` string.
 *
 * If a sub-message is specified in the last position of the field mask for an
 * update operation, then new value will be merged into the existing sub-message
 * in the target resource.
 *
 * For example, given the target message:
 *
 *     f {
 *       b {
 *         d: 1
 *         x: 2
 *       }
 *       c: [1]
 *     }
 *
 * And an update message:
 *
 *     f {
 *       b {
 *         d: 10
 *       }
 *       c: [2]
 *     }
 *
 * then if the field mask is:
 *
 *  paths: ["f.b", "f.c"]
 *
 * then the result will be:
 *
 *     f {
 *       b {
 *         d: 10
 *         x: 2
 *       }
 *       c: [1, 2]
 *     }
 *
 * An implementation may provide options to override this default behavior for
 * repeated and message fields.
 *
 * In order to reset a field's value to the default, the field must
 * be in the mask and set to the default value in the provided resource.
 * Hence, in order to reset all fields of a resource, provide a default
 * instance of the resource and set all fields in the mask, or do
 * not provide a mask as described below.
 *
 * If a field mask is not present on update, the operation applies to
 * all fields (as if a field mask of all fields has been specified).
 * Note that in the presence of schema evolution, this may mean that
 * fields the client does not know and has therefore not filled into
 * the request will be reset to their default. If this is unwanted
 * behavior, a specific service may require a client to always specify
 * a field mask, producing an error if not.
 *
 * As with get operations, the location of the resource which
 * describes the updated values in the request message depends on the
 * operation kind. In any case, the effect of the field mask is
 * required to be honored by the API.
 *
 * ## Considerations for HTTP REST
 *
 * The HTTP kind of an update operation which uses a field mask must
 * be set to PATCH instead of PUT in order to satisfy HTTP semantics
 * (PUT must only be used for full updates).
 *
 * # JSON Encoding of Field Masks
 *
 * In JSON, a field mask is encoded as a single string where paths are
 * separated by a comma. Fields name in each path are converted
 * to/from lower-camel naming conventions.
 *
 * As an example, consider the following message declarations:
 *
 *     message Profile {
 *       User user = 1;
 *       Photo photo = 2;
 *     }
 *     message User {
 *       string display_name = 1;
 *       string address = 2;
 *     }
 *
 * In proto a field mask for `Profile` may look as such:
 *
 *     mask {
 *       paths: "user.display_name"
 *       paths: "photo"
 *     }
 *
 * In JSON, the same mask is represented as below:
 *
 *     {
 *       mask: "user.displayName,photo"
 *     }
 *
 * # Field Masks and Oneof Fields
 *
 * Field masks treat fields in oneofs just as regular fields. Consider the
 * following message:
 *
 *     message SampleMessage {
 *       oneof test_oneof {
 *         string name = 4;
 *         SubMessage sub_message = 9;
 *       }
 *     }
 *
 * The field mask can be:
 *
 *     mask {
 *       paths: "name"
 *     }
 *
 * Or:
 *
 *     mask {
 *       paths: "sub_message"
 *     }
 *
 * Note that oneof type names ("test_oneof" in this case) cannot be used in
 * paths.
 *
 * ## Field Mask Verification
 *
 * The implementation of any API method which has a FieldMask type field in the
 * request should verify the included field paths, and return an
 * `INVALID_ARGUMENT` error if any path is unmappable.
 *
 * @generated from message google.protobuf.FieldMask
 */
class FieldMask extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The set of field mask paths.
         *
         * @generated from field: repeated string paths = 1;
         */
        this.paths = [];
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        // Converts snake_case to protoCamelCase according to the convention
        // used by protoc to convert a field name to a JSON name.
        function protoCamelCase(snakeCase) {
            let capNext = false;
            const b = [];
            for (let i = 0; i < snakeCase.length; i++) {
                let c = snakeCase.charAt(i);
                switch (c) {
                    case '_':
                        capNext = true;
                        break;
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                        b.push(c);
                        capNext = false;
                        break;
                    default:
                        if (capNext) {
                            capNext = false;
                            c = c.toUpperCase();
                        }
                        b.push(c);
                        break;
                }
            }
            return b.join('');
        }
        return this.paths.map(p => {
            if (p.match(/_[0-9]?_/g) || p.match(/[A-Z]/g)) {
                throw new Error("cannot encode google.protobuf.FieldMask to JSON: lowerCamelCase of path name \"" + p + "\" is irreversible");
            }
            return protoCamelCase(p);
        }).join(",");
    }
    fromJson(json, options) {
        if (typeof json !== "string") {
            throw new Error("cannot decode google.protobuf.FieldMask from JSON: " + proto3_js_1.proto3.json.debug(json));
        }
        if (json === "") {
            return this;
        }
        function camelToSnake(str) {
            if (str.includes("_")) {
                throw new Error("cannot decode google.protobuf.FieldMask from JSON: path names must be lowerCamelCase");
            }
            const sc = str.replace(/[A-Z]/g, letter => "_" + letter.toLowerCase());
            return (sc[0] === "_") ? sc.substring(1) : sc;
        }
        this.paths = json.split(",").map(camelToSnake);
        return this;
    }
    static fromBinary(bytes, options) {
        return new FieldMask().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldMask().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldMask().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(FieldMask, a, b);
    }
}
exports.FieldMask = FieldMask;
FieldMask.runtime = proto3_js_1.proto3;
FieldMask.typeName = "google.protobuf.FieldMask";
FieldMask.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);


/***/ }),

/***/ 1280:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SourceContext = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * `SourceContext` represents information about the source of a
 * protobuf element, like the file in which it is defined.
 *
 * @generated from message google.protobuf.SourceContext
 */
class SourceContext extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The path-qualified name of the .proto file that contained the associated
         * protobuf element.  For example: `"google/protobuf/source_context.proto"`.
         *
         * @generated from field: string file_name = 1;
         */
        this.fileName = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SourceContext().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SourceContext().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SourceContext().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(SourceContext, a, b);
    }
}
exports.SourceContext = SourceContext;
SourceContext.runtime = proto3_js_1.proto3;
SourceContext.typeName = "google.protobuf.SourceContext";
SourceContext.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 6400:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListValue = exports.Value = exports.Struct = exports.NullValue = void 0;
// @generated by protoc-gen-es v1.6.0 with parameter "bootstrap_wkt=true,ts_nocheck=false,target=ts"
// @generated from file google/protobuf/struct.proto (package google.protobuf, syntax proto3)
/* eslint-disable */
const proto3_js_1 = __nccwpck_require__(9947);
const message_js_1 = __nccwpck_require__(2779);
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 *
 * @generated from enum google.protobuf.NullValue
 */
var NullValue;
(function (NullValue) {
    /**
     * Null value.
     *
     * @generated from enum value: NULL_VALUE = 0;
     */
    NullValue[NullValue["NULL_VALUE"] = 0] = "NULL_VALUE";
})(NullValue || (exports.NullValue = NullValue = {}));
// Retrieve enum metadata with: proto3.getEnumType(NullValue)
proto3_js_1.proto3.util.setEnumType(NullValue, "google.protobuf.NullValue", [
    { no: 0, name: "NULL_VALUE" },
]);
/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 *
 * @generated from message google.protobuf.Struct
 */
class Struct extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Unordered map of dynamically typed values.
         *
         * @generated from field: map<string, google.protobuf.Value> fields = 1;
         */
        this.fields = {};
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        const json = {};
        for (const [k, v] of Object.entries(this.fields)) {
            json[k] = v.toJson(options);
        }
        return json;
    }
    fromJson(json, options) {
        if (typeof json != "object" || json == null || Array.isArray(json)) {
            throw new Error("cannot decode google.protobuf.Struct from JSON " + proto3_js_1.proto3.json.debug(json));
        }
        for (const [k, v] of Object.entries(json)) {
            this.fields[k] = Value.fromJson(v);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Struct().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Struct().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Struct().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Struct, a, b);
    }
}
exports.Struct = Struct;
Struct.runtime = proto3_js_1.proto3;
Struct.typeName = "google.protobuf.Struct";
Struct.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Value } },
]);
/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of these
 * variants. Absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 *
 * @generated from message google.protobuf.Value
 */
class Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The kind of value.
         *
         * @generated from oneof google.protobuf.Value.kind
         */
        this.kind = { case: undefined };
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        switch (this.kind.case) {
            case "nullValue":
                return null;
            case "numberValue":
                if (!Number.isFinite(this.kind.value)) {
                    throw new Error("google.protobuf.Value cannot be NaN or Infinity");
                }
                return this.kind.value;
            case "boolValue":
                return this.kind.value;
            case "stringValue":
                return this.kind.value;
            case "structValue":
            case "listValue":
                return this.kind.value.toJson(Object.assign(Object.assign({}, options), { emitDefaultValues: true }));
        }
        throw new Error("google.protobuf.Value must have a value");
    }
    fromJson(json, options) {
        switch (typeof json) {
            case "number":
                this.kind = { case: "numberValue", value: json };
                break;
            case "string":
                this.kind = { case: "stringValue", value: json };
                break;
            case "boolean":
                this.kind = { case: "boolValue", value: json };
                break;
            case "object":
                if (json === null) {
                    this.kind = { case: "nullValue", value: NullValue.NULL_VALUE };
                }
                else if (Array.isArray(json)) {
                    this.kind = { case: "listValue", value: ListValue.fromJson(json) };
                }
                else {
                    this.kind = { case: "structValue", value: Struct.fromJson(json) };
                }
                break;
            default:
                throw new Error("cannot decode google.protobuf.Value from JSON " + proto3_js_1.proto3.json.debug(json));
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Value, a, b);
    }
}
exports.Value = Value;
Value.runtime = proto3_js_1.proto3;
Value.typeName = "google.protobuf.Value";
Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "null_value", kind: "enum", T: proto3_js_1.proto3.getEnumType(NullValue), oneof: "kind" },
    { no: 2, name: "number_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "kind" },
    { no: 3, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 4, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "kind" },
    { no: 5, name: "struct_value", kind: "message", T: Struct, oneof: "kind" },
    { no: 6, name: "list_value", kind: "message", T: ListValue, oneof: "kind" },
]);
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 *
 * @generated from message google.protobuf.ListValue
 */
class ListValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Repeated field of dynamically typed values.
         *
         * @generated from field: repeated google.protobuf.Value values = 1;
         */
        this.values = [];
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return this.values.map(v => v.toJson());
    }
    fromJson(json, options) {
        if (!Array.isArray(json)) {
            throw new Error("cannot decode google.protobuf.ListValue from JSON " + proto3_js_1.proto3.json.debug(json));
        }
        for (let e of json) {
            this.values.push(Value.fromJson(e));
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new ListValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(ListValue, a, b);
    }
}
exports.ListValue = ListValue;
ListValue.runtime = proto3_js_1.proto3;
ListValue.typeName = "google.protobuf.ListValue";
ListValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: Value, repeated: true },
]);


/***/ }),

/***/ 7974:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Timestamp = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto_int64_js_1 = __nccwpck_require__(6865);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * A Timestamp represents a point in time independent of any time zone or local
 * calendar, encoded as a count of seconds and fractions of seconds at
 * nanosecond resolution. The count is relative to an epoch at UTC midnight on
 * January 1, 1970, in the proleptic Gregorian calendar which extends the
 * Gregorian calendar backwards to year one.
 *
 * All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 * second table is needed for interpretation, using a [24-hour linear
 * smear](https://developers.google.com/time/smear).
 *
 * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 * restricting to that range, we ensure that we can convert to and from [RFC
 * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 *
 * # Examples
 *
 * Example 1: Compute Timestamp from POSIX `time()`.
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(time(NULL));
 *     timestamp.set_nanos(0);
 *
 * Example 2: Compute Timestamp from POSIX `gettimeofday()`.
 *
 *     struct timeval tv;
 *     gettimeofday(&tv, NULL);
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(tv.tv_sec);
 *     timestamp.set_nanos(tv.tv_usec * 1000);
 *
 * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
 *
 *     FILETIME ft;
 *     GetSystemTimeAsFileTime(&ft);
 *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
 *
 *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
 *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
 *     Timestamp timestamp;
 *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
 *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
 *
 * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
 *
 *     long millis = System.currentTimeMillis();
 *
 *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
 *         .setNanos((int) ((millis % 1000) * 1000000)).build();
 *
 * Example 5: Compute Timestamp from Java `Instant.now()`.
 *
 *     Instant now = Instant.now();
 *
 *     Timestamp timestamp =
 *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())
 *             .setNanos(now.getNano()).build();
 *
 * Example 6: Compute Timestamp from current time in Python.
 *
 *     timestamp = Timestamp()
 *     timestamp.GetCurrentTime()
 *
 * # JSON Mapping
 *
 * In JSON format, the Timestamp type is encoded as a string in the
 * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 * format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 * where {year} is always expressed using four digits while {month}, {day},
 * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 * are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 * is required. A proto3 JSON serializer should always use UTC (as indicated by
 * "Z") when printing the Timestamp type and a proto3 JSON parser should be
 * able to accept both UTC and other timezones (as indicated by an offset).
 *
 * For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 * 01:30 UTC on January 15, 2017.
 *
 * In JavaScript, one can convert a Date object to this format using the
 * standard
 * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 * method. In Python, a standard `datetime.datetime` object can be converted
 * to this format using
 * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 * the Joda Time's [`ISODateTimeFormat.dateTime()`](
 * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
 * ) to obtain a formatter capable of generating timestamps in this format.
 *
 *
 * @generated from message google.protobuf.Timestamp
 */
class Timestamp extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Represents seconds of UTC time since Unix epoch
         * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         * 9999-12-31T23:59:59Z inclusive.
         *
         * @generated from field: int64 seconds = 1;
         */
        this.seconds = proto_int64_js_1.protoInt64.zero;
        /**
         * Non-negative fractions of a second at nanosecond resolution. Negative
         * second values with fractions must still have non-negative nanos values
         * that count forward in time. Must be from 0 to 999,999,999
         * inclusive.
         *
         * @generated from field: int32 nanos = 2;
         */
        this.nanos = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    fromJson(json, options) {
        if (typeof json !== "string") {
            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        const matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
        if (!matches) {
            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);
        }
        const ms = Date.parse(matches[1] + "-" + matches[2] + "-" + matches[3] + "T" + matches[4] + ":" + matches[5] + ":" + matches[6] + (matches[8] ? matches[8] : "Z"));
        if (Number.isNaN(ms)) {
            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);
        }
        if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z")) {
            throw new Error(`cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);
        }
        this.seconds = proto_int64_js_1.protoInt64.parse(ms / 1000);
        this.nanos = 0;
        if (matches[7]) {
            this.nanos = (parseInt("1" + matches[7] + "0".repeat(9 - matches[7].length)) - 1000000000);
        }
        return this;
    }
    toJson(options) {
        const ms = Number(this.seconds) * 1000;
        if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z")) {
            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);
        }
        if (this.nanos < 0) {
            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative`);
        }
        let z = "Z";
        if (this.nanos > 0) {
            const nanosStr = (this.nanos + 1000000000).toString().substring(1);
            if (nanosStr.substring(3) === "000000") {
                z = "." + nanosStr.substring(0, 3) + "Z";
            }
            else if (nanosStr.substring(6) === "000") {
                z = "." + nanosStr.substring(0, 6) + "Z";
            }
            else {
                z = "." + nanosStr + "Z";
            }
        }
        return new Date(ms).toISOString().replace(".000Z", z);
    }
    toDate() {
        return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));
    }
    static now() {
        return Timestamp.fromDate(new Date());
    }
    static fromDate(date) {
        const ms = date.getTime();
        return new Timestamp({
            seconds: proto_int64_js_1.protoInt64.parse(Math.floor(ms / 1000)),
            nanos: (ms % 1000) * 1000000,
        });
    }
    static fromBinary(bytes, options) {
        return new Timestamp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Timestamp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Timestamp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Timestamp, a, b);
    }
}
exports.Timestamp = Timestamp;
Timestamp.runtime = proto3_js_1.proto3;
Timestamp.typeName = "google.protobuf.Timestamp";
Timestamp.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "nanos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);


/***/ }),

/***/ 3672:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Option = exports.EnumValue = exports.Enum = exports.Field_Cardinality = exports.Field_Kind = exports.Field = exports.Type = exports.Syntax = void 0;
// @generated by protoc-gen-es v1.6.0 with parameter "bootstrap_wkt=true,ts_nocheck=false,target=ts"
// @generated from file google/protobuf/type.proto (package google.protobuf, syntax proto3)
/* eslint-disable */
const proto3_js_1 = __nccwpck_require__(9947);
const message_js_1 = __nccwpck_require__(2779);
const source_context_pb_js_1 = __nccwpck_require__(1280);
const any_pb_js_1 = __nccwpck_require__(8466);
/**
 * The syntax in which a protocol buffer element is defined.
 *
 * @generated from enum google.protobuf.Syntax
 */
var Syntax;
(function (Syntax) {
    /**
     * Syntax `proto2`.
     *
     * @generated from enum value: SYNTAX_PROTO2 = 0;
     */
    Syntax[Syntax["PROTO2"] = 0] = "PROTO2";
    /**
     * Syntax `proto3`.
     *
     * @generated from enum value: SYNTAX_PROTO3 = 1;
     */
    Syntax[Syntax["PROTO3"] = 1] = "PROTO3";
    /**
     * Syntax `editions`.
     *
     * @generated from enum value: SYNTAX_EDITIONS = 2;
     */
    Syntax[Syntax["EDITIONS"] = 2] = "EDITIONS";
})(Syntax || (exports.Syntax = Syntax = {}));
// Retrieve enum metadata with: proto3.getEnumType(Syntax)
proto3_js_1.proto3.util.setEnumType(Syntax, "google.protobuf.Syntax", [
    { no: 0, name: "SYNTAX_PROTO2" },
    { no: 1, name: "SYNTAX_PROTO3" },
    { no: 2, name: "SYNTAX_EDITIONS" },
]);
/**
 * A protocol buffer message type.
 *
 * @generated from message google.protobuf.Type
 */
class Type extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The fully qualified message name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The list of fields.
         *
         * @generated from field: repeated google.protobuf.Field fields = 2;
         */
        this.fields = [];
        /**
         * The list of types appearing in `oneof` definitions in this type.
         *
         * @generated from field: repeated string oneofs = 3;
         */
        this.oneofs = [];
        /**
         * The protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 4;
         */
        this.options = [];
        /**
         * The source syntax.
         *
         * @generated from field: google.protobuf.Syntax syntax = 6;
         */
        this.syntax = Syntax.PROTO2;
        /**
         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.
         *
         * @generated from field: string edition = 7;
         */
        this.edition = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Type().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Type().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Type().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Type, a, b);
    }
}
exports.Type = Type;
Type.runtime = proto3_js_1.proto3;
Type.typeName = "google.protobuf.Type";
Type.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fields", kind: "message", T: Field, repeated: true },
    { no: 3, name: "oneofs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "options", kind: "message", T: Option, repeated: true },
    { no: 5, name: "source_context", kind: "message", T: source_context_pb_js_1.SourceContext },
    { no: 6, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(Syntax) },
    { no: 7, name: "edition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * A single field of a message type.
 *
 * @generated from message google.protobuf.Field
 */
class Field extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The field type.
         *
         * @generated from field: google.protobuf.Field.Kind kind = 1;
         */
        this.kind = Field_Kind.TYPE_UNKNOWN;
        /**
         * The field cardinality.
         *
         * @generated from field: google.protobuf.Field.Cardinality cardinality = 2;
         */
        this.cardinality = Field_Cardinality.UNKNOWN;
        /**
         * The field number.
         *
         * @generated from field: int32 number = 3;
         */
        this.number = 0;
        /**
         * The field name.
         *
         * @generated from field: string name = 4;
         */
        this.name = "";
        /**
         * The field type URL, without the scheme, for message or enumeration
         * types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
         *
         * @generated from field: string type_url = 6;
         */
        this.typeUrl = "";
        /**
         * The index of the field type in `Type.oneofs`, for message or enumeration
         * types. The first type has index 1; zero means the type is not in the list.
         *
         * @generated from field: int32 oneof_index = 7;
         */
        this.oneofIndex = 0;
        /**
         * Whether to use alternative packed wire representation.
         *
         * @generated from field: bool packed = 8;
         */
        this.packed = false;
        /**
         * The protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 9;
         */
        this.options = [];
        /**
         * The field JSON name.
         *
         * @generated from field: string json_name = 10;
         */
        this.jsonName = "";
        /**
         * The string value of the default value of this field. Proto2 syntax only.
         *
         * @generated from field: string default_value = 11;
         */
        this.defaultValue = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Field().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Field().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Field().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Field, a, b);
    }
}
exports.Field = Field;
Field.runtime = proto3_js_1.proto3;
Field.typeName = "google.protobuf.Field";
Field.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3_js_1.proto3.getEnumType(Field_Kind) },
    { no: 2, name: "cardinality", kind: "enum", T: proto3_js_1.proto3.getEnumType(Field_Cardinality) },
    { no: 3, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "oneof_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "packed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "options", kind: "message", T: Option, repeated: true },
    { no: 10, name: "json_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Basic field types.
 *
 * @generated from enum google.protobuf.Field.Kind
 */
var Field_Kind;
(function (Field_Kind) {
    /**
     * Field type unknown.
     *
     * @generated from enum value: TYPE_UNKNOWN = 0;
     */
    Field_Kind[Field_Kind["TYPE_UNKNOWN"] = 0] = "TYPE_UNKNOWN";
    /**
     * Field type double.
     *
     * @generated from enum value: TYPE_DOUBLE = 1;
     */
    Field_Kind[Field_Kind["TYPE_DOUBLE"] = 1] = "TYPE_DOUBLE";
    /**
     * Field type float.
     *
     * @generated from enum value: TYPE_FLOAT = 2;
     */
    Field_Kind[Field_Kind["TYPE_FLOAT"] = 2] = "TYPE_FLOAT";
    /**
     * Field type int64.
     *
     * @generated from enum value: TYPE_INT64 = 3;
     */
    Field_Kind[Field_Kind["TYPE_INT64"] = 3] = "TYPE_INT64";
    /**
     * Field type uint64.
     *
     * @generated from enum value: TYPE_UINT64 = 4;
     */
    Field_Kind[Field_Kind["TYPE_UINT64"] = 4] = "TYPE_UINT64";
    /**
     * Field type int32.
     *
     * @generated from enum value: TYPE_INT32 = 5;
     */
    Field_Kind[Field_Kind["TYPE_INT32"] = 5] = "TYPE_INT32";
    /**
     * Field type fixed64.
     *
     * @generated from enum value: TYPE_FIXED64 = 6;
     */
    Field_Kind[Field_Kind["TYPE_FIXED64"] = 6] = "TYPE_FIXED64";
    /**
     * Field type fixed32.
     *
     * @generated from enum value: TYPE_FIXED32 = 7;
     */
    Field_Kind[Field_Kind["TYPE_FIXED32"] = 7] = "TYPE_FIXED32";
    /**
     * Field type bool.
     *
     * @generated from enum value: TYPE_BOOL = 8;
     */
    Field_Kind[Field_Kind["TYPE_BOOL"] = 8] = "TYPE_BOOL";
    /**
     * Field type string.
     *
     * @generated from enum value: TYPE_STRING = 9;
     */
    Field_Kind[Field_Kind["TYPE_STRING"] = 9] = "TYPE_STRING";
    /**
     * Field type group. Proto2 syntax only, and deprecated.
     *
     * @generated from enum value: TYPE_GROUP = 10;
     */
    Field_Kind[Field_Kind["TYPE_GROUP"] = 10] = "TYPE_GROUP";
    /**
     * Field type message.
     *
     * @generated from enum value: TYPE_MESSAGE = 11;
     */
    Field_Kind[Field_Kind["TYPE_MESSAGE"] = 11] = "TYPE_MESSAGE";
    /**
     * Field type bytes.
     *
     * @generated from enum value: TYPE_BYTES = 12;
     */
    Field_Kind[Field_Kind["TYPE_BYTES"] = 12] = "TYPE_BYTES";
    /**
     * Field type uint32.
     *
     * @generated from enum value: TYPE_UINT32 = 13;
     */
    Field_Kind[Field_Kind["TYPE_UINT32"] = 13] = "TYPE_UINT32";
    /**
     * Field type enum.
     *
     * @generated from enum value: TYPE_ENUM = 14;
     */
    Field_Kind[Field_Kind["TYPE_ENUM"] = 14] = "TYPE_ENUM";
    /**
     * Field type sfixed32.
     *
     * @generated from enum value: TYPE_SFIXED32 = 15;
     */
    Field_Kind[Field_Kind["TYPE_SFIXED32"] = 15] = "TYPE_SFIXED32";
    /**
     * Field type sfixed64.
     *
     * @generated from enum value: TYPE_SFIXED64 = 16;
     */
    Field_Kind[Field_Kind["TYPE_SFIXED64"] = 16] = "TYPE_SFIXED64";
    /**
     * Field type sint32.
     *
     * @generated from enum value: TYPE_SINT32 = 17;
     */
    Field_Kind[Field_Kind["TYPE_SINT32"] = 17] = "TYPE_SINT32";
    /**
     * Field type sint64.
     *
     * @generated from enum value: TYPE_SINT64 = 18;
     */
    Field_Kind[Field_Kind["TYPE_SINT64"] = 18] = "TYPE_SINT64";
})(Field_Kind || (exports.Field_Kind = Field_Kind = {}));
// Retrieve enum metadata with: proto3.getEnumType(Field_Kind)
proto3_js_1.proto3.util.setEnumType(Field_Kind, "google.protobuf.Field.Kind", [
    { no: 0, name: "TYPE_UNKNOWN" },
    { no: 1, name: "TYPE_DOUBLE" },
    { no: 2, name: "TYPE_FLOAT" },
    { no: 3, name: "TYPE_INT64" },
    { no: 4, name: "TYPE_UINT64" },
    { no: 5, name: "TYPE_INT32" },
    { no: 6, name: "TYPE_FIXED64" },
    { no: 7, name: "TYPE_FIXED32" },
    { no: 8, name: "TYPE_BOOL" },
    { no: 9, name: "TYPE_STRING" },
    { no: 10, name: "TYPE_GROUP" },
    { no: 11, name: "TYPE_MESSAGE" },
    { no: 12, name: "TYPE_BYTES" },
    { no: 13, name: "TYPE_UINT32" },
    { no: 14, name: "TYPE_ENUM" },
    { no: 15, name: "TYPE_SFIXED32" },
    { no: 16, name: "TYPE_SFIXED64" },
    { no: 17, name: "TYPE_SINT32" },
    { no: 18, name: "TYPE_SINT64" },
]);
/**
 * Whether a field is optional, required, or repeated.
 *
 * @generated from enum google.protobuf.Field.Cardinality
 */
var Field_Cardinality;
(function (Field_Cardinality) {
    /**
     * For fields with unknown cardinality.
     *
     * @generated from enum value: CARDINALITY_UNKNOWN = 0;
     */
    Field_Cardinality[Field_Cardinality["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * For optional fields.
     *
     * @generated from enum value: CARDINALITY_OPTIONAL = 1;
     */
    Field_Cardinality[Field_Cardinality["OPTIONAL"] = 1] = "OPTIONAL";
    /**
     * For required fields. Proto2 syntax only.
     *
     * @generated from enum value: CARDINALITY_REQUIRED = 2;
     */
    Field_Cardinality[Field_Cardinality["REQUIRED"] = 2] = "REQUIRED";
    /**
     * For repeated fields.
     *
     * @generated from enum value: CARDINALITY_REPEATED = 3;
     */
    Field_Cardinality[Field_Cardinality["REPEATED"] = 3] = "REPEATED";
})(Field_Cardinality || (exports.Field_Cardinality = Field_Cardinality = {}));
// Retrieve enum metadata with: proto3.getEnumType(Field_Cardinality)
proto3_js_1.proto3.util.setEnumType(Field_Cardinality, "google.protobuf.Field.Cardinality", [
    { no: 0, name: "CARDINALITY_UNKNOWN" },
    { no: 1, name: "CARDINALITY_OPTIONAL" },
    { no: 2, name: "CARDINALITY_REQUIRED" },
    { no: 3, name: "CARDINALITY_REPEATED" },
]);
/**
 * Enum type definition.
 *
 * @generated from message google.protobuf.Enum
 */
class Enum extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Enum type name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Enum value definitions.
         *
         * @generated from field: repeated google.protobuf.EnumValue enumvalue = 2;
         */
        this.enumvalue = [];
        /**
         * Protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 3;
         */
        this.options = [];
        /**
         * The source syntax.
         *
         * @generated from field: google.protobuf.Syntax syntax = 5;
         */
        this.syntax = Syntax.PROTO2;
        /**
         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.
         *
         * @generated from field: string edition = 6;
         */
        this.edition = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Enum().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Enum().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Enum().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Enum, a, b);
    }
}
exports.Enum = Enum;
Enum.runtime = proto3_js_1.proto3;
Enum.typeName = "google.protobuf.Enum";
Enum.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enumvalue", kind: "message", T: EnumValue, repeated: true },
    { no: 3, name: "options", kind: "message", T: Option, repeated: true },
    { no: 4, name: "source_context", kind: "message", T: source_context_pb_js_1.SourceContext },
    { no: 5, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(Syntax) },
    { no: 6, name: "edition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Enum value definition.
 *
 * @generated from message google.protobuf.EnumValue
 */
class EnumValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Enum value name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Enum value number.
         *
         * @generated from field: int32 number = 2;
         */
        this.number = 0;
        /**
         * Protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 3;
         */
        this.options = [];
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(EnumValue, a, b);
    }
}
exports.EnumValue = EnumValue;
EnumValue.runtime = proto3_js_1.proto3;
EnumValue.typeName = "google.protobuf.EnumValue";
EnumValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "options", kind: "message", T: Option, repeated: true },
]);
/**
 * A protocol buffer option, which can be attached to a message, field,
 * enumeration, etc.
 *
 * @generated from message google.protobuf.Option
 */
class Option extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The option's name. For protobuf built-in options (options defined in
         * descriptor.proto), this is the short name. For example, `"map_entry"`.
         * For custom options, it should be the fully-qualified name. For example,
         * `"google.api.http"`.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Option().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Option().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Option().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Option, a, b);
    }
}
exports.Option = Option;
Option.runtime = proto3_js_1.proto3;
Option.typeName = "google.protobuf.Option";
Option.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: any_pb_js_1.Any },
]);


/***/ }),

/***/ 7854:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BytesValue = exports.StringValue = exports.BoolValue = exports.UInt32Value = exports.Int32Value = exports.UInt64Value = exports.Int64Value = exports.FloatValue = exports.DoubleValue = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
const field_js_1 = __nccwpck_require__(4756);
const proto_int64_js_1 = __nccwpck_require__(6865);
/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 *
 * @generated from message google.protobuf.DoubleValue
 */
class DoubleValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The double value.
         *
         * @generated from field: double value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.DOUBLE, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.DOUBLE, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.DoubleValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new DoubleValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DoubleValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DoubleValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(DoubleValue, a, b);
    }
}
exports.DoubleValue = DoubleValue;
DoubleValue.runtime = proto3_js_1.proto3;
DoubleValue.typeName = "google.protobuf.DoubleValue";
DoubleValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
DoubleValue.fieldWrapper = {
    wrapField(value) {
        return new DoubleValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 *
 * @generated from message google.protobuf.FloatValue
 */
class FloatValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The float value.
         *
         * @generated from field: float value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.FLOAT, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.FLOAT, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.FloatValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new FloatValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FloatValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FloatValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(FloatValue, a, b);
    }
}
exports.FloatValue = FloatValue;
FloatValue.runtime = proto3_js_1.proto3;
FloatValue.typeName = "google.protobuf.FloatValue";
FloatValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
]);
FloatValue.fieldWrapper = {
    wrapField(value) {
        return new FloatValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 *
 * @generated from message google.protobuf.Int64Value
 */
class Int64Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The int64 value.
         *
         * @generated from field: int64 value = 1;
         */
        this.value = proto_int64_js_1.protoInt64.zero;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.INT64, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.INT64, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.Int64Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Int64Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int64Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int64Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Int64Value, a, b);
    }
}
exports.Int64Value = Int64Value;
Int64Value.runtime = proto3_js_1.proto3;
Int64Value.typeName = "google.protobuf.Int64Value";
Int64Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
Int64Value.fieldWrapper = {
    wrapField(value) {
        return new Int64Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 *
 * @generated from message google.protobuf.UInt64Value
 */
class UInt64Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The uint64 value.
         *
         * @generated from field: uint64 value = 1;
         */
        this.value = proto_int64_js_1.protoInt64.zero;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.UINT64, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.UINT64, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.UInt64Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new UInt64Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UInt64Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UInt64Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(UInt64Value, a, b);
    }
}
exports.UInt64Value = UInt64Value;
UInt64Value.runtime = proto3_js_1.proto3;
UInt64Value.typeName = "google.protobuf.UInt64Value";
UInt64Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
UInt64Value.fieldWrapper = {
    wrapField(value) {
        return new UInt64Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 *
 * @generated from message google.protobuf.Int32Value
 */
class Int32Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The int32 value.
         *
         * @generated from field: int32 value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.INT32, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.INT32, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.Int32Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Int32Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int32Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int32Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Int32Value, a, b);
    }
}
exports.Int32Value = Int32Value;
Int32Value.runtime = proto3_js_1.proto3;
Int32Value.typeName = "google.protobuf.Int32Value";
Int32Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
Int32Value.fieldWrapper = {
    wrapField(value) {
        return new Int32Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 *
 * @generated from message google.protobuf.UInt32Value
 */
class UInt32Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The uint32 value.
         *
         * @generated from field: uint32 value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.UINT32, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.UINT32, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.UInt32Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new UInt32Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UInt32Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UInt32Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(UInt32Value, a, b);
    }
}
exports.UInt32Value = UInt32Value;
UInt32Value.runtime = proto3_js_1.proto3;
UInt32Value.typeName = "google.protobuf.UInt32Value";
UInt32Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
UInt32Value.fieldWrapper = {
    wrapField(value) {
        return new UInt32Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 *
 * @generated from message google.protobuf.BoolValue
 */
class BoolValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The bool value.
         *
         * @generated from field: bool value = 1;
         */
        this.value = false;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.BOOL, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.BOOL, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.BoolValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new BoolValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BoolValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BoolValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(BoolValue, a, b);
    }
}
exports.BoolValue = BoolValue;
BoolValue.runtime = proto3_js_1.proto3;
BoolValue.typeName = "google.protobuf.BoolValue";
BoolValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
BoolValue.fieldWrapper = {
    wrapField(value) {
        return new BoolValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 *
 * @generated from message google.protobuf.StringValue
 */
class StringValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The string value.
         *
         * @generated from field: string value = 1;
         */
        this.value = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.STRING, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.STRING, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.StringValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new StringValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StringValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StringValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(StringValue, a, b);
    }
}
exports.StringValue = StringValue;
StringValue.runtime = proto3_js_1.proto3;
StringValue.typeName = "google.protobuf.StringValue";
StringValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
StringValue.fieldWrapper = {
    wrapField(value) {
        return new StringValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 *
 * @generated from message google.protobuf.BytesValue
 */
class BytesValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The bytes value.
         *
         * @generated from field: bytes value = 1;
         */
        this.value = new Uint8Array(0);
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.BYTES, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.BYTES, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.BytesValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new BytesValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BytesValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BytesValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(BytesValue, a, b);
    }
}
exports.BytesValue = BytesValue;
BytesValue.runtime = proto3_js_1.proto3;
BytesValue.typeName = "google.protobuf.BytesValue";
BytesValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
BytesValue.fieldWrapper = {
    wrapField(value) {
        return new BytesValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};


/***/ }),

/***/ 9119:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2008 Google Inc.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Code generated by the Protocol Buffer compiler is owned by the owner
// of the input file used when generating it.  This code is not
// standalone and requires a support library to be linked with it.  This
// support library is itself covered by the above license.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.varint32read = exports.varint32write = exports.uInt64ToString = exports.int64ToString = exports.int64FromString = exports.varint64write = exports.varint64read = void 0;
/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */
/**
 * Read a 64 bit varint as two JS numbers.
 *
 * Returns tuple:
 * [0]: low bits
 * [1]: high bits
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175
 */
function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
        let b = this.buf[this.pos++];
        lowBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    let middleByte = this.buf[this.pos++];
    // last four bits of the first 32 bit number
    lowBits |= (middleByte & 0x0f) << 28;
    // 3 upper bits are part of the next 32 bit number
    highBits = (middleByte & 0x70) >> 4;
    if ((middleByte & 0x80) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
        let b = this.buf[this.pos++];
        highBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    throw new Error("invalid varint");
}
exports.varint64read = varint64read;
/**
 * Write a 64 bit varint, given as two JS numbers, to the given bytes array.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344
 */
function varint64write(lo, hi, bytes) {
    for (let i = 0; i < 28; i = i + 7) {
        const shift = lo >>> i;
        const hasNext = !(shift >>> 7 == 0 && hi == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);
    if (!hasMoreBits) {
        return;
    }
    for (let i = 3; i < 31; i = i + 7) {
        const shift = hi >>> i;
        const hasNext = !(shift >>> 7 == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    bytes.push((hi >>> 31) & 0x01);
}
exports.varint64write = varint64write;
// constants for binary math
const TWO_PWR_32_DBL = 0x100000000;
/**
 * Parse decimal string of 64 bit integer value as two JS numbers.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64FromString(dec) {
    // Check for minus sign.
    const minus = dec[0] === "-";
    if (minus) {
        dec = dec.slice(1);
    }
    // Work 6 decimal digits at a time, acting like we're converting base 1e6
    // digits to binary. This is safe to do with floating point math because
    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
        // Note: Number('') is 0.
        const digit1e6 = Number(dec.slice(begin, end));
        highBits *= base;
        lowBits = lowBits * base + digit1e6;
        // Carry bits from lowBits to
        if (lowBits >= TWO_PWR_32_DBL) {
            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);
            lowBits = lowBits % TWO_PWR_32_DBL;
        }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
}
exports.int64FromString = int64FromString;
/**
 * Losslessly converts a 64-bit signed integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    // If we're treating the input as a signed value and the high bit is set, do
    // a manual two's complement conversion before the decimal conversion.
    const negative = (bits.hi & 0x80000000);
    if (negative) {
        bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
}
exports.int64ToString = int64ToString;
/**
 * Losslessly converts a 64-bit unsigned integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    // Skip the expensive conversion if the number is small enough to use the
    // built-in conversions.
    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with
    // highBits <= 0x1FFFFF can be safely expressed with a double and retain
    // integer precision.
    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.
    if (hi <= 0x1FFFFF) {
        return String(TWO_PWR_32_DBL * hi + lo);
    }
    // What this code is doing is essentially converting the input number from
    // base-2 to base-1e7, which allows us to represent the 64-bit range with
    // only 3 (very large) digits. Those digits are then trivial to convert to
    // a base-10 string.
    // The magic numbers used here are -
    // 2^24 = 16777216 = (1,6777216) in base-1e7.
    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.
    // Split 32:32 representation into 16:24:24 representation so our
    // intermediate digits don't overflow.
    const low = lo & 0xFFFFFF;
    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;
    const high = (hi >> 16) & 0xFFFF;
    // Assemble our three base-1e7 digits, ignoring carries. The maximum
    // value in a digit at this step is representable as a 48-bit integer, which
    // can be stored in a 64-bit floating point number.
    let digitA = low + (mid * 6777216) + (high * 6710656);
    let digitB = mid + (high * 8147497);
    let digitC = (high * 2);
    // Apply carries from A to B and from B to C.
    const base = 10000000;
    if (digitA >= base) {
        digitB += Math.floor(digitA / base);
        digitA %= base;
    }
    if (digitB >= base) {
        digitC += Math.floor(digitB / base);
        digitB %= base;
    }
    // If digitC is 0, then we should have returned in the trivial code path
    // at the top for non-safe integers. Given this, we can assume both digitB
    // and digitA need leading zeros.
    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +
        decimalFrom1e7WithLeadingZeros(digitA);
}
exports.uInt64ToString = uInt64ToString;
function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
}
function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
}
/**
 * Returns two's compliment negation of input.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers
 */
function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
        lowBits = ~lowBits + 1;
    }
    else {
        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,
        // adding 1 to that, results in 0x100000000, which leaves
        // the low bits 0x0 and simply adds one to the high bits.
        highBits += 1;
    }
    return newBits(lowBits, highBits);
}
/**
 * Returns decimal representation of digit1e7 with leading zeros.
 */
const decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
};
/**
 * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144
 */
function varint32write(value, bytes) {
    if (value >= 0) {
        // write value as varint 32
        while (value > 0x7f) {
            bytes.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        bytes.push(value);
    }
    else {
        for (let i = 0; i < 9; i++) {
            bytes.push((value & 127) | 128);
            value = value >> 7;
        }
        bytes.push(1);
    }
}
exports.varint32write = varint32write;
/**
 * Read an unsigned 32 bit varint.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220
 */
function varint32read() {
    let b = this.buf[this.pos++];
    let result = b & 0x7f;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 7;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 14;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 21;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    // Extract only last 4 bits
    b = this.buf[this.pos++];
    result |= (b & 0x0f) << 28;
    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)
        b = this.buf[this.pos++];
    if ((b & 0x80) != 0)
        throw new Error("invalid varint");
    this.assertBounds();
    // Result can have 32 bits, convert it to unsigned
    return result >>> 0;
}
exports.varint32read = varint32read;


/***/ }),

/***/ 1344:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlainMessage = exports.createRegistryFromDescriptors = exports.createRegistry = exports.createDescriptorSet = exports.BinaryReader = exports.BinaryWriter = exports.WireType = exports.MethodIdempotency = exports.MethodKind = exports.LongType = exports.ScalarType = exports.Message = exports.codegenInfo = exports.protoDelimited = exports.protoBase64 = exports.protoInt64 = exports.protoDouble = exports.proto2 = exports.proto3 = void 0;
var proto3_js_1 = __nccwpck_require__(9947);
Object.defineProperty(exports, "proto3", ({ enumerable: true, get: function () { return proto3_js_1.proto3; } }));
var proto2_js_1 = __nccwpck_require__(3605);
Object.defineProperty(exports, "proto2", ({ enumerable: true, get: function () { return proto2_js_1.proto2; } }));
var proto_double_js_1 = __nccwpck_require__(7303);
Object.defineProperty(exports, "protoDouble", ({ enumerable: true, get: function () { return proto_double_js_1.protoDouble; } }));
var proto_int64_js_1 = __nccwpck_require__(6865);
Object.defineProperty(exports, "protoInt64", ({ enumerable: true, get: function () { return proto_int64_js_1.protoInt64; } }));
var proto_base64_js_1 = __nccwpck_require__(5477);
Object.defineProperty(exports, "protoBase64", ({ enumerable: true, get: function () { return proto_base64_js_1.protoBase64; } }));
var proto_delimited_js_1 = __nccwpck_require__(4507);
Object.defineProperty(exports, "protoDelimited", ({ enumerable: true, get: function () { return proto_delimited_js_1.protoDelimited; } }));
var codegen_info_js_1 = __nccwpck_require__(4193);
Object.defineProperty(exports, "codegenInfo", ({ enumerable: true, get: function () { return codegen_info_js_1.codegenInfo; } }));
var message_js_1 = __nccwpck_require__(2779);
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return message_js_1.Message; } }));
var field_js_1 = __nccwpck_require__(4756);
Object.defineProperty(exports, "ScalarType", ({ enumerable: true, get: function () { return field_js_1.ScalarType; } }));
Object.defineProperty(exports, "LongType", ({ enumerable: true, get: function () { return field_js_1.LongType; } }));
var service_type_js_1 = __nccwpck_require__(9552);
Object.defineProperty(exports, "MethodKind", ({ enumerable: true, get: function () { return service_type_js_1.MethodKind; } }));
Object.defineProperty(exports, "MethodIdempotency", ({ enumerable: true, get: function () { return service_type_js_1.MethodIdempotency; } }));
var binary_encoding_js_1 = __nccwpck_require__(1304);
Object.defineProperty(exports, "WireType", ({ enumerable: true, get: function () { return binary_encoding_js_1.WireType; } }));
Object.defineProperty(exports, "BinaryWriter", ({ enumerable: true, get: function () { return binary_encoding_js_1.BinaryWriter; } }));
Object.defineProperty(exports, "BinaryReader", ({ enumerable: true, get: function () { return binary_encoding_js_1.BinaryReader; } }));
var create_descriptor_set_js_1 = __nccwpck_require__(6619);
Object.defineProperty(exports, "createDescriptorSet", ({ enumerable: true, get: function () { return create_descriptor_set_js_1.createDescriptorSet; } }));
var create_registry_js_1 = __nccwpck_require__(1948);
Object.defineProperty(exports, "createRegistry", ({ enumerable: true, get: function () { return create_registry_js_1.createRegistry; } }));
var create_registry_from_desc_js_1 = __nccwpck_require__(6804);
Object.defineProperty(exports, "createRegistryFromDescriptors", ({ enumerable: true, get: function () { return create_registry_from_desc_js_1.createRegistryFromDescriptors; } }));
var to_plain_message_js_1 = __nccwpck_require__(4558);
Object.defineProperty(exports, "toPlainMessage", ({ enumerable: true, get: function () { return to_plain_message_js_1.toPlainMessage; } }));
// ideally, we would export these types with sub-path exports:
__exportStar(__nccwpck_require__(7291), exports);
__exportStar(__nccwpck_require__(1731), exports);
__exportStar(__nccwpck_require__(8466), exports);
__exportStar(__nccwpck_require__(2959), exports);
__exportStar(__nccwpck_require__(2183), exports);
__exportStar(__nccwpck_require__(4261), exports);
__exportStar(__nccwpck_require__(8080), exports);
__exportStar(__nccwpck_require__(1280), exports);
__exportStar(__nccwpck_require__(6400), exports);
__exportStar(__nccwpck_require__(7974), exports);
__exportStar(__nccwpck_require__(3672), exports);
__exportStar(__nccwpck_require__(7854), exports);


/***/ }),

/***/ 2779:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = void 0;
/**
 * Message is the base class of every message, generated, or created at
 * runtime.
 *
 * It is _not_ safe to extend this class. If you want to create a message at
 * run time, use proto3.makeMessageType().
 */
class Message {
    /**
     * Compare with a message of the same type.
     */
    equals(other) {
        return this.getType().runtime.util.equals(this.getType(), this, other);
    }
    /**
     * Create a deep copy.
     */
    clone() {
        return this.getType().runtime.util.clone(this);
    }
    /**
     * Parse from binary data, merging fields.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    fromBinary(bytes, options) {
        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);
        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);
        return this;
    }
    /**
     * Parse a message from a JSON value.
     */
    fromJson(jsonValue, options) {
        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);
        format.readMessage(type, jsonValue, opt, this);
        return this;
    }
    /**
     * Parse a message from a JSON string.
     */
    fromJsonString(jsonString, options) {
        let json;
        try {
            json = JSON.parse(jsonString);
        }
        catch (e) {
            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);
        }
        return this.fromJson(json, options);
    }
    /**
     * Serialize the message to binary data.
     */
    toBinary(options) {
        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();
        bin.writeMessage(this, writer, opt);
        return writer.finish();
    }
    /**
     * Serialize the message to a JSON value, a JavaScript value that can be
     * passed to JSON.stringify().
     */
    toJson(options) {
        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);
        return json.writeMessage(this, opt);
    }
    /**
     * Serialize the message to a JSON string.
     */
    toJsonString(options) {
        var _a;
        const value = this.toJson(options);
        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);
    }
    /**
     * Override for serialization behavior. This will be invoked when calling
     * JSON.stringify on this message (i.e. JSON.stringify(msg)).
     *
     * Note that this will not serialize google.protobuf.Any with a packed
     * message because the protobuf JSON format specifies that it needs to be
     * unpacked, and this is only possible with a type registry to look up the
     * message type.  As a result, attempting to serialize a message with this
     * type will throw an Error.
     *
     * This method is protected because you should not need to invoke it
     * directly -- instead use JSON.stringify or toJsonString for
     * stringified JSON.  Alternatively, if actual JSON is desired, you should
     * use toJson.
     */
    toJSON() {
        return this.toJson({
            emitDefaultValues: true,
        });
    }
    /**
     * Retrieve the MessageType of this message - a singleton that represents
     * the protobuf message declaration and provides metadata for reflection-
     * based operations.
     */
    getType() {
        // Any class that extends Message _must_ provide a complete static
        // implementation of MessageType.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
        return Object.getPrototypeOf(this).constructor;
    }
}
exports.Message = Message;


/***/ }),

/***/ 1594:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertFloat32 = exports.assertUInt32 = exports.assertInt32 = exports.assert = void 0;
/**
 * Assert that condition is truthy or throw error (with message)
 */
function assert(condition, msg) {
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean
    if (!condition) {
        throw new Error(msg);
    }
}
exports.assert = assert;
const FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;
/**
 * Assert a valid signed protobuf 32-bit integer.
 */
function assertInt32(arg) {
    if (typeof arg !== "number")
        throw new Error("invalid int 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
        throw new Error("invalid int 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
exports.assertInt32 = assertInt32;
/**
 * Assert a valid unsigned protobuf 32-bit integer.
 */
function assertUInt32(arg) {
    if (typeof arg !== "number")
        throw new Error("invalid uint 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
        throw new Error("invalid uint 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
exports.assertUInt32 = assertUInt32;
/**
 * Assert a valid protobuf float value.
 */
function assertFloat32(arg) {
    if (typeof arg !== "number")
        throw new Error("invalid float 32: " + typeof arg);
    if (!Number.isFinite(arg))
        return;
    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
        throw new Error("invalid float 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
exports.assertFloat32 = assertFloat32;


/***/ }),

/***/ 9639:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.writePacked = exports.writeScalar = exports.writeMessageField = exports.writeMapEntry = exports.readScalarLTString = exports.makeBinaryFormatCommon = void 0;
const binary_encoding_js_1 = __nccwpck_require__(1304);
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
const field_wrapper_js_1 = __nccwpck_require__(7579);
const scalars_js_1 = __nccwpck_require__(5618);
const assert_js_1 = __nccwpck_require__(1594);
/* eslint-disable @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unnecessary-condition, no-case-declarations, prefer-const */
const unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields");
// Default options for parsing binary data.
const readDefaults = {
    readUnknownFields: true,
    readerFactory: (bytes) => new binary_encoding_js_1.BinaryReader(bytes),
};
// Default options for serializing binary data.
const writeDefaults = {
    writeUnknownFields: true,
    writerFactory: () => new binary_encoding_js_1.BinaryWriter(),
};
function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
}
function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
}
function makeBinaryFormatCommon() {
    return {
        makeReadOptions,
        makeWriteOptions,
        listUnknownFields(message) {
            var _a;
            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];
        },
        discardUnknownFields(message) {
            delete message[unknownFieldsSymbol];
        },
        writeUnknownFields(message, writer) {
            const m = message;
            const c = m[unknownFieldsSymbol];
            if (c) {
                for (const f of c) {
                    writer.tag(f.no, f.wireType).raw(f.data);
                }
            }
        },
        onUnknownField(message, no, wireType, data) {
            const m = message;
            if (!Array.isArray(m[unknownFieldsSymbol])) {
                m[unknownFieldsSymbol] = [];
            }
            m[unknownFieldsSymbol].push({ no, wireType, data });
        },
        readMessage(message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {
            const type = message.getType();
            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
            const end = delimitedMessageEncoding
                ? reader.len
                : reader.pos + lengthOrEndTagFieldNo;
            let fieldNo, wireType;
            while (reader.pos < end) {
                [fieldNo, wireType] = reader.tag();
                if (wireType == binary_encoding_js_1.WireType.EndGroup) {
                    break;
                }
                const field = type.fields.find(fieldNo);
                if (!field) {
                    const data = reader.skip(wireType);
                    if (options.readUnknownFields) {
                        this.onUnknownField(message, fieldNo, wireType, data);
                    }
                    continue;
                }
                let target = message, repeated = field.repeated, localName = field.localName;
                if (field.oneof) {
                    target = target[field.oneof.localName];
                    if (target.case != localName) {
                        delete target.value;
                    }
                    target.case = localName;
                    localName = "value";
                }
                switch (field.kind) {
                    case "scalar":
                    case "enum":
                        const scalarType = field.kind == "enum" ? field_js_1.ScalarType.INT32 : field.T;
                        let read = readScalar;
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests
                        if (field.kind == "scalar" && field.L > 0) {
                            read = readScalarLTString;
                        }
                        if (repeated) {
                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values
                            if (wireType == binary_encoding_js_1.WireType.LengthDelimited &&
                                scalarType != field_js_1.ScalarType.STRING &&
                                scalarType != field_js_1.ScalarType.BYTES) {
                                let e = reader.uint32() + reader.pos;
                                while (reader.pos < e) {
                                    arr.push(read(reader, scalarType));
                                }
                            }
                            else {
                                arr.push(read(reader, scalarType));
                            }
                        }
                        else {
                            target[localName] = read(reader, scalarType);
                        }
                        break;
                    case "message":
                        const messageType = field.T;
                        if (repeated) {
                            // safe to assume presence of array, oneof cannot contain repeated values
                            target[localName].push(readMessageField(reader, new messageType(), options, field));
                        }
                        else {
                            if (target[localName] instanceof message_js_1.Message) {
                                readMessageField(reader, target[localName], options, field);
                            }
                            else {
                                target[localName] = readMessageField(reader, new messageType(), options, field);
                                if (messageType.fieldWrapper &&
                                    !field.oneof &&
                                    !field.repeated) {
                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                                }
                            }
                        }
                        break;
                    case "map":
                        let [mapKey, mapVal] = readMapEntry(field, reader, options);
                        // safe to assume presence of map object, oneof cannot contain repeated values
                        target[localName][mapKey] = mapVal;
                        break;
                }
            }
            if (delimitedMessageEncoding && // eslint-disable-line @typescript-eslint/strict-boolean-expressions
                (wireType != binary_encoding_js_1.WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {
                throw new Error(`invalid end group tag`);
            }
        },
    };
}
exports.makeBinaryFormatCommon = makeBinaryFormatCommon;
// Read a message, avoiding MessageType.fromBinary() to re-use the
// BinaryReadOptions and the IBinaryReader.
function readMessageField(reader, message, options, field) {
    const format = message.getType().runtime.bin;
    const delimited = field === null || field === void 0 ? void 0 : field.delimited;
    format.readMessage(message, reader, delimited ? field === null || field === void 0 ? void 0 : field.no : reader.uint32(), // eslint-disable-line @typescript-eslint/strict-boolean-expressions
    options, delimited);
    return message;
}
// Read a map field, expecting key field = 1, value field = 2
function readMapEntry(field, reader, options) {
    const length = reader.uint32(), end = reader.pos + length;
    let key, val;
    while (reader.pos < end) {
        let [fieldNo] = reader.tag();
        switch (fieldNo) {
            case 1:
                key = readScalar(reader, field.K);
                break;
            case 2:
                switch (field.V.kind) {
                    case "scalar":
                        val = readScalar(reader, field.V.T);
                        break;
                    case "enum":
                        val = reader.int32();
                        break;
                    case "message":
                        val = readMessageField(reader, new field.V.T(), options, undefined);
                        break;
                }
                break;
        }
    }
    if (key === undefined) {
        let keyRaw = (0, scalars_js_1.scalarDefaultValue)(field.K, field_js_1.LongType.BIGINT);
        key =
            field.K == field_js_1.ScalarType.BOOL
                ? keyRaw.toString()
                : keyRaw;
    }
    if (typeof key != "string" && typeof key != "number") {
        key = key.toString();
    }
    if (val === undefined) {
        switch (field.V.kind) {
            case "scalar":
                val = (0, scalars_js_1.scalarDefaultValue)(field.V.T, field_js_1.LongType.BIGINT);
                break;
            case "enum":
                val = 0;
                break;
            case "message":
                val = new field.V.T();
                break;
        }
    }
    return [key, val];
}
// Read a scalar value, but return 64 bit integral types (int64, uint64,
// sint64, fixed64, sfixed64) as string instead of bigint.
function readScalarLTString(reader, type) {
    const v = readScalar(reader, type);
    return typeof v == "bigint" ? v.toString() : v;
}
exports.readScalarLTString = readScalarLTString;
// Does not use scalarTypeInfo() for better performance.
function readScalar(reader, type) {
    switch (type) {
        case field_js_1.ScalarType.STRING:
            return reader.string();
        case field_js_1.ScalarType.BOOL:
            return reader.bool();
        case field_js_1.ScalarType.DOUBLE:
            return reader.double();
        case field_js_1.ScalarType.FLOAT:
            return reader.float();
        case field_js_1.ScalarType.INT32:
            return reader.int32();
        case field_js_1.ScalarType.INT64:
            return reader.int64();
        case field_js_1.ScalarType.UINT64:
            return reader.uint64();
        case field_js_1.ScalarType.FIXED64:
            return reader.fixed64();
        case field_js_1.ScalarType.BYTES:
            return reader.bytes();
        case field_js_1.ScalarType.FIXED32:
            return reader.fixed32();
        case field_js_1.ScalarType.SFIXED32:
            return reader.sfixed32();
        case field_js_1.ScalarType.SFIXED64:
            return reader.sfixed64();
        case field_js_1.ScalarType.SINT64:
            return reader.sint64();
        case field_js_1.ScalarType.UINT32:
            return reader.uint32();
        case field_js_1.ScalarType.SINT32:
            return reader.sint32();
    }
}
function writeMapEntry(writer, options, field, key, value) {
    writer.tag(field.no, binary_encoding_js_1.WireType.LengthDelimited);
    writer.fork();
    // javascript only allows number or string for object properties
    // we convert from our representation to the protobuf type
    let keyValue = key;
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys
    switch (field.K) {
        case field_js_1.ScalarType.INT32:
        case field_js_1.ScalarType.FIXED32:
        case field_js_1.ScalarType.UINT32:
        case field_js_1.ScalarType.SFIXED32:
        case field_js_1.ScalarType.SINT32:
            keyValue = Number.parseInt(key);
            break;
        case field_js_1.ScalarType.BOOL:
            (0, assert_js_1.assert)(key == "true" || key == "false");
            keyValue = key == "true";
            break;
    }
    // write key, expecting key field number = 1
    writeScalar(writer, field.K, 1, keyValue, true);
    // write value, expecting value field number = 2
    switch (field.V.kind) {
        case "scalar":
            writeScalar(writer, field.V.T, 2, value, true);
            break;
        case "enum":
            writeScalar(writer, field_js_1.ScalarType.INT32, 2, value, true);
            break;
        case "message":
            writer.tag(2, binary_encoding_js_1.WireType.LengthDelimited).bytes(value.toBinary(options));
            break;
    }
    writer.join();
}
exports.writeMapEntry = writeMapEntry;
function writeMessageField(writer, options, field, value) {
    if (value !== undefined) {
        const message = (0, field_wrapper_js_1.wrapField)(field.T, value);
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (field === null || field === void 0 ? void 0 : field.delimited)
            writer
                .tag(field.no, binary_encoding_js_1.WireType.StartGroup)
                .raw(message.toBinary(options))
                .tag(field.no, binary_encoding_js_1.WireType.EndGroup);
        else
            writer
                .tag(field.no, binary_encoding_js_1.WireType.LengthDelimited)
                .bytes(message.toBinary(options));
    }
}
exports.writeMessageField = writeMessageField;
function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {
    let [wireType, method, isIntrinsicDefault] = (0, scalars_js_1.scalarTypeInfo)(type, value);
    if (!isIntrinsicDefault || emitIntrinsicDefault) {
        writer.tag(fieldNo, wireType)[method](value);
    }
}
exports.writeScalar = writeScalar;
function writePacked(writer, type, fieldNo, value) {
    if (!value.length) {
        return;
    }
    writer.tag(fieldNo, binary_encoding_js_1.WireType.LengthDelimited).fork();
    let [, method] = (0, scalars_js_1.scalarTypeInfo)(type);
    for (let i = 0; i < value.length; i++) {
        writer[method](value[i]);
    }
    writer.join();
}
exports.writePacked = writePacked;


/***/ }),

/***/ 3794:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeBinaryFormatProto2 = void 0;
const field_js_1 = __nccwpck_require__(4756);
const binary_format_common_js_1 = __nccwpck_require__(9639);
/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, no-case-declarations, prefer-const */
function makeBinaryFormatProto2() {
    return Object.assign(Object.assign({}, (0, binary_format_common_js_1.makeBinaryFormatCommon)()), { writeMessage(message, writer, options) {
            const type = message.getType();
            let field;
            try {
                for (field of type.fields.byNumber()) {
                    let value, // this will be our field value, whether it is member of a oneof or not
                    repeated = field.repeated, localName = field.localName;
                    if (field.oneof) {
                        const oneof = message[field.oneof.localName];
                        if (oneof.case !== localName) {
                            continue; // field is not selected, skip
                        }
                        value = oneof.value;
                    }
                    else {
                        value = message[localName];
                        // In contrast to proto3, we raise an error if a non-optional (proto2 required)
                        // field is missing a value.
                        if (value === undefined && !field.oneof && !field.opt) {
                            throw new Error(`cannot encode field ${type.typeName}.${field.name} to binary: required field not set`);
                        }
                    }
                    switch (field.kind) {
                        case "scalar":
                        case "enum":
                            let scalarType = field.kind == "enum" ? field_js_1.ScalarType.INT32 : field.T;
                            if (repeated) {
                                if (field.packed) {
                                    (0, binary_format_common_js_1.writePacked)(writer, scalarType, field.no, value);
                                }
                                else {
                                    for (const item of value) {
                                        (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, item, true);
                                    }
                                }
                            }
                            else {
                                if (value !== undefined) {
                                    // In contrast to proto3, we do not skip intrinsic default values.
                                    // Explicit default values are not special cased either.
                                    (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, value, true);
                                }
                            }
                            break;
                        case "message":
                            if (repeated) {
                                for (const item of value) {
                                    (0, binary_format_common_js_1.writeMessageField)(writer, options, field, item);
                                }
                            }
                            else {
                                (0, binary_format_common_js_1.writeMessageField)(writer, options, field, value);
                            }
                            break;
                        case "map":
                            for (const [key, val] of Object.entries(value)) {
                                (0, binary_format_common_js_1.writeMapEntry)(writer, options, field, key, val);
                            }
                            break;
                    }
                }
            }
            catch (e) {
                let m = field
                    ? `cannot encode field ${type.typeName}.${field === null || field === void 0 ? void 0 : field.name} to binary`
                    : `cannot encode message ${type.typeName} to binary`;
                let r = e instanceof Error ? e.message : String(e);
                throw new Error(m + (r.length > 0 ? `: ${r}` : ""));
            }
            if (options.writeUnknownFields) {
                this.writeUnknownFields(message, writer);
            }
            return writer;
        } });
}
exports.makeBinaryFormatProto2 = makeBinaryFormatProto2;


/***/ }),

/***/ 9558:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeBinaryFormatProto3 = void 0;
const field_js_1 = __nccwpck_require__(4756);
const binary_format_common_js_1 = __nccwpck_require__(9639);
/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, prefer-const, no-case-declarations */
function makeBinaryFormatProto3() {
    return Object.assign(Object.assign({}, (0, binary_format_common_js_1.makeBinaryFormatCommon)()), { writeMessage(message, writer, options) {
            const type = message.getType();
            for (const field of type.fields.byNumber()) {
                let value, // this will be our field value, whether it is member of a oneof or regular field
                repeated = field.repeated, localName = field.localName;
                if (field.oneof) {
                    const oneof = message[field.oneof.localName];
                    if (oneof.case !== localName) {
                        continue; // field is not selected, skip
                    }
                    value = oneof.value;
                }
                else {
                    value = message[localName];
                }
                switch (field.kind) {
                    case "scalar":
                    case "enum":
                        let scalarType = field.kind == "enum" ? field_js_1.ScalarType.INT32 : field.T;
                        if (repeated) {
                            if (field.packed) {
                                (0, binary_format_common_js_1.writePacked)(writer, scalarType, field.no, value);
                            }
                            else {
                                for (const item of value) {
                                    (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, item, true);
                                }
                            }
                        }
                        else {
                            if (value !== undefined) {
                                (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, value, !!field.oneof || field.opt);
                            }
                        }
                        break;
                    case "message":
                        if (repeated) {
                            for (const item of value) {
                                (0, binary_format_common_js_1.writeMessageField)(writer, options, field, item);
                            }
                        }
                        else {
                            (0, binary_format_common_js_1.writeMessageField)(writer, options, field, value);
                        }
                        break;
                    case "map":
                        for (const [key, val] of Object.entries(value)) {
                            (0, binary_format_common_js_1.writeMapEntry)(writer, options, field, key, val);
                        }
                        break;
                }
            }
            if (options.writeUnknownFields) {
                this.writeUnknownFields(message, writer);
            }
            return writer;
        } });
}
exports.makeBinaryFormatProto3 = makeBinaryFormatProto3;


/***/ }),

/***/ 8504:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeEnum = exports.makeEnumType = exports.setEnumType = exports.getEnumType = void 0;
const assert_js_1 = __nccwpck_require__(1594);
const enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
/**
 * Get reflection information from a generated enum.
 * If this function is called on something other than a generated
 * enum, it raises an error.
 */
function getEnumType(enumObject) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any
    const t = enumObject[enumTypeSymbol];
    (0, assert_js_1.assert)(t, "missing enum type on enum object");
    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return
}
exports.getEnumType = getEnumType;
/**
 * Sets reflection information on a generated enum.
 */
function setEnumType(enumObject, typeName, values, opt) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({
        no: v.no,
        name: v.name,
        localName: enumObject[v.no],
    })), opt);
}
exports.setEnumType = setEnumType;
/**
 * Create a new EnumType with the given values.
 */
function makeEnumType(typeName, values, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_opt) {
    const names = Object.create(null);
    const numbers = Object.create(null);
    const normalValues = [];
    for (const value of values) {
        // We do not surface options at this time
        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};
        const n = normalizeEnumValue(value);
        normalValues.push(n);
        names[value.name] = n;
        numbers[value.no] = n;
    }
    return {
        typeName,
        values: normalValues,
        // We do not surface options at this time
        // options: opt?.options ?? Object.create(null),
        findName(name) {
            return names[name];
        },
        findNumber(no) {
            return numbers[no];
        },
    };
}
exports.makeEnumType = makeEnumType;
/**
 * Create a new enum object with the given values.
 * Sets reflection information.
 */
function makeEnum(typeName, values, opt) {
    const enumObject = {};
    for (const value of values) {
        const n = normalizeEnumValue(value);
        enumObject[n.localName] = n.no;
        enumObject[n.no] = n.localName;
    }
    setEnumType(enumObject, typeName, values, opt);
    return enumObject;
}
exports.makeEnum = makeEnum;
function normalizeEnumValue(value) {
    if ("localName" in value) {
        return value;
    }
    return Object.assign(Object.assign({}, value), { localName: value.name });
}


/***/ }),

/***/ 2652:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFeatureResolver = exports.featureSetDefaults = void 0;
const descriptor_pb_js_1 = __nccwpck_require__(2959);
const proto_base64_js_1 = __nccwpck_require__(5477);
/**
 * Static edition feature defaults supported by @bufbuild/protobuf.
 */
exports.featureSetDefaults = descriptor_pb_js_1.FeatureSetDefaults.fromBinary(proto_base64_js_1.protoBase64.dec(
/*upstream-inject-feature-defaults-start*/ "ChESDAgBEAIYAiABKAEwAhjmBwoREgwIAhABGAEgAigBMAEY5wcKERIMCAEQARgBIAIoATABGOgHIOYHKOgH" /*upstream-inject-feature-defaults-end*/));
/**
 * Create an edition feature resolver with the given feature set defaults.
 */
function createFeatureResolver(compiledFeatureSetDefaults) {
    const min = compiledFeatureSetDefaults.minimumEdition;
    const max = compiledFeatureSetDefaults.maximumEdition;
    if (min === undefined ||
        max === undefined ||
        compiledFeatureSetDefaults.defaults.some((d) => d.edition === undefined)) {
        throw new Error("Invalid FeatureSetDefaults");
    }
    const defaultsBinByEdition = new Map();
    return (edition, ...rest) => {
        var _a, _b;
        let defaultsBin = defaultsBinByEdition.get(edition);
        if (defaultsBin === undefined) {
            if (edition < min) {
                throw new Error(`Edition ${descriptor_pb_js_1.Edition[edition]} is earlier than the minimum supported edition ${descriptor_pb_js_1.Edition[min]}`);
            }
            if (max < edition) {
                throw new Error(`Edition ${descriptor_pb_js_1.Edition[edition]} is later than the maximum supported edition ${descriptor_pb_js_1.Edition[max]}`);
            }
            let highestMatch = undefined;
            for (const c of compiledFeatureSetDefaults.defaults) {
                const e = (_a = c.edition) !== null && _a !== void 0 ? _a : 0;
                if (e > edition) {
                    continue;
                }
                if (highestMatch !== undefined && highestMatch.e > e) {
                    continue;
                }
                highestMatch = {
                    e,
                    f: (_b = c.features) !== null && _b !== void 0 ? _b : new descriptor_pb_js_1.FeatureSet(),
                };
            }
            if (highestMatch === undefined) {
                throw new Error(`No valid default found for edition ${descriptor_pb_js_1.Edition[edition]}`);
            }
            defaultsBin = highestMatch.f.toBinary();
            defaultsBinByEdition.set(edition, defaultsBin);
        }
        const f = descriptor_pb_js_1.FeatureSet.fromBinary(defaultsBin);
        for (const c of rest) {
            if (c !== undefined) {
                f.fromBinary(c.toBinary());
            }
        }
        if (!validateMergedFeatures(f)) {
            throw new Error(`Invalid FeatureSet for edition ${descriptor_pb_js_1.Edition[edition]}`);
        }
        return f;
    };
}
exports.createFeatureResolver = createFeatureResolver;
// When protoc generates google.protobuf.FeatureSetDefaults, it ensures that
// fields are not repeated or required, do not use oneof, and have a default
// value.
//
// When features for an element are resolved, features of the element and its
// parents are merged into the default FeatureSet for the edition. Because unset
// fields in the FeatureSet of an element do not unset the default FeatureSet
// values, a resolved FeatureSet is guaranteed to have all fields set. This is
// also the case for extensions to FeatureSet that a user might provide, and for
// features from the future.
//
// We cannot exhaustively validate correctness of FeatureSetDefaults at runtime
// without knowing the schema: If no value for a feature is provided, we do not
// know that it exists at all.
//
// As a sanity check, we validate that all fields known to our version of
// FeatureSet are set.
function validateMergedFeatures(featureSet) {
    for (const fi of descriptor_pb_js_1.FeatureSet.fields.list()) {
        const v = featureSet[fi.localName];
        if (v === undefined) {
            return false;
        }
        if (fi.kind == "enum" && v === 0) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ 653:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InternalFieldList = void 0;
class InternalFieldList {
    constructor(fields, normalizer) {
        this._fields = fields;
        this._normalizer = normalizer;
    }
    findJsonName(jsonName) {
        if (!this.jsonNames) {
            const t = {};
            for (const f of this.list()) {
                t[f.jsonName] = t[f.name] = f;
            }
            this.jsonNames = t;
        }
        return this.jsonNames[jsonName];
    }
    find(fieldNo) {
        if (!this.numbers) {
            const t = {};
            for (const f of this.list()) {
                t[f.no] = f;
            }
            this.numbers = t;
        }
        return this.numbers[fieldNo];
    }
    list() {
        if (!this.all) {
            this.all = this._normalizer(this._fields);
        }
        return this.all;
    }
    byNumber() {
        if (!this.numbersAsc) {
            this.numbersAsc = this.list()
                .concat()
                .sort((a, b) => a.no - b.no);
        }
        return this.numbersAsc;
    }
    byMember() {
        if (!this.members) {
            this.members = [];
            const a = this.members;
            let o;
            for (const f of this.list()) {
                if (f.oneof) {
                    if (f.oneof !== o) {
                        o = f.oneof;
                        a.push(o);
                    }
                }
                else {
                    a.push(f);
                }
            }
        }
        return this.members;
    }
}
exports.InternalFieldList = InternalFieldList;


/***/ }),

/***/ 7579:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUnwrappedFieldType = exports.wrapField = void 0;
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
/**
 * Wrap a primitive message field value in its corresponding wrapper
 * message. This function is idempotent.
 */
function wrapField(type, value) {
    if (value instanceof message_js_1.Message || !type.fieldWrapper) {
        return value;
    }
    return type.fieldWrapper.wrapField(value);
}
exports.wrapField = wrapField;
/**
 * If the given field uses one of the well-known wrapper types, return
 * the primitive type it wraps.
 */
function getUnwrappedFieldType(field) {
    if (field.fieldKind !== "message") {
        return undefined;
    }
    if (field.repeated) {
        return undefined;
    }
    if (field.oneof != undefined) {
        return undefined;
    }
    return wktWrapperToScalarType[field.message.typeName];
}
exports.getUnwrappedFieldType = getUnwrappedFieldType;
const wktWrapperToScalarType = {
    "google.protobuf.DoubleValue": field_js_1.ScalarType.DOUBLE,
    "google.protobuf.FloatValue": field_js_1.ScalarType.FLOAT,
    "google.protobuf.Int64Value": field_js_1.ScalarType.INT64,
    "google.protobuf.UInt64Value": field_js_1.ScalarType.UINT64,
    "google.protobuf.Int32Value": field_js_1.ScalarType.INT32,
    "google.protobuf.UInt32Value": field_js_1.ScalarType.UINT32,
    "google.protobuf.BoolValue": field_js_1.ScalarType.BOOL,
    "google.protobuf.StringValue": field_js_1.ScalarType.STRING,
    "google.protobuf.BytesValue": field_js_1.ScalarType.BYTES,
};


/***/ }),

/***/ 158:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InternalOneofInfo = void 0;
const names_js_1 = __nccwpck_require__(9214);
const assert_js_1 = __nccwpck_require__(1594);
class InternalOneofInfo {
    constructor(name) {
        this.kind = "oneof";
        this.repeated = false;
        this.packed = false;
        this.opt = false;
        this.default = undefined;
        this.fields = [];
        this.name = name;
        this.localName = (0, names_js_1.localOneofName)(name);
    }
    addField(field) {
        (0, assert_js_1.assert)(field.oneof === this, `field ${field.name} not one of ${this.name}`);
        this.fields.push(field);
    }
    findField(localName) {
        if (!this._lookup) {
            this._lookup = Object.create(null);
            for (let i = 0; i < this.fields.length; i++) {
                this._lookup[this.fields[i].localName] = this.fields[i];
            }
        }
        return this._lookup[localName];
    }
}
exports.InternalOneofInfo = InternalOneofInfo;


/***/ }),

/***/ 430:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeJsonFormatCommon = void 0;
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
const assert_js_1 = __nccwpck_require__(1594);
const proto_int64_js_1 = __nccwpck_require__(6865);
const proto_base64_js_1 = __nccwpck_require__(5477);
/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
// Default options for parsing JSON.
const jsonReadDefaults = {
    ignoreUnknownFields: false,
};
// Default options for serializing to JSON.
const jsonWriteDefaults = {
    emitDefaultValues: false,
    enumAsInteger: false,
    useProtoFieldName: false,
    prettySpaces: 0,
};
function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;
}
function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;
}
function makeJsonFormatCommon(makeWriteField) {
    const writeField = makeWriteField(writeEnum, writeScalar);
    return {
        makeReadOptions,
        makeWriteOptions,
        readMessage(type, json, options, message) {
            if (json == null || Array.isArray(json) || typeof json != "object") {
                throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json)}`);
            }
            message = message !== null && message !== void 0 ? message : new type();
            const oneofSeen = {};
            for (const [jsonKey, jsonValue] of Object.entries(json)) {
                const field = type.fields.findJsonName(jsonKey);
                if (!field) {
                    if (!options.ignoreUnknownFields) {
                        throw new Error(`cannot decode message ${type.typeName} from JSON: key "${jsonKey}" is unknown`);
                    }
                    continue;
                }
                let localName = field.localName;
                let target = message;
                if (field.oneof) {
                    if (jsonValue === null && field.kind == "scalar") {
                        // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}
                        continue;
                    }
                    const seen = oneofSeen[field.oneof.localName];
                    if (seen) {
                        throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof "${field.oneof.name}" present: "${seen}", "${jsonKey}"`);
                    }
                    oneofSeen[field.oneof.localName] = jsonKey;
                    target = target[field.oneof.localName] = { case: localName };
                    localName = "value";
                }
                if (field.repeated) {
                    if (jsonValue === null) {
                        continue;
                    }
                    if (!Array.isArray(jsonValue)) {
                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
                    }
                    const targetArray = target[localName];
                    for (const jsonItem of jsonValue) {
                        if (jsonItem === null) {
                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);
                        }
                        let val;
                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- "map" is invalid for repeated fields
                        switch (field.kind) {
                            case "message":
                                val = field.T.fromJson(jsonItem, options);
                                break;
                            case "enum":
                                val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);
                                if (val === undefined)
                                    continue;
                                break;
                            case "scalar":
                                try {
                                    val = readScalar(field.T, jsonItem, field.L);
                                }
                                catch (e) {
                                    let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;
                                    if (e instanceof Error && e.message.length > 0) {
                                        m += `: ${e.message}`;
                                    }
                                    throw new Error(m);
                                }
                                break;
                        }
                        targetArray.push(val);
                    }
                }
                else if (field.kind == "map") {
                    if (jsonValue === null) {
                        continue;
                    }
                    if (Array.isArray(jsonValue) || typeof jsonValue != "object") {
                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
                    }
                    const targetMap = target[localName];
                    for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {
                        if (jsonMapValue === null) {
                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);
                        }
                        let val;
                        switch (field.V.kind) {
                            case "message":
                                val = field.V.T.fromJson(jsonMapValue, options);
                                break;
                            case "enum":
                                val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);
                                if (val === undefined)
                                    continue;
                                break;
                            case "scalar":
                                try {
                                    val = readScalar(field.V.T, jsonMapValue, field_js_1.LongType.BIGINT);
                                }
                                catch (e) {
                                    let m = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                                    if (e instanceof Error && e.message.length > 0) {
                                        m += `: ${e.message}`;
                                    }
                                    throw new Error(m);
                                }
                                break;
                        }
                        try {
                            targetMap[readScalar(field.K, field.K == field_js_1.ScalarType.BOOL
                                ? jsonMapKey == "true"
                                    ? true
                                    : jsonMapKey == "false"
                                        ? false
                                        : jsonMapKey
                                : jsonMapKey, field_js_1.LongType.BIGINT).toString()] = val;
                        }
                        catch (e) {
                            let m = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                            if (e instanceof Error && e.message.length > 0) {
                                m += `: ${e.message}`;
                            }
                            throw new Error(m);
                        }
                    }
                }
                else {
                    switch (field.kind) {
                        case "message":
                            const messageType = field.T;
                            if (jsonValue === null &&
                                messageType.typeName != "google.protobuf.Value") {
                                if (field.oneof) {
                                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field "${jsonKey}"`);
                                }
                                continue;
                            }
                            if (target[localName] instanceof message_js_1.Message) {
                                target[localName].fromJson(jsonValue, options);
                            }
                            else {
                                target[localName] = messageType.fromJson(jsonValue, options);
                                if (messageType.fieldWrapper && !field.oneof) {
                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                                }
                            }
                            break;
                        case "enum":
                            const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);
                            if (enumValue !== undefined) {
                                target[localName] = enumValue;
                            }
                            break;
                        case "scalar":
                            try {
                                target[localName] = readScalar(field.T, jsonValue, field.L);
                            }
                            catch (e) {
                                let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                                if (e instanceof Error && e.message.length > 0) {
                                    m += `: ${e.message}`;
                                }
                                throw new Error(m);
                            }
                            break;
                    }
                }
            }
            return message;
        },
        writeMessage(message, options) {
            const type = message.getType();
            const json = {};
            let field;
            try {
                for (const member of type.fields.byMember()) {
                    let jsonValue;
                    if (member.kind == "oneof") {
                        const oneof = message[member.localName];
                        if (oneof.value === undefined) {
                            continue;
                        }
                        field = member.findField(oneof.case);
                        if (!field) {
                            throw "oneof case not found: " + oneof.case;
                        }
                        jsonValue = writeField(field, oneof.value, options);
                    }
                    else {
                        field = member;
                        jsonValue = writeField(field, message[field.localName], options);
                    }
                    if (jsonValue !== undefined) {
                        json[options.useProtoFieldName ? field.name : field.jsonName] =
                            jsonValue;
                    }
                }
            }
            catch (e) {
                const m = field
                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`
                    : `cannot encode message ${type.typeName} to JSON`;
                const r = e instanceof Error ? e.message : String(e);
                throw new Error(m + (r.length > 0 ? `: ${r}` : ""));
            }
            return json;
        },
        readScalar,
        writeScalar,
        debug: debugJsonValue,
    };
}
exports.makeJsonFormatCommon = makeJsonFormatCommon;
function debugJsonValue(json) {
    if (json === null) {
        return "null";
    }
    switch (typeof json) {
        case "object":
            return Array.isArray(json) ? "array" : "object";
        case "string":
            return json.length > 100 ? "string" : `"${json.split('"').join('\\"')}"`;
        default:
            return String(json);
    }
}
// May throw an error. If the error message is non-blank, it should be shown.
// It is up to the caller to provide context.
function readScalar(type, json, longType) {
    // every valid case in the switch below returns, and every fall
    // through is regarded as a failure.
    switch (type) {
        // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
        // Either numbers or strings are accepted. Exponent notation is also accepted.
        case field_js_1.ScalarType.DOUBLE:
        case field_js_1.ScalarType.FLOAT:
            if (json === null)
                return 0.0;
            if (json === "NaN")
                return Number.NaN;
            if (json === "Infinity")
                return Number.POSITIVE_INFINITY;
            if (json === "-Infinity")
                return Number.NEGATIVE_INFINITY;
            if (json === "") {
                // empty string is not a number
                break;
            }
            if (typeof json == "string" && json.trim().length !== json.length) {
                // extra whitespace
                break;
            }
            if (typeof json != "string" && typeof json != "number") {
                break;
            }
            const float = Number(json);
            if (Number.isNaN(float)) {
                // not a number
                break;
            }
            if (!Number.isFinite(float)) {
                // infinity and -infinity are handled by string representation above, so this is an error
                break;
            }
            if (type == field_js_1.ScalarType.FLOAT)
                (0, assert_js_1.assertFloat32)(float);
            return float;
        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
        case field_js_1.ScalarType.INT32:
        case field_js_1.ScalarType.FIXED32:
        case field_js_1.ScalarType.SFIXED32:
        case field_js_1.ScalarType.SINT32:
        case field_js_1.ScalarType.UINT32:
            if (json === null)
                return 0;
            let int32;
            if (typeof json == "number")
                int32 = json;
            else if (typeof json == "string" && json.length > 0) {
                if (json.trim().length === json.length)
                    int32 = Number(json);
            }
            if (int32 === undefined)
                break;
            if (type == field_js_1.ScalarType.UINT32)
                (0, assert_js_1.assertUInt32)(int32);
            else
                (0, assert_js_1.assertInt32)(int32);
            return int32;
        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            if (json === null)
                return proto_int64_js_1.protoInt64.zero;
            if (typeof json != "number" && typeof json != "string")
                break;
            const long = proto_int64_js_1.protoInt64.parse(json);
            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
            return longType ? long.toString() : long;
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.UINT64:
            if (json === null)
                return proto_int64_js_1.protoInt64.zero;
            if (typeof json != "number" && typeof json != "string")
                break;
            const uLong = proto_int64_js_1.protoInt64.uParse(json);
            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
            return longType ? uLong.toString() : uLong;
        // bool:
        case field_js_1.ScalarType.BOOL:
            if (json === null)
                return false;
            if (typeof json !== "boolean")
                break;
            return json;
        // string:
        case field_js_1.ScalarType.STRING:
            if (json === null)
                return "";
            if (typeof json !== "string") {
                break;
            }
            // A string must always contain UTF-8 encoded or 7-bit ASCII.
            // We validate with encodeURIComponent, which appears to be the fastest widely available option.
            try {
                encodeURIComponent(json);
            }
            catch (e) {
                throw new Error("invalid UTF8");
            }
            return json;
        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
        // Either standard or URL-safe base64 encoding with/without paddings are accepted.
        case field_js_1.ScalarType.BYTES:
            if (json === null || json === "")
                return new Uint8Array(0);
            if (typeof json !== "string")
                break;
            return proto_base64_js_1.protoBase64.dec(json);
    }
    throw new Error();
}
function readEnum(type, json, ignoreUnknownFields) {
    if (json === null) {
        // proto3 requires 0 to be default value for all enums
        return 0;
    }
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
    switch (typeof json) {
        case "number":
            if (Number.isInteger(json)) {
                return json;
            }
            break;
        case "string":
            const value = type.findName(json);
            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
            if (value || ignoreUnknownFields) {
                return value === null || value === void 0 ? void 0 : value.no;
            }
            break;
    }
    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);
}
function writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {
    var _a;
    if (value === undefined) {
        return value;
    }
    if (value === 0 && !emitIntrinsicDefault) {
        // proto3 requires 0 to be default value for all enums
        return undefined;
    }
    if (enumAsInteger) {
        return value;
    }
    if (type.typeName == "google.protobuf.NullValue") {
        return null;
    }
    const val = type.findNumber(value);
    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number
}
function writeScalar(type, value, emitIntrinsicDefault) {
    if (value === undefined) {
        return undefined;
    }
    switch (type) {
        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
        case field_js_1.ScalarType.INT32:
        case field_js_1.ScalarType.SFIXED32:
        case field_js_1.ScalarType.SINT32:
        case field_js_1.ScalarType.FIXED32:
        case field_js_1.ScalarType.UINT32:
            (0, assert_js_1.assert)(typeof value == "number");
            return value != 0 || emitIntrinsicDefault ? value : undefined;
        // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
        // Either numbers or strings are accepted. Exponent notation is also accepted.
        case field_js_1.ScalarType.FLOAT:
        // assertFloat32(value);
        case field_js_1.ScalarType.DOUBLE: // eslint-disable-line no-fallthrough
            (0, assert_js_1.assert)(typeof value == "number");
            if (Number.isNaN(value))
                return "NaN";
            if (value === Number.POSITIVE_INFINITY)
                return "Infinity";
            if (value === Number.NEGATIVE_INFINITY)
                return "-Infinity";
            return value !== 0 || emitIntrinsicDefault ? value : undefined;
        // string:
        case field_js_1.ScalarType.STRING:
            (0, assert_js_1.assert)(typeof value == "string");
            return value.length > 0 || emitIntrinsicDefault ? value : undefined;
        // bool:
        case field_js_1.ScalarType.BOOL:
            (0, assert_js_1.assert)(typeof value == "boolean");
            return value || emitIntrinsicDefault ? value : undefined;
        // JSON value will be a decimal string. Either numbers or strings are accepted.
        case field_js_1.ScalarType.UINT64:
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            (0, assert_js_1.assert)(typeof value == "bigint" ||
                typeof value == "string" ||
                typeof value == "number");
            // We use implicit conversion with `value != 0` to catch both 0n and "0"
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            return emitIntrinsicDefault || value != 0
                ? value.toString(10)
                : undefined;
        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
        // Either standard or URL-safe base64 encoding with/without paddings are accepted.
        case field_js_1.ScalarType.BYTES:
            (0, assert_js_1.assert)(value instanceof Uint8Array);
            return emitIntrinsicDefault || value.byteLength > 0
                ? proto_base64_js_1.protoBase64.enc(value)
                : undefined;
    }
}


/***/ }),

/***/ 1626:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeJsonFormatProto2 = void 0;
const field_wrapper_js_1 = __nccwpck_require__(7579);
const assert_js_1 = __nccwpck_require__(1594);
const json_format_common_js_1 = __nccwpck_require__(430);
/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function makeJsonFormatProto2() {
    return (0, json_format_common_js_1.makeJsonFormatCommon)((writeEnum, writeScalar) => {
        return function writeField(field, value, options) {
            if (field.kind == "map") {
                const jsonObj = {};
                switch (field.V.kind) {
                    case "scalar":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            const val = writeScalar(field.V.T, entryValue, true);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                    case "message":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            // JSON standard allows only (double quoted) string as property key
                            jsonObj[entryKey.toString()] = entryValue.toJson(options);
                        }
                        break;
                    case "enum":
                        const enumType = field.V.T;
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            (0, assert_js_1.assert)(entryValue === undefined || typeof entryValue == "number");
                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                }
                return options.emitDefaultValues || Object.keys(jsonObj).length > 0
                    ? jsonObj
                    : undefined;
            }
            else if (field.repeated) {
                const jsonArr = [];
                switch (field.kind) {
                    case "scalar":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeScalar(field.T, value[i], true));
                        }
                        break;
                    case "enum":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));
                        }
                        break;
                    case "message":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(value[i].toJson(options));
                        }
                        break;
                }
                return options.emitDefaultValues || jsonArr.length > 0
                    ? jsonArr
                    : undefined;
            }
            else {
                // In contrast to proto3, we raise an error if a non-optional (proto2 required)
                // field is missing a value.
                if (value === undefined) {
                    if (!field.oneof && !field.opt) {
                        throw `required field not set`;
                    }
                    return undefined;
                }
                switch (field.kind) {
                    case "scalar":
                        // In contrast to proto3, we do not skip intrinsic default values.
                        // Explicit default values are not special cased either.
                        return writeScalar(field.T, value, true);
                    case "enum":
                        // In contrast to proto3, we do not skip intrinsic default values.
                        // Explicit default values are not special cased either.
                        return writeEnum(field.T, value, true, options.enumAsInteger);
                    case "message":
                        return (0, field_wrapper_js_1.wrapField)(field.T, value).toJson(options);
                }
            }
        };
    });
}
exports.makeJsonFormatProto2 = makeJsonFormatProto2;


/***/ }),

/***/ 8946:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeJsonFormatProto3 = void 0;
const field_wrapper_js_1 = __nccwpck_require__(7579);
const assert_js_1 = __nccwpck_require__(1594);
const json_format_common_js_1 = __nccwpck_require__(430);
/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function makeJsonFormatProto3() {
    return (0, json_format_common_js_1.makeJsonFormatCommon)((writeEnum, writeScalar) => {
        return function writeField(field, value, options) {
            if (field.kind == "map") {
                const jsonObj = {};
                switch (field.V.kind) {
                    case "scalar":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            const val = writeScalar(field.V.T, entryValue, true);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                    case "message":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            // JSON standard allows only (double quoted) string as property key
                            jsonObj[entryKey.toString()] = entryValue.toJson(options);
                        }
                        break;
                    case "enum":
                        const enumType = field.V.T;
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            (0, assert_js_1.assert)(entryValue === undefined || typeof entryValue == "number");
                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                }
                return options.emitDefaultValues || Object.keys(jsonObj).length > 0
                    ? jsonObj
                    : undefined;
            }
            else if (field.repeated) {
                const jsonArr = [];
                switch (field.kind) {
                    case "scalar":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeScalar(field.T, value[i], true));
                        }
                        break;
                    case "enum":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));
                        }
                        break;
                    case "message":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push((0, field_wrapper_js_1.wrapField)(field.T, value[i]).toJson(options));
                        }
                        break;
                }
                return options.emitDefaultValues || jsonArr.length > 0
                    ? jsonArr
                    : undefined;
            }
            else {
                switch (field.kind) {
                    case "scalar":
                        return writeScalar(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);
                    case "enum":
                        return writeEnum(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);
                    case "message":
                        return value !== undefined
                            ? (0, field_wrapper_js_1.wrapField)(field.T, value).toJson(options)
                            : undefined;
                }
            }
        };
    });
}
exports.makeJsonFormatProto3 = makeJsonFormatProto3;


/***/ }),

/***/ 3089:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeMessageType = void 0;
const message_js_1 = __nccwpck_require__(2779);
/**
 * Create a new message type using the given runtime.
 */
function makeMessageType(runtime, typeName, fields, opt) {
    var _a;
    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(".") + 1);
    const type = {
        [localName]: function (data) {
            runtime.util.initFields(this);
            runtime.util.initPartial(data, this);
        },
    }[localName];
    Object.setPrototypeOf(type.prototype, new message_js_1.Message());
    Object.assign(type, {
        runtime,
        typeName,
        fields: runtime.util.newFieldList(fields),
        fromBinary(bytes, options) {
            return new type().fromBinary(bytes, options);
        },
        fromJson(jsonValue, options) {
            return new type().fromJson(jsonValue, options);
        },
        fromJsonString(jsonString, options) {
            return new type().fromJsonString(jsonString, options);
        },
        equals(a, b) {
            return runtime.util.equals(type, a, b);
        },
    });
    return type;
}
exports.makeMessageType = makeMessageType;


/***/ }),

/***/ 9214:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeIdentifier = exports.safeObjectProperty = exports.findEnumSharedPrefix = exports.fieldJsonName = exports.localOneofName = exports.localFieldName = exports.localName = void 0;
/**
 * Returns the name of a protobuf element in generated code.
 *
 * Field names - including oneofs - are converted to lowerCamelCase. For
 * messages, enumerations and services, the package name is stripped from
 * the type name. For nested messages and enumerations, the names are joined
 * with an underscore. For methods, the first character is made lowercase.
 */
function localName(desc) {
    switch (desc.kind) {
        case "field":
            return localFieldName(desc.name, desc.oneof !== undefined);
        case "oneof":
            return localOneofName(desc.name);
        case "enum":
        case "message":
        case "service": {
            const pkg = desc.file.proto.package;
            const offset = pkg === undefined ? 0 : pkg.length + 1;
            const name = desc.typeName.substring(offset).replace(/\./g, "_");
            // For services, we only care about safe identifiers, not safe object properties,
            // but we have shipped v1 with a bug that respected object properties, and we
            // do not want to introduce a breaking change, so we continue to escape for
            // safe object properties.
            // See https://github.com/bufbuild/protobuf-es/pull/391
            return (0, exports.safeObjectProperty)((0, exports.safeIdentifier)(name));
        }
        case "enum_value": {
            const sharedPrefix = desc.parent.sharedPrefix;
            if (sharedPrefix === undefined) {
                return desc.name;
            }
            const name = desc.name.substring(sharedPrefix.length);
            return (0, exports.safeObjectProperty)(name);
        }
        case "rpc": {
            let name = desc.name;
            if (name.length == 0) {
                return name;
            }
            name = name[0].toLowerCase() + name.substring(1);
            return (0, exports.safeObjectProperty)(name);
        }
    }
}
exports.localName = localName;
/**
 * Returns the name of a field in generated code.
 */
function localFieldName(protoName, inOneof) {
    const name = protoCamelCase(protoName);
    if (inOneof) {
        // oneof member names are not properties, but values of the `case` property.
        return name;
    }
    return (0, exports.safeObjectProperty)(safeMessageProperty(name));
}
exports.localFieldName = localFieldName;
/**
 * Returns the name of a oneof group in generated code.
 */
function localOneofName(protoName) {
    return localFieldName(protoName, false);
}
exports.localOneofName = localOneofName;
/**
 * Returns the JSON name for a protobuf field, exactly like protoc does.
 */
exports.fieldJsonName = protoCamelCase;
/**
 * Finds a prefix shared by enum values, for example `MY_ENUM_` for
 * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.
 */
function findEnumSharedPrefix(enumName, valueNames) {
    const prefix = camelToSnakeCase(enumName) + "_";
    for (const name of valueNames) {
        if (!name.toLowerCase().startsWith(prefix)) {
            return undefined;
        }
        const shortName = name.substring(prefix.length);
        if (shortName.length == 0) {
            return undefined;
        }
        if (/^\d/.test(shortName)) {
            // identifiers must not start with numbers
            return undefined;
        }
    }
    return prefix;
}
exports.findEnumSharedPrefix = findEnumSharedPrefix;
/**
 * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.
 * This is used to find shared prefixes in an enum.
 */
function camelToSnakeCase(camel) {
    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => "_" + c)).toLowerCase();
}
/**
 * Converts snake_case to protoCamelCase according to the convention
 * used by protoc to convert a field name to a JSON name.
 */
function protoCamelCase(snakeCase) {
    let capNext = false;
    const b = [];
    for (let i = 0; i < snakeCase.length; i++) {
        let c = snakeCase.charAt(i);
        switch (c) {
            case "_":
                capNext = true;
                break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                b.push(c);
                capNext = false;
                break;
            default:
                if (capNext) {
                    capNext = false;
                    c = c.toUpperCase();
                }
                b.push(c);
                break;
        }
    }
    return b.join("");
}
/**
 * Names that cannot be used for identifiers, such as class names,
 * but _can_ be used for object properties.
 */
const reservedIdentifiers = new Set([
    // ECMAScript 2015 keywords
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "export",
    "extends",
    "false",
    "finally",
    "for",
    "function",
    "if",
    "import",
    "in",
    "instanceof",
    "new",
    "null",
    "return",
    "super",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "yield",
    // ECMAScript 2015 future reserved keywords
    "enum",
    "implements",
    "interface",
    "let",
    "package",
    "private",
    "protected",
    "public",
    "static",
    // Class name cannot be 'Object' when targeting ES5 with module CommonJS
    "Object",
    // TypeScript keywords that cannot be used for types (as opposed to variables)
    "bigint",
    "number",
    "boolean",
    "string",
    "object",
    // Identifiers reserved for the runtime, so we can generate legible code
    "globalThis",
    "Uint8Array",
    "Partial",
]);
/**
 * Names that cannot be used for object properties because they are reserved
 * by built-in JavaScript properties.
 */
const reservedObjectProperties = new Set([
    // names reserved by JavaScript
    "constructor",
    "toString",
    "toJSON",
    "valueOf",
]);
/**
 * Names that cannot be used for object properties because they are reserved
 * by the runtime.
 */
const reservedMessageProperties = new Set([
    // names reserved by the runtime
    "getType",
    "clone",
    "equals",
    "fromBinary",
    "fromJson",
    "fromJsonString",
    "toBinary",
    "toJson",
    "toJsonString",
    // names reserved by the runtime for the future
    "toObject",
]);
const fallback = (name) => `${name}$`;
/**
 * Will wrap names that are Object prototype properties or names reserved
 * for `Message`s.
 */
const safeMessageProperty = (name) => {
    if (reservedMessageProperties.has(name)) {
        return fallback(name);
    }
    return name;
};
/**
 * Names that cannot be used for object properties because they are reserved
 * by built-in JavaScript properties.
 */
const safeObjectProperty = (name) => {
    if (reservedObjectProperties.has(name)) {
        return fallback(name);
    }
    return name;
};
exports.safeObjectProperty = safeObjectProperty;
/**
 * Names that can be used for identifiers or class properties
 */
const safeIdentifier = (name) => {
    if (reservedIdentifiers.has(name)) {
        return fallback(name);
    }
    return name;
};
exports.safeIdentifier = safeIdentifier;


/***/ }),

/***/ 8959:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeProtoRuntime = void 0;
const enum_js_1 = __nccwpck_require__(8504);
const message_type_js_1 = __nccwpck_require__(3089);
function makeProtoRuntime(syntax, json, bin, util) {
    return {
        syntax,
        json,
        bin,
        util,
        makeMessageType(typeName, fields, opt) {
            return (0, message_type_js_1.makeMessageType)(this, typeName, fields, opt);
        },
        makeEnum: enum_js_1.makeEnum,
        makeEnumType: enum_js_1.makeEnumType,
        getEnumType: enum_js_1.getEnumType,
    };
}
exports.makeProtoRuntime = makeProtoRuntime;


/***/ }),

/***/ 514:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reifyWkt = void 0;
const field_js_1 = __nccwpck_require__(4756);
/**
 * @deprecated please use reifyWkt from @bufbuild/protoplugin/ecmascript instead
 *
 * Reifies a given DescMessage into a more concrete object representing its
 * respective well-known type.  The returned object will contain properties
 * representing the WKT's defined fields.
 *
 * Useful during code generation when immediate access to a particular field
 * is needed without having to search the object's typename and DescField list.
 *
 * Returns undefined if the WKT cannot be completely constructed via the
 * DescMessage.
 */
function reifyWkt(message) {
    switch (message.typeName) {
        case "google.protobuf.Any": {
            const typeUrl = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.STRING);
            const value = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.BYTES);
            if (typeUrl && value) {
                return {
                    typeName: message.typeName,
                    typeUrl,
                    value,
                };
            }
            break;
        }
        case "google.protobuf.Timestamp": {
            const seconds = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT64);
            const nanos = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT32);
            if (seconds && nanos) {
                return {
                    typeName: message.typeName,
                    seconds,
                    nanos,
                };
            }
            break;
        }
        case "google.protobuf.Duration": {
            const seconds = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT64);
            const nanos = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT32);
            if (seconds && nanos) {
                return {
                    typeName: message.typeName,
                    seconds,
                    nanos,
                };
            }
            break;
        }
        case "google.protobuf.Struct": {
            const fields = message.fields.find((f) => f.number == 1 && !f.repeated);
            if ((fields === null || fields === void 0 ? void 0 : fields.fieldKind) !== "map" ||
                fields.mapValue.kind !== "message" ||
                fields.mapValue.message.typeName !== "google.protobuf.Value") {
                break;
            }
            return { typeName: message.typeName, fields };
        }
        case "google.protobuf.Value": {
            const kind = message.oneofs.find((o) => o.name === "kind");
            const nullValue = message.fields.find((f) => f.number == 1 && f.oneof === kind);
            if ((nullValue === null || nullValue === void 0 ? void 0 : nullValue.fieldKind) !== "enum" ||
                nullValue.enum.typeName !== "google.protobuf.NullValue") {
                return undefined;
            }
            const numberValue = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.DOUBLE &&
                f.oneof === kind);
            const stringValue = message.fields.find((f) => f.number == 3 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.STRING &&
                f.oneof === kind);
            const boolValue = message.fields.find((f) => f.number == 4 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.BOOL &&
                f.oneof === kind);
            const structValue = message.fields.find((f) => f.number == 5 && f.oneof === kind);
            if ((structValue === null || structValue === void 0 ? void 0 : structValue.fieldKind) !== "message" ||
                structValue.message.typeName !== "google.protobuf.Struct") {
                return undefined;
            }
            const listValue = message.fields.find((f) => f.number == 6 && f.oneof === kind);
            if ((listValue === null || listValue === void 0 ? void 0 : listValue.fieldKind) !== "message" ||
                listValue.message.typeName !== "google.protobuf.ListValue") {
                return undefined;
            }
            if (kind && numberValue && stringValue && boolValue) {
                return {
                    typeName: message.typeName,
                    kind,
                    nullValue,
                    numberValue,
                    stringValue,
                    boolValue,
                    structValue,
                    listValue,
                };
            }
            break;
        }
        case "google.protobuf.ListValue": {
            const values = message.fields.find((f) => f.number == 1 && f.repeated);
            if ((values === null || values === void 0 ? void 0 : values.fieldKind) != "message" ||
                values.message.typeName !== "google.protobuf.Value") {
                break;
            }
            return { typeName: message.typeName, values };
        }
        case "google.protobuf.FieldMask": {
            const paths = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.STRING &&
                f.repeated);
            if (paths) {
                return { typeName: message.typeName, paths };
            }
            break;
        }
        case "google.protobuf.DoubleValue":
        case "google.protobuf.FloatValue":
        case "google.protobuf.Int64Value":
        case "google.protobuf.UInt64Value":
        case "google.protobuf.Int32Value":
        case "google.protobuf.UInt32Value":
        case "google.protobuf.BoolValue":
        case "google.protobuf.StringValue":
        case "google.protobuf.BytesValue": {
            const value = message.fields.find((f) => f.number == 1 && f.name == "value");
            if (!value) {
                break;
            }
            if (value.fieldKind !== "scalar") {
                break;
            }
            return { typeName: message.typeName, value };
        }
    }
    return undefined;
}
exports.reifyWkt = reifyWkt;


/***/ }),

/***/ 5618:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scalarTypeInfo = exports.scalarDefaultValue = exports.scalarEquals = void 0;
const field_js_1 = __nccwpck_require__(4756);
const binary_encoding_js_1 = __nccwpck_require__(1304);
const proto_int64_js_1 = __nccwpck_require__(6865);
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Returns true if both scalar values are equal.
 */
function scalarEquals(type, a, b) {
    if (a === b) {
        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.
        return true;
    }
    // Special case BYTES - we need to compare each byte individually
    if (type == field_js_1.ScalarType.BYTES) {
        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {
            return false;
        }
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    // Special case 64-bit integers - we support number, string and bigint representation.
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
    switch (type) {
        case field_js_1.ScalarType.UINT64:
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            // Loose comparison will match between 0n, 0 and "0".
            return a == b;
    }
    // Anything that hasn't been caught by strict comparison or special cased
    // BYTES and 64-bit integers is not equal.
    return false;
}
exports.scalarEquals = scalarEquals;
/**
 * Returns the default value for the given scalar type, following
 * proto3 semantics.
 */
function scalarDefaultValue(type, longType) {
    switch (type) {
        case field_js_1.ScalarType.BOOL:
            return false;
        case field_js_1.ScalarType.UINT64:
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests
            return longType == 0 ? proto_int64_js_1.protoInt64.zero : "0";
        case field_js_1.ScalarType.DOUBLE:
        case field_js_1.ScalarType.FLOAT:
            return 0.0;
        case field_js_1.ScalarType.BYTES:
            return new Uint8Array(0);
        case field_js_1.ScalarType.STRING:
            return "";
        default:
            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.
            // We do not use individual cases to save a few bytes code size.
            return 0;
    }
}
exports.scalarDefaultValue = scalarDefaultValue;
/**
 * Get information for writing a scalar value.
 *
 * Returns tuple:
 * [0]: appropriate WireType
 * [1]: name of the appropriate method of IBinaryWriter
 * [2]: whether the given value is a default value for proto3 semantics
 *
 * If argument `value` is omitted, [2] is always false.
 */
function scalarTypeInfo(type, value) {
    const isUndefined = value === undefined;
    let wireType = binary_encoding_js_1.WireType.Varint;
    let isIntrinsicDefault = value === 0;
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults
    switch (type) {
        case field_js_1.ScalarType.STRING:
            isIntrinsicDefault = isUndefined || !value.length;
            wireType = binary_encoding_js_1.WireType.LengthDelimited;
            break;
        case field_js_1.ScalarType.BOOL:
            isIntrinsicDefault = value === false;
            break;
        case field_js_1.ScalarType.DOUBLE:
            wireType = binary_encoding_js_1.WireType.Bit64;
            break;
        case field_js_1.ScalarType.FLOAT:
            wireType = binary_encoding_js_1.WireType.Bit32;
            break;
        case field_js_1.ScalarType.INT64:
            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and "0"
            break;
        case field_js_1.ScalarType.UINT64:
            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and "0"
            break;
        case field_js_1.ScalarType.FIXED64:
            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and "0"
            wireType = binary_encoding_js_1.WireType.Bit64;
            break;
        case field_js_1.ScalarType.BYTES:
            isIntrinsicDefault = isUndefined || !value.byteLength;
            wireType = binary_encoding_js_1.WireType.LengthDelimited;
            break;
        case field_js_1.ScalarType.FIXED32:
            wireType = binary_encoding_js_1.WireType.Bit32;
            break;
        case field_js_1.ScalarType.SFIXED32:
            wireType = binary_encoding_js_1.WireType.Bit32;
            break;
        case field_js_1.ScalarType.SFIXED64:
            isIntrinsicDefault = isUndefined || value == 0;
            wireType = binary_encoding_js_1.WireType.Bit64;
            break;
        case field_js_1.ScalarType.SINT64:
            isIntrinsicDefault = isUndefined || value == 0;
            break;
    }
    const method = field_js_1.ScalarType[type].toLowerCase();
    return [wireType, method, isUndefined || isIntrinsicDefault];
}
exports.scalarTypeInfo = scalarTypeInfo;


/***/ }),

/***/ 9572:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseTextFormatScalarValue = exports.parseTextFormatEnumValue = void 0;
const assert_js_1 = __nccwpck_require__(1594);
const field_js_1 = __nccwpck_require__(4756);
const proto_int64_js_1 = __nccwpck_require__(6865);
function parseTextFormatEnumValue(descEnum, value) {
    const enumValue = descEnum.values.find((v) => v.name === value);
    (0, assert_js_1.assert)(enumValue, `cannot parse ${descEnum.name} default value: ${value}`);
    return enumValue.number;
}
exports.parseTextFormatEnumValue = parseTextFormatEnumValue;
function parseTextFormatScalarValue(type, value) {
    switch (type) {
        case field_js_1.ScalarType.STRING:
            return value;
        case field_js_1.ScalarType.BYTES: {
            const u = unescapeBytesDefaultValue(value);
            if (u === false) {
                throw new Error(`cannot parse ${field_js_1.ScalarType[type]} default value: ${value}`);
            }
            return u;
        }
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            return proto_int64_js_1.protoInt64.parse(value);
        case field_js_1.ScalarType.UINT64:
        case field_js_1.ScalarType.FIXED64:
            return proto_int64_js_1.protoInt64.uParse(value);
        case field_js_1.ScalarType.DOUBLE:
        case field_js_1.ScalarType.FLOAT:
            switch (value) {
                case "inf":
                    return Number.POSITIVE_INFINITY;
                case "-inf":
                    return Number.NEGATIVE_INFINITY;
                case "nan":
                    return Number.NaN;
                default:
                    return parseFloat(value);
            }
        case field_js_1.ScalarType.BOOL:
            return value === "true";
        case field_js_1.ScalarType.INT32:
        case field_js_1.ScalarType.UINT32:
        case field_js_1.ScalarType.SINT32:
        case field_js_1.ScalarType.FIXED32:
        case field_js_1.ScalarType.SFIXED32:
            return parseInt(value, 10);
    }
}
exports.parseTextFormatScalarValue = parseTextFormatScalarValue;
/**
 * Parses a text-encoded default value (proto2) of a BYTES field.
 */
function unescapeBytesDefaultValue(str) {
    const b = [];
    const input = {
        tail: str,
        c: "",
        next() {
            if (this.tail.length == 0) {
                return false;
            }
            this.c = this.tail[0];
            this.tail = this.tail.substring(1);
            return true;
        },
        take(n) {
            if (this.tail.length >= n) {
                const r = this.tail.substring(0, n);
                this.tail = this.tail.substring(n);
                return r;
            }
            return false;
        },
    };
    while (input.next()) {
        switch (input.c) {
            case "\\":
                if (input.next()) {
                    switch (input.c) {
                        case "\\":
                            b.push(input.c.charCodeAt(0));
                            break;
                        case "b":
                            b.push(0x08);
                            break;
                        case "f":
                            b.push(0x0c);
                            break;
                        case "n":
                            b.push(0x0a);
                            break;
                        case "r":
                            b.push(0x0d);
                            break;
                        case "t":
                            b.push(0x09);
                            break;
                        case "v":
                            b.push(0x0b);
                            break;
                        case "0":
                        case "1":
                        case "2":
                        case "3":
                        case "4":
                        case "5":
                        case "6":
                        case "7": {
                            const s = input.c;
                            const t = input.take(2);
                            if (t === false) {
                                return false;
                            }
                            const n = parseInt(s + t, 8);
                            if (isNaN(n)) {
                                return false;
                            }
                            b.push(n);
                            break;
                        }
                        case "x": {
                            const s = input.c;
                            const t = input.take(2);
                            if (t === false) {
                                return false;
                            }
                            const n = parseInt(s + t, 16);
                            if (isNaN(n)) {
                                return false;
                            }
                            b.push(n);
                            break;
                        }
                        case "u": {
                            const s = input.c;
                            const t = input.take(4);
                            if (t === false) {
                                return false;
                            }
                            const n = parseInt(s + t, 16);
                            if (isNaN(n)) {
                                return false;
                            }
                            const chunk = new Uint8Array(4);
                            const view = new DataView(chunk.buffer);
                            view.setInt32(0, n, true);
                            b.push(chunk[0], chunk[1], chunk[2], chunk[3]);
                            break;
                        }
                        case "U": {
                            const s = input.c;
                            const t = input.take(8);
                            if (t === false) {
                                return false;
                            }
                            const tc = proto_int64_js_1.protoInt64.uEnc(s + t);
                            const chunk = new Uint8Array(8);
                            const view = new DataView(chunk.buffer);
                            view.setInt32(0, tc.lo, true);
                            view.setInt32(4, tc.hi, true);
                            b.push(chunk[0], chunk[1], chunk[2], chunk[3], chunk[4], chunk[5], chunk[6], chunk[7]);
                            break;
                        }
                    }
                }
                break;
            default:
                b.push(input.c.charCodeAt(0));
        }
    }
    return new Uint8Array(b);
}


/***/ }),

/***/ 9091:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeUtilCommon = void 0;
const enum_js_1 = __nccwpck_require__(8504);
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
const scalars_js_1 = __nccwpck_require__(5618);
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */
function makeUtilCommon() {
    return {
        setEnumType: enum_js_1.setEnumType,
        initPartial(source, target) {
            if (source === undefined) {
                return;
            }
            const type = target.getType();
            for (const member of type.fields.byMember()) {
                const localName = member.localName, t = target, s = source;
                if (s[localName] === undefined) {
                    continue;
                }
                switch (member.kind) {
                    case "oneof":
                        const sk = s[localName].case;
                        if (sk === undefined) {
                            continue;
                        }
                        const sourceField = member.findField(sk);
                        let val = s[localName].value;
                        if (sourceField &&
                            sourceField.kind == "message" &&
                            !(val instanceof sourceField.T)) {
                            val = new sourceField.T(val);
                        }
                        else if (sourceField &&
                            sourceField.kind === "scalar" &&
                            sourceField.T === field_js_1.ScalarType.BYTES) {
                            val = toU8Arr(val);
                        }
                        t[localName] = { case: sk, value: val };
                        break;
                    case "scalar":
                    case "enum":
                        let copy = s[localName];
                        if (member.T === field_js_1.ScalarType.BYTES) {
                            copy = member.repeated
                                ? copy.map(toU8Arr)
                                : toU8Arr(copy);
                        }
                        t[localName] = copy;
                        break;
                    case "map":
                        switch (member.V.kind) {
                            case "scalar":
                            case "enum":
                                if (member.V.T === field_js_1.ScalarType.BYTES) {
                                    for (const [k, v] of Object.entries(s[localName])) {
                                        t[localName][k] = toU8Arr(v);
                                    }
                                }
                                else {
                                    Object.assign(t[localName], s[localName]);
                                }
                                break;
                            case "message":
                                const messageType = member.V.T;
                                for (const k of Object.keys(s[localName])) {
                                    let val = s[localName][k];
                                    if (!messageType.fieldWrapper) {
                                        // We only take partial input for messages that are not a wrapper type.
                                        // For those messages, we recursively normalize the partial input.
                                        val = new messageType(val);
                                    }
                                    t[localName][k] = val;
                                }
                                break;
                        }
                        break;
                    case "message":
                        const mt = member.T;
                        if (member.repeated) {
                            t[localName] = s[localName].map((val) => val instanceof mt ? val : new mt(val));
                        }
                        else if (s[localName] !== undefined) {
                            const val = s[localName];
                            if (mt.fieldWrapper) {
                                if (
                                // We can't use BytesValue.typeName as that will create a circular import
                                mt.typeName === "google.protobuf.BytesValue") {
                                    t[localName] = toU8Arr(val);
                                }
                                else {
                                    t[localName] = val;
                                }
                            }
                            else {
                                t[localName] = val instanceof mt ? val : new mt(val);
                            }
                        }
                        break;
                }
            }
        },
        equals(type, a, b) {
            if (a === b) {
                return true;
            }
            if (!a || !b) {
                return false;
            }
            return type.fields.byMember().every((m) => {
                const va = a[m.localName];
                const vb = b[m.localName];
                if (m.repeated) {
                    if (va.length !== vb.length) {
                        return false;
                    }
                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never "map"
                    switch (m.kind) {
                        case "message":
                            return va.every((a, i) => m.T.equals(a, vb[i]));
                        case "scalar":
                            return va.every((a, i) => (0, scalars_js_1.scalarEquals)(m.T, a, vb[i]));
                        case "enum":
                            return va.every((a, i) => (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, a, vb[i]));
                    }
                    throw new Error(`repeated cannot contain ${m.kind}`);
                }
                switch (m.kind) {
                    case "message":
                        return m.T.equals(va, vb);
                    case "enum":
                        return (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, va, vb);
                    case "scalar":
                        return (0, scalars_js_1.scalarEquals)(m.T, va, vb);
                    case "oneof":
                        if (va.case !== vb.case) {
                            return false;
                        }
                        const s = m.findField(va.case);
                        if (s === undefined) {
                            return true;
                        }
                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never "map"
                        switch (s.kind) {
                            case "message":
                                return s.T.equals(va.value, vb.value);
                            case "enum":
                                return (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, va.value, vb.value);
                            case "scalar":
                                return (0, scalars_js_1.scalarEquals)(s.T, va.value, vb.value);
                        }
                        throw new Error(`oneof cannot contain ${s.kind}`);
                    case "map":
                        const keys = Object.keys(va).concat(Object.keys(vb));
                        switch (m.V.kind) {
                            case "message":
                                const messageType = m.V.T;
                                return keys.every((k) => messageType.equals(va[k], vb[k]));
                            case "enum":
                                return keys.every((k) => (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, va[k], vb[k]));
                            case "scalar":
                                const scalarType = m.V.T;
                                return keys.every((k) => (0, scalars_js_1.scalarEquals)(scalarType, va[k], vb[k]));
                        }
                        break;
                }
            });
        },
        clone(message) {
            const type = message.getType(), target = new type(), any = target;
            for (const member of type.fields.byMember()) {
                const source = message[member.localName];
                let copy;
                if (member.repeated) {
                    copy = source.map(cloneSingularField);
                }
                else if (member.kind == "map") {
                    copy = any[member.localName];
                    for (const [key, v] of Object.entries(source)) {
                        copy[key] = cloneSingularField(v);
                    }
                }
                else if (member.kind == "oneof") {
                    const f = member.findField(source.case);
                    copy = f
                        ? { case: source.case, value: cloneSingularField(source.value) }
                        : { case: undefined };
                }
                else {
                    copy = cloneSingularField(source);
                }
                any[member.localName] = copy;
            }
            return target;
        },
    };
}
exports.makeUtilCommon = makeUtilCommon;
// clone a single field value - i.e. the element type of repeated fields, the value type of maps
function cloneSingularField(value) {
    if (value === undefined) {
        return value;
    }
    if (value instanceof message_js_1.Message) {
        return value.clone();
    }
    if (value instanceof Uint8Array) {
        const c = new Uint8Array(value.byteLength);
        c.set(value);
        return c;
    }
    return value;
}
// converts any ArrayLike<number> to Uint8Array if necessary.
function toU8Arr(input) {
    return input instanceof Uint8Array ? input : new Uint8Array(input);
}


/***/ }),

/***/ 5477:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoBase64 = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */
// lookup table from base64 character to byte
let encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
// lookup table from base64 character *code* to byte because lookup by number is fast
let decTable = [];
for (let i = 0; i < encTable.length; i++)
    decTable[encTable[i].charCodeAt(0)] = i;
// support base64url variants
decTable["-".charCodeAt(0)] = encTable.indexOf("+");
decTable["_".charCodeAt(0)] = encTable.indexOf("/");
exports.protoBase64 = {
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    dec(base64Str) {
        // estimate byte size, not accounting for inner padding and whitespace
        let es = (base64Str.length * 3) / 4;
        if (base64Str[base64Str.length - 2] == "=")
            es -= 2;
        else if (base64Str[base64Str.length - 1] == "=")
            es -= 1;
        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array
        groupPos = 0, // position in base64 group
        b, // current byte
        p = 0; // previous byte
        for (let i = 0; i < base64Str.length; i++) {
            b = decTable[base64Str.charCodeAt(i)];
            if (b === undefined) {
                switch (base64Str[i]) {
                    // @ts-ignore TS7029: Fallthrough case in switch
                    case "=":
                        groupPos = 0; // reset state when padding found
                    // @ts-ignore TS7029: Fallthrough case in switch
                    case "\n":
                    case "\r":
                    case "\t":
                    case " ":
                        continue; // skip white-space, and padding
                    default:
                        throw Error("invalid base64 string.");
                }
            }
            switch (groupPos) {
                case 0:
                    p = b;
                    groupPos = 1;
                    break;
                case 1:
                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);
                    p = b;
                    groupPos = 2;
                    break;
                case 2:
                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);
                    p = b;
                    groupPos = 3;
                    break;
                case 3:
                    bytes[bytePos++] = ((p & 3) << 6) | b;
                    groupPos = 0;
                    break;
            }
        }
        if (groupPos == 1)
            throw Error("invalid base64 string.");
        return bytes.subarray(0, bytePos);
    },
    /**
     * Encode a byte array to a base64 string.
     */
    enc(bytes) {
        let base64 = "", groupPos = 0, // position in base64 group
        b, // current byte
        p = 0; // carry over from previous byte
        for (let i = 0; i < bytes.length; i++) {
            b = bytes[i];
            switch (groupPos) {
                case 0:
                    base64 += encTable[b >> 2];
                    p = (b & 3) << 4;
                    groupPos = 1;
                    break;
                case 1:
                    base64 += encTable[p | (b >> 4)];
                    p = (b & 15) << 2;
                    groupPos = 2;
                    break;
                case 2:
                    base64 += encTable[p | (b >> 6)];
                    base64 += encTable[b & 63];
                    groupPos = 0;
                    break;
            }
        }
        // add output padding
        if (groupPos) {
            base64 += encTable[p];
            base64 += "=";
            if (groupPos == 1)
                base64 += "=";
        }
        return base64;
    },
};


/***/ }),

/***/ 4507:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoDelimited = void 0;
const binary_format_common_js_1 = __nccwpck_require__(9639);
const binary_encoding_js_1 = __nccwpck_require__(1304);
/**
 * protoDelimited provides functions to serialize and parse size-delimited
 * messages.
 *
 * A size-delimited message is a varint size in bytes, followed by exactly
 * that many bytes of a message serialized with the binary format.
 *
 * This size-delimited format is compatible with other implementations.
 * For details, see https://github.com/protocolbuffers/protobuf/issues/10229
 */
exports.protoDelimited = {
    /**
     * Serialize a message, prefixing it with its size.
     */
    enc(message, options) {
        const opt = (0, binary_format_common_js_1.makeBinaryFormatCommon)().makeWriteOptions(options);
        return opt.writerFactory().bytes(message.toBinary(opt)).finish();
    },
    /**
     * Parse a size-delimited message, ignoring extra bytes.
     */
    dec(type, bytes, options) {
        const opt = (0, binary_format_common_js_1.makeBinaryFormatCommon)().makeReadOptions(options);
        return type.fromBinary(opt.readerFactory(bytes).bytes(), opt);
    },
    /**
     * Parse a stream of size-delimited messages.
     */
    decStream(type, iterable) {
        return __asyncGenerator(this, arguments, function* decStream_1() {
            var _a, e_1, _b, _c;
            // append chunk to buffer, returning updated buffer
            function append(buffer, chunk) {
                const n = new Uint8Array(buffer.byteLength + chunk.byteLength);
                n.set(buffer);
                n.set(chunk, buffer.length);
                return n;
            }
            let buffer = new Uint8Array(0);
            try {
                for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), _a = iterable_1_1.done, !_a; _d = true) {
                    _c = iterable_1_1.value;
                    _d = false;
                    const chunk = _c;
                    buffer = append(buffer, chunk);
                    for (;;) {
                        const size = exports.protoDelimited.peekSize(buffer);
                        if (size.eof) {
                            // size is incomplete, buffer more data
                            break;
                        }
                        if (size.offset + size.size > buffer.byteLength) {
                            // message is incomplete, buffer more data
                            break;
                        }
                        yield yield __await(exports.protoDelimited.dec(type, buffer));
                        buffer = buffer.subarray(size.offset + size.size);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_1.return)) yield __await(_b.call(iterable_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (buffer.byteLength > 0) {
                throw new Error("incomplete data");
            }
        });
    },
    /**
     * Decodes the size from the given size-delimited message, which may be
     * incomplete.
     *
     * Returns an object with the following properties:
     * - size: The size of the delimited message in bytes
     * - offset: The offset in the given byte array where the message starts
     * - eof: true
     *
     * If the size-delimited data does not include all bytes of the varint size,
     * the following object is returned:
     * - size: null
     * - offset: null
     * - eof: false
     *
     * This function can be used to implement parsing of size-delimited messages
     * from a stream.
     */
    peekSize(data) {
        const sizeEof = { eof: true, size: null, offset: null };
        for (let i = 0; i < 10; i++) {
            if (i > data.byteLength) {
                return sizeEof;
            }
            if ((data[i] & 0x80) == 0) {
                const reader = new binary_encoding_js_1.BinaryReader(data);
                let size;
                try {
                    size = reader.uint32();
                }
                catch (e) {
                    if (e instanceof RangeError) {
                        return sizeEof;
                    }
                    throw e;
                }
                return {
                    eof: false,
                    size,
                    offset: reader.pos,
                };
            }
        }
        throw new Error("invalid varint");
    },
};


/***/ }),

/***/ 7303:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoDouble = void 0;
// Export global Number constants. This is done so that we can safely use
// these global constants when generating code and be assured we're using
// the correct values. We cannot rely on globalThis since we support ES2017
// and globalThis was introduced in ES2020. We also don't want to explicitly
// generate code using, for example, Number.NaN, since this could clash with
// a message name of Number. Instead we can export them here since this will
// be in a different scope as the generated code and we are guaranteed to use
// the intended global values.
exports.protoDouble = {
    NaN: Number.NaN,
    POSITIVE_INFINITY: Number.POSITIVE_INFINITY,
    NEGATIVE_INFINITY: Number.NEGATIVE_INFINITY,
};


/***/ }),

/***/ 6865:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoInt64 = void 0;
const assert_js_1 = __nccwpck_require__(1594);
const varint_js_1 = __nccwpck_require__(9119);
function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    // note that Safari 14 implements BigInt, but not the DataView methods
    const ok = typeof BigInt === "function" &&
        typeof dv.getBigInt64 === "function" &&
        typeof dv.getBigUint64 === "function" &&
        typeof dv.setBigInt64 === "function" &&
        typeof dv.setBigUint64 === "function" &&
        (typeof process != "object" ||
            typeof process.env != "object" ||
            process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok) {
        const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
        return {
            zero: BigInt(0),
            supported: true,
            parse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > MAX || bi < MIN) {
                    throw new Error(`int64 invalid: ${value}`);
                }
                return bi;
            },
            uParse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > UMAX || bi < UMIN) {
                    throw new Error(`uint64 invalid: ${value}`);
                }
                return bi;
            },
            enc(value) {
                dv.setBigInt64(0, this.parse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            uEnc(value) {
                dv.setBigInt64(0, this.uParse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            dec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigInt64(0, true);
            },
            uDec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigUint64(0, true);
            },
        };
    }
    const assertInt64String = (value) => (0, assert_js_1.assert)(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);
    const assertUInt64String = (value) => (0, assert_js_1.assert)(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);
    return {
        zero: "0",
        supported: false,
        parse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return value;
        },
        uParse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return value;
        },
        enc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return (0, varint_js_1.int64FromString)(value);
        },
        uEnc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return (0, varint_js_1.int64FromString)(value);
        },
        dec(lo, hi) {
            return (0, varint_js_1.int64ToString)(lo, hi);
        },
        uDec(lo, hi) {
            return (0, varint_js_1.uInt64ToString)(lo, hi);
        },
    };
}
exports.protoInt64 = makeInt64Support();


/***/ }),

/***/ 3605:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.proto2 = void 0;
const proto_runtime_js_1 = __nccwpck_require__(8959);
const binary_format_proto2_js_1 = __nccwpck_require__(3794);
const util_common_js_1 = __nccwpck_require__(9091);
const field_list_js_1 = __nccwpck_require__(653);
const field_js_1 = __nccwpck_require__(158);
const names_js_1 = __nccwpck_require__(9214);
const json_format_proto2_js_1 = __nccwpck_require__(1626);
const field_js_2 = __nccwpck_require__(4756);
/**
 * Provides functionality for messages defined with the proto2 syntax.
 */
exports.proto2 = (0, proto_runtime_js_1.makeProtoRuntime)("proto2", (0, json_format_proto2_js_1.makeJsonFormatProto2)(), (0, binary_format_proto2_js_1.makeBinaryFormatProto2)(), Object.assign(Object.assign({}, (0, util_common_js_1.makeUtilCommon)()), { newFieldList(fields) {
        return new field_list_js_1.InternalFieldList(fields, normalizeFieldInfosProto2);
    },
    initFields(target) {
        for (const member of target.getType().fields.byMember()) {
            const name = member.localName, t = target;
            if (member.repeated) {
                t[name] = [];
                continue;
            }
            switch (member.kind) {
                case "oneof":
                    t[name] = { case: undefined };
                    break;
                case "map":
                    t[name] = {};
                    break;
                case "scalar":
                case "enum":
                case "message":
                    // In contrast to proto3, enum and scalar fields have no intrinsic default value,
                    // only an optional explicit default value.
                    // Unlike proto3 intrinsic default values, proto2 explicit default values are not
                    // set on construction, because they are not omitted on the wire. If we did set
                    // default values on construction, a deserialize-serialize round-trip would add
                    // fields to a message.
                    break;
            }
        }
    } }));
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function normalizeFieldInfosProto2(fieldInfos) {
    var _a, _b, _c, _d, _e;
    const r = [];
    let o;
    for (const field of typeof fieldInfos == "function"
        ? fieldInfos()
        : fieldInfos) {
        const f = field;
        f.localName = (0, names_js_1.localFieldName)(field.name, field.oneof !== undefined);
        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : (0, names_js_1.fieldJsonName)(field.name);
        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
        if (field.kind == "scalar") {
            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : field_js_2.LongType.BIGINT;
        }
        // We do not surface options at this time
        // f.options = field.options ?? emptyReadonlyObject;
        if (field.oneof !== undefined) {
            const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
            if (!o || o.name != ooname) {
                o = new field_js_1.InternalOneofInfo(ooname);
            }
            f.oneof = o;
            o.addField(f);
        }
        // proto2 specific:
        if (field.kind == "message") {
            f.delimited = (_d = field.delimited) !== null && _d !== void 0 ? _d : false;
        }
        // In contrast to proto3, repeated fields are unpacked except when explicitly specified.
        f.packed = (_e = field.packed) !== null && _e !== void 0 ? _e : false;
        r.push(f);
    }
    return r;
}


/***/ }),

/***/ 9947:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.proto3 = void 0;
const proto_runtime_js_1 = __nccwpck_require__(8959);
const binary_format_proto3_js_1 = __nccwpck_require__(9558);
const json_format_proto3_js_1 = __nccwpck_require__(8946);
const util_common_js_1 = __nccwpck_require__(9091);
const field_list_js_1 = __nccwpck_require__(653);
const scalars_js_1 = __nccwpck_require__(5618);
const field_js_1 = __nccwpck_require__(4756);
const field_js_2 = __nccwpck_require__(158);
const names_js_1 = __nccwpck_require__(9214);
/**
 * Provides functionality for messages defined with the proto3 syntax.
 */
exports.proto3 = (0, proto_runtime_js_1.makeProtoRuntime)("proto3", (0, json_format_proto3_js_1.makeJsonFormatProto3)(), (0, binary_format_proto3_js_1.makeBinaryFormatProto3)(), Object.assign(Object.assign({}, (0, util_common_js_1.makeUtilCommon)()), { newFieldList(fields) {
        return new field_list_js_1.InternalFieldList(fields, normalizeFieldInfosProto3);
    },
    initFields(target) {
        for (const member of target.getType().fields.byMember()) {
            if (member.opt) {
                continue;
            }
            const name = member.localName, t = target;
            if (member.repeated) {
                t[name] = [];
                continue;
            }
            switch (member.kind) {
                case "oneof":
                    t[name] = { case: undefined };
                    break;
                case "enum":
                    t[name] = 0;
                    break;
                case "map":
                    t[name] = {};
                    break;
                case "scalar":
                    t[name] = (0, scalars_js_1.scalarDefaultValue)(member.T, member.L); // eslint-disable-line @typescript-eslint/no-unsafe-assignment
                    break;
                case "message":
                    // message fields are always optional in proto3
                    break;
            }
        }
    } }));
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function normalizeFieldInfosProto3(fieldInfos) {
    var _a, _b, _c, _d;
    const r = [];
    let o;
    for (const field of typeof fieldInfos == "function"
        ? fieldInfos()
        : fieldInfos) {
        const f = field;
        f.localName = (0, names_js_1.localFieldName)(field.name, field.oneof !== undefined);
        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : (0, names_js_1.fieldJsonName)(field.name);
        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
        if (field.kind == "scalar") {
            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : field_js_1.LongType.BIGINT;
        }
        // We do not surface options at this time
        // f.options = field.options ?? emptyReadonlyObject;
        if (field.oneof !== undefined) {
            const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
            if (!o || o.name != ooname) {
                o = new field_js_2.InternalOneofInfo(ooname);
            }
            f.oneof = o;
            o.addField(f);
        }
        // proto3 specific:
        if (field.kind == "message") {
            f.delimited = false;
        }
        // From the proto3 language guide:
        // > In proto3, repeated fields of scalar numeric types are packed by default.
        // This information is incomplete - according to the conformance tests, BOOL
        // and ENUM are packed by default as well. This means only STRING and BYTES
        // are not packed by default, which makes sense because they are length-delimited.
        f.packed =
            (_d = field.packed) !== null && _d !== void 0 ? _d : (field.kind == "enum" ||
                (field.kind == "scalar" &&
                    field.T != field_js_1.ScalarType.BYTES &&
                    field.T != field_js_1.ScalarType.STRING));
        r.push(f);
    }
    return r;
}


/***/ }),

/***/ 9552:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MethodIdempotency = exports.MethodKind = void 0;
/**
 * MethodKind represents the four method types that can be declared in
 * protobuf with the `stream` keyword:
 *
 * 1. Unary:           rpc (Input) returns (Output)
 * 2. ServerStreaming: rpc (Input) returns (stream Output)
 * 3. ClientStreaming: rpc (stream Input) returns (Output)
 * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)
 */
var MethodKind;
(function (MethodKind) {
    MethodKind[MethodKind["Unary"] = 0] = "Unary";
    MethodKind[MethodKind["ServerStreaming"] = 1] = "ServerStreaming";
    MethodKind[MethodKind["ClientStreaming"] = 2] = "ClientStreaming";
    MethodKind[MethodKind["BiDiStreaming"] = 3] = "BiDiStreaming";
})(MethodKind || (exports.MethodKind = MethodKind = {}));
/**
 * Is this method side-effect-free (or safe in HTTP parlance), or just
 * idempotent, or neither? HTTP based RPC implementation may choose GET verb
 * for safe methods, and PUT verb for idempotent methods instead of the
 * default POST.
 *
 * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,
 * defined in the well-known type google/protobuf/descriptor.proto, but
 * drops UNKNOWN.
 */
var MethodIdempotency;
(function (MethodIdempotency) {
    /**
     * Idempotent, no side effects.
     */
    MethodIdempotency[MethodIdempotency["NoSideEffects"] = 1] = "NoSideEffects";
    /**
     * Idempotent, but may have side effects.
     */
    MethodIdempotency[MethodIdempotency["Idempotent"] = 2] = "Idempotent";
})(MethodIdempotency || (exports.MethodIdempotency = MethodIdempotency = {}));


/***/ }),

/***/ 4558:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlainMessage = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */
const message_js_1 = __nccwpck_require__(2779);
/**
 * toPlainMessage returns a new object by stripping
 * all methods from a message, leaving only fields and
 * oneof groups. It is recursive, meaning it applies this
 * same logic to all nested message fields as well.
 *
 * If the argument is already a plain message, it is
 * returned as-is.
 */
function toPlainMessage(message) {
    if (!(message instanceof message_js_1.Message)) {
        return message;
    }
    const type = message.getType();
    const target = {};
    for (const member of type.fields.byMember()) {
        const source = message[member.localName];
        let copy;
        if (member.repeated) {
            copy = source.map((e) => toPlainValue(e));
        }
        else if (member.kind == "map") {
            copy = {};
            for (const [key, v] of Object.entries(source)) {
                copy[key] = toPlainValue(v);
            }
        }
        else if (member.kind == "oneof") {
            const f = member.findField(source.case);
            copy = f
                ? { case: source.case, value: toPlainValue(source.value) }
                : { case: undefined };
        }
        else {
            copy = toPlainValue(source);
        }
        target[member.localName] = copy;
    }
    return target;
}
exports.toPlainMessage = toPlainMessage;
function toPlainValue(value) {
    if (value === undefined) {
        return value;
    }
    if (value instanceof message_js_1.Message) {
        return toPlainMessage(value);
    }
    if (value instanceof Uint8Array) {
        const c = new Uint8Array(value.byteLength);
        c.set(value);
        return c;
    }
    return value;
}


/***/ }),

/***/ 5903:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertFetchApi = void 0;
/**
 * Asserts that the fetch API is available.
 */
function assertFetchApi() {
    try {
        new Headers();
    }
    catch (_) {
        throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.");
    }
}
exports.assertFetchApi = assertFetchApi;


/***/ }),

/***/ 3881:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConnectTransport = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const connect_1 = __nccwpck_require__(632);
const protocol_1 = __nccwpck_require__(4378);
const protocol_connect_1 = __nccwpck_require__(3720);
const assert_fetch_api_js_1 = __nccwpck_require__(5903);
/**
 * Create a Transport for the Connect protocol, which makes unary and
 * server-streaming methods available to web browsers. It uses the fetch
 * API to make HTTP requests.
 */
function createConnectTransport(options) {
    var _a;
    (0, assert_fetch_api_js_1.assertFetchApi)();
    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : false;
    return {
        async unary(service, method, signal, timeoutMs, header, message, contextValues) {
            var _a;
            const { serialize, parse } = (0, protocol_1.createClientMethodSerializers)(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
            timeoutMs =
                timeoutMs === undefined
                    ? options.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return await (0, protocol_1.runUnaryCall)({
                interceptors: options.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: false,
                    service,
                    method,
                    url: (0, protocol_1.createMethodUrl)(options.baseUrl, service, method),
                    init: {
                        method: "POST",
                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: (0, protocol_connect_1.requestHeader)(method.kind, useBinaryFormat, timeoutMs, header, false),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, connect_1.createContextValues)(),
                    message,
                },
                next: async (req) => {
                    var _a;
                    const useGet = options.useHttpGet === true &&
                        method.idempotency === protobuf_1.MethodIdempotency.NoSideEffects;
                    let body = null;
                    if (useGet) {
                        req = (0, protocol_connect_1.transformConnectPostToGetRequest)(req, serialize(req.message), useBinaryFormat);
                    }
                    else {
                        body = serialize(req.message);
                    }
                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;
                    const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body }));
                    const { isUnaryError, unaryError } = (0, protocol_connect_1.validateResponse)(method.kind, response.status, response.headers);
                    if (isUnaryError) {
                        throw (0, protocol_connect_1.errorFromJson)((await response.json()), (0, connect_1.appendHeaders)(...(0, protocol_connect_1.trailerDemux)(response.headers)), unaryError);
                    }
                    const [demuxedHeader, demuxedTrailer] = (0, protocol_connect_1.trailerDemux)(response.headers);
                    return {
                        stream: false,
                        service,
                        method,
                        header: demuxedHeader,
                        message: useBinaryFormat
                            ? parse(new Uint8Array(await response.arrayBuffer()))
                            : method.O.fromJson((await response.json()), (0, protocol_1.getJsonOptions)(options.jsonOptions)),
                        trailer: demuxedTrailer,
                    };
                },
            });
        },
        async stream(service, method, signal, timeoutMs, header, input, contextValues) {
            var _a;
            const { serialize, parse } = (0, protocol_1.createClientMethodSerializers)(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
            function parseResponseBody(body, trailerTarget, header) {
                return __asyncGenerator(this, arguments, function* parseResponseBody_1() {
                    const reader = (0, protocol_1.createEnvelopeReadableStream)(body).getReader();
                    let endStreamReceived = false;
                    for (;;) {
                        const result = yield __await(reader.read());
                        if (result.done) {
                            break;
                        }
                        const { flags, data } = result.value;
                        if ((flags & protocol_connect_1.endStreamFlag) === protocol_connect_1.endStreamFlag) {
                            endStreamReceived = true;
                            const endStream = (0, protocol_connect_1.endStreamFromJson)(data);
                            if (endStream.error) {
                                const error = endStream.error;
                                header.forEach((value, key) => {
                                    error.metadata.append(key, value);
                                });
                                throw error;
                            }
                            endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));
                            continue;
                        }
                        yield yield __await(parse(data));
                    }
                    if (!endStreamReceived) {
                        throw "missing EndStreamResponse";
                    }
                });
            }
            async function createRequestBody(input) {
                if (method.kind != protobuf_1.MethodKind.ServerStreaming) {
                    throw "The fetch API does not support streaming request bodies";
                }
                const r = await input[Symbol.asyncIterator]().next();
                if (r.done == true) {
                    throw "missing request message";
                }
                return (0, protocol_1.encodeEnvelope)(0, serialize(r.value));
            }
            timeoutMs =
                timeoutMs === undefined
                    ? options.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return await (0, protocol_1.runStreamingCall)({
                interceptors: options.interceptors,
                timeoutMs,
                signal,
                req: {
                    stream: true,
                    service,
                    method,
                    url: (0, protocol_1.createMethodUrl)(options.baseUrl, service, method),
                    init: {
                        method: "POST",
                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: (0, protocol_connect_1.requestHeader)(method.kind, useBinaryFormat, timeoutMs, header, false),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, connect_1.createContextValues)(),
                    message: input,
                },
                next: async (req) => {
                    var _a;
                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;
                    const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));
                    (0, protocol_connect_1.validateResponse)(method.kind, fRes.status, fRes.headers);
                    if (fRes.body === null) {
                        throw "missing response body";
                    }
                    const trailer = new Headers();
                    const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer, fRes.headers) });
                    return res;
                },
            });
        },
    };
}
exports.createConnectTransport = createConnectTransport;


/***/ }),

/***/ 136:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createGrpcWebTransport = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const connect_1 = __nccwpck_require__(632);
const protocol_1 = __nccwpck_require__(4378);
const protocol_grpc_web_1 = __nccwpck_require__(8853);
const assert_fetch_api_js_1 = __nccwpck_require__(5903);
/**
 * Create a Transport for the gRPC-web protocol. The protocol encodes
 * trailers in the response body and makes unary and server-streaming
 * methods available to web browsers. It uses the fetch API to make
 * HTTP requests.
 *
 * Note that this transport does not implement the grpc-web-text format,
 * which applies base64 encoding to the request and response bodies to
 * support reading streaming responses from an XMLHttpRequest.
 */
function createGrpcWebTransport(options) {
    var _a;
    (0, assert_fetch_api_js_1.assertFetchApi)();
    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : true;
    return {
        async unary(service, method, signal, timeoutMs, header, message, contextValues) {
            var _a;
            const { serialize, parse } = (0, protocol_1.createClientMethodSerializers)(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
            timeoutMs =
                timeoutMs === undefined
                    ? options.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return await (0, protocol_1.runUnaryCall)({
                interceptors: options.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: false,
                    service,
                    method,
                    url: (0, protocol_1.createMethodUrl)(options.baseUrl, service, method),
                    init: {
                        method: "POST",
                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: (0, protocol_grpc_web_1.requestHeader)(useBinaryFormat, timeoutMs, header, false),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, connect_1.createContextValues)(),
                    message,
                },
                next: async (req) => {
                    var _a;
                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;
                    const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: (0, protocol_1.encodeEnvelope)(0, serialize(req.message)) }));
                    (0, protocol_grpc_web_1.validateResponse)(response.status, response.headers);
                    if (!response.body) {
                        throw "missing response body";
                    }
                    const reader = (0, protocol_1.createEnvelopeReadableStream)(response.body).getReader();
                    let trailer;
                    let message;
                    for (;;) {
                        const r = await reader.read();
                        if (r.done) {
                            break;
                        }
                        const { flags, data } = r.value;
                        if (flags === protocol_grpc_web_1.trailerFlag) {
                            if (trailer !== undefined) {
                                throw "extra trailer";
                            }
                            // Unary responses require exactly one response message, but in
                            // case of an error, it is perfectly valid to have a response body
                            // that only contains error trailers.
                            trailer = (0, protocol_grpc_web_1.trailerParse)(data);
                            continue;
                        }
                        if (message !== undefined) {
                            throw "extra message";
                        }
                        message = parse(data);
                    }
                    if (trailer === undefined) {
                        throw "missing trailer";
                    }
                    (0, protocol_grpc_web_1.validateTrailer)(trailer, response.headers);
                    if (message === undefined) {
                        throw "missing message";
                    }
                    return {
                        stream: false,
                        header: response.headers,
                        message,
                        trailer,
                    };
                },
            });
        },
        async stream(service, method, signal, timeoutMs, header, input, contextValues) {
            var _a;
            const { serialize, parse } = (0, protocol_1.createClientMethodSerializers)(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
            function parseResponseBody(body, foundStatus, trailerTarget, header) {
                return __asyncGenerator(this, arguments, function* parseResponseBody_1() {
                    const reader = (0, protocol_1.createEnvelopeReadableStream)(body).getReader();
                    if (foundStatus) {
                        // A grpc-status: 0 response header was present. This is a "trailers-only"
                        // response (a response without a body and no trailers).
                        //
                        // The spec seems to disallow a trailers-only response for status 0 - we are
                        // lenient and only verify that the body is empty.
                        //
                        // > [...] Trailers-Only is permitted for calls that produce an immediate error.
                        // See https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
                        if (!(yield __await(reader.read())).done) {
                            throw "extra data for trailers-only";
                        }
                        return yield __await(void 0);
                    }
                    let trailerReceived = false;
                    for (;;) {
                        const result = yield __await(reader.read());
                        if (result.done) {
                            break;
                        }
                        const { flags, data } = result.value;
                        if ((flags & protocol_grpc_web_1.trailerFlag) === protocol_grpc_web_1.trailerFlag) {
                            if (trailerReceived) {
                                throw "extra trailer";
                            }
                            trailerReceived = true;
                            const trailer = (0, protocol_grpc_web_1.trailerParse)(data);
                            (0, protocol_grpc_web_1.validateTrailer)(trailer, header);
                            trailer.forEach((value, key) => trailerTarget.set(key, value));
                            continue;
                        }
                        if (trailerReceived) {
                            throw "extra message";
                        }
                        yield yield __await(parse(data));
                        continue;
                    }
                    if (!trailerReceived) {
                        throw "missing trailer";
                    }
                });
            }
            async function createRequestBody(input) {
                if (method.kind != protobuf_1.MethodKind.ServerStreaming) {
                    throw "The fetch API does not support streaming request bodies";
                }
                const r = await input[Symbol.asyncIterator]().next();
                if (r.done == true) {
                    throw "missing request message";
                }
                return (0, protocol_1.encodeEnvelope)(0, serialize(r.value));
            }
            timeoutMs =
                timeoutMs === undefined
                    ? options.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return (0, protocol_1.runStreamingCall)({
                interceptors: options.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: true,
                    service,
                    method,
                    url: (0, protocol_1.createMethodUrl)(options.baseUrl, service, method),
                    init: {
                        method: "POST",
                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: (0, protocol_grpc_web_1.requestHeader)(useBinaryFormat, timeoutMs, header, false),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, connect_1.createContextValues)(),
                    message: input,
                },
                next: async (req) => {
                    var _a;
                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;
                    const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));
                    const { foundStatus } = (0, protocol_grpc_web_1.validateResponse)(fRes.status, fRes.headers);
                    if (!fRes.body) {
                        throw "missing response body";
                    }
                    const trailer = new Headers();
                    const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, foundStatus, trailer, fRes.headers) });
                    return res;
                },
            });
        },
    };
}
exports.createGrpcWebTransport = createGrpcWebTransport;


/***/ }),

/***/ 3556:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
__webpack_unused_export__ = ({ value: true });
__webpack_unused_export__ = exports.Bc = void 0;
var connect_transport_js_1 = __nccwpck_require__(3881);
Object.defineProperty(exports, "Bc", ({ enumerable: true, get: function () { return connect_transport_js_1.createConnectTransport; } }));
var grpc_web_transport_js_1 = __nccwpck_require__(136);
__webpack_unused_export__ = ({ enumerable: true, get: function () { return grpc_web_transport_js_1.createGrpcWebTransport; } });


/***/ }),

/***/ 9030:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeAnyClient = void 0;
/**
 * Create any client for the given service.
 *
 * The given createMethod function is called for each method definition
 * of the service. The function it returns is added to the client object
 * as a method.
 */
function makeAnyClient(service, createMethod) {
    const client = {};
    for (const [localName, methodInfo] of Object.entries(service.methods)) {
        const method = createMethod(Object.assign(Object.assign({}, methodInfo), { localName,
            service }));
        if (method != null) {
            client[localName] = method;
        }
    }
    return client;
}
exports.makeAnyClient = makeAnyClient;


/***/ }),

/***/ 778:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCallbackClient = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const any_client_js_1 = __nccwpck_require__(9030);
const async_iterable_js_1 = __nccwpck_require__(4285);
/**
 * Create a CallbackClient for the given service, invoking RPCs through the
 * given transport.
 */
function createCallbackClient(service, transport) {
    return (0, any_client_js_1.makeAnyClient)(service, (method) => {
        switch (method.kind) {
            case protobuf_1.MethodKind.Unary:
                return createUnaryFn(transport, service, method);
            case protobuf_1.MethodKind.ServerStreaming:
                return createServerStreamingFn(transport, service, method);
            default:
                return null;
        }
    });
}
exports.createCallbackClient = createCallbackClient;
function createUnaryFn(transport, service, method) {
    return function (requestMessage, callback, options) {
        const abort = new AbortController();
        options = wrapSignal(abort, options);
        transport
            .unary(service, method, abort.signal, options.timeoutMs, options.headers, requestMessage, options.contextValues)
            .then((response) => {
            var _a, _b;
            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
            callback(undefined, response.message);
        }, (reason) => {
            const err = connect_error_js_1.ConnectError.from(reason, code_js_1.Code.Internal);
            if (err.code === code_js_1.Code.Canceled && abort.signal.aborted) {
                // As documented, discard Canceled errors if canceled by the user.
                return;
            }
            callback(err, new method.O());
        });
        return () => abort.abort();
    };
}
function createServerStreamingFn(transport, service, method) {
    return function (input, onResponse, onClose, options) {
        const abort = new AbortController();
        async function run() {
            var _a, e_1, _b, _c;
            var _d, _e;
            options = wrapSignal(abort, options);
            const response = await transport.stream(service, method, options.signal, options.timeoutMs, options.headers, (0, async_iterable_js_1.createAsyncIterable)([input]), options.contextValues);
            (_d = options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);
            try {
                for (var _f = true, _g = __asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {
                    _c = _h.value;
                    _f = false;
                    const message = _c;
                    onResponse(message);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_f && !_a && (_b = _g.return)) await _b.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            (_e = options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);
            onClose(undefined);
        }
        run().catch((reason) => {
            const err = connect_error_js_1.ConnectError.from(reason, code_js_1.Code.Internal);
            if (err.code === code_js_1.Code.Canceled && abort.signal.aborted) {
                // As documented, discard Canceled errors if canceled by the user,
                // but do invoke the close-callback.
                onClose(undefined);
            }
            else {
                onClose(err);
            }
        });
        return () => abort.abort();
    };
}
function wrapSignal(abort, options) {
    if (options === null || options === void 0 ? void 0 : options.signal) {
        options.signal.addEventListener("abort", () => abort.abort());
        if (options.signal.aborted) {
            abort.abort();
        }
    }
    return Object.assign(Object.assign({}, options), { signal: abort.signal });
}


/***/ }),

/***/ 8002:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Code = void 0;
/**
 * Connect represents categories of errors as codes, and each code maps to a
 * specific HTTP status code. The codes and their semantics were chosen to
 * match gRPC. Only the codes below are valid — there are no user-defined
 * codes.
 *
 * See the specification at https://connectrpc.com/docs/protocol#error-codes
 * for details.
 */
var Code;
(function (Code) {
    /**
     * Canceled, usually be the user
     */
    Code[Code["Canceled"] = 1] = "Canceled";
    /**
     * Unknown error
     */
    Code[Code["Unknown"] = 2] = "Unknown";
    /**
     * Argument invalid regardless of system state
     */
    Code[Code["InvalidArgument"] = 3] = "InvalidArgument";
    /**
     * Operation expired, may or may not have completed.
     */
    Code[Code["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    /**
     * Entity not found.
     */
    Code[Code["NotFound"] = 5] = "NotFound";
    /**
     * Entity already exists.
     */
    Code[Code["AlreadyExists"] = 6] = "AlreadyExists";
    /**
     * Operation not authorized.
     */
    Code[Code["PermissionDenied"] = 7] = "PermissionDenied";
    /**
     * Quota exhausted.
     */
    Code[Code["ResourceExhausted"] = 8] = "ResourceExhausted";
    /**
     * Argument invalid in current system state.
     */
    Code[Code["FailedPrecondition"] = 9] = "FailedPrecondition";
    /**
     * Operation aborted.
     */
    Code[Code["Aborted"] = 10] = "Aborted";
    /**
     * Out of bounds, use instead of FailedPrecondition.
     */
    Code[Code["OutOfRange"] = 11] = "OutOfRange";
    /**
     * Operation not implemented or disabled.
     */
    Code[Code["Unimplemented"] = 12] = "Unimplemented";
    /**
     * Internal error, reserved for "serious errors".
     */
    Code[Code["Internal"] = 13] = "Internal";
    /**
     * Unavailable, client should back off and retry.
     */
    Code[Code["Unavailable"] = 14] = "Unavailable";
    /**
     * Unrecoverable data loss or corruption.
     */
    Code[Code["DataLoss"] = 15] = "DataLoss";
    /**
     * Request isn't authenticated.
     */
    Code[Code["Unauthenticated"] = 16] = "Unauthenticated";
})(Code || (exports.Code = Code = {}));


/***/ }),

/***/ 786:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConnectError = void 0;
const code_js_1 = __nccwpck_require__(8002);
const protobuf_1 = __nccwpck_require__(1344);
const code_string_js_1 = __nccwpck_require__(4131);
/**
 * ConnectError captures four pieces of information: a Code, an error
 * message, an optional cause of the error, and an optional collection of
 * arbitrary Protobuf messages called  "details".
 *
 * Because developer tools typically show just the error message, we prefix
 * it with the status code, so that the most important information is always
 * visible immediately.
 *
 * Error details are wrapped with google.protobuf.Any on the wire, so that
 * a server or middleware can attach arbitrary data to an error. Use the
 * method findDetails() to retrieve the details.
 */
class ConnectError extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message, code = code_js_1.Code.Unknown, metadata, outgoingDetails, cause) {
        super(createMessage(message, code));
        this.name = "ConnectError";
        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example
        Object.setPrototypeOf(this, new.target.prototype);
        this.rawMessage = message;
        this.code = code;
        this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
        this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
        this.cause = cause;
    }
    /**
     * Convert any value - typically a caught error into a ConnectError,
     * following these rules:
     * - If the value is already a ConnectError, return it as is.
     * - If the value is an AbortError from the fetch API, return the message
     *   of the AbortError with code Canceled.
     * - For other Errors, return the error message with code Unknown by default.
     * - For other values, return the values String representation as a message,
     *   with the code Unknown by default.
     * The original value will be used for the "cause" property for the new
     * ConnectError.
     */
    static from(reason, code = code_js_1.Code.Unknown) {
        if (reason instanceof ConnectError) {
            return reason;
        }
        if (reason instanceof Error) {
            if (reason.name == "AbortError") {
                // Fetch requests can only be canceled with an AbortController.
                // We detect that condition by looking at the name of the raised
                // error object, and translate to the appropriate status code.
                return new ConnectError(reason.message, code_js_1.Code.Canceled);
            }
            return new ConnectError(reason.message, code, undefined, undefined, reason);
        }
        return new ConnectError(String(reason), code, undefined, undefined, reason);
    }
    static [Symbol.hasInstance](v) {
        if (!(v instanceof Error)) {
            return false;
        }
        if (Object.getPrototypeOf(v) === ConnectError.prototype) {
            return true;
        }
        return (v.name === "ConnectError" &&
            "code" in v &&
            typeof v.code === "number" &&
            "metadata" in v &&
            "details" in v &&
            Array.isArray(v.details) &&
            "rawMessage" in v &&
            typeof v.rawMessage == "string" &&
            "cause" in v);
    }
    findDetails(typeOrRegistry) {
        const registry = "typeName" in typeOrRegistry
            ? {
                findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : undefined,
            }
            : typeOrRegistry;
        const details = [];
        for (const data of this.details) {
            if (data instanceof protobuf_1.Message) {
                if (registry.findMessage(data.getType().typeName)) {
                    details.push(data);
                }
                continue;
            }
            const type = registry.findMessage(data.type);
            if (type) {
                try {
                    details.push(type.fromBinary(data.value));
                }
                catch (_) {
                    // We silently give up if we are unable to parse the detail, because
                    // that appears to be the least worst behavior.
                    // It is very unlikely that a user surrounds a catch body handling the
                    // error with another try-catch statement, and we do not want to
                    // recommend doing so.
                }
            }
        }
        return details;
    }
}
exports.ConnectError = ConnectError;
/**
 * Create an error message, prefixing the given code.
 */
function createMessage(message, code) {
    return message.length
        ? `[${(0, code_string_js_1.codeToString)(code)}] ${message}`
        : `[${(0, code_string_js_1.codeToString)(code)}]`;
}


/***/ }),

/***/ 4801:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createContextKey = exports.createContextValues = void 0;
/**
 * createContextValues creates a new ContextValues.
 */
function createContextValues() {
    return {
        get(key) {
            return key.id in this ? this[key.id] : key.defaultValue;
        },
        set(key, value) {
            this[key.id] = value;
            return this;
        },
        delete(key) {
            delete this[key.id];
            return this;
        },
    };
}
exports.createContextValues = createContextValues;
/**
 * createContextKey creates a new ContextKey.
 */
function createContextKey(defaultValue, options) {
    return { id: Symbol(options === null || options === void 0 ? void 0 : options.description), defaultValue };
}
exports.createContextKey = createContextKey;


/***/ }),

/***/ 6738:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.cors = void 0;
const connect = __nccwpck_require__(4861);
const grpc = __nccwpck_require__(1740);
const grpcWeb = __nccwpck_require__(1734);
/**
 * CORS prevents rogue scripts in a web browser from making arbitrary requests
 * to other web servers.
 *
 * This object provides helpful constants to configure CORS middleware for
 * cross-domain requests with the protocols supported by Connect.
 *
 * Make sure to add application-specific headers that your application
 * uses as well.
 */
exports.cors = {
    /**
     * Request methods that scripts running in the browser are permitted to use.
     *
     * To support cross-domain requests with the protocols supported by Connect,
     * these headers fields must be included in the preflight response header
     * Access-Control-Allow-Methods.
     */
    allowedMethods: ["POST", "GET"],
    /**
     * Header fields that scripts running in the browser are permitted to send.
     *
     * To support cross-domain requests with the protocols supported by Connect,
     * these field names must be included in the preflight response header
     * Access-Control-Allow-Headers.
     *
     * Make sure to include any application-specific headers your browser client
     * may send.
     */
    allowedHeaders: [
        connect.headerContentType,
        connect.headerProtocolVersion,
        connect.headerTimeout,
        connect.headerStreamEncoding, // Unused in web browsers, but added for future-proofing
        connect.headerStreamAcceptEncoding, // Unused in web browsers, but added for future-proofing
        connect.headerUnaryEncoding, // Unused in web browsers, but added for future-proofing
        connect.headerUnaryAcceptEncoding, // Unused in web browsers, but added for future-proofing
        grpc.headerMessageType, // Unused in web browsers, but added for future-proofing
        grpcWeb.headerXGrpcWeb,
        grpcWeb.headerXUserAgent,
        grpcWeb.headerTimeout,
    ],
    /**
     * Header fields that scripts running the browser are permitted to see.
     *
     * To support cross-domain requests with the protocols supported by Connect,
     * these field names must be included in header Access-Control-Expose-Headers
     * of the actual response.
     *
     * Make sure to include any application-specific headers your browser client
     * should see. If your application uses trailers, they will be sent as header
     * fields with a `Trailer-` prefix for Connect unary RPCs - make sure to
     * expose them as well if you want them to be visible in all supported
     * protocols.
     */
    exposedHeaders: [
        grpcWeb.headerGrpcStatus, // Crucial for gRPC-web
        grpcWeb.headerGrpcMessage, // Crucial for gRPC-web
        grpcWeb.headerStatusDetailsBin, // Error details in gRPC, gRPC-web
        connect.headerUnaryEncoding, // Unused in web browsers, but added for future-proofing
        connect.headerStreamEncoding, // Unused in web browsers, but added for future-proofing
    ],
};


/***/ }),

/***/ 1683:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.appendHeaders = exports.decodeBinaryHeader = exports.encodeBinaryHeader = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
/**
 * Encode a single binary header value according to the Connect
 * and gRPC specifications.
 *
 * This function accepts raw binary data from a buffer, a string
 * with UTF-8 text, or a protobuf message. It encodes the input
 * with unpadded base64 and returns a string that can be used for
 * a header whose name ends with `-bin`.
 */
function encodeBinaryHeader(value) {
    let bytes;
    if (value instanceof protobuf_1.Message) {
        bytes = value.toBinary();
    }
    else if (typeof value == "string") {
        bytes = new TextEncoder().encode(value);
    }
    else {
        bytes = value instanceof Uint8Array ? value : new Uint8Array(value);
    }
    return protobuf_1.protoBase64.enc(bytes).replace(/=+$/, "");
}
exports.encodeBinaryHeader = encodeBinaryHeader;
function decodeBinaryHeader(value, type, options) {
    try {
        const bytes = protobuf_1.protoBase64.dec(value);
        if (type) {
            return type.fromBinary(bytes, options);
        }
        return bytes;
    }
    catch (e) {
        throw connect_error_js_1.ConnectError.from(e, code_js_1.Code.DataLoss);
    }
}
exports.decodeBinaryHeader = decodeBinaryHeader;
/**
 * Merge two or more Headers objects by appending all fields from
 * all inputs to a new Headers object.
 */
function appendHeaders(...headers) {
    const h = new Headers();
    for (const e of headers) {
        e.forEach((value, key) => {
            h.append(key, value);
        });
    }
    return h;
}
exports.appendHeaders = appendHeaders;


/***/ }),

/***/ 4021:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createServiceImplSpec = exports.createMethodImplSpec = exports.createHandlerContext = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const signals_js_1 = __nccwpck_require__(500);
const context_values_js_1 = __nccwpck_require__(4801);
/**
 * Create a new HandlerContext.
 *
 * The context is usually automatically created by handlers, but if a service
 * implementation is used in unit tests, this function can be used to create
 * a context.
 */
function createHandlerContext(init) {
    var _a;
    let timeoutMs;
    if (init.timeoutMs !== undefined) {
        const date = new Date(Date.now() + init.timeoutMs);
        timeoutMs = () => date.getTime() - Date.now();
    }
    else {
        timeoutMs = () => undefined;
    }
    const deadline = (0, signals_js_1.createDeadlineSignal)(init.timeoutMs);
    const abortController = (0, signals_js_1.createLinkedAbortController)(deadline.signal, init.requestSignal, init.shutdownSignal);
    return Object.assign(Object.assign({}, init), { signal: abortController.signal, timeoutMs, requestHeader: new Headers(init.requestHeader), responseHeader: new Headers(init.responseHeader), responseTrailer: new Headers(init.responseTrailer), abort(reason) {
            deadline.cleanup();
            abortController.abort(reason);
        }, values: (_a = init.contextValues) !== null && _a !== void 0 ? _a : (0, context_values_js_1.createContextValues)() });
}
exports.createHandlerContext = createHandlerContext;
/**
 * Create an MethodImplSpec - a user-provided implementation for a method,
 * wrapped in a discriminated union type along with service and method metadata.
 */
function createMethodImplSpec(service, method, impl) {
    return {
        kind: method.kind,
        service,
        method,
        impl,
    };
}
exports.createMethodImplSpec = createMethodImplSpec;
/**
 * Create an ServiceImplSpec - a user-provided service implementation wrapped
 * with metadata.
 */
function createServiceImplSpec(service, impl) {
    const s = { service, methods: {} };
    for (const [localName, methodInfo] of Object.entries(service.methods)) {
        let fn = impl[localName];
        if (typeof fn == "function") {
            fn = fn.bind(impl);
        }
        else {
            const message = `${service.typeName}.${methodInfo.name} is not implemented`;
            fn = function unimplemented() {
                throw new connect_error_js_1.ConnectError(message, code_js_1.Code.Unimplemented);
            };
        }
        s.methods[localName] = createMethodImplSpec(service, methodInfo, fn);
    }
    return s;
}
exports.createServiceImplSpec = createServiceImplSpec;


/***/ }),

/***/ 632:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createRouterTransport = exports.createMethodImplSpec = exports.createServiceImplSpec = exports.makeAnyClient = exports.createContextValues = exports.createContextKey = exports.cors = exports.createHandlerContext = exports.createConnectRouter = exports.createPromiseClient = exports.createCallbackClient = exports.appendHeaders = exports.decodeBinaryHeader = exports.encodeBinaryHeader = exports.Code = exports.ConnectError = void 0;
var connect_error_js_1 = __nccwpck_require__(786);
Object.defineProperty(exports, "ConnectError", ({ enumerable: true, get: function () { return connect_error_js_1.ConnectError; } }));
var code_js_1 = __nccwpck_require__(8002);
Object.defineProperty(exports, "Code", ({ enumerable: true, get: function () { return code_js_1.Code; } }));
var http_headers_js_1 = __nccwpck_require__(1683);
Object.defineProperty(exports, "encodeBinaryHeader", ({ enumerable: true, get: function () { return http_headers_js_1.encodeBinaryHeader; } }));
Object.defineProperty(exports, "decodeBinaryHeader", ({ enumerable: true, get: function () { return http_headers_js_1.decodeBinaryHeader; } }));
Object.defineProperty(exports, "appendHeaders", ({ enumerable: true, get: function () { return http_headers_js_1.appendHeaders; } }));
var callback_client_js_1 = __nccwpck_require__(778);
Object.defineProperty(exports, "createCallbackClient", ({ enumerable: true, get: function () { return callback_client_js_1.createCallbackClient; } }));
var promise_client_js_1 = __nccwpck_require__(4065);
Object.defineProperty(exports, "createPromiseClient", ({ enumerable: true, get: function () { return promise_client_js_1.createPromiseClient; } }));
var router_js_1 = __nccwpck_require__(2229);
Object.defineProperty(exports, "createConnectRouter", ({ enumerable: true, get: function () { return router_js_1.createConnectRouter; } }));
var implementation_js_1 = __nccwpck_require__(4021);
Object.defineProperty(exports, "createHandlerContext", ({ enumerable: true, get: function () { return implementation_js_1.createHandlerContext; } }));
var cors_js_1 = __nccwpck_require__(6738);
Object.defineProperty(exports, "cors", ({ enumerable: true, get: function () { return cors_js_1.cors; } }));
var context_values_js_1 = __nccwpck_require__(4801);
Object.defineProperty(exports, "createContextKey", ({ enumerable: true, get: function () { return context_values_js_1.createContextKey; } }));
Object.defineProperty(exports, "createContextValues", ({ enumerable: true, get: function () { return context_values_js_1.createContextValues; } }));
// Symbols above should be relevant to end users.
// Symbols below should only be relevant for other libraries.
var any_client_js_1 = __nccwpck_require__(9030);
Object.defineProperty(exports, "makeAnyClient", ({ enumerable: true, get: function () { return any_client_js_1.makeAnyClient; } }));
var implementation_js_2 = __nccwpck_require__(4021);
Object.defineProperty(exports, "createServiceImplSpec", ({ enumerable: true, get: function () { return implementation_js_2.createServiceImplSpec; } }));
Object.defineProperty(exports, "createMethodImplSpec", ({ enumerable: true, get: function () { return implementation_js_2.createMethodImplSpec; } }));
var router_transport_js_1 = __nccwpck_require__(8600);
Object.defineProperty(exports, "createRouterTransport", ({ enumerable: true, get: function () { return router_transport_js_1.createRouterTransport; } }));


/***/ }),

/***/ 4065:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createBiDiStreamingFn = exports.createClientStreamingFn = exports.createServerStreamingFn = exports.createUnaryFn = exports.createPromiseClient = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const any_client_js_1 = __nccwpck_require__(9030);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const async_iterable_js_1 = __nccwpck_require__(4285);
/**
 * Create a PromiseClient for the given service, invoking RPCs through the
 * given transport.
 */
function createPromiseClient(service, transport) {
    return (0, any_client_js_1.makeAnyClient)(service, (method) => {
        switch (method.kind) {
            case protobuf_1.MethodKind.Unary:
                return createUnaryFn(transport, service, method);
            case protobuf_1.MethodKind.ServerStreaming:
                return createServerStreamingFn(transport, service, method);
            case protobuf_1.MethodKind.ClientStreaming:
                return createClientStreamingFn(transport, service, method);
            case protobuf_1.MethodKind.BiDiStreaming:
                return createBiDiStreamingFn(transport, service, method);
            default:
                return null;
        }
    });
}
exports.createPromiseClient = createPromiseClient;
function createUnaryFn(transport, service, method) {
    return async function (input, options) {
        var _a, _b;
        const response = await transport.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input, options === null || options === void 0 ? void 0 : options.contextValues);
        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
        return response.message;
    };
}
exports.createUnaryFn = createUnaryFn;
function createServerStreamingFn(transport, service, method) {
    return function (input, options) {
        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, (0, async_iterable_js_1.createAsyncIterable)([input]), options === null || options === void 0 ? void 0 : options.contextValues), options);
    };
}
exports.createServerStreamingFn = createServerStreamingFn;
function createClientStreamingFn(transport, service, method) {
    return async function (request, options) {
        var _a, e_1, _b, _c;
        var _d, _e;
        const response = await transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues);
        (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);
        let singleMessage;
        try {
            for (var _f = true, _g = __asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {
                _c = _h.value;
                _f = false;
                const message = _c;
                singleMessage = message;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_f && !_a && (_b = _g.return)) await _b.call(_g);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!singleMessage) {
            throw new connect_error_js_1.ConnectError("protocol error: missing response message", code_js_1.Code.Internal);
        }
        (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);
        return singleMessage;
    };
}
exports.createClientStreamingFn = createClientStreamingFn;
function createBiDiStreamingFn(transport, service, method) {
    return function (request, options) {
        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues), options);
    };
}
exports.createBiDiStreamingFn = createBiDiStreamingFn;
function handleStreamResponse(stream, options) {
    const it = (function () {
        var _a, _b;
        return __asyncGenerator(this, arguments, function* () {
            const response = yield __await(stream);
            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
            yield __await(yield* __asyncDelegator(__asyncValues(response.message)));
            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
        });
    })()[Symbol.asyncIterator]();
    // Create a new iterable to omit throw/return.
    return {
        [Symbol.asyncIterator]: () => ({
            next: () => it.next(),
        }),
    };
}


/***/ }),

/***/ 4131:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codeFromString = exports.codeToString = void 0;
const code_js_1 = __nccwpck_require__(8002);
/**
 * codeToString returns the string representation of a Code.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeToString(value) {
    const name = code_js_1.Code[value];
    if (typeof name != "string") {
        return value.toString();
    }
    return (name[0].toLowerCase() +
        name.substring(1).replace(/[A-Z]/g, (c) => "_" + c.toLowerCase()));
}
exports.codeToString = codeToString;
let stringToCode;
/**
 * codeFromString parses the string representation of a Code in snake_case.
 * For example, the string "permission_denied" parses into Code.PermissionDenied.
 *
 * If the given string cannot be parsed, the function returns undefined.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeFromString(value) {
    if (!stringToCode) {
        stringToCode = {};
        for (const value of Object.values(code_js_1.Code)) {
            if (typeof value == "string") {
                continue;
            }
            stringToCode[codeToString(value)] = value;
        }
    }
    return stringToCode[value];
}
exports.codeFromString = codeFromString;


/***/ }),

/***/ 5850:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseEncodingQuery = exports.parseContentType = exports.contentTypeStreamJson = exports.contentTypeStreamProto = exports.contentTypeUnaryJson = exports.contentTypeUnaryProto = exports.contentTypeStreamRegExp = exports.contentTypeUnaryRegExp = exports.contentTypeRegExp = void 0;
/**
 * Regular Expression that matches any valid Connect Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.contentTypeRegExp = /^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;
/**
 * Regular Expression that matches a Connect unary Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.contentTypeUnaryRegExp = /^application\/(?:json(?:; ?charset=utf-?8)?|proto)$/i;
/**
 * Regular Expression that matches a Connect streaming Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.contentTypeStreamRegExp = /^application\/connect\+?(?:json(?:; ?charset=utf-?8)?|proto)$/i;
exports.contentTypeUnaryProto = "application/proto";
exports.contentTypeUnaryJson = "application/json";
exports.contentTypeStreamProto = "application/connect+proto";
exports.contentTypeStreamJson = "application/connect+json";
const encodingProto = "proto";
const encodingJson = "json";
/**
 * Parse a Connect Content-Type header.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function parseContentType(contentType) {
    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(exports.contentTypeRegExp);
    if (!match) {
        return undefined;
    }
    const stream = !!match[1];
    const binary = !!match[3];
    return { stream, binary };
}
exports.parseContentType = parseContentType;
/**
 * Parse a Connect Get encoding query parameter.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function parseEncodingQuery(encoding) {
    switch (encoding) {
        case encodingProto:
            return { stream: false, binary: true };
        case encodingJson:
            return { stream: false, binary: false };
        default:
            return undefined;
    }
}
exports.parseEncodingQuery = parseEncodingQuery;


/***/ }),

/***/ 9755:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createEndStreamSerialization = exports.endStreamToJson = exports.endStreamFromJson = exports.endStreamFlag = void 0;
const error_json_js_1 = __nccwpck_require__(7087);
const http_headers_js_1 = __nccwpck_require__(1683);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
/**
 * endStreamFlag indicates that the data in a EnvelopedMessage
 * is a EndStreamResponse of the Connect protocol.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.endStreamFlag = 0b00000010;
/**
 * Parse an EndStreamResponse of the Connect protocol.
 * Throws a ConnectError on malformed input.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function endStreamFromJson(data) {
    const parseErr = new connect_error_js_1.ConnectError("invalid end stream", code_js_1.Code.InvalidArgument);
    let jsonValue;
    try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        jsonValue = JSON.parse(typeof data == "string" ? data : new TextDecoder().decode(data));
    }
    catch (e) {
        throw parseErr;
    }
    if (typeof jsonValue != "object" ||
        jsonValue == null ||
        Array.isArray(jsonValue)) {
        throw parseErr;
    }
    const metadata = new Headers();
    if ("metadata" in jsonValue) {
        if (typeof jsonValue.metadata != "object" ||
            jsonValue.metadata == null ||
            Array.isArray(jsonValue.metadata)) {
            throw parseErr;
        }
        for (const [key, values] of Object.entries(jsonValue.metadata)) {
            if (!Array.isArray(values) ||
                values.some((value) => typeof value != "string")) {
                throw parseErr;
            }
            for (const value of values) {
                metadata.append(key, value);
            }
        }
    }
    const error = "error" in jsonValue
        ? (0, error_json_js_1.errorFromJson)(jsonValue.error, metadata, parseErr)
        : undefined;
    return { metadata, error };
}
exports.endStreamFromJson = endStreamFromJson;
/**
 * Serialize the given EndStreamResponse to JSON.
 *
 * The JSON serialization options are required to produce the optional
 * human-readable representation of error details if the detail uses
 * google.protobuf.Any.
 *
 * See https://connectrpc.com/docs/protocol#error-end-stream
 *
 * @private Internal code, does not follow semantic versioning.
 */
function endStreamToJson(metadata, error, jsonWriteOptions) {
    const es = {};
    if (error !== undefined) {
        es.error = (0, error_json_js_1.errorToJson)(error, jsonWriteOptions);
        metadata = (0, http_headers_js_1.appendHeaders)(metadata, error.metadata);
    }
    let hasMetadata = false;
    const md = {};
    metadata.forEach((value, key) => {
        hasMetadata = true;
        md[key] = [value];
    });
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (hasMetadata) {
        es.metadata = md;
    }
    return es;
}
exports.endStreamToJson = endStreamToJson;
/**
 * Create a Serialization object that serializes a Connect EndStreamResponse.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createEndStreamSerialization(options) {
    const textEncoder = new TextEncoder();
    return {
        serialize(data) {
            try {
                const jsonObject = endStreamToJson(data.metadata, data.error, options);
                const jsonString = JSON.stringify(jsonObject);
                return textEncoder.encode(jsonString);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new connect_error_js_1.ConnectError(`failed to serialize EndStreamResponse: ${m}`, code_js_1.Code.Internal);
            }
        },
        parse(data) {
            try {
                return endStreamFromJson(data);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new connect_error_js_1.ConnectError(`failed to parse EndStreamResponse: ${m}`, code_js_1.Code.InvalidArgument);
            }
        },
    };
}
exports.createEndStreamSerialization = createEndStreamSerialization;


/***/ }),

/***/ 7087:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.errorToJsonBytes = exports.errorToJson = exports.errorFromJsonBytes = exports.errorFromJson = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
const code_string_js_1 = __nccwpck_require__(4131);
/**
 * Parse a Connect error from a JSON value.
 * Will return a ConnectError, and throw the provided fallback if parsing failed.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function errorFromJson(jsonValue, metadata, fallback) {
    if (metadata) {
        new Headers(metadata).forEach((value, key) => fallback.metadata.append(key, value));
    }
    if (typeof jsonValue !== "object" ||
        jsonValue == null ||
        Array.isArray(jsonValue) ||
        !("code" in jsonValue) ||
        typeof jsonValue.code !== "string") {
        throw fallback;
    }
    const code = (0, code_string_js_1.codeFromString)(jsonValue.code);
    if (code === undefined) {
        throw fallback;
    }
    const message = jsonValue.message;
    if (message != null && typeof message !== "string") {
        throw fallback;
    }
    const error = new connect_error_js_1.ConnectError(message !== null && message !== void 0 ? message : "", code, metadata);
    if ("details" in jsonValue && Array.isArray(jsonValue.details)) {
        for (const detail of jsonValue.details) {
            if (detail === null ||
                typeof detail != "object" ||
                Array.isArray(detail) ||
                typeof detail.type != "string" ||
                typeof detail.value != "string" ||
                ("debug" in detail && typeof detail.debug != "object")) {
                throw fallback;
            }
            try {
                error.details.push({
                    type: detail.type,
                    value: protobuf_1.protoBase64.dec(detail.value),
                    debug: detail.debug,
                });
            }
            catch (e) {
                throw fallback;
            }
        }
    }
    return error;
}
exports.errorFromJson = errorFromJson;
/**
 * Parse a Connect error from a serialized JSON value.
 * Will return a ConnectError, and throw the provided fallback if parsing failed.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function errorFromJsonBytes(bytes, metadata, fallback) {
    let jsonValue;
    try {
        jsonValue = JSON.parse(new TextDecoder().decode(bytes));
    }
    catch (e) {
        throw fallback;
    }
    return errorFromJson(jsonValue, metadata, fallback);
}
exports.errorFromJsonBytes = errorFromJsonBytes;
/**
 * Serialize the given error to JSON.
 *
 * The JSON serialization options are required to produce the optional
 * human-readable representation in the "debug" key if the detail uses
 * google.protobuf.Any. If serialization of the "debug" value fails, it
 * is silently disregarded.
 *
 * See https://connectrpc.com/docs/protocol#error-end-stream
 *
 * @private Internal code, does not follow semantic versioning.
 */
function errorToJson(error, jsonWriteOptions) {
    const o = {
        code: (0, code_string_js_1.codeToString)(error.code),
    };
    if (error.rawMessage.length > 0) {
        o.message = error.rawMessage;
    }
    if (error.details.length > 0) {
        o.details = error.details
            .map((value) => {
            if (value instanceof protobuf_1.Message) {
                const i = {
                    type: value.getType().typeName,
                    value: value.toBinary(),
                };
                try {
                    i.debug = value.toJson(jsonWriteOptions);
                }
                catch (e) {
                    // We deliberately ignore errors that may occur when serializing
                    // a message to JSON (the message contains an Any).
                    // The rationale is that we are only trying to provide optional
                    // debug information.
                }
                return i;
            }
            return value;
        })
            .map((_a) => {
            var { value } = _a, rest = __rest(_a, ["value"]);
            return (Object.assign(Object.assign({}, rest), { value: protobuf_1.protoBase64.enc(value) }));
        });
    }
    return o;
}
exports.errorToJson = errorToJson;
/**
 * Serialize the given error to JSON. This calls errorToJson(), but stringifies
 * the result, and converts it into a UInt8Array.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function errorToJsonBytes(error, jsonWriteOptions) {
    const textEncoder = new TextEncoder();
    try {
        const jsonObject = errorToJson(error, jsonWriteOptions);
        const jsonString = JSON.stringify(jsonObject);
        return textEncoder.encode(jsonString);
    }
    catch (e) {
        const m = e instanceof Error ? e.message : String(e);
        throw new connect_error_js_1.ConnectError(`failed to serialize Connect Error: ${m}`, code_js_1.Code.Internal);
    }
}
exports.errorToJsonBytes = errorToJsonBytes;


/***/ }),

/***/ 8934:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transformConnectPostToGetRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const headers_js_1 = __nccwpck_require__(4861);
const version_js_1 = __nccwpck_require__(8465);
const contentTypePrefix = "application/";
function encodeMessageForUrl(message, useBase64) {
    if (useBase64) {
        // TODO(jchadwick-buf): Three regex replaces seems excessive.
        // Can we make protoBase64.enc more flexible?
        return protobuf_1.protoBase64
            .enc(message)
            .replace(/\+/g, "-")
            .replace(/\//g, "_")
            .replace(/=+$/, "");
    }
    else {
        return encodeURIComponent(new TextDecoder().decode(message));
    }
}
/**
 * @private Internal code, does not follow semantic versioning.
 */
function transformConnectPostToGetRequest(request, message, useBase64) {
    let query = `?connect=v${version_js_1.protocolVersion}`;
    const contentType = request.header.get(headers_js_1.headerContentType);
    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {
        query +=
            "&encoding=" +
                encodeURIComponent(contentType.slice(contentTypePrefix.length));
    }
    const compression = request.header.get(headers_js_1.headerUnaryEncoding);
    if (compression !== null && compression !== "identity") {
        query += "&compression=" + encodeURIComponent(compression);
        // Force base64 for compressed payloads.
        useBase64 = true;
    }
    if (useBase64) {
        query += "&base64=1";
    }
    query += "&message=" + encodeMessageForUrl(message, useBase64);
    const url = request.url + query;
    // Omit headers that are not used for unary GET requests.
    const header = new Headers(request.header);
    [
        headers_js_1.headerProtocolVersion,
        headers_js_1.headerContentType,
        headers_js_1.headerUnaryContentLength,
        headers_js_1.headerUnaryEncoding,
        headers_js_1.headerUnaryAcceptEncoding,
    ].forEach((h) => header.delete(h));
    return Object.assign(Object.assign({}, request), { init: Object.assign(Object.assign({}, request.init), { method: "GET" }), url,
        header });
}
exports.transformConnectPostToGetRequest = transformConnectPostToGetRequest;


/***/ }),

/***/ 7101:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createHandlerFactory = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
const implementation_js_1 = __nccwpck_require__(4021);
const content_type_js_1 = __nccwpck_require__(5850);
const end_stream_js_1 = __nccwpck_require__(9755);
const error_json_js_1 = __nccwpck_require__(7087);
const headers_js_1 = __nccwpck_require__(4861);
const http_status_js_1 = __nccwpck_require__(7331);
const parse_timeout_js_1 = __nccwpck_require__(3088);
const query_params_js_1 = __nccwpck_require__(8913);
const trailer_mux_js_1 = __nccwpck_require__(7266);
const version_js_1 = __nccwpck_require__(8465);
const compression_js_1 = __nccwpck_require__(1816);
const serialization_js_1 = __nccwpck_require__(3263);
const universal_handler_js_1 = __nccwpck_require__(3235);
const universal_js_1 = __nccwpck_require__(19);
const async_iterable_js_1 = __nccwpck_require__(4285);
const content_type_matcher_js_1 = __nccwpck_require__(5331);
const create_method_url_js_1 = __nccwpck_require__(6490);
const invoke_implementation_js_1 = __nccwpck_require__(7049);
const protocolName = "connect";
const methodPost = "POST";
const methodGet = "GET";
/**
 * Create a factory that creates Connect handlers.
 */
function createHandlerFactory(options) {
    const opt = (0, universal_handler_js_1.validateUniversalHandlerOptions)(options);
    const endStreamSerialization = (0, end_stream_js_1.createEndStreamSerialization)(opt.jsonOptions);
    function fact(spec) {
        let h;
        let contentTypeRegExp;
        const serialization = (0, serialization_js_1.createMethodSerializationLookup)(spec.method, opt.binaryOptions, opt.jsonOptions, opt);
        switch (spec.kind) {
            case protobuf_1.MethodKind.Unary:
                contentTypeRegExp = content_type_js_1.contentTypeUnaryRegExp;
                h = createUnaryHandler(opt, spec, serialization);
                break;
            default:
                contentTypeRegExp = content_type_js_1.contentTypeStreamRegExp;
                h = createStreamHandler(opt, spec, serialization, endStreamSerialization);
                break;
        }
        const allowedMethods = [methodPost];
        if (spec.method.idempotency === protobuf_1.MethodIdempotency.NoSideEffects) {
            allowedMethods.push(methodGet);
        }
        return Object.assign(h, {
            protocolNames: [protocolName],
            supportedContentType: (0, content_type_matcher_js_1.contentTypeMatcher)(contentTypeRegExp),
            allowedMethods,
            requestPath: (0, create_method_url_js_1.createMethodUrl)("/", spec.service, spec.method),
            service: spec.service,
            method: spec.method,
        });
    }
    fact.protocolName = protocolName;
    return fact;
}
exports.createHandlerFactory = createHandlerFactory;
function createUnaryHandler(opt, spec, serialization) {
    return async function handle(req) {
        const isGet = req.method == methodGet;
        if (isGet && spec.method.idempotency != protobuf_1.MethodIdempotency.NoSideEffects) {
            return universal_js_1.uResponseMethodNotAllowed;
        }
        const queryParams = new URL(req.url).searchParams;
        const compressionRequested = isGet
            ? queryParams.get(query_params_js_1.paramCompression)
            : req.header.get(headers_js_1.headerUnaryEncoding);
        const type = isGet
            ? (0, content_type_js_1.parseEncodingQuery)(queryParams.get(query_params_js_1.paramEncoding))
            : (0, content_type_js_1.parseContentType)(req.header.get(headers_js_1.headerContentType));
        if (type == undefined || type.stream) {
            return universal_js_1.uResponseUnsupportedMediaType;
        }
        const timeout = (0, parse_timeout_js_1.parseTimeout)(req.header.get(headers_js_1.headerTimeout), opt.maxTimeoutMs);
        const context = (0, implementation_js_1.createHandlerContext)(Object.assign(Object.assign({}, spec), { requestMethod: req.method, protocolName, timeoutMs: timeout.timeoutMs, shutdownSignal: opt.shutdownSignal, requestSignal: req.signal, requestHeader: req.header, responseHeader: {
                [headers_js_1.headerContentType]: type.binary
                    ? content_type_js_1.contentTypeUnaryProto
                    : content_type_js_1.contentTypeUnaryJson,
            }, contextValues: req.contextValues }));
        const compression = (0, compression_js_1.compressionNegotiate)(opt.acceptCompression, compressionRequested, req.header.get(headers_js_1.headerUnaryAcceptEncoding), headers_js_1.headerUnaryAcceptEncoding);
        let status = universal_js_1.uResponseOk.status;
        let body;
        try {
            if (opt.requireConnectProtocolHeader) {
                if (isGet) {
                    (0, version_js_1.requireProtocolVersionParam)(queryParams);
                }
                else {
                    (0, version_js_1.requireProtocolVersionHeader)(req.header);
                }
            }
            // raise compression error to serialize it as a error response
            if (compression.error) {
                throw compression.error;
            }
            // raise timeout parsing error to serialize it as a trailer status
            if (timeout.error) {
                throw timeout.error;
            }
            let reqBody;
            if (isGet) {
                reqBody = await readUnaryMessageFromQuery(opt.readMaxBytes, compression.request, queryParams);
            }
            else {
                reqBody = await readUnaryMessageFromBody(opt.readMaxBytes, compression.request, req);
            }
            const input = parseUnaryMessage(spec.method, type.binary, serialization, reqBody);
            const output = await (0, invoke_implementation_js_1.invokeUnaryImplementation)(spec, context, input);
            body = serialization.getO(type.binary).serialize(output);
        }
        catch (e) {
            let error;
            if (e instanceof connect_error_js_1.ConnectError) {
                error = e;
            }
            else {
                error = new connect_error_js_1.ConnectError("internal error", code_js_1.Code.Internal, undefined, undefined, e);
            }
            status = (0, http_status_js_1.codeToHttpStatus)(error.code);
            context.responseHeader.set(headers_js_1.headerContentType, content_type_js_1.contentTypeUnaryJson);
            error.metadata.forEach((value, key) => {
                context.responseHeader.set(key, value);
            });
            body = (0, error_json_js_1.errorToJsonBytes)(error, opt.jsonOptions);
        }
        finally {
            context.abort();
        }
        if (compression.response && body.byteLength >= opt.compressMinBytes) {
            body = await compression.response.compress(body);
            context.responseHeader.set(headers_js_1.headerUnaryEncoding, compression.response.name);
        }
        const header = (0, trailer_mux_js_1.trailerMux)(context.responseHeader, context.responseTrailer);
        header.set(headers_js_1.headerUnaryContentLength, body.byteLength.toString(10));
        return {
            status,
            body: (0, async_iterable_js_1.createAsyncIterable)([body]),
            header,
        };
    };
}
async function readUnaryMessageFromBody(readMaxBytes, compression, request) {
    if (typeof request.body == "object" &&
        request.body !== null &&
        Symbol.asyncIterator in request.body) {
        let reqBytes = await (0, async_iterable_js_1.readAllBytes)(request.body, readMaxBytes, request.header.get(headers_js_1.headerUnaryContentLength));
        if (compression) {
            reqBytes = await compression.decompress(reqBytes, readMaxBytes);
        }
        return reqBytes;
    }
    return request.body;
}
async function readUnaryMessageFromQuery(readMaxBytes, compression, queryParams) {
    var _a;
    const base64 = queryParams.get(query_params_js_1.paramBase64);
    const message = (_a = queryParams.get(query_params_js_1.paramMessage)) !== null && _a !== void 0 ? _a : "";
    let decoded;
    if (base64 === "1") {
        decoded = protobuf_1.protoBase64.dec(message);
    }
    else {
        decoded = new TextEncoder().encode(message);
    }
    if (compression) {
        decoded = await compression.decompress(decoded, readMaxBytes);
    }
    return decoded;
}
function parseUnaryMessage(method, useBinaryFormat, serialization, input) {
    if (input instanceof Uint8Array) {
        return serialization.getI(useBinaryFormat).parse(input);
    }
    if (useBinaryFormat) {
        throw new connect_error_js_1.ConnectError("received parsed JSON request body, but content-type indicates binary format", code_js_1.Code.Internal);
    }
    try {
        return method.I.fromJson(input);
    }
    catch (e) {
        throw connect_error_js_1.ConnectError.from(e, code_js_1.Code.InvalidArgument);
    }
}
function createStreamHandler(opt, spec, serialization, endStreamSerialization) {
    return async function handle(req) {
        (0, universal_js_1.assertByteStreamRequest)(req);
        const type = (0, content_type_js_1.parseContentType)(req.header.get(headers_js_1.headerContentType));
        if (type == undefined || !type.stream) {
            return universal_js_1.uResponseUnsupportedMediaType;
        }
        if (req.method !== methodPost) {
            return universal_js_1.uResponseMethodNotAllowed;
        }
        const timeout = (0, parse_timeout_js_1.parseTimeout)(req.header.get(headers_js_1.headerTimeout), opt.maxTimeoutMs);
        const context = (0, implementation_js_1.createHandlerContext)(Object.assign(Object.assign({}, spec), { requestMethod: req.method, protocolName, timeoutMs: timeout.timeoutMs, shutdownSignal: opt.shutdownSignal, requestSignal: req.signal, requestHeader: req.header, responseHeader: {
                [headers_js_1.headerContentType]: type.binary
                    ? content_type_js_1.contentTypeStreamProto
                    : content_type_js_1.contentTypeStreamJson,
            }, contextValues: req.contextValues }));
        const compression = (0, compression_js_1.compressionNegotiate)(opt.acceptCompression, req.header.get(headers_js_1.headerStreamEncoding), req.header.get(headers_js_1.headerStreamAcceptEncoding), headers_js_1.headerStreamAcceptEncoding);
        if (compression.response) {
            context.responseHeader.set(headers_js_1.headerStreamEncoding, compression.response.name);
        }
        // We split the pipeline into two parts: The request iterator, and the
        // response iterator. We do this because the request iterator is responsible
        // for parsing the request body, and we don't want write errors of the response
        // iterator to affect the request iterator.
        const inputIt = (0, async_iterable_js_1.pipe)(req.body, (0, async_iterable_js_1.transformPrepend)(() => {
            if (opt.requireConnectProtocolHeader) {
                (0, version_js_1.requireProtocolVersionHeader)(req.header);
            }
            // raise compression error to serialize it as the end stream response
            if (compression.error)
                throw compression.error;
            // raise timeout parsing error to serialize it as a trailer status
            if (timeout.error)
                throw timeout.error;
            return undefined;
        }), (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression.request, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getI(type.binary), end_stream_js_1.endStreamFlag));
        const it = (0, invoke_implementation_js_1.transformInvokeImplementation)(spec, context)(inputIt)[Symbol.asyncIterator]();
        const outputIt = (0, async_iterable_js_1.pipe)(
        // We wrap the iterator in an async iterator to ensure that the
        // abort signal is aborted when the iterator is done.
        {
            [Symbol.asyncIterator]() {
                return {
                    next: () => it.next(),
                    throw: (e) => {
                        var _a, _b;
                        context.abort(e);
                        return (_b = (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, e)) !== null && _b !== void 0 ? _b : Promise.reject({ done: true });
                    },
                    return: (v) => {
                        var _a, _b;
                        context.abort();
                        return ((_b = (_a = it.return) === null || _a === void 0 ? void 0 : _a.call(it, v)) !== null && _b !== void 0 ? _b : Promise.resolve({ done: true, value: v }));
                    },
                };
            },
        }, (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getO(type.binary)), (0, async_iterable_js_1.transformCatchFinally)((e) => {
            context.abort();
            const end = {
                metadata: context.responseTrailer,
            };
            if (e instanceof connect_error_js_1.ConnectError) {
                end.error = e;
            }
            else if (e !== undefined) {
                end.error = new connect_error_js_1.ConnectError("internal error", code_js_1.Code.Internal, undefined, undefined, e);
            }
            return {
                flags: end_stream_js_1.endStreamFlag,
                data: endStreamSerialization.serialize(end),
            };
        }), (0, async_iterable_js_1.transformCompressEnvelope)(compression.response, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), { propagateDownStreamError: true });
        return Object.assign(Object.assign({}, universal_js_1.uResponseOk), { 
            // We wait for the first response body bytes before resolving, so that
            // implementations have a chance to add headers before an adapter commits
            // them to the wire.
            body: await (0, async_iterable_js_1.untilFirst)(outputIt), header: context.responseHeader });
    };
}


/***/ }),

/***/ 4861:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.headerUserAgent = exports.headerProtocolVersion = exports.headerTimeout = exports.headerStreamAcceptEncoding = exports.headerUnaryAcceptEncoding = exports.headerStreamEncoding = exports.headerUnaryEncoding = exports.headerUnaryContentLength = exports.headerContentType = void 0;
/**
 * @private Internal code, does not follow semantic versioning.
 */
exports.headerContentType = "Content-Type";
exports.headerUnaryContentLength = "Content-Length";
exports.headerUnaryEncoding = "Content-Encoding";
exports.headerStreamEncoding = "Connect-Content-Encoding";
exports.headerUnaryAcceptEncoding = "Accept-Encoding";
exports.headerStreamAcceptEncoding = "Connect-Accept-Encoding";
exports.headerTimeout = "Connect-Timeout-Ms";
exports.headerProtocolVersion = "Connect-Protocol-Version";
exports.headerUserAgent = "User-Agent";


/***/ }),

/***/ 7331:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codeToHttpStatus = exports.codeFromHttpStatus = void 0;
const code_js_1 = __nccwpck_require__(8002);
/**
 * Determine the Connect error code for the given HTTP status code.
 * See https://connectrpc.com/docs/protocol#error-codes
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeFromHttpStatus(httpStatus) {
    switch (httpStatus) {
        case 400: // Bad Request
            return code_js_1.Code.InvalidArgument;
        case 401: // Unauthorized
            return code_js_1.Code.Unauthenticated;
        case 403: // Forbidden
            return code_js_1.Code.PermissionDenied;
        case 404: // Not Found
            return code_js_1.Code.Unimplemented;
        case 408: // Request Timeout
            return code_js_1.Code.DeadlineExceeded;
        case 409: // Conflict
            return code_js_1.Code.Aborted;
        case 412: // Precondition Failed
            return code_js_1.Code.FailedPrecondition;
        case 413: // Payload Too Large
            return code_js_1.Code.ResourceExhausted;
        case 415: // Unsupported Media Type
            return code_js_1.Code.Internal;
        case 429: // Too Many Requests
            return code_js_1.Code.Unavailable;
        case 431: // Request Header Fields Too Large
            return code_js_1.Code.ResourceExhausted;
        case 502: // Bad Gateway
            return code_js_1.Code.Unavailable;
        case 503: // Service Unavailable
            return code_js_1.Code.Unavailable;
        case 504: // Gateway Timeout
            return code_js_1.Code.Unavailable;
        default:
            return code_js_1.Code.Unknown;
    }
}
exports.codeFromHttpStatus = codeFromHttpStatus;
/**
 * Returns a HTTP status code for the given Connect code.
 * See https://connectrpc.com/docs/protocol#error-codes
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeToHttpStatus(code) {
    switch (code) {
        case code_js_1.Code.Canceled:
            return 408; // Request Timeout
        case code_js_1.Code.Unknown:
            return 500; // Internal Server Error
        case code_js_1.Code.InvalidArgument:
            return 400; // Bad Request
        case code_js_1.Code.DeadlineExceeded:
            return 408; // Request Timeout
        case code_js_1.Code.NotFound:
            return 404; // Not Found
        case code_js_1.Code.AlreadyExists:
            return 409; // Conflict
        case code_js_1.Code.PermissionDenied:
            return 403; // Forbidden
        case code_js_1.Code.ResourceExhausted:
            return 429; // Too Many Requests
        case code_js_1.Code.FailedPrecondition:
            return 412; // Precondition Failed
        case code_js_1.Code.Aborted:
            return 409; // Conflict
        case code_js_1.Code.OutOfRange:
            return 400; // Bad Request
        case code_js_1.Code.Unimplemented:
            return 404; // Not Found
        case code_js_1.Code.Internal:
            return 500; // Internal Server Error
        case code_js_1.Code.Unavailable:
            return 503; // Service Unavailable
        case code_js_1.Code.DataLoss:
            return 500; // Internal Server Error
        case code_js_1.Code.Unauthenticated:
            return 401; // Unauthorized
        default:
            return 500; // same as CodeUnknown
    }
}
exports.codeToHttpStatus = codeToHttpStatus;


/***/ }),

/***/ 3720:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codeToString = exports.codeFromString = exports.protocolVersion = exports.transformConnectPostToGetRequest = exports.trailerDemux = exports.trailerMux = exports.validateResponseWithCompression = exports.validateResponse = exports.parseTimeout = exports.contentTypeStreamRegExp = exports.contentTypeUnaryRegExp = exports.contentTypeRegExp = exports.contentTypeStreamJson = exports.contentTypeStreamProto = exports.contentTypeUnaryJson = exports.contentTypeUnaryProto = exports.parseContentType = exports.errorToJsonBytes = exports.errorToJson = exports.errorFromJsonBytes = exports.errorFromJson = exports.createEndStreamSerialization = exports.endStreamFlag = exports.endStreamFromJson = exports.endStreamToJson = exports.requestHeaderWithCompression = exports.requestHeader = exports.codeToHttpStatus = exports.codeFromHttpStatus = exports.createTransport = exports.createHandlerFactory = void 0;
var handler_factory_js_1 = __nccwpck_require__(7101);
Object.defineProperty(exports, "createHandlerFactory", ({ enumerable: true, get: function () { return handler_factory_js_1.createHandlerFactory; } }));
var transport_js_1 = __nccwpck_require__(2130);
Object.defineProperty(exports, "createTransport", ({ enumerable: true, get: function () { return transport_js_1.createTransport; } }));
// All exports below are private — internal code that does not follow semantic
// versioning.
// We will try hard to avoid breaking changes, but if you depend on the
// following exports, we recommend that you do so with an exact version
// constraint (no ~ or ^).
var http_status_js_1 = __nccwpck_require__(7331);
Object.defineProperty(exports, "codeFromHttpStatus", ({ enumerable: true, get: function () { return http_status_js_1.codeFromHttpStatus; } }));
Object.defineProperty(exports, "codeToHttpStatus", ({ enumerable: true, get: function () { return http_status_js_1.codeToHttpStatus; } }));
var request_header_js_1 = __nccwpck_require__(987);
Object.defineProperty(exports, "requestHeader", ({ enumerable: true, get: function () { return request_header_js_1.requestHeader; } }));
Object.defineProperty(exports, "requestHeaderWithCompression", ({ enumerable: true, get: function () { return request_header_js_1.requestHeaderWithCompression; } }));
var end_stream_js_1 = __nccwpck_require__(9755);
Object.defineProperty(exports, "endStreamToJson", ({ enumerable: true, get: function () { return end_stream_js_1.endStreamToJson; } }));
Object.defineProperty(exports, "endStreamFromJson", ({ enumerable: true, get: function () { return end_stream_js_1.endStreamFromJson; } }));
Object.defineProperty(exports, "endStreamFlag", ({ enumerable: true, get: function () { return end_stream_js_1.endStreamFlag; } }));
Object.defineProperty(exports, "createEndStreamSerialization", ({ enumerable: true, get: function () { return end_stream_js_1.createEndStreamSerialization; } }));
var error_json_js_1 = __nccwpck_require__(7087);
Object.defineProperty(exports, "errorFromJson", ({ enumerable: true, get: function () { return error_json_js_1.errorFromJson; } }));
Object.defineProperty(exports, "errorFromJsonBytes", ({ enumerable: true, get: function () { return error_json_js_1.errorFromJsonBytes; } }));
Object.defineProperty(exports, "errorToJson", ({ enumerable: true, get: function () { return error_json_js_1.errorToJson; } }));
Object.defineProperty(exports, "errorToJsonBytes", ({ enumerable: true, get: function () { return error_json_js_1.errorToJsonBytes; } }));
var content_type_js_1 = __nccwpck_require__(5850);
Object.defineProperty(exports, "parseContentType", ({ enumerable: true, get: function () { return content_type_js_1.parseContentType; } }));
Object.defineProperty(exports, "contentTypeUnaryProto", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeUnaryProto; } }));
Object.defineProperty(exports, "contentTypeUnaryJson", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeUnaryJson; } }));
Object.defineProperty(exports, "contentTypeStreamProto", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeStreamProto; } }));
Object.defineProperty(exports, "contentTypeStreamJson", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeStreamJson; } }));
Object.defineProperty(exports, "contentTypeRegExp", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeRegExp; } }));
Object.defineProperty(exports, "contentTypeUnaryRegExp", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeUnaryRegExp; } }));
Object.defineProperty(exports, "contentTypeStreamRegExp", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeStreamRegExp; } }));
var parse_timeout_js_1 = __nccwpck_require__(3088);
Object.defineProperty(exports, "parseTimeout", ({ enumerable: true, get: function () { return parse_timeout_js_1.parseTimeout; } }));
var validate_response_js_1 = __nccwpck_require__(3569);
Object.defineProperty(exports, "validateResponse", ({ enumerable: true, get: function () { return validate_response_js_1.validateResponse; } }));
Object.defineProperty(exports, "validateResponseWithCompression", ({ enumerable: true, get: function () { return validate_response_js_1.validateResponseWithCompression; } }));
var trailer_mux_js_1 = __nccwpck_require__(7266);
Object.defineProperty(exports, "trailerMux", ({ enumerable: true, get: function () { return trailer_mux_js_1.trailerMux; } }));
Object.defineProperty(exports, "trailerDemux", ({ enumerable: true, get: function () { return trailer_mux_js_1.trailerDemux; } }));
__exportStar(__nccwpck_require__(4861), exports);
var get_request_js_1 = __nccwpck_require__(8934);
Object.defineProperty(exports, "transformConnectPostToGetRequest", ({ enumerable: true, get: function () { return get_request_js_1.transformConnectPostToGetRequest; } }));
var version_js_1 = __nccwpck_require__(8465);
Object.defineProperty(exports, "protocolVersion", ({ enumerable: true, get: function () { return version_js_1.protocolVersion; } }));
var code_string_js_1 = __nccwpck_require__(4131);
Object.defineProperty(exports, "codeFromString", ({ enumerable: true, get: function () { return code_string_js_1.codeFromString; } }));
var code_string_js_2 = __nccwpck_require__(4131);
Object.defineProperty(exports, "codeToString", ({ enumerable: true, get: function () { return code_string_js_2.codeToString; } }));


/***/ }),

/***/ 3088:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseTimeout = void 0;
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
/**
 * Parse a Connect Timeout (Deadline) header.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function parseTimeout(value, maxTimeoutMs) {
    if (value === null) {
        return {};
    }
    const results = /^\d{1,10}$/.exec(value);
    if (results === null) {
        return {
            error: new connect_error_js_1.ConnectError(`protocol error: invalid connect timeout value: ${value}`, code_js_1.Code.InvalidArgument),
        };
    }
    const timeoutMs = parseInt(results[0]);
    if (timeoutMs > maxTimeoutMs) {
        return {
            timeoutMs: timeoutMs,
            error: new connect_error_js_1.ConnectError(`timeout ${timeoutMs}ms must be <= ${maxTimeoutMs}`, code_js_1.Code.InvalidArgument),
        };
    }
    return {
        timeoutMs: parseInt(results[0]),
    };
}
exports.parseTimeout = parseTimeout;


/***/ }),

/***/ 8913:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.paramMessage = exports.paramBase64 = exports.paramCompression = exports.paramEncoding = exports.paramConnectVersion = void 0;
/**
 * @private Internal code, does not follow semantic versioning.
 */
exports.paramConnectVersion = "connect";
exports.paramEncoding = "encoding";
exports.paramCompression = "compression";
exports.paramBase64 = "base64";
exports.paramMessage = "message";


/***/ }),

/***/ 987:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestHeaderWithCompression = exports.requestHeader = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const headers_js_1 = __nccwpck_require__(4861);
const version_js_1 = __nccwpck_require__(8465);
const content_type_js_1 = __nccwpck_require__(5850);
/**
 * Creates headers for a Connect request.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    if (timeoutMs !== undefined) {
        result.set(headers_js_1.headerTimeout, `${timeoutMs}`);
    }
    result.set(headers_js_1.headerContentType, methodKind == protobuf_1.MethodKind.Unary
        ? useBinaryFormat
            ? content_type_js_1.contentTypeUnaryProto
            : content_type_js_1.contentTypeUnaryJson
        : useBinaryFormat
            ? content_type_js_1.contentTypeStreamProto
            : content_type_js_1.contentTypeStreamJson);
    result.set(headers_js_1.headerProtocolVersion, version_js_1.protocolVersion);
    if (setUserAgent) {
        result.set(headers_js_1.headerUserAgent, "connect-es/1.3.0");
    }
    return result;
}
exports.requestHeader = requestHeader;
/**
 * Creates headers for a Connect request with compression.
 *
 * Note that we always set the Content-Encoding header for unary methods.
 * It is up to the caller to decide whether to apply compression - and remove
 * the header if compression is not used, for example because the payload is
 * too small to make compression effective.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeaderWithCompression(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression, setUserAgent) {
    const result = requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent);
    if (sendCompression != null) {
        const name = methodKind == protobuf_1.MethodKind.Unary
            ? headers_js_1.headerUnaryEncoding
            : headers_js_1.headerStreamEncoding;
        result.set(name, sendCompression.name);
    }
    if (acceptCompression.length > 0) {
        const name = methodKind == protobuf_1.MethodKind.Unary
            ? headers_js_1.headerUnaryAcceptEncoding
            : headers_js_1.headerStreamAcceptEncoding;
        result.set(name, acceptCompression.map((c) => c.name).join(","));
    }
    return result;
}
exports.requestHeaderWithCompression = requestHeaderWithCompression;


/***/ }),

/***/ 7266:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.trailerMux = exports.trailerDemux = void 0;
/**
 * In unary RPCs, Connect transports trailing metadata as response header
 * fields, prefixed with "trailer-".
 *
 * This function demuxes headers and trailers into two separate Headers
 * objects.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function trailerDemux(header) {
    const h = new Headers(), t = new Headers();
    header.forEach((value, key) => {
        if (key.toLowerCase().startsWith("trailer-")) {
            t.set(key.substring(8), value);
        }
        else {
            h.set(key, value);
        }
    });
    return [h, t];
}
exports.trailerDemux = trailerDemux;
/**
 * In unary RPCs, Connect transports trailing metadata as response header
 * fields, prefixed with "trailer-".
 *
 * This function muxes a header and a trailer into a single Headers object.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function trailerMux(header, trailer) {
    const h = new Headers(header);
    trailer.forEach((value, key) => {
        h.set(`trailer-${key}`, value);
    });
    return h;
}
exports.trailerMux = trailerMux;


/***/ }),

/***/ 2130:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTransport = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const request_header_js_1 = __nccwpck_require__(987);
const headers_js_1 = __nccwpck_require__(4861);
const validate_response_js_1 = __nccwpck_require__(3569);
const trailer_mux_js_1 = __nccwpck_require__(7266);
const error_json_js_1 = __nccwpck_require__(7087);
const end_stream_js_1 = __nccwpck_require__(9755);
const get_request_js_1 = __nccwpck_require__(8934);
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
const http_headers_js_1 = __nccwpck_require__(1683);
const async_iterable_js_1 = __nccwpck_require__(4285);
const create_method_url_js_1 = __nccwpck_require__(6490);
const run_call_js_1 = __nccwpck_require__(5733);
const serialization_js_1 = __nccwpck_require__(3263);
const context_values_js_1 = __nccwpck_require__(4801);
/**
 * Create a Transport for the Connect protocol.
 */
function createTransport(opt) {
    return {
        async unary(service, method, signal, timeoutMs, header, message, contextValues) {
            const serialization = (0, serialization_js_1.createMethodSerializationLookup)(method, opt.binaryOptions, opt.jsonOptions, opt);
            timeoutMs =
                timeoutMs === undefined
                    ? opt.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return await (0, run_call_js_1.runUnaryCall)({
                interceptors: opt.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: false,
                    service,
                    method,
                    url: (0, create_method_url_js_1.createMethodUrl)(opt.baseUrl, service, method),
                    init: {},
                    header: (0, request_header_js_1.requestHeaderWithCompression)(method.kind, opt.useBinaryFormat, timeoutMs, header, opt.acceptCompression, opt.sendCompression, true),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, context_values_js_1.createContextValues)(),
                    message,
                },
                next: async (req) => {
                    var _a;
                    let requestBody = serialization
                        .getI(opt.useBinaryFormat)
                        .serialize(req.message);
                    if (opt.sendCompression &&
                        requestBody.byteLength > opt.compressMinBytes) {
                        requestBody = await opt.sendCompression.compress(requestBody);
                        req.header.set(headers_js_1.headerUnaryEncoding, opt.sendCompression.name);
                    }
                    else {
                        req.header.delete(headers_js_1.headerUnaryEncoding);
                    }
                    const useGet = opt.useHttpGet === true &&
                        method.idempotency === protobuf_1.MethodIdempotency.NoSideEffects;
                    let body;
                    if (useGet) {
                        req = (0, get_request_js_1.transformConnectPostToGetRequest)(req, requestBody, opt.useBinaryFormat);
                    }
                    else {
                        body = (0, async_iterable_js_1.createAsyncIterable)([requestBody]);
                    }
                    const universalResponse = await opt.httpClient({
                        url: req.url,
                        method: (_a = req.init.method) !== null && _a !== void 0 ? _a : "POST",
                        header: req.header,
                        signal: req.signal,
                        body,
                    });
                    const { compression, isUnaryError, unaryError } = (0, validate_response_js_1.validateResponseWithCompression)(method.kind, opt.acceptCompression, universalResponse.status, universalResponse.header);
                    const [header, trailer] = (0, trailer_mux_js_1.trailerDemux)(universalResponse.header);
                    let responseBody = await (0, async_iterable_js_1.pipeTo)(universalResponse.body, (0, async_iterable_js_1.sinkAllBytes)(opt.readMaxBytes, universalResponse.header.get(headers_js_1.headerUnaryContentLength)), { propagateDownStreamError: false });
                    if (compression) {
                        responseBody = await compression.decompress(responseBody, opt.readMaxBytes);
                    }
                    if (isUnaryError) {
                        throw (0, error_json_js_1.errorFromJsonBytes)(responseBody, (0, http_headers_js_1.appendHeaders)(header, trailer), unaryError);
                    }
                    return {
                        stream: false,
                        service,
                        method,
                        header,
                        message: serialization
                            .getO(opt.useBinaryFormat)
                            .parse(responseBody),
                        trailer,
                    };
                },
            });
        },
        async stream(service, method, signal, timeoutMs, header, input, contextValues) {
            const serialization = (0, serialization_js_1.createMethodSerializationLookup)(method, opt.binaryOptions, opt.jsonOptions, opt);
            const endStreamSerialization = (0, end_stream_js_1.createEndStreamSerialization)(opt.jsonOptions);
            timeoutMs =
                timeoutMs === undefined
                    ? opt.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return (0, run_call_js_1.runStreamingCall)({
                interceptors: opt.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: true,
                    service,
                    method,
                    url: (0, create_method_url_js_1.createMethodUrl)(opt.baseUrl, service, method),
                    init: {
                        method: "POST",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: (0, request_header_js_1.requestHeaderWithCompression)(method.kind, opt.useBinaryFormat, timeoutMs, header, opt.acceptCompression, opt.sendCompression, true),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, context_values_js_1.createContextValues)(),
                    message: input,
                },
                next: async (req) => {
                    const uRes = await opt.httpClient({
                        url: req.url,
                        method: "POST",
                        header: req.header,
                        signal: req.signal,
                        body: (0, async_iterable_js_1.pipe)(req.message, (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getI(opt.useBinaryFormat)), (0, async_iterable_js_1.transformCompressEnvelope)(opt.sendCompression, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), { propagateDownStreamError: true }),
                    });
                    const { compression } = (0, validate_response_js_1.validateResponseWithCompression)(method.kind, opt.acceptCompression, uRes.status, uRes.header);
                    const res = Object.assign(Object.assign({}, req), { header: uRes.header, trailer: new Headers(), message: (0, async_iterable_js_1.pipe)(uRes.body, (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression !== null && compression !== void 0 ? compression : null, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getO(opt.useBinaryFormat), end_stream_js_1.endStreamFlag, endStreamSerialization), function (iterable) {
                            return __asyncGenerator(this, arguments, function* () {
                                var _a, e_1, _b, _c;
                                let endStreamReceived = false;
                                try {
                                    for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), _a = iterable_1_1.done, !_a; _d = true) {
                                        _c = iterable_1_1.value;
                                        _d = false;
                                        const chunk = _c;
                                        if (chunk.end) {
                                            if (endStreamReceived) {
                                                throw new connect_error_js_1.ConnectError("protocol error: received extra EndStreamResponse", code_js_1.Code.InvalidArgument);
                                            }
                                            endStreamReceived = true;
                                            if (chunk.value.error) {
                                                const error = chunk.value.error;
                                                uRes.header.forEach((value, key) => {
                                                    error.metadata.append(key, value);
                                                });
                                                throw error;
                                            }
                                            chunk.value.metadata.forEach((value, key) => res.trailer.set(key, value));
                                            continue;
                                        }
                                        if (endStreamReceived) {
                                            throw new connect_error_js_1.ConnectError("protocol error: received extra message after EndStreamResponse", code_js_1.Code.InvalidArgument);
                                        }
                                        yield yield __await(chunk.value);
                                    }
                                }
                                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                finally {
                                    try {
                                        if (!_d && !_a && (_b = iterable_1.return)) yield __await(_b.call(iterable_1));
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                }
                                if (!endStreamReceived) {
                                    throw new connect_error_js_1.ConnectError("protocol error: missing EndStreamResponse", code_js_1.Code.InvalidArgument);
                                }
                            });
                        }, { propagateDownStreamError: true }) });
                    return res;
                },
            });
        },
    };
}
exports.createTransport = createTransport;


/***/ }),

/***/ 3569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateResponseWithCompression = exports.validateResponse = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const code_js_1 = __nccwpck_require__(8002);
const http_status_js_1 = __nccwpck_require__(7331);
const connect_error_js_1 = __nccwpck_require__(786);
const content_type_js_1 = __nccwpck_require__(5850);
const headers_js_1 = __nccwpck_require__(4861);
/**
 * Validates response status and header for the Connect protocol.
 * Throws a ConnectError if the header indicates an error, or if
 * the content type is unexpected, with the following exception:
 * For unary RPCs with an HTTP error status, this returns an error
 * derived from the HTTP status instead of throwing it, giving an
 * implementation a chance to parse a Connect error from the wire.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponse(methodKind, status, headers) {
    const mimeType = headers.get("Content-Type");
    const parsedType = (0, content_type_js_1.parseContentType)(mimeType);
    if (status !== 200) {
        const errorFromStatus = new connect_error_js_1.ConnectError(`HTTP ${status}`, (0, http_status_js_1.codeFromHttpStatus)(status), headers);
        // If parsedType is defined and it is not binary, then this is a unary JSON response
        if (methodKind == protobuf_1.MethodKind.Unary && parsedType && !parsedType.binary) {
            return { isUnaryError: true, unaryError: errorFromStatus };
        }
        throw errorFromStatus;
    }
    return { isUnaryError: false };
}
exports.validateResponse = validateResponse;
/**
 * Validates response status and header for the Connect protocol.
 * This function is identical to validateResponse(), but also verifies
 * that a given encoding header is acceptable.
 *
 * @private
 */
function validateResponseWithCompression(methodKind, acceptCompression, status, headers) {
    let compression;
    const encoding = headers.get(methodKind == protobuf_1.MethodKind.Unary ? headers_js_1.headerUnaryEncoding : headers_js_1.headerStreamEncoding);
    if (encoding != null && encoding.toLowerCase() !== "identity") {
        compression = acceptCompression.find((c) => c.name === encoding);
        if (!compression) {
            throw new connect_error_js_1.ConnectError(`unsupported response encoding "${encoding}"`, code_js_1.Code.InvalidArgument, headers);
        }
    }
    return Object.assign({ compression }, validateResponse(methodKind, status, headers));
}
exports.validateResponseWithCompression = validateResponseWithCompression;


/***/ }),

/***/ 8465:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requireProtocolVersionParam = exports.requireProtocolVersionHeader = exports.protocolVersion = void 0;
const headers_js_1 = __nccwpck_require__(4861);
const query_params_js_1 = __nccwpck_require__(8913);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
/**
 * The only know value for the header Connect-Protocol-Version.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.protocolVersion = "1";
/**
 * Requires the Connect-Protocol-Version header to be present with the expected
 * value. Raises a ConnectError with Code.InvalidArgument otherwise.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requireProtocolVersionHeader(requestHeader) {
    const v = requestHeader.get(headers_js_1.headerProtocolVersion);
    if (v === null) {
        throw new connect_error_js_1.ConnectError(`missing required header: set ${headers_js_1.headerProtocolVersion} to "${exports.protocolVersion}"`, code_js_1.Code.InvalidArgument);
    }
    else if (v !== exports.protocolVersion) {
        throw new connect_error_js_1.ConnectError(`${headers_js_1.headerProtocolVersion} must be "${exports.protocolVersion}": got "${v}"`, code_js_1.Code.InvalidArgument);
    }
}
exports.requireProtocolVersionHeader = requireProtocolVersionHeader;
/**
 * Requires the connect query parameter to be present with the expected value.
 * Raises a ConnectError with Code.InvalidArgument otherwise.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requireProtocolVersionParam(queryParams) {
    const v = queryParams.get(query_params_js_1.paramConnectVersion);
    if (v === null) {
        throw new connect_error_js_1.ConnectError(`missing required parameter: set ${query_params_js_1.paramConnectVersion} to "v${exports.protocolVersion}"`, code_js_1.Code.InvalidArgument);
    }
    else if (v !== `v${exports.protocolVersion}`) {
        throw new connect_error_js_1.ConnectError(`${query_params_js_1.paramConnectVersion} must be "v${exports.protocolVersion}": got "${v}"`, code_js_1.Code.InvalidArgument);
    }
}
exports.requireProtocolVersionParam = requireProtocolVersionParam;


/***/ }),

/***/ 6388:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseContentType = exports.contentTypeJson = exports.contentTypeProto = exports.contentTypeRegExp = void 0;
/**
 * Regular Expression that matches any valid gRPC-web Content-Type header value.
 * Note that this includes application/grpc-web-text with the additional base64
 * encoding.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.contentTypeRegExp = /^application\/grpc-web(-text)?(?:\+(?:(json)(?:; ?charset=utf-?8)?|proto))?$/i;
exports.contentTypeProto = "application/grpc-web+proto";
exports.contentTypeJson = "application/grpc-web+json";
/**
 * Parse a gRPC-web Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function parseContentType(contentType) {
    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(exports.contentTypeRegExp);
    if (!match) {
        return undefined;
    }
    const text = !!match[1];
    const binary = !match[2];
    return { text, binary };
}
exports.parseContentType = parseContentType;


/***/ }),

/***/ 8143:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createHandlerFactory = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const implementation_js_1 = __nccwpck_require__(4021);
const trailer_js_1 = __nccwpck_require__(1496);
const headers_js_1 = __nccwpck_require__(1734);
const content_type_js_1 = __nccwpck_require__(6388);
const parse_timeout_js_1 = __nccwpck_require__(4644);
const trailer_status_js_1 = __nccwpck_require__(2828);
const async_iterable_js_1 = __nccwpck_require__(4285);
const compression_js_1 = __nccwpck_require__(1816);
const content_type_matcher_js_1 = __nccwpck_require__(5331);
const create_method_url_js_1 = __nccwpck_require__(6490);
const invoke_implementation_js_1 = __nccwpck_require__(7049);
const serialization_js_1 = __nccwpck_require__(3263);
const universal_handler_js_1 = __nccwpck_require__(3235);
const universal_js_1 = __nccwpck_require__(19);
const protocolName = "grpc-web";
const methodPost = "POST";
/**
 * Create a factory that creates gRPC-web handlers.
 */
function createHandlerFactory(options) {
    const opt = (0, universal_handler_js_1.validateUniversalHandlerOptions)(options);
    const trailerSerialization = (0, trailer_js_1.createTrailerSerialization)();
    function fact(spec) {
        const h = createHandler(opt, trailerSerialization, spec);
        return Object.assign(h, {
            protocolNames: [protocolName],
            allowedMethods: [methodPost],
            supportedContentType: (0, content_type_matcher_js_1.contentTypeMatcher)(content_type_js_1.contentTypeRegExp),
            requestPath: (0, create_method_url_js_1.createMethodUrl)("/", spec.service, spec.method),
            service: spec.service,
            method: spec.method,
        });
    }
    fact.protocolName = protocolName;
    return fact;
}
exports.createHandlerFactory = createHandlerFactory;
function createHandler(opt, trailerSerialization, spec) {
    const serialization = (0, serialization_js_1.createMethodSerializationLookup)(spec.method, opt.binaryOptions, opt.jsonOptions, opt);
    return async function handle(req) {
        (0, universal_js_1.assertByteStreamRequest)(req);
        const type = (0, content_type_js_1.parseContentType)(req.header.get(headers_js_1.headerContentType));
        if (type == undefined || type.text) {
            return universal_js_1.uResponseUnsupportedMediaType;
        }
        if (req.method !== methodPost) {
            return universal_js_1.uResponseMethodNotAllowed;
        }
        const timeout = (0, parse_timeout_js_1.parseTimeout)(req.header.get(headers_js_1.headerTimeout), opt.maxTimeoutMs);
        const context = (0, implementation_js_1.createHandlerContext)(Object.assign(Object.assign({}, spec), { requestMethod: req.method, protocolName, timeoutMs: timeout.timeoutMs, shutdownSignal: opt.shutdownSignal, requestSignal: req.signal, requestHeader: req.header, responseHeader: {
                [headers_js_1.headerContentType]: type.binary ? content_type_js_1.contentTypeProto : content_type_js_1.contentTypeJson,
            }, responseTrailer: {
                [headers_js_1.headerGrpcStatus]: trailer_status_js_1.grpcStatusOk,
            }, contextValues: req.contextValues }));
        const compression = (0, compression_js_1.compressionNegotiate)(opt.acceptCompression, req.header.get(headers_js_1.headerEncoding), req.header.get(headers_js_1.headerAcceptEncoding), headers_js_1.headerAcceptEncoding);
        if (compression.response) {
            context.responseHeader.set(headers_js_1.headerEncoding, compression.response.name);
        }
        // We split the pipeline into two parts: The request iterator, and the
        // response iterator. We do this because the request iterator is responsible
        // for parsing the request body, and we don't want write errors of the response
        // iterator to affect the request iterator.
        const inputIt = (0, async_iterable_js_1.pipe)(req.body, (0, async_iterable_js_1.transformPrepend)(() => {
            // raise compression error to serialize it as a trailer status
            if (compression.error)
                throw compression.error;
            // raise timeout parsing error to serialize it as a trailer status
            if (timeout.error)
                throw timeout.error;
            return undefined;
        }), (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression.request, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getI(type.binary), trailer_js_1.trailerFlag));
        const it = (0, invoke_implementation_js_1.transformInvokeImplementation)(spec, context)(inputIt)[Symbol.asyncIterator]();
        const outputIt = (0, async_iterable_js_1.pipe)(
        // We wrap the iterator in an async iterator to ensure that the
        // abort signal is aborted when the iterator is done.
        {
            [Symbol.asyncIterator]() {
                return {
                    next: () => it.next(),
                    throw: (e) => {
                        var _a, _b;
                        context.abort(e);
                        return (_b = (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, e)) !== null && _b !== void 0 ? _b : Promise.reject({ done: true });
                    },
                    return: (v) => {
                        var _a, _b;
                        context.abort();
                        return ((_b = (_a = it.return) === null || _a === void 0 ? void 0 : _a.call(it, v)) !== null && _b !== void 0 ? _b : Promise.resolve({ done: true, value: v }));
                    },
                };
            },
        }, (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getO(type.binary)), (0, async_iterable_js_1.transformCatchFinally)((e) => {
            context.abort();
            if (e instanceof connect_error_js_1.ConnectError) {
                (0, trailer_status_js_1.setTrailerStatus)(context.responseTrailer, e);
            }
            else if (e !== undefined) {
                (0, trailer_status_js_1.setTrailerStatus)(context.responseTrailer, new connect_error_js_1.ConnectError("internal error", code_js_1.Code.Internal, undefined, undefined, e));
            }
            return {
                flags: trailer_js_1.trailerFlag,
                data: trailerSerialization.serialize(context.responseTrailer),
            };
        }), (0, async_iterable_js_1.transformCompressEnvelope)(compression.response, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), { propagateDownStreamError: true });
        return Object.assign(Object.assign({}, universal_js_1.uResponseOk), { 
            // We wait for the first response body bytes before resolving, so that
            // implementations have a chance to add headers before an adapter commits
            // them to the wire.
            body: await (0, async_iterable_js_1.untilFirst)(outputIt), header: context.responseHeader });
    };
}


/***/ }),

/***/ 1734:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.headerXGrpcWeb = exports.headerXUserAgent = exports.headerUserAgent = exports.headerStatusDetailsBin = exports.headerGrpcMessage = exports.headerGrpcStatus = exports.headerTimeout = exports.headerAcceptEncoding = exports.headerEncoding = exports.headerContentType = void 0;
/**
 * @private Internal code, does not follow semantic versioning.
 */
var headers_js_1 = __nccwpck_require__(1740);
Object.defineProperty(exports, "headerContentType", ({ enumerable: true, get: function () { return headers_js_1.headerContentType; } }));
Object.defineProperty(exports, "headerEncoding", ({ enumerable: true, get: function () { return headers_js_1.headerEncoding; } }));
Object.defineProperty(exports, "headerAcceptEncoding", ({ enumerable: true, get: function () { return headers_js_1.headerAcceptEncoding; } }));
Object.defineProperty(exports, "headerTimeout", ({ enumerable: true, get: function () { return headers_js_1.headerTimeout; } }));
Object.defineProperty(exports, "headerGrpcStatus", ({ enumerable: true, get: function () { return headers_js_1.headerGrpcStatus; } }));
Object.defineProperty(exports, "headerGrpcMessage", ({ enumerable: true, get: function () { return headers_js_1.headerGrpcMessage; } }));
Object.defineProperty(exports, "headerStatusDetailsBin", ({ enumerable: true, get: function () { return headers_js_1.headerStatusDetailsBin; } }));
Object.defineProperty(exports, "headerUserAgent", ({ enumerable: true, get: function () { return headers_js_1.headerUserAgent; } }));
/**
 * gRPC-web does not use the standard header User-Agent.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.headerXUserAgent = "X-User-Agent";
/**
 * The canonical grpc/grpc-web JavaScript implementation sets
 * this request header with value "1".
 * Some servers may rely on the header to identify gRPC-web
 * requests. For example the proxy by improbable:
 * https://github.com/improbable-eng/grpc-web/blob/53aaf4cdc0fede7103c1b06f0cfc560c003a5c41/go/grpcweb/wrapper.go#L231
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.headerXGrpcWeb = "X-Grpc-Web";


/***/ }),

/***/ 8853:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.grpcStatusOk = exports.validateTrailer = exports.setTrailerStatus = exports.parseTimeout = exports.createTrailerSerialization = exports.trailerSerialize = exports.trailerParse = exports.trailerFlag = exports.validateResponseWithCompression = exports.validateResponse = exports.contentTypeJson = exports.contentTypeProto = exports.contentTypeRegExp = exports.parseContentType = exports.requestHeaderWithCompression = exports.requestHeader = exports.createTransport = exports.createHandlerFactory = void 0;
var handler_factory_js_1 = __nccwpck_require__(8143);
Object.defineProperty(exports, "createHandlerFactory", ({ enumerable: true, get: function () { return handler_factory_js_1.createHandlerFactory; } }));
var transport_js_1 = __nccwpck_require__(3372);
Object.defineProperty(exports, "createTransport", ({ enumerable: true, get: function () { return transport_js_1.createTransport; } }));
// All exports below are private — internal code that does not follow semantic
// versioning.
// We will try hard to avoid breaking changes, but if you depend on the
// following exports, we recommend that you do so with an exact version
// constraint (no ~ or ^).
var request_header_js_1 = __nccwpck_require__(328);
Object.defineProperty(exports, "requestHeader", ({ enumerable: true, get: function () { return request_header_js_1.requestHeader; } }));
Object.defineProperty(exports, "requestHeaderWithCompression", ({ enumerable: true, get: function () { return request_header_js_1.requestHeaderWithCompression; } }));
var content_type_js_1 = __nccwpck_require__(6388);
Object.defineProperty(exports, "parseContentType", ({ enumerable: true, get: function () { return content_type_js_1.parseContentType; } }));
Object.defineProperty(exports, "contentTypeRegExp", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeRegExp; } }));
Object.defineProperty(exports, "contentTypeProto", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeProto; } }));
Object.defineProperty(exports, "contentTypeJson", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeJson; } }));
var validate_response_js_1 = __nccwpck_require__(4037);
Object.defineProperty(exports, "validateResponse", ({ enumerable: true, get: function () { return validate_response_js_1.validateResponse; } }));
Object.defineProperty(exports, "validateResponseWithCompression", ({ enumerable: true, get: function () { return validate_response_js_1.validateResponseWithCompression; } }));
var trailer_js_1 = __nccwpck_require__(1496);
Object.defineProperty(exports, "trailerFlag", ({ enumerable: true, get: function () { return trailer_js_1.trailerFlag; } }));
Object.defineProperty(exports, "trailerParse", ({ enumerable: true, get: function () { return trailer_js_1.trailerParse; } }));
Object.defineProperty(exports, "trailerSerialize", ({ enumerable: true, get: function () { return trailer_js_1.trailerSerialize; } }));
Object.defineProperty(exports, "createTrailerSerialization", ({ enumerable: true, get: function () { return trailer_js_1.createTrailerSerialization; } }));
var index_js_1 = __nccwpck_require__(3290);
Object.defineProperty(exports, "parseTimeout", ({ enumerable: true, get: function () { return index_js_1.parseTimeout; } }));
Object.defineProperty(exports, "setTrailerStatus", ({ enumerable: true, get: function () { return index_js_1.setTrailerStatus; } }));
Object.defineProperty(exports, "validateTrailer", ({ enumerable: true, get: function () { return index_js_1.validateTrailer; } }));
Object.defineProperty(exports, "grpcStatusOk", ({ enumerable: true, get: function () { return index_js_1.grpcStatusOk; } }));
__exportStar(__nccwpck_require__(1734), exports);


/***/ }),

/***/ 328:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestHeaderWithCompression = exports.requestHeader = void 0;
const headers_js_1 = __nccwpck_require__(1734);
const content_type_js_1 = __nccwpck_require__(6388);
/**
 * Creates headers for a gRPC-web request.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeader(useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    // Note that we do not support the grpc-web-text format.
    // https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2
    result.set(headers_js_1.headerContentType, useBinaryFormat ? content_type_js_1.contentTypeProto : content_type_js_1.contentTypeJson);
    result.set(headers_js_1.headerXGrpcWeb, "1");
    // Note that we do not strictly comply with gRPC user agents.
    // We use "connect-es/1.2.3" where gRPC would use "grpc-es/1.2.3".
    // See https://github.com/grpc/grpc/blob/c462bb8d485fc1434ecfae438823ca8d14cf3154/doc/PROTOCOL-HTTP2.md#user-agents
    result.set(headers_js_1.headerXUserAgent, "connect-es/1.3.0");
    if (setUserAgent) {
        result.set(headers_js_1.headerUserAgent, "connect-es/1.3.0");
    }
    if (timeoutMs !== undefined) {
        result.set(headers_js_1.headerTimeout, `${timeoutMs}m`);
    }
    return result;
}
exports.requestHeader = requestHeader;
/**
 * Creates headers for a gRPC-web request with compression.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeaderWithCompression(useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression, setUserAgent) {
    const result = requestHeader(useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent);
    if (sendCompression != null) {
        result.set(headers_js_1.headerEncoding, sendCompression.name);
    }
    if (acceptCompression.length > 0) {
        result.set(headers_js_1.headerAcceptEncoding, acceptCompression.map((c) => c.name).join(","));
    }
    return result;
}
exports.requestHeaderWithCompression = requestHeaderWithCompression;


/***/ }),

/***/ 1496:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTrailerSerialization = exports.trailerSerialize = exports.trailerParse = exports.trailerFlag = void 0;
/**
 * trailerFlag indicates that the data in a EnvelopedMessage
 * is a set of trailers of the gRPC-web protocol.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.trailerFlag = 0b10000000;
/**
 * Parse a gRPC-web trailer, a set of header fields separated by CRLF.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function trailerParse(data) {
    const headers = new Headers();
    const lines = new TextDecoder().decode(data).split("\r\n");
    for (const line of lines) {
        if (line === "") {
            continue;
        }
        const i = line.indexOf(":");
        if (i > 0) {
            const name = line.substring(0, i).trim();
            const value = line.substring(i + 1).trim();
            headers.append(name, value);
        }
    }
    return headers;
}
exports.trailerParse = trailerParse;
/**
 * Serialize a Headers object as a gRPC-web trailer.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function trailerSerialize(trailer) {
    const lines = [];
    trailer.forEach((value, key) => {
        lines.push(`${key}: ${value}\r\n`);
    });
    return new TextEncoder().encode(lines.join(""));
}
exports.trailerSerialize = trailerSerialize;
/**
 * Create a Serialization object that serializes a gRPC-web trailer, a Headers
 * object that is serialized as a set of header fields, separated by CRLF.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createTrailerSerialization() {
    return {
        serialize: trailerSerialize,
        parse: trailerParse,
    };
}
exports.createTrailerSerialization = createTrailerSerialization;


/***/ }),

/***/ 3372:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTransport = void 0;
const validate_trailer_js_1 = __nccwpck_require__(6694);
const request_header_js_1 = __nccwpck_require__(328);
const validate_response_js_1 = __nccwpck_require__(4037);
const trailer_js_1 = __nccwpck_require__(1496);
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
const async_iterable_js_1 = __nccwpck_require__(4285);
const create_method_url_js_1 = __nccwpck_require__(6490);
const run_call_js_1 = __nccwpck_require__(5733);
const serialization_js_1 = __nccwpck_require__(3263);
const context_values_js_1 = __nccwpck_require__(4801);
/**
 * Create a Transport for the gRPC-web protocol.
 */
function createTransport(opt) {
    return {
        async unary(service, method, signal, timeoutMs, header, message, contextValues) {
            const serialization = (0, serialization_js_1.createMethodSerializationLookup)(method, opt.binaryOptions, opt.jsonOptions, opt);
            timeoutMs =
                timeoutMs === undefined
                    ? opt.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return await (0, run_call_js_1.runUnaryCall)({
                interceptors: opt.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: false,
                    service,
                    method,
                    url: (0, create_method_url_js_1.createMethodUrl)(opt.baseUrl, service, method),
                    init: {},
                    header: (0, request_header_js_1.requestHeaderWithCompression)(opt.useBinaryFormat, timeoutMs, header, opt.acceptCompression, opt.sendCompression, true),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, context_values_js_1.createContextValues)(),
                    message,
                },
                next: async (req) => {
                    const uRes = await opt.httpClient({
                        url: req.url,
                        method: "POST",
                        header: req.header,
                        signal: req.signal,
                        body: (0, async_iterable_js_1.pipe)((0, async_iterable_js_1.createAsyncIterable)([req.message]), (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getI(opt.useBinaryFormat)), (0, async_iterable_js_1.transformCompressEnvelope)(opt.sendCompression, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), {
                            propagateDownStreamError: true,
                        }),
                    });
                    const { compression } = (0, validate_response_js_1.validateResponseWithCompression)(opt.acceptCompression, uRes.status, uRes.header);
                    const { trailer, message } = await (0, async_iterable_js_1.pipeTo)(uRes.body, (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression !== null && compression !== void 0 ? compression : null, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getO(opt.useBinaryFormat), trailer_js_1.trailerFlag, (0, trailer_js_1.createTrailerSerialization)()), async (iterable) => {
                        var _a, e_1, _b, _c;
                        let message;
                        let trailer;
                        try {
                            for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a; _d = true) {
                                _c = iterable_1_1.value;
                                _d = false;
                                const env = _c;
                                if (env.end) {
                                    if (trailer !== undefined) {
                                        throw new connect_error_js_1.ConnectError("protocol error: received extra trailer", code_js_1.Code.InvalidArgument);
                                    }
                                    trailer = env.value;
                                }
                                else {
                                    if (message !== undefined) {
                                        throw new connect_error_js_1.ConnectError("protocol error: received extra output message for unary method", code_js_1.Code.InvalidArgument);
                                    }
                                    message = env.value;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return { trailer, message };
                    }, {
                        propagateDownStreamError: false,
                    });
                    if (trailer === undefined) {
                        throw new connect_error_js_1.ConnectError("protocol error: missing trailer", code_js_1.Code.InvalidArgument);
                    }
                    (0, validate_trailer_js_1.validateTrailer)(trailer, uRes.header);
                    if (message === undefined) {
                        throw new connect_error_js_1.ConnectError("protocol error: missing output message for unary method", code_js_1.Code.InvalidArgument);
                    }
                    return {
                        stream: false,
                        service,
                        method,
                        header: uRes.header,
                        message,
                        trailer,
                    };
                },
            });
        },
        async stream(service, method, signal, timeoutMs, header, input, contextValues) {
            const serialization = (0, serialization_js_1.createMethodSerializationLookup)(method, opt.binaryOptions, opt.jsonOptions, opt);
            timeoutMs =
                timeoutMs === undefined
                    ? opt.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return (0, run_call_js_1.runStreamingCall)({
                interceptors: opt.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: true,
                    service,
                    method,
                    url: (0, create_method_url_js_1.createMethodUrl)(opt.baseUrl, service, method),
                    init: {
                        method: "POST",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: (0, request_header_js_1.requestHeaderWithCompression)(opt.useBinaryFormat, timeoutMs, header, opt.acceptCompression, opt.sendCompression, true),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, context_values_js_1.createContextValues)(),
                    message: input,
                },
                next: async (req) => {
                    const uRes = await opt.httpClient({
                        url: req.url,
                        method: "POST",
                        header: req.header,
                        signal: req.signal,
                        body: (0, async_iterable_js_1.pipe)(req.message, (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getI(opt.useBinaryFormat)), (0, async_iterable_js_1.transformCompressEnvelope)(opt.sendCompression, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), { propagateDownStreamError: true }),
                    });
                    const { compression, foundStatus } = (0, validate_response_js_1.validateResponseWithCompression)(opt.acceptCompression, uRes.status, uRes.header);
                    const res = Object.assign(Object.assign({}, req), { header: uRes.header, trailer: new Headers(), message: (0, async_iterable_js_1.pipe)(uRes.body, (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression !== null && compression !== void 0 ? compression : null, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getO(opt.useBinaryFormat), trailer_js_1.trailerFlag, (0, trailer_js_1.createTrailerSerialization)()), function (iterable) {
                            return __asyncGenerator(this, arguments, function* () {
                                var _a, e_2, _b, _c;
                                if (foundStatus) {
                                    // A grpc-status: 0 response header was present. This is a "trailers-only"
                                    // response (a response without a body and no trailers).
                                    //
                                    // The spec seems to disallow a trailers-only response for status 0 - we are
                                    // lenient and only verify that the body is empty.
                                    //
                                    // > [...] Trailers-Only is permitted for calls that produce an immediate error.
                                    // See https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
                                    const r = yield __await(iterable[Symbol.asyncIterator]().next());
                                    if (r.done !== true) {
                                        throw new connect_error_js_1.ConnectError("protocol error: extra data for trailers-only", code_js_1.Code.InvalidArgument);
                                    }
                                    return yield __await(void 0);
                                }
                                let trailerReceived = false;
                                try {
                                    for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield __await(iterable_2.next()), _a = iterable_2_1.done, !_a; _d = true) {
                                        _c = iterable_2_1.value;
                                        _d = false;
                                        const chunk = _c;
                                        if (chunk.end) {
                                            if (trailerReceived) {
                                                throw new connect_error_js_1.ConnectError("protocol error: received extra trailer", code_js_1.Code.InvalidArgument);
                                            }
                                            trailerReceived = true;
                                            (0, validate_trailer_js_1.validateTrailer)(chunk.value, uRes.header);
                                            chunk.value.forEach((value, key) => res.trailer.set(key, value));
                                            continue;
                                        }
                                        if (trailerReceived) {
                                            throw new connect_error_js_1.ConnectError("protocol error: received extra message after trailer", code_js_1.Code.InvalidArgument);
                                        }
                                        yield yield __await(chunk.value);
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (!_d && !_a && (_b = iterable_2.return)) yield __await(_b.call(iterable_2));
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                                if (!trailerReceived) {
                                    throw new connect_error_js_1.ConnectError("protocol error: missing trailer", code_js_1.Code.InvalidArgument);
                                }
                            });
                        }, { propagateDownStreamError: true }) });
                    return res;
                },
            });
        },
    };
}
exports.createTransport = createTransport;


/***/ }),

/***/ 4037:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateResponseWithCompression = exports.validateResponse = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const headers_js_1 = __nccwpck_require__(1734);
const http_status_js_1 = __nccwpck_require__(4209);
const trailer_status_js_1 = __nccwpck_require__(2828);
/**
 * Validates response status and header for the gRPC-web protocol.
 *
 * Throws a ConnectError if the header contains an error status,
 * or if the HTTP status indicates an error.
 *
 * Returns an object that indicates whether a gRPC status was found
 * in the response header. In this case, clients can not expect a
 * trailer.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponse(status, headers) {
    var _a;
    // For compatibility with the `grpc-web` package, we treat all HTTP status
    // codes in the 200 range as valid, not just HTTP 200.
    if (status >= 200 && status < 300) {
        const err = (0, trailer_status_js_1.findTrailerError)(headers);
        if (err) {
            throw err;
        }
        return { foundStatus: headers.has(headers_js_1.headerGrpcStatus) };
    }
    throw new connect_error_js_1.ConnectError(decodeURIComponent((_a = headers.get(headers_js_1.headerGrpcMessage)) !== null && _a !== void 0 ? _a : `HTTP ${status}`), (0, http_status_js_1.codeFromHttpStatus)(status), headers);
}
exports.validateResponse = validateResponse;
/**
 * Validates response status and header for the gRPC-web protocol.
 * This function is identical to validateResponse(), but also verifies
 * that a given encoding header is acceptable.
 *
 * Returns an object with the response compression, and a boolean
 * indicating whether a gRPC status was found in the response header
 * (in this case, clients can not expect a trailer).
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponseWithCompression(acceptCompression, status, headers) {
    const { foundStatus } = validateResponse(status, headers);
    let compression;
    const encoding = headers.get(headers_js_1.headerEncoding);
    if (encoding !== null && encoding.toLowerCase() !== "identity") {
        compression = acceptCompression.find((c) => c.name === encoding);
        if (!compression) {
            throw new connect_error_js_1.ConnectError(`unsupported response encoding "${encoding}"`, code_js_1.Code.InvalidArgument, headers);
        }
    }
    return {
        foundStatus,
        compression,
    };
}
exports.validateResponseWithCompression = validateResponseWithCompression;


/***/ }),

/***/ 7695:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseContentType = exports.contentTypeJson = exports.contentTypeProto = exports.contentTypeRegExp = void 0;
/**
 * Regular Expression that matches any valid gRPC Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.contentTypeRegExp = /^application\/grpc(?:\+(?:(json)(?:; ?charset=utf-?8)?|proto))?$/i;
exports.contentTypeProto = "application/grpc+proto";
exports.contentTypeJson = "application/grpc+json";
/**
 * Parse a gRPC Content-Type header.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function parseContentType(contentType) {
    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(exports.contentTypeRegExp);
    if (!match) {
        return undefined;
    }
    const binary = !match[1];
    return { binary };
}
exports.parseContentType = parseContentType;


/***/ }),

/***/ 9306:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Status = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The `Status` type defines a logical error model that is suitable for different
 * programming environments, including REST APIs and RPC APIs. It is used by
 * [gRPC](https://github.com/grpc). The error model is designed to be:
 *
 * - Simple to use and understand for most users
 * - Flexible enough to meet unexpected needs
 *
 * # Overview
 *
 * The `Status` message contains three pieces of data: error code, error message,
 * and error details. The error code should be an enum value of
 * [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The
 * error message should be a developer-facing English message that helps
 * developers *understand* and *resolve* the error. If a localized user-facing
 * error message is needed, put the localized message in the error details or
 * localize it in the client. The optional error details may contain arbitrary
 * information about the error. There is a predefined set of error detail types
 * in the package `google.rpc` which can be used for common error conditions.
 *
 * # Language mapping
 *
 * The `Status` message is the logical representation of the error model, but it
 * is not necessarily the actual wire format. When the `Status` message is
 * exposed in different client libraries and different wire protocols, it can be
 * mapped differently. For example, it will likely be mapped to some exceptions
 * in Java, but more likely mapped to some error codes in C.
 *
 * # Other uses
 *
 * The error model and the `Status` message can be used in a variety of
 * environments, either with or without APIs, to provide a
 * consistent developer experience across different environments.
 *
 * Example uses of this error model include:
 *
 * - Partial errors. If a service needs to return partial errors to the client,
 *     it may embed the `Status` in the normal response to indicate the partial
 *     errors.
 *
 * - Workflow errors. A typical workflow has multiple steps. Each step may
 *     have a `Status` message for error reporting purpose.
 *
 * - Batch operations. If a client uses batch request and batch response, the
 *     `Status` message should be used directly inside batch response, one for
 *     each error sub-response.
 *
 * - Asynchronous operations. If an API call embeds asynchronous operation
 *     results in its response, the status of those operations should be
 *     represented directly using the `Status` message.
 *
 * - Logging. If some API errors are stored in logs, the message `Status` could
 *     be used directly after any stripping needed for security/privacy reasons.
 *
 * @generated from message google.rpc.Status
 */
class Status extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
         *
         * @generated from field: int32 code = 1;
         */
        this.code = 0;
        /**
         * A developer-facing error message, which should be in English. Any
         * user-facing error message should be localized and sent in the
         * [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
         *
         * @generated from field: string message = 2;
         */
        this.message = "";
        /**
         * A list of messages that carry the error details.  There will be a
         * common set of message types for APIs to use.
         *
         * @generated from field: repeated google.protobuf.Any details = 3;
         */
        this.details = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Status().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Status().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Status().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Status, a, b);
    }
}
exports.Status = Status;
Status.runtime = protobuf_1.proto3;
Status.typeName = "google.rpc.Status";
Status.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "details", kind: "message", T: protobuf_1.Any, repeated: true },
]);


/***/ }),

/***/ 6256:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createHandlerFactory = void 0;
const implementation_js_1 = __nccwpck_require__(4021);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const content_type_js_1 = __nccwpck_require__(7695);
const headers_js_1 = __nccwpck_require__(1740);
const trailer_status_js_1 = __nccwpck_require__(2828);
const parse_timeout_js_1 = __nccwpck_require__(4644);
const async_iterable_js_1 = __nccwpck_require__(4285);
const compression_js_1 = __nccwpck_require__(1816);
const content_type_matcher_js_1 = __nccwpck_require__(5331);
const create_method_url_js_1 = __nccwpck_require__(6490);
const invoke_implementation_js_1 = __nccwpck_require__(7049);
const serialization_js_1 = __nccwpck_require__(3263);
const universal_handler_js_1 = __nccwpck_require__(3235);
const universal_js_1 = __nccwpck_require__(19);
const protocolName = "grpc";
const methodPost = "POST";
/**
 * Create a factory that creates gRPC handlers.
 */
function createHandlerFactory(options) {
    const opt = (0, universal_handler_js_1.validateUniversalHandlerOptions)(options);
    function fact(spec) {
        const h = createHandler(opt, spec);
        return Object.assign(h, {
            protocolNames: [protocolName],
            allowedMethods: [methodPost],
            supportedContentType: (0, content_type_matcher_js_1.contentTypeMatcher)(content_type_js_1.contentTypeRegExp),
            requestPath: (0, create_method_url_js_1.createMethodUrl)("/", spec.service, spec.method),
            service: spec.service,
            method: spec.method,
        });
    }
    fact.protocolName = protocolName;
    return fact;
}
exports.createHandlerFactory = createHandlerFactory;
function createHandler(opt, spec) {
    const serialization = (0, serialization_js_1.createMethodSerializationLookup)(spec.method, opt.binaryOptions, opt.jsonOptions, opt);
    return async function handle(req) {
        (0, universal_js_1.assertByteStreamRequest)(req);
        const type = (0, content_type_js_1.parseContentType)(req.header.get(headers_js_1.headerContentType));
        if (type == undefined) {
            return universal_js_1.uResponseUnsupportedMediaType;
        }
        if (req.method !== methodPost) {
            return universal_js_1.uResponseMethodNotAllowed;
        }
        const timeout = (0, parse_timeout_js_1.parseTimeout)(req.header.get(headers_js_1.headerTimeout), opt.maxTimeoutMs);
        const context = (0, implementation_js_1.createHandlerContext)(Object.assign(Object.assign({}, spec), { requestMethod: req.method, protocolName, timeoutMs: timeout.timeoutMs, shutdownSignal: opt.shutdownSignal, requestSignal: req.signal, requestHeader: req.header, responseHeader: {
                [headers_js_1.headerContentType]: type.binary ? content_type_js_1.contentTypeProto : content_type_js_1.contentTypeJson,
            }, responseTrailer: {
                [headers_js_1.headerGrpcStatus]: trailer_status_js_1.grpcStatusOk,
            }, contextValues: req.contextValues }));
        const compression = (0, compression_js_1.compressionNegotiate)(opt.acceptCompression, req.header.get(headers_js_1.headerEncoding), req.header.get(headers_js_1.headerAcceptEncoding), headers_js_1.headerAcceptEncoding);
        if (compression.response) {
            context.responseHeader.set(headers_js_1.headerEncoding, compression.response.name);
        }
        // We split the pipeline into two parts: The request iterator, and the
        // response iterator. We do this because the request iterator is responsible
        // for parsing the request body, and we don't want write errors of the response
        // iterator to affect the request iterator.
        const inputIt = (0, async_iterable_js_1.pipe)(req.body, (0, async_iterable_js_1.transformPrepend)(() => {
            // raise compression error to serialize it as a trailer status
            if (compression.error)
                throw compression.error;
            // raise timeout parsing error to serialize it as a trailer status
            if (timeout.error)
                throw timeout.error;
            return undefined;
        }), (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression.request, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getI(type.binary)));
        const it = (0, invoke_implementation_js_1.transformInvokeImplementation)(spec, context)(inputIt)[Symbol.asyncIterator]();
        const outputIt = (0, async_iterable_js_1.pipe)(
        // We wrap the iterator in an async iterator to ensure that the
        // abort signal is aborted when the iterator is done.
        {
            [Symbol.asyncIterator]() {
                return {
                    next: () => it.next(),
                    throw: (e) => {
                        var _a, _b;
                        context.abort(e);
                        return (_b = (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, e)) !== null && _b !== void 0 ? _b : Promise.reject({ done: true });
                    },
                    return: (v) => {
                        var _a, _b;
                        context.abort();
                        return ((_b = (_a = it.return) === null || _a === void 0 ? void 0 : _a.call(it, v)) !== null && _b !== void 0 ? _b : Promise.resolve({ done: true, value: v }));
                    },
                };
            },
        }, (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getO(type.binary)), (0, async_iterable_js_1.transformCompressEnvelope)(compression.response, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), (0, async_iterable_js_1.transformCatchFinally)((e) => {
            context.abort();
            if (e instanceof connect_error_js_1.ConnectError) {
                (0, trailer_status_js_1.setTrailerStatus)(context.responseTrailer, e);
            }
            else if (e !== undefined) {
                (0, trailer_status_js_1.setTrailerStatus)(context.responseTrailer, new connect_error_js_1.ConnectError("internal error", code_js_1.Code.Internal, undefined, undefined, e));
            }
        }), { propagateDownStreamError: true });
        return Object.assign(Object.assign({}, universal_js_1.uResponseOk), { 
            // We wait for the first response body bytes before resolving, so that
            // implementations have a chance to add headers before an adapter commits
            // them to the wire.
            body: await (0, async_iterable_js_1.untilFirst)(outputIt), header: context.responseHeader, trailer: context.responseTrailer });
    };
}


/***/ }),

/***/ 1740:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.headerUserAgent = exports.headerMessageType = exports.headerStatusDetailsBin = exports.headerGrpcMessage = exports.headerGrpcStatus = exports.headerTimeout = exports.headerAcceptEncoding = exports.headerEncoding = exports.headerContentType = void 0;
/**
 * @private Internal code, does not follow semantic versioning.
 */
exports.headerContentType = "Content-Type";
exports.headerEncoding = "Grpc-Encoding";
exports.headerAcceptEncoding = "Grpc-Accept-Encoding";
exports.headerTimeout = "Grpc-Timeout";
exports.headerGrpcStatus = "Grpc-Status";
exports.headerGrpcMessage = "Grpc-Message";
exports.headerStatusDetailsBin = "Grpc-Status-Details-Bin";
exports.headerMessageType = "Grpc-Message-Type";
exports.headerUserAgent = "User-Agent";


/***/ }),

/***/ 4209:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codeFromHttpStatus = void 0;
const code_js_1 = __nccwpck_require__(8002);
/**
 * Determine the gRPC-web error code for the given HTTP status code.
 * See https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeFromHttpStatus(httpStatus) {
    switch (httpStatus) {
        case 400: // Bad Request
            return code_js_1.Code.Internal;
        case 401: // Unauthorized
            return code_js_1.Code.Unauthenticated;
        case 403: // Forbidden
            return code_js_1.Code.PermissionDenied;
        case 404: // Not Found
            return code_js_1.Code.Unimplemented;
        case 429: // Too Many Requests
            return code_js_1.Code.Unavailable;
        case 502: // Bad Gateway
            return code_js_1.Code.Unavailable;
        case 503: // Service Unavailable
            return code_js_1.Code.Unavailable;
        case 504: // Gateway Timeout
            return code_js_1.Code.Unavailable;
        default:
            // 200 is UNKNOWN because there should be a grpc-status in case of truly OK response.
            return code_js_1.Code.Unknown;
    }
}
exports.codeFromHttpStatus = codeFromHttpStatus;


/***/ }),

/***/ 3290:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateTrailer = exports.validateResponseWithCompression = exports.validateResponse = exports.grpcStatusOk = exports.setTrailerStatus = exports.findTrailerError = exports.parseTimeout = exports.contentTypeProto = exports.contentTypeJson = exports.contentTypeRegExp = exports.parseContentType = exports.requestHeaderWithCompression = exports.requestHeader = exports.codeFromHttpStatus = exports.createTransport = exports.createHandlerFactory = void 0;
var handler_factory_js_1 = __nccwpck_require__(6256);
Object.defineProperty(exports, "createHandlerFactory", ({ enumerable: true, get: function () { return handler_factory_js_1.createHandlerFactory; } }));
var transport_js_1 = __nccwpck_require__(9090);
Object.defineProperty(exports, "createTransport", ({ enumerable: true, get: function () { return transport_js_1.createTransport; } }));
// All exports below are private — internal code that does not follow semantic
// versioning.
// We will try hard to avoid breaking changes, but if you depend on the
// following exports, we recommend that you do so with an exact version
// constraint (no ~ or ^).
var http_status_js_1 = __nccwpck_require__(4209);
Object.defineProperty(exports, "codeFromHttpStatus", ({ enumerable: true, get: function () { return http_status_js_1.codeFromHttpStatus; } }));
var request_header_js_1 = __nccwpck_require__(3521);
Object.defineProperty(exports, "requestHeader", ({ enumerable: true, get: function () { return request_header_js_1.requestHeader; } }));
Object.defineProperty(exports, "requestHeaderWithCompression", ({ enumerable: true, get: function () { return request_header_js_1.requestHeaderWithCompression; } }));
var content_type_js_1 = __nccwpck_require__(7695);
Object.defineProperty(exports, "parseContentType", ({ enumerable: true, get: function () { return content_type_js_1.parseContentType; } }));
Object.defineProperty(exports, "contentTypeRegExp", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeRegExp; } }));
Object.defineProperty(exports, "contentTypeJson", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeJson; } }));
Object.defineProperty(exports, "contentTypeProto", ({ enumerable: true, get: function () { return content_type_js_1.contentTypeProto; } }));
var parse_timeout_js_1 = __nccwpck_require__(4644);
Object.defineProperty(exports, "parseTimeout", ({ enumerable: true, get: function () { return parse_timeout_js_1.parseTimeout; } }));
var trailer_status_js_1 = __nccwpck_require__(2828);
Object.defineProperty(exports, "findTrailerError", ({ enumerable: true, get: function () { return trailer_status_js_1.findTrailerError; } }));
Object.defineProperty(exports, "setTrailerStatus", ({ enumerable: true, get: function () { return trailer_status_js_1.setTrailerStatus; } }));
Object.defineProperty(exports, "grpcStatusOk", ({ enumerable: true, get: function () { return trailer_status_js_1.grpcStatusOk; } }));
var validate_response_js_1 = __nccwpck_require__(7010);
Object.defineProperty(exports, "validateResponse", ({ enumerable: true, get: function () { return validate_response_js_1.validateResponse; } }));
Object.defineProperty(exports, "validateResponseWithCompression", ({ enumerable: true, get: function () { return validate_response_js_1.validateResponseWithCompression; } }));
var validate_trailer_js_1 = __nccwpck_require__(6694);
Object.defineProperty(exports, "validateTrailer", ({ enumerable: true, get: function () { return validate_trailer_js_1.validateTrailer; } }));
__exportStar(__nccwpck_require__(1740), exports);


/***/ }),

/***/ 4644:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseTimeout = void 0;
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
/**
 * Parse a gRPC Timeout (Deadline) header.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function parseTimeout(value, maxTimeoutMs) {
    if (value === null) {
        return {};
    }
    const results = /^(\d{1,8})([HMSmun])$/.exec(value);
    if (results === null) {
        return {
            error: new connect_error_js_1.ConnectError(`protocol error: invalid grpc timeout value: ${value}`, code_js_1.Code.InvalidArgument),
        };
    }
    const unitToMultiplicand = {
        H: 60 * 60 * 1000, // hour
        M: 60 * 1000, // minute
        S: 1000, // second
        m: 1, // millisecond
        u: 0.001, // microsecond
        n: 0.000001, // nanosecond
    };
    const timeoutMs = unitToMultiplicand[results[2]] *
        parseInt(results[1]);
    if (timeoutMs > maxTimeoutMs) {
        return {
            timeoutMs: timeoutMs,
            error: new connect_error_js_1.ConnectError(`timeout ${timeoutMs}ms must be <= ${maxTimeoutMs}`, code_js_1.Code.InvalidArgument),
        };
    }
    return {
        timeoutMs,
    };
}
exports.parseTimeout = parseTimeout;


/***/ }),

/***/ 3521:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.requestHeaderWithCompression = exports.requestHeader = void 0;
const headers_js_1 = __nccwpck_require__(1740);
const content_type_js_1 = __nccwpck_require__(7695);
/**
 * Creates headers for a gRPC request.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeader(useBinaryFormat, timeoutMs, userProvidedHeaders) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    result.set(headers_js_1.headerContentType, useBinaryFormat ? content_type_js_1.contentTypeProto : content_type_js_1.contentTypeJson);
    // Note that we do not strictly comply with gRPC user agents.
    // We use "connect-es/1.2.3" where gRPC would use "grpc-es/1.2.3".
    // See https://github.com/grpc/grpc/blob/c462bb8d485fc1434ecfae438823ca8d14cf3154/doc/PROTOCOL-HTTP2.md#user-agents
    result.set(headers_js_1.headerUserAgent, "connect-es/1.3.0");
    if (timeoutMs !== undefined) {
        result.set(headers_js_1.headerTimeout, `${timeoutMs}m`);
    }
    // The gRPC-HTTP2 specification requires this - it flushes out proxies that
    // don't support HTTP trailers.
    result.set("Te", "trailers");
    return result;
}
exports.requestHeader = requestHeader;
/**
 * Creates headers for a gRPC request with compression.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeaderWithCompression(useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression) {
    const result = requestHeader(useBinaryFormat, timeoutMs, userProvidedHeaders);
    if (sendCompression != null) {
        result.set(headers_js_1.headerEncoding, sendCompression.name);
    }
    if (acceptCompression.length > 0) {
        result.set(headers_js_1.headerAcceptEncoding, acceptCompression.map((c) => c.name).join(","));
    }
    return result;
}
exports.requestHeaderWithCompression = requestHeaderWithCompression;


/***/ }),

/***/ 2828:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findTrailerError = exports.setTrailerStatus = exports.grpcStatusOk = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const status_pb_js_1 = __nccwpck_require__(9306);
const connect_error_js_1 = __nccwpck_require__(786);
const http_headers_js_1 = __nccwpck_require__(1683);
const code_js_1 = __nccwpck_require__(8002);
const headers_js_1 = __nccwpck_require__(1740);
/**
 * The value of the Grpc-Status header or trailer in case of success.
 * Used by the gRPC and gRPC-web protocols.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.grpcStatusOk = "0";
/**
 * Sets the fields "grpc-status" and "grpc-message" in the given
 * Headers object.
 * If an error is given and contains error details, the function
 * will also set the field "grpc-status-details-bin" with an encoded
 * google.rpc.Status message including the error details.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function setTrailerStatus(target, error) {
    if (error) {
        target.set(headers_js_1.headerGrpcStatus, error.code.toString(10));
        target.set(headers_js_1.headerGrpcMessage, encodeURIComponent(error.rawMessage));
        if (error.details.length > 0) {
            const status = new status_pb_js_1.Status({
                code: error.code,
                message: error.rawMessage,
                details: error.details.map((value) => value instanceof protobuf_1.Message
                    ? protobuf_1.Any.pack(value)
                    : new protobuf_1.Any({
                        typeUrl: `type.googleapis.com/${value.type}`,
                        value: value.value,
                    })),
            });
            target.set(headers_js_1.headerStatusDetailsBin, (0, http_headers_js_1.encodeBinaryHeader)(status));
        }
    }
    else {
        target.set(headers_js_1.headerGrpcStatus, exports.grpcStatusOk.toString());
    }
    return target;
}
exports.setTrailerStatus = setTrailerStatus;
/**
 * Find an error status in the given Headers object, which can be either
 * a trailer, or a header (as allowed for so-called trailers-only responses).
 * The field "grpc-status-details-bin" is inspected, and if not present,
 * the fields "grpc-status" and "grpc-message" are used.
 * Returns an error only if the gRPC status code is > 0.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function findTrailerError(headerOrTrailer) {
    // TODO
    // let code: Code;
    // let message: string = "";
    var _a;
    // Prefer the protobuf-encoded data to the grpc-status header.
    const statusBytes = headerOrTrailer.get(headers_js_1.headerStatusDetailsBin);
    if (statusBytes != null) {
        const status = (0, http_headers_js_1.decodeBinaryHeader)(statusBytes, status_pb_js_1.Status);
        if (status.code == 0) {
            return undefined;
        }
        const error = new connect_error_js_1.ConnectError(status.message, status.code, headerOrTrailer);
        error.details = status.details.map((any) => ({
            type: any.typeUrl.substring(any.typeUrl.lastIndexOf("/") + 1),
            value: any.value,
        }));
        return error;
    }
    const grpcStatus = headerOrTrailer.get(headers_js_1.headerGrpcStatus);
    if (grpcStatus != null) {
        if (grpcStatus === exports.grpcStatusOk) {
            return undefined;
        }
        const code = parseInt(grpcStatus, 10);
        if (code in code_js_1.Code) {
            return new connect_error_js_1.ConnectError(decodeURIComponent((_a = headerOrTrailer.get(headers_js_1.headerGrpcMessage)) !== null && _a !== void 0 ? _a : ""), code, headerOrTrailer);
        }
        return new connect_error_js_1.ConnectError(`invalid grpc-status: ${grpcStatus}`, code_js_1.Code.Internal, headerOrTrailer);
    }
    return undefined;
}
exports.findTrailerError = findTrailerError;


/***/ }),

/***/ 9090:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTransport = void 0;
const request_header_js_1 = __nccwpck_require__(3521);
const validate_response_js_1 = __nccwpck_require__(7010);
const validate_trailer_js_1 = __nccwpck_require__(6694);
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
const async_iterable_js_1 = __nccwpck_require__(4285);
const create_method_url_js_1 = __nccwpck_require__(6490);
const run_call_js_1 = __nccwpck_require__(5733);
const serialization_js_1 = __nccwpck_require__(3263);
const context_values_js_1 = __nccwpck_require__(4801);
/**
 * Create a Transport for the gRPC protocol.
 */
function createTransport(opt) {
    return {
        async unary(service, method, signal, timeoutMs, header, message, contextValues) {
            const serialization = (0, serialization_js_1.createMethodSerializationLookup)(method, opt.binaryOptions, opt.jsonOptions, opt);
            timeoutMs =
                timeoutMs === undefined
                    ? opt.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return await (0, run_call_js_1.runUnaryCall)({
                interceptors: opt.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: false,
                    service,
                    method,
                    url: (0, create_method_url_js_1.createMethodUrl)(opt.baseUrl, service, method),
                    init: {},
                    header: (0, request_header_js_1.requestHeaderWithCompression)(opt.useBinaryFormat, timeoutMs, header, opt.acceptCompression, opt.sendCompression),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, context_values_js_1.createContextValues)(),
                    message,
                },
                next: async (req) => {
                    const uRes = await opt.httpClient({
                        url: req.url,
                        method: "POST",
                        header: req.header,
                        signal: req.signal,
                        body: (0, async_iterable_js_1.pipe)((0, async_iterable_js_1.createAsyncIterable)([req.message]), (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getI(opt.useBinaryFormat)), (0, async_iterable_js_1.transformCompressEnvelope)(opt.sendCompression, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), {
                            propagateDownStreamError: true,
                        }),
                    });
                    const { compression } = (0, validate_response_js_1.validateResponseWithCompression)(opt.acceptCompression, uRes.status, uRes.header);
                    const message = await (0, async_iterable_js_1.pipeTo)(uRes.body, (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression !== null && compression !== void 0 ? compression : null, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getO(opt.useBinaryFormat)), async (iterable) => {
                        var _a, e_1, _b, _c;
                        let message;
                        try {
                            for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a; _d = true) {
                                _c = iterable_1_1.value;
                                _d = false;
                                const chunk = _c;
                                if (message !== undefined) {
                                    throw new connect_error_js_1.ConnectError("protocol error: received extra output message for unary method", code_js_1.Code.InvalidArgument);
                                }
                                message = chunk;
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return message;
                    }, { propagateDownStreamError: false });
                    (0, validate_trailer_js_1.validateTrailer)(uRes.trailer, uRes.header);
                    if (message === undefined) {
                        throw new connect_error_js_1.ConnectError("protocol error: missing output message for unary method", code_js_1.Code.InvalidArgument);
                    }
                    return {
                        stream: false,
                        service,
                        method,
                        header: uRes.header,
                        message,
                        trailer: uRes.trailer,
                    };
                },
            });
        },
        async stream(service, method, signal, timeoutMs, header, input, contextValues) {
            const serialization = (0, serialization_js_1.createMethodSerializationLookup)(method, opt.binaryOptions, opt.jsonOptions, opt);
            timeoutMs =
                timeoutMs === undefined
                    ? opt.defaultTimeoutMs
                    : timeoutMs <= 0
                        ? undefined
                        : timeoutMs;
            return (0, run_call_js_1.runStreamingCall)({
                interceptors: opt.interceptors,
                signal,
                timeoutMs,
                req: {
                    stream: true,
                    service,
                    method,
                    url: (0, create_method_url_js_1.createMethodUrl)(opt.baseUrl, service, method),
                    init: {},
                    header: (0, request_header_js_1.requestHeaderWithCompression)(opt.useBinaryFormat, timeoutMs, header, opt.acceptCompression, opt.sendCompression),
                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : (0, context_values_js_1.createContextValues)(),
                    message: input,
                },
                next: async (req) => {
                    const uRes = await opt.httpClient({
                        url: req.url,
                        method: "POST",
                        header: req.header,
                        signal: req.signal,
                        body: (0, async_iterable_js_1.pipe)(req.message, (0, async_iterable_js_1.transformSerializeEnvelope)(serialization.getI(opt.useBinaryFormat)), (0, async_iterable_js_1.transformCompressEnvelope)(opt.sendCompression, opt.compressMinBytes), (0, async_iterable_js_1.transformJoinEnvelopes)(), { propagateDownStreamError: true }),
                    });
                    const { compression, foundStatus } = (0, validate_response_js_1.validateResponseWithCompression)(opt.acceptCompression, uRes.status, uRes.header);
                    const res = Object.assign(Object.assign({}, req), { header: uRes.header, trailer: uRes.trailer, message: (0, async_iterable_js_1.pipe)(uRes.body, (0, async_iterable_js_1.transformSplitEnvelope)(opt.readMaxBytes), (0, async_iterable_js_1.transformDecompressEnvelope)(compression !== null && compression !== void 0 ? compression : null, opt.readMaxBytes), (0, async_iterable_js_1.transformParseEnvelope)(serialization.getO(opt.useBinaryFormat)), function (iterable) {
                            return __asyncGenerator(this, arguments, function* () {
                                yield __await(yield* __asyncDelegator(__asyncValues(iterable)));
                                if (!foundStatus) {
                                    (0, validate_trailer_js_1.validateTrailer)(uRes.trailer, uRes.header);
                                }
                            });
                        }, { propagateDownStreamError: true }) });
                    return res;
                },
            });
        },
    };
}
exports.createTransport = createTransport;


/***/ }),

/***/ 7010:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateResponseWithCompression = exports.validateResponse = void 0;
const http_status_js_1 = __nccwpck_require__(4209);
const connect_error_js_1 = __nccwpck_require__(786);
const trailer_status_js_1 = __nccwpck_require__(2828);
const code_js_1 = __nccwpck_require__(8002);
const headers_js_1 = __nccwpck_require__(1740);
/**
 * Validates response status and header for the gRPC protocol.
 * Throws a ConnectError if the header contains an error status,
 * or if the HTTP status indicates an error.
 *
 * Returns an object that indicates whether a gRPC status was found
 * in the response header. In this case, clients can not expect a
 * trailer.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponse(status, headers) {
    if (status != 200) {
        throw new connect_error_js_1.ConnectError(`HTTP ${status}`, (0, http_status_js_1.codeFromHttpStatus)(status), headers);
    }
    const err = (0, trailer_status_js_1.findTrailerError)(headers);
    if (err) {
        throw err;
    }
    return { foundStatus: headers.has(headers_js_1.headerGrpcStatus) };
}
exports.validateResponse = validateResponse;
/**
 * Validates response status and header for the gRPC protocol.
 * This function is identical to validateResponse(), but also verifies
 * that a given encoding header is acceptable.
 *
 * Returns an object with the response compression, and a boolean
 * indicating whether a gRPC status was found in the response header
 * (in this case, clients can not expect a trailer).
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponseWithCompression(acceptCompression, status, headers) {
    const { foundStatus } = validateResponse(status, headers);
    let compression;
    const encoding = headers.get(headers_js_1.headerEncoding);
    if (encoding !== null && encoding.toLowerCase() !== "identity") {
        compression = acceptCompression.find((c) => c.name === encoding);
        if (!compression) {
            throw new connect_error_js_1.ConnectError(`unsupported response encoding "${encoding}"`, code_js_1.Code.InvalidArgument, headers);
        }
    }
    return {
        foundStatus,
        compression,
    };
}
exports.validateResponseWithCompression = validateResponseWithCompression;


/***/ }),

/***/ 6694:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateTrailer = void 0;
const trailer_status_js_1 = __nccwpck_require__(2828);
/**
 * Validates a trailer for the gRPC and the gRPC-web protocol.
 * Throws a ConnectError if the trailer contains an error status.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateTrailer(trailer, header) {
    const err = (0, trailer_status_js_1.findTrailerError)(trailer);
    if (err) {
        header.forEach((value, key) => {
            err.metadata.append(key, value);
        });
        throw err;
    }
}
exports.validateTrailer = validateTrailer;


/***/ }),

/***/ 4285:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createAsyncIterable = exports.createWritableIterable = exports.makeIterableAbortable = exports.untilFirst = exports.readAllBytes = exports.transformSplitEnvelope = exports.transformJoinEnvelopes = exports.transformDecompressEnvelope = exports.transformCompressEnvelope = exports.transformParseEnvelope = exports.transformSerializeEnvelope = exports.transformReadAllBytes = exports.transformPrepend = exports.transformAppend = exports.transformCatchFinally = exports.transformCatch = exports.pipe = exports.sinkAllBytes = exports.sinkAll = exports.pipeTo = void 0;
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
const envelope_js_1 = __nccwpck_require__(2999);
const limit_io_js_1 = __nccwpck_require__(2279);
function pipeTo(source, ...rest) {
    const [transforms, sink, opt] = pickTransformsAndSink(rest);
    let iterable = source;
    let abortable;
    if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {
        iterable = abortable = makeIterableAbortable(iterable);
    }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    iterable = pipe(iterable, ...transforms, { propagateDownStreamError: false });
    return sink(iterable).catch((reason) => {
        if (abortable) {
            return abortable.abort(reason).then(() => Promise.reject(reason));
        }
        return Promise.reject(reason);
    });
}
exports.pipeTo = pipeTo;
// pick transforms, the sink, and options from the pipeTo() rest parameter
function pickTransformsAndSink(rest) {
    let opt;
    if (typeof rest[rest.length - 1] != "function") {
        opt = rest.pop();
    }
    const sink = rest.pop();
    return [rest, sink, opt];
}
/**
 * Creates an AsyncIterableSink that concatenates all elements from the input.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function sinkAll() {
    return async function (iterable) {
        var _a, e_1, _b, _c;
        const all = [];
        try {
            for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a; _d = true) {
                _c = iterable_1_1.value;
                _d = false;
                const chunk = _c;
                all.push(chunk);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return all;
    };
}
exports.sinkAll = sinkAll;
/**
 * Creates an AsyncIterableSink that concatenates all chunks from the input into
 * a single Uint8Array.
 *
 * The iterable raises an error if the more than readMaxBytes are read.
 *
 * An optional length hint can be provided to optimize allocation and validation.
 * If more or less bytes are present in the source that the length hint indicates,
 * and error is raised.
 * If the length hint is larger than readMaxBytes, an error is raised.
 * If the length hint is not a positive integer, it is ignored.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function sinkAllBytes(readMaxBytes, lengthHint) {
    return async function (iterable) {
        return await readAllBytes(iterable, readMaxBytes, lengthHint);
    };
}
exports.sinkAllBytes = sinkAllBytes;
function pipe(source, ...rest) {
    var _a;
    return __asyncGenerator(this, arguments, function* pipe_1() {
        const [transforms, opt] = pickTransforms(rest);
        let abortable;
        const sourceIt = source[Symbol.asyncIterator]();
        const cachedSource = {
            [Symbol.asyncIterator]() {
                return sourceIt;
            },
        };
        let iterable = cachedSource;
        if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {
            iterable = abortable = makeIterableAbortable(iterable);
        }
        for (const t of transforms) {
            iterable = t(iterable);
        }
        const it = iterable[Symbol.asyncIterator]();
        try {
            for (;;) {
                const r = yield __await(it.next());
                if (r.done === true) {
                    break;
                }
                if (!abortable) {
                    yield yield __await(r.value);
                    continue;
                }
                try {
                    yield yield __await(r.value);
                }
                catch (e) {
                    yield __await(abortable.abort(e)); // propagate downstream error to the source
                    throw e;
                }
            }
        }
        finally {
            if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {
                // Call return on the source iterable to indicate
                // that we will no longer consume it and it should
                // cleanup any allocated resources.
                (_a = sourceIt.return) === null || _a === void 0 ? void 0 : _a.call(sourceIt).catch(() => {
                    // return returns a promise, which we don't care about.
                    //
                    // Uncaught promises are thrown at sometime/somewhere by the event loop,
                    // this is to ensure error is caught and ignored.
                });
            }
        }
    });
}
exports.pipe = pipe;
function pickTransforms(rest) {
    let opt;
    if (typeof rest[rest.length - 1] != "function") {
        opt = rest.pop();
    }
    return [rest, opt];
}
/**
 * Creates an AsyncIterableTransform that catches any error from the input, and
 * passes it to the given catchError function.
 *
 * The catchError function may return a final value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformCatch(catchError) {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            // we deliberate avoid a for-await loop because we only want to catch upstream
            // errors, not downstream errors (yield).
            const it = iterable[Symbol.asyncIterator]();
            for (;;) {
                let r;
                try {
                    r = yield __await(it.next());
                }
                catch (e) {
                    const caught = yield __await(catchError(e));
                    if (caught !== undefined) {
                        yield yield __await(caught);
                    }
                    break;
                }
                if (r.done === true) {
                    break;
                }
                yield yield __await(r.value);
            }
        });
    };
}
exports.transformCatch = transformCatch;
/**
 * Creates an AsyncIterableTransform that catches any error from the input, and
 * passes it to the given function. Unlike transformCatch(), the given function
 * is also called when no error is raised.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformCatchFinally(catchFinally) {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            // we deliberate avoid a for-await loop because we only want to catch upstream
            // errors, not downstream errors (yield).
            let err;
            const it = iterable[Symbol.asyncIterator]();
            for (;;) {
                let r;
                try {
                    r = yield __await(it.next());
                }
                catch (e) {
                    err = e;
                    break;
                }
                if (r.done === true) {
                    break;
                }
                yield yield __await(r.value);
            }
            const caught = yield __await(catchFinally(err));
            if (caught !== undefined) {
                yield yield __await(caught);
            }
        });
    };
}
exports.transformCatchFinally = transformCatchFinally;
/**
 * Creates an AsyncIterableTransform that appends a value.
 *
 * The element to append is provided by a function. If the function returns
 * undefined, no element is appended.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformAppend(provide) {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield __await(iterable_2.next()), _a = iterable_2_1.done, !_a; _d = true) {
                    _c = iterable_2_1.value;
                    _d = false;
                    const chunk = _c;
                    yield yield __await(chunk);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_2.return)) yield __await(_b.call(iterable_2));
                }
                finally { if (e_2) throw e_2.error; }
            }
            const append = yield __await(provide());
            if (append !== undefined) {
                yield yield __await(append);
            }
        });
    };
}
exports.transformAppend = transformAppend;
/**
 * Creates an AsyncIterableTransform that prepends an element.
 *
 * The element to prepend is provided by a function. If the function returns
 * undefined, no element is appended.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformPrepend(provide) {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_3, _b, _c;
            const prepend = yield __await(provide());
            if (prepend !== undefined) {
                yield yield __await(prepend);
            }
            try {
                for (var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield __await(iterable_3.next()), _a = iterable_3_1.done, !_a; _d = true) {
                    _c = iterable_3_1.value;
                    _d = false;
                    const chunk = _c;
                    yield yield __await(chunk);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_3.return)) yield __await(_b.call(iterable_3));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    };
}
exports.transformPrepend = transformPrepend;
/**
 * Creates an AsyncIterableTransform that reads all bytes from the input, and
 * concatenates them to a single Uint8Array.
 *
 * The iterable raises an error if the more than readMaxBytes are read.
 *
 * An optional length hint can be provided to optimize allocation and validation.
 * If more or less bytes are present in the source that the length hint indicates,
 * and error is raised.
 * If the length hint is larger than readMaxBytes, an error is raised.
 * If the length hint is not a positive integer, it is ignored.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformReadAllBytes(readMaxBytes, lengthHint) {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            yield yield __await(yield __await(readAllBytes(iterable, readMaxBytes, lengthHint)));
        });
    };
}
exports.transformReadAllBytes = transformReadAllBytes;
function transformSerializeEnvelope(serialization, endStreamFlag, endSerialization) {
    if (endStreamFlag === undefined || endSerialization === undefined) {
        return function (iterable) {
            return __asyncGenerator(this, arguments, function* () {
                var _a, e_4, _b, _c;
                try {
                    for (var _d = true, iterable_4 = __asyncValues(iterable), iterable_4_1; iterable_4_1 = yield __await(iterable_4.next()), _a = iterable_4_1.done, !_a; _d = true) {
                        _c = iterable_4_1.value;
                        _d = false;
                        const chunk = _c;
                        const data = serialization.serialize(chunk);
                        yield yield __await({ flags: 0, data });
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (!_d && !_a && (_b = iterable_4.return)) yield __await(_b.call(iterable_4));
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            });
        };
    }
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, iterable_5 = __asyncValues(iterable), iterable_5_1; iterable_5_1 = yield __await(iterable_5.next()), _a = iterable_5_1.done, !_a; _d = true) {
                    _c = iterable_5_1.value;
                    _d = false;
                    const chunk = _c;
                    let data;
                    let flags = 0;
                    if (chunk.end) {
                        flags = flags | endStreamFlag;
                        data = endSerialization.serialize(chunk.value);
                    }
                    else {
                        data = serialization.serialize(chunk.value);
                    }
                    yield yield __await({ flags, data });
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_5.return)) yield __await(_b.call(iterable_5));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    };
}
exports.transformSerializeEnvelope = transformSerializeEnvelope;
function transformParseEnvelope(serialization, endStreamFlag, endSerialization) {
    // code path always yields ParsedEnvelopedMessage<T, E>
    if (endSerialization && endStreamFlag !== undefined) {
        return function (iterable) {
            return __asyncGenerator(this, arguments, function* () {
                var _a, e_6, _b, _c;
                try {
                    for (var _d = true, iterable_6 = __asyncValues(iterable), iterable_6_1; iterable_6_1 = yield __await(iterable_6.next()), _a = iterable_6_1.done, !_a; _d = true) {
                        _c = iterable_6_1.value;
                        _d = false;
                        const { flags, data } = _c;
                        if ((flags & endStreamFlag) === endStreamFlag) {
                            yield yield __await({ value: endSerialization.parse(data), end: true });
                        }
                        else {
                            yield yield __await({ value: serialization.parse(data), end: false });
                        }
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (!_d && !_a && (_b = iterable_6.return)) yield __await(_b.call(iterable_6));
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            });
        };
    }
    // code path always yields T
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_7, _b, _c;
            try {
                for (var _d = true, iterable_7 = __asyncValues(iterable), iterable_7_1; iterable_7_1 = yield __await(iterable_7.next()), _a = iterable_7_1.done, !_a; _d = true) {
                    _c = iterable_7_1.value;
                    _d = false;
                    const { flags, data } = _c;
                    if (endStreamFlag !== undefined &&
                        (flags & endStreamFlag) === endStreamFlag) {
                        if (endSerialization === null) {
                            throw new connect_error_js_1.ConnectError("unexpected end flag", code_js_1.Code.InvalidArgument);
                        }
                        // skips end-of-stream envelope
                        continue;
                    }
                    yield yield __await(serialization.parse(data));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_7.return)) yield __await(_b.call(iterable_7));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    };
}
exports.transformParseEnvelope = transformParseEnvelope;
/**
 * Creates an AsyncIterableTransform that takes enveloped messages as a source,
 * and compresses them if they are larger than compressMinBytes.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformCompressEnvelope(compression, compressMinBytes) {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_8, _b, _c;
            try {
                for (var _d = true, iterable_8 = __asyncValues(iterable), iterable_8_1; iterable_8_1 = yield __await(iterable_8.next()), _a = iterable_8_1.done, !_a; _d = true) {
                    _c = iterable_8_1.value;
                    _d = false;
                    const env = _c;
                    yield yield __await(yield __await((0, envelope_js_1.envelopeCompress)(env, compression, compressMinBytes)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_8.return)) yield __await(_b.call(iterable_8));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    };
}
exports.transformCompressEnvelope = transformCompressEnvelope;
/**
 * Creates an AsyncIterableTransform that takes enveloped messages as a source,
 * and decompresses them using the given compression.
 *
 * The iterable raises an error if the decompressed payload of an enveloped
 * message is larger than readMaxBytes, or if no compression is provided.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformDecompressEnvelope(compression, readMaxBytes) {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_9, _b, _c;
            try {
                for (var _d = true, iterable_9 = __asyncValues(iterable), iterable_9_1; iterable_9_1 = yield __await(iterable_9.next()), _a = iterable_9_1.done, !_a; _d = true) {
                    _c = iterable_9_1.value;
                    _d = false;
                    const env = _c;
                    yield yield __await(yield __await((0, envelope_js_1.envelopeDecompress)(env, compression, readMaxBytes)));
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_9.return)) yield __await(_b.call(iterable_9));
                }
                finally { if (e_9) throw e_9.error; }
            }
        });
    };
}
exports.transformDecompressEnvelope = transformDecompressEnvelope;
/**
 * Create an AsyncIterableTransform that takes enveloped messages as a source,
 * and joins them into a stream of raw bytes.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformJoinEnvelopes() {
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_10, _b, _c;
            try {
                for (var _d = true, iterable_10 = __asyncValues(iterable), iterable_10_1; iterable_10_1 = yield __await(iterable_10.next()), _a = iterable_10_1.done, !_a; _d = true) {
                    _c = iterable_10_1.value;
                    _d = false;
                    const { flags, data } = _c;
                    yield yield __await((0, envelope_js_1.encodeEnvelope)(flags, data));
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_10.return)) yield __await(_b.call(iterable_10));
                }
                finally { if (e_10) throw e_10.error; }
            }
        });
    };
}
exports.transformJoinEnvelopes = transformJoinEnvelopes;
/**
 * Create an AsyncIterableTransform that takes raw bytes as a source, and splits
 * them into enveloped messages.
 *
 * The iterable raises an error
 * - if the payload of an enveloped message is larger than readMaxBytes,
 * - if the stream ended before an enveloped message fully arrived,
 * - or if the stream ended with extraneous data.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformSplitEnvelope(readMaxBytes) {
    // append chunk to buffer, returning updated buffer
    function append(buffer, chunk) {
        const n = new Uint8Array(buffer.byteLength + chunk.byteLength);
        n.set(buffer);
        n.set(chunk, buffer.length);
        return n;
    }
    // tuple 0: envelope, or undefined if incomplete
    // tuple 1: remainder of the buffer
    function shiftEnvelope(buffer, header) {
        if (buffer.byteLength < 5 + header.length) {
            return [undefined, buffer];
        }
        return [
            { flags: header.flags, data: buffer.subarray(5, 5 + header.length) },
            buffer.subarray(5 + header.length),
        ];
    }
    // undefined: header is incomplete
    function peekHeader(buffer) {
        if (buffer.byteLength < 5) {
            return undefined;
        }
        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        const length = view.getUint32(1); // 4 bytes message length
        const flags = view.getUint8(0); // first byte is flags
        return { length, flags };
    }
    return function (iterable) {
        return __asyncGenerator(this, arguments, function* () {
            var _a, e_11, _b, _c;
            let buffer = new Uint8Array(0);
            try {
                for (var _d = true, iterable_11 = __asyncValues(iterable), iterable_11_1; iterable_11_1 = yield __await(iterable_11.next()), _a = iterable_11_1.done, !_a; _d = true) {
                    _c = iterable_11_1.value;
                    _d = false;
                    const chunk = _c;
                    buffer = append(buffer, chunk);
                    for (;;) {
                        const header = peekHeader(buffer);
                        if (!header) {
                            break;
                        }
                        (0, limit_io_js_1.assertReadMaxBytes)(readMaxBytes, header.length, true);
                        let env;
                        [env, buffer] = shiftEnvelope(buffer, header);
                        if (!env) {
                            break;
                        }
                        yield yield __await(env);
                    }
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_11.return)) yield __await(_b.call(iterable_11));
                }
                finally { if (e_11) throw e_11.error; }
            }
            if (buffer.byteLength > 0) {
                const header = peekHeader(buffer);
                let message = "protocol error: incomplete envelope";
                if (header) {
                    message = `protocol error: promised ${header.length} bytes in enveloped message, got ${buffer.byteLength - 5} bytes`;
                }
                throw new connect_error_js_1.ConnectError(message, code_js_1.Code.InvalidArgument);
            }
        });
    };
}
exports.transformSplitEnvelope = transformSplitEnvelope;
/**
 * Reads all bytes from the source, and concatenates them to a single Uint8Array.
 *
 * Raises an error if:
 * - more than readMaxBytes are read
 * - lengthHint is a positive integer, but larger than readMaxBytes
 * - lengthHint is a positive integer, and the source contains more or less bytes
 *   than promised
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function readAllBytes(iterable, readMaxBytes, lengthHint) {
    var _a, e_12, _b, _c, _d, e_13, _e, _f;
    const [ok, hint] = parseLengthHint(lengthHint);
    if (ok) {
        if (hint > readMaxBytes) {
            (0, limit_io_js_1.assertReadMaxBytes)(readMaxBytes, hint, true);
        }
        const buffer = new Uint8Array(hint);
        let offset = 0;
        try {
            for (var _g = true, iterable_12 = __asyncValues(iterable), iterable_12_1; iterable_12_1 = await iterable_12.next(), _a = iterable_12_1.done, !_a; _g = true) {
                _c = iterable_12_1.value;
                _g = false;
                const chunk = _c;
                if (offset + chunk.byteLength > hint) {
                    throw new connect_error_js_1.ConnectError(`protocol error: promised ${hint} bytes, received ${offset + chunk.byteLength}`, code_js_1.Code.InvalidArgument);
                }
                buffer.set(chunk, offset);
                offset += chunk.byteLength;
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (!_g && !_a && (_b = iterable_12.return)) await _b.call(iterable_12);
            }
            finally { if (e_12) throw e_12.error; }
        }
        if (offset < hint) {
            throw new connect_error_js_1.ConnectError(`protocol error: promised ${hint} bytes, received ${offset}`, code_js_1.Code.InvalidArgument);
        }
        return buffer;
    }
    const chunks = [];
    let count = 0;
    try {
        for (var _h = true, iterable_13 = __asyncValues(iterable), iterable_13_1; iterable_13_1 = await iterable_13.next(), _d = iterable_13_1.done, !_d; _h = true) {
            _f = iterable_13_1.value;
            _h = false;
            const chunk = _f;
            count += chunk.byteLength;
            (0, limit_io_js_1.assertReadMaxBytes)(readMaxBytes, count);
            chunks.push(chunk);
        }
    }
    catch (e_13_1) { e_13 = { error: e_13_1 }; }
    finally {
        try {
            if (!_h && !_d && (_e = iterable_13.return)) await _e.call(iterable_13);
        }
        finally { if (e_13) throw e_13.error; }
    }
    const all = new Uint8Array(count);
    let offset = 0;
    for (let chunk = chunks.shift(); chunk; chunk = chunks.shift()) {
        all.set(chunk, offset);
        offset += chunk.byteLength;
    }
    return all;
}
exports.readAllBytes = readAllBytes;
// parse the lengthHint argument of readAllBytes()
function parseLengthHint(lengthHint) {
    if (lengthHint === undefined || lengthHint === null) {
        return [false, 0];
    }
    const n = typeof lengthHint == "string" ? parseInt(lengthHint, 10) : lengthHint;
    if (!Number.isSafeInteger(n) || n < 0) {
        return [false, n];
    }
    return [true, n];
}
/**
 * Wait for the first element of an iterable without modifying the iterable.
 * This consumes the first element, but pushes it back on the stack.
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function untilFirst(iterable) {
    const it = iterable[Symbol.asyncIterator]();
    let first = await it.next();
    return {
        [Symbol.asyncIterator]() {
            const w = {
                async next() {
                    if (first !== null) {
                        const n = first;
                        first = null;
                        return n;
                    }
                    return await it.next();
                },
            };
            if (it.throw !== undefined) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- can't handle mutated object sensibly
                w.throw = (e) => it.throw(e);
            }
            if (it.return !== undefined) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-explicit-any -- can't handle mutated object sensibly
                w.return = (value) => it.return(value);
            }
            return w;
        },
    };
}
exports.untilFirst = untilFirst;
/**
 * Wrap the given iterable and return an iterable with an abort() method.
 *
 * This function exists purely for convenience. Where one would typically have
 * to access the iterator directly, advance through all elements, and call
 * AsyncIterator.throw() to notify the upstream iterable, this function allows
 * to use convenient for-await loops and still notify the upstream iterable:
 *
 * ```ts
 * const abortable = makeIterableAbortable(iterable);
 * for await (const ele of abortable) {
 *   await abortable.abort("ERR");
 * }
 * ```
 * There are a couple of limitations of this function:
 * - the given async iterable must implement throw
 * - the async iterable cannot be re-use
 * - if source catches errors and yields values for them, they are ignored, and
 *   the source may still dangle
 *
 * There are four possible ways an async function* can handle yield errors:
 * 1. don't catch errors at all - Abortable.abort() will resolve "rethrown"
 * 2. catch errors and rethrow - Abortable.abort() will resolve "rethrown"
 * 3. catch errors and return - Abortable.abort() will resolve "completed"
 * 4. catch errors and yield a value - Abortable.abort() will resolve "caught"
 *
 * Note that catching errors and yielding a value is problematic, and it should
 * be documented that this may leave the source in a dangling state.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function makeIterableAbortable(iterable) {
    const innerCandidate = iterable[Symbol.asyncIterator]();
    if (innerCandidate.throw === undefined) {
        throw new Error("AsyncIterable does not implement throw");
    }
    const inner = innerCandidate;
    let aborted;
    let resultPromise;
    let it = {
        next() {
            resultPromise = inner.next().finally(() => {
                resultPromise = undefined;
            });
            return resultPromise;
        },
        throw(e) {
            return inner.throw(e);
        },
    };
    if (innerCandidate.return !== undefined) {
        it = Object.assign(Object.assign({}, it), { return(value) {
                return inner.return(value);
            } });
    }
    let used = false;
    return {
        abort(reason) {
            if (aborted) {
                return aborted.state;
            }
            const f = () => {
                return inner.throw(reason).then((r) => (r.done === true ? "completed" : "caught"), () => "rethrown");
            };
            if (resultPromise) {
                aborted = { reason, state: resultPromise.then(f, f) };
                return aborted.state;
            }
            aborted = { reason, state: f() };
            return aborted.state;
        },
        [Symbol.asyncIterator]() {
            if (used) {
                throw new Error("AsyncIterable cannot be re-used");
            }
            used = true;
            return it;
        },
    };
}
exports.makeIterableAbortable = makeIterableAbortable;
/**
 * Create a new WritableIterable.
 */
function createWritableIterable() {
    // We start with two queues to capture the read and write attempts.
    //
    // The writes and reads each check of their counterpart is
    // already available and either interact/add themselves to the queue.
    const readQueue = [];
    const writeQueue = [];
    let err = undefined;
    let nextResolve;
    let nextReject;
    let nextPromise = new Promise((resolve, reject) => {
        nextResolve = resolve;
        nextReject = reject;
    });
    let closed = false;
    // drain the readQueue in case of error/writer is closed by sending a
    // done result.
    function drain() {
        for (const next of readQueue.splice(0, readQueue.length)) {
            next({ done: true, value: undefined });
        }
    }
    return {
        close() {
            closed = true;
            drain();
        },
        async write(payload) {
            if (closed) {
                throw err !== null && err !== void 0 ? err : new Error("cannot write, WritableIterable already closed");
            }
            const read = readQueue.shift();
            if (read === undefined) {
                // We didn't find a pending read so we add the payload to the write queue.
                writeQueue.push(payload);
            }
            else {
                // We found a pending read so we respond with the payload.
                read({ done: false, value: payload });
                if (readQueue.length > 0) {
                    // If there are more in the read queue we can mark the write as complete.
                    // as the error reporting is not guaranteed to be sequential and therefore cannot
                    // to linked to a specific write.
                    return;
                }
            }
            // We await the next call for as many times as there are items in the queue + 1
            //
            // If there are no items in the write queue that means write happened and we just have
            // to wait for one more call likewise if we are the nth write in the queue we
            // have to wait for n writes to complete and one more.
            const limit = writeQueue.length + 1;
            for (let i = 0; i < limit; i++) {
                await nextPromise;
            }
        },
        [Symbol.asyncIterator]() {
            return {
                next() {
                    // Resolve the nextPromise to indicate
                    // pending writes that a read attempt has been made
                    // after their write.
                    //
                    // We also need to reset the promise for future writes.
                    nextResolve();
                    nextPromise = new Promise((resolve, reject) => {
                        nextResolve = resolve;
                        nextReject = reject;
                    });
                    const write = writeQueue.shift();
                    if (write !== undefined) {
                        // We found a pending write so response with the payload.
                        return Promise.resolve({ done: false, value: write });
                    }
                    if (closed) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    // We return a promise immediately that is either resolved/rejected
                    // as writes happen.
                    let readResolve;
                    const readPromise = new Promise((resolve) => (readResolve = resolve));
                    readQueue.push(readResolve); // eslint-disable-line @typescript-eslint/no-non-null-assertion
                    return readPromise;
                },
                throw(throwErr) {
                    err = throwErr;
                    closed = true;
                    writeQueue.splice(0, writeQueue.length);
                    nextPromise.catch(() => {
                        // To make sure that the nextPromise is always resolved.
                    });
                    // This will reject all pending writes.
                    nextReject(err);
                    drain();
                    return Promise.resolve({ done: true, value: undefined });
                },
                return() {
                    closed = true;
                    writeQueue.splice(0, writeQueue.length);
                    // Resolve once for the write awaiting confirmation.
                    nextResolve();
                    // Reject all future writes.
                    nextPromise = Promise.reject(new Error("cannot write, consumer called return"));
                    nextPromise.catch(() => {
                        // To make sure that the nextPromise is always resolved.
                    });
                    drain();
                    return Promise.resolve({ done: true, value: undefined });
                },
            };
        },
    };
}
exports.createWritableIterable = createWritableIterable;
/**
 * Create an asynchronous iterable from an array.
 *
 * @private Internal code, does not follow semantic versioning.
 */
// eslint-disable-next-line @typescript-eslint/require-await
function createAsyncIterable(items) {
    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {
        yield __await(yield* __asyncDelegator(__asyncValues(items)));
    });
}
exports.createAsyncIterable = createAsyncIterable;


/***/ }),

/***/ 1816:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.compressionNegotiate = exports.compressedFlag = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
/**
 * compressedFlag indicates that the data in a EnvelopedMessage is
 * compressed. It has the same meaning in the gRPC-Web, gRPC-HTTP2,
 * and Connect protocols.
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.compressedFlag = 0b00000001;
/**
 * Validates the request encoding and determines the accepted response encoding.
 *
 * Returns the request and response compression to use. If the client requested
 * an encoding that is not available, the returned object contains an error that
 * must be used for the response.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function compressionNegotiate(available, requested, // e.g. the value of the Grpc-Encoding header
accepted, // e.g. the value of the Grpc-Accept-Encoding header
headerNameAcceptEncoding) {
    let request = null;
    let response = null;
    let error = undefined;
    if (requested !== null && requested !== "identity") {
        const found = available.find((c) => c.name === requested);
        if (found) {
            request = found;
        }
        else {
            // To comply with https://github.com/grpc/grpc/blob/master/doc/compression.md
            // and the Connect protocol, we return code "unimplemented" and specify
            // acceptable compression(s).
            const acceptable = available.map((c) => c.name).join(",");
            error = new connect_error_js_1.ConnectError(`unknown compression "${requested}": supported encodings are ${acceptable}`, code_js_1.Code.Unimplemented, {
                [headerNameAcceptEncoding]: acceptable,
            });
        }
    }
    if (accepted === null || accepted === "") {
        // Support asymmetric compression. This logic follows
        // https://github.com/grpc/grpc/blob/master/doc/compression.md and common
        // sense.
        response = request;
    }
    else {
        const acceptNames = accepted.split(",").map((n) => n.trim());
        for (const name of acceptNames) {
            const found = available.find((c) => c.name === name);
            if (found) {
                response = found;
                break;
            }
        }
    }
    return { request, response, error };
}
exports.compressionNegotiate = compressionNegotiate;


/***/ }),

/***/ 5331:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contentTypeMatcher = void 0;
const contentTypeMatcherCacheSize = 1024;
/**
 * Create a function that returns true if the given mime type is supported.
 * A mime type is supported when one of the regular expressions match.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function contentTypeMatcher(...supported) {
    const cache = new Map();
    const source = supported.reduce((previousValue, currentValue) => previousValue.concat("supported" in currentValue ? currentValue.supported : currentValue), []);
    function match(contentType) {
        if (contentType === null || contentType.length == 0) {
            return false;
        }
        const cached = cache.get(contentType);
        if (cached !== undefined) {
            return cached;
        }
        const ok = source.some((re) => re.test(contentType));
        if (cache.size < contentTypeMatcherCacheSize) {
            cache.set(contentType, ok);
        }
        return ok;
    }
    match.supported = source;
    return match;
}
exports.contentTypeMatcher = contentTypeMatcher;


/***/ }),

/***/ 6490:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMethodUrl = void 0;
/**
 * Create a URL for the given RPC. This simply adds the qualified
 * service name, a slash, and the method name to the path of the given
 * baseUrl.
 *
 * For example, the baseUri https://example.com and method "Say" from
 * the service example.ElizaService results in:
 * https://example.com/example.ElizaService/Say
 *
 * This format is used by the protocols Connect, gRPC and Twirp.
 *
 * Note that this function also accepts a protocol-relative baseUrl.
 * If given an empty string or "/" as a baseUrl, it returns just the
 * path.
 */
function createMethodUrl(baseUrl, service, method) {
    const s = typeof service == "string" ? service : service.typeName;
    const m = typeof method == "string" ? method : method.name;
    return baseUrl.toString().replace(/\/?$/, `/${s}/${m}`);
}
exports.createMethodUrl = createMethodUrl;


/***/ }),

/***/ 2999:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.encodeEnvelopes = exports.encodeEnvelope = exports.envelopeDecompress = exports.envelopeCompress = exports.createEnvelopeReadableStream = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const compression_js_1 = __nccwpck_require__(1816);
/**
 * Create a WHATWG ReadableStream of enveloped messages from a ReadableStream
 * of bytes.
 *
 * Ideally, this would simply be a TransformStream, but ReadableStream.pipeThrough
 * does not have the necessary availability at this time.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createEnvelopeReadableStream(stream) {
    let reader;
    let buffer = new Uint8Array(0);
    function append(chunk) {
        const n = new Uint8Array(buffer.length + chunk.length);
        n.set(buffer);
        n.set(chunk, buffer.length);
        buffer = n;
    }
    return new ReadableStream({
        start() {
            reader = stream.getReader();
        },
        async pull(controller) {
            let header = undefined;
            for (;;) {
                if (header === undefined && buffer.byteLength >= 5) {
                    let length = 0;
                    for (let i = 1; i < 5; i++) {
                        length = (length << 8) + buffer[i];
                    }
                    header = { flags: buffer[0], length };
                }
                if (header !== undefined && buffer.byteLength >= header.length + 5) {
                    break;
                }
                const result = await reader.read();
                if (result.done) {
                    break;
                }
                append(result.value);
            }
            if (header === undefined) {
                if (buffer.byteLength == 0) {
                    controller.close();
                    return;
                }
                controller.error(new connect_error_js_1.ConnectError("premature end of stream", code_js_1.Code.DataLoss));
                return;
            }
            const data = buffer.subarray(5, 5 + header.length);
            buffer = buffer.subarray(5 + header.length);
            controller.enqueue({
                flags: header.flags,
                data,
            });
        },
    });
}
exports.createEnvelopeReadableStream = createEnvelopeReadableStream;
/**
 * Compress an EnvelopedMessage.
 *
 * Raises Internal if an enveloped message is already compressed.
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function envelopeCompress(envelope, compression, compressMinBytes) {
    let { flags, data } = envelope;
    if ((flags & compression_js_1.compressedFlag) === compression_js_1.compressedFlag) {
        throw new connect_error_js_1.ConnectError("invalid envelope, already compressed", code_js_1.Code.Internal);
    }
    if (compression && data.byteLength >= compressMinBytes) {
        data = await compression.compress(data);
        flags = flags | compression_js_1.compressedFlag;
    }
    return { data, flags };
}
exports.envelopeCompress = envelopeCompress;
/**
 * Decompress an EnvelopedMessage.
 *
 * Raises InvalidArgument if an envelope is compressed, but compression is null.
 *
 * Relies on the provided Compression to raise ResourceExhausted if the
 * *decompressed* message size is larger than readMaxBytes. If the envelope is
 * not compressed, readMaxBytes is not honored.
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function envelopeDecompress(envelope, compression, readMaxBytes) {
    let { flags, data } = envelope;
    if ((flags & compression_js_1.compressedFlag) === compression_js_1.compressedFlag) {
        if (!compression) {
            throw new connect_error_js_1.ConnectError("received compressed envelope, but do not know how to decompress", code_js_1.Code.InvalidArgument);
        }
        data = await compression.decompress(data, readMaxBytes);
        flags = flags ^ compression_js_1.compressedFlag;
    }
    return { data, flags };
}
exports.envelopeDecompress = envelopeDecompress;
/**
 * Encode a single enveloped message.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function encodeEnvelope(flags, data) {
    const bytes = new Uint8Array(data.length + 5);
    bytes.set(data, 5);
    const v = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    v.setUint8(0, flags); // first byte is flags
    v.setUint32(1, data.length); // 4 bytes message length
    return bytes;
}
exports.encodeEnvelope = encodeEnvelope;
/**
 * Encode a set of enveloped messages.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function encodeEnvelopes(...envelopes) {
    const len = envelopes.reduce((previousValue, currentValue) => previousValue + currentValue.data.length + 5, 0);
    const bytes = new Uint8Array(len);
    const v = new DataView(bytes.buffer);
    let offset = 0;
    for (const e of envelopes) {
        v.setUint8(offset, e.flags); // first byte is flags
        v.setUint32(offset + 1, e.data.length); // 4 bytes message length
        bytes.set(e.data, offset + 5);
        offset += e.data.length + 5;
    }
    return bytes;
}
exports.encodeEnvelopes = encodeEnvelopes;


/***/ }),

/***/ 4378:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.uResponseOk = exports.assertByteStreamRequest = exports.createDeadlineSignal = exports.getAbortSignalReason = exports.createLinkedAbortController = exports.transformInvokeImplementation = exports.invokeUnaryImplementation = exports.contentTypeMatcher = exports.untilFirst = exports.readAllBytes = exports.createAsyncIterable = exports.createWritableIterable = exports.makeIterableAbortable = exports.sinkAllBytes = exports.sinkAll = exports.pipeTo = exports.transformParseEnvelope = exports.transformSerializeEnvelope = exports.transformSplitEnvelope = exports.transformJoinEnvelopes = exports.transformDecompressEnvelope = exports.transformCompressEnvelope = exports.transformReadAllBytes = exports.transformPrepend = exports.transformAppend = exports.transformCatchFinally = exports.transformCatch = exports.pipe = exports.compressionNegotiate = exports.compressedFlag = exports.createEnvelopeReadableStream = exports.envelopeCompress = exports.envelopeDecompress = exports.encodeEnvelopes = exports.encodeEnvelope = exports.validateReadWriteMaxBytes = exports.limitSerialization = exports.getJsonOptions = exports.createClientMethodSerializers = exports.createMethodSerializationLookup = exports.runStreamingCall = exports.runUnaryCall = exports.universalServerResponseToFetch = exports.universalServerRequestFromFetch = exports.universalClientResponseFromFetch = exports.universalClientRequestToFetch = exports.createFetchHandler = exports.createFetchClient = exports.createUniversalHandlerClient = exports.createMethodUrl = void 0;
exports.createUniversalMethodHandler = exports.createUniversalServiceHandlers = exports.validateUniversalHandlerOptions = exports.uResponseVersionNotSupported = exports.uResponseMethodNotAllowed = exports.uResponseUnsupportedMediaType = exports.uResponseNotFound = void 0;
var create_method_url_js_1 = __nccwpck_require__(6490);
Object.defineProperty(exports, "createMethodUrl", ({ enumerable: true, get: function () { return create_method_url_js_1.createMethodUrl; } }));
var universal_handler_client_js_1 = __nccwpck_require__(6107);
Object.defineProperty(exports, "createUniversalHandlerClient", ({ enumerable: true, get: function () { return universal_handler_client_js_1.createUniversalHandlerClient; } }));
var universal_fetch_js_1 = __nccwpck_require__(624);
Object.defineProperty(exports, "createFetchClient", ({ enumerable: true, get: function () { return universal_fetch_js_1.createFetchClient; } }));
Object.defineProperty(exports, "createFetchHandler", ({ enumerable: true, get: function () { return universal_fetch_js_1.createFetchHandler; } }));
Object.defineProperty(exports, "universalClientRequestToFetch", ({ enumerable: true, get: function () { return universal_fetch_js_1.universalClientRequestToFetch; } }));
Object.defineProperty(exports, "universalClientResponseFromFetch", ({ enumerable: true, get: function () { return universal_fetch_js_1.universalClientResponseFromFetch; } }));
Object.defineProperty(exports, "universalServerRequestFromFetch", ({ enumerable: true, get: function () { return universal_fetch_js_1.universalServerRequestFromFetch; } }));
Object.defineProperty(exports, "universalServerResponseToFetch", ({ enumerable: true, get: function () { return universal_fetch_js_1.universalServerResponseToFetch; } }));
var run_call_js_1 = __nccwpck_require__(5733);
Object.defineProperty(exports, "runUnaryCall", ({ enumerable: true, get: function () { return run_call_js_1.runUnaryCall; } }));
Object.defineProperty(exports, "runStreamingCall", ({ enumerable: true, get: function () { return run_call_js_1.runStreamingCall; } }));
// All exports below are private — internal code that does not follow semantic
// versioning.
// We will try hard to avoid breaking changes, but if you depend on the
// following exports, we recommend that you do so with an exact version
// constraint (no ~ or ^).
var serialization_js_1 = __nccwpck_require__(3263);
Object.defineProperty(exports, "createMethodSerializationLookup", ({ enumerable: true, get: function () { return serialization_js_1.createMethodSerializationLookup; } }));
Object.defineProperty(exports, "createClientMethodSerializers", ({ enumerable: true, get: function () { return serialization_js_1.createClientMethodSerializers; } }));
Object.defineProperty(exports, "getJsonOptions", ({ enumerable: true, get: function () { return serialization_js_1.getJsonOptions; } }));
Object.defineProperty(exports, "limitSerialization", ({ enumerable: true, get: function () { return serialization_js_1.limitSerialization; } }));
var limit_io_js_1 = __nccwpck_require__(2279);
Object.defineProperty(exports, "validateReadWriteMaxBytes", ({ enumerable: true, get: function () { return limit_io_js_1.validateReadWriteMaxBytes; } }));
var envelope_js_1 = __nccwpck_require__(2999);
Object.defineProperty(exports, "encodeEnvelope", ({ enumerable: true, get: function () { return envelope_js_1.encodeEnvelope; } }));
Object.defineProperty(exports, "encodeEnvelopes", ({ enumerable: true, get: function () { return envelope_js_1.encodeEnvelopes; } }));
Object.defineProperty(exports, "envelopeDecompress", ({ enumerable: true, get: function () { return envelope_js_1.envelopeDecompress; } }));
Object.defineProperty(exports, "envelopeCompress", ({ enumerable: true, get: function () { return envelope_js_1.envelopeCompress; } }));
Object.defineProperty(exports, "createEnvelopeReadableStream", ({ enumerable: true, get: function () { return envelope_js_1.createEnvelopeReadableStream; } }));
var compression_js_1 = __nccwpck_require__(1816);
Object.defineProperty(exports, "compressedFlag", ({ enumerable: true, get: function () { return compression_js_1.compressedFlag; } }));
Object.defineProperty(exports, "compressionNegotiate", ({ enumerable: true, get: function () { return compression_js_1.compressionNegotiate; } }));
var async_iterable_js_1 = __nccwpck_require__(4285);
Object.defineProperty(exports, "pipe", ({ enumerable: true, get: function () { return async_iterable_js_1.pipe; } }));
Object.defineProperty(exports, "transformCatch", ({ enumerable: true, get: function () { return async_iterable_js_1.transformCatch; } }));
Object.defineProperty(exports, "transformCatchFinally", ({ enumerable: true, get: function () { return async_iterable_js_1.transformCatchFinally; } }));
Object.defineProperty(exports, "transformAppend", ({ enumerable: true, get: function () { return async_iterable_js_1.transformAppend; } }));
Object.defineProperty(exports, "transformPrepend", ({ enumerable: true, get: function () { return async_iterable_js_1.transformPrepend; } }));
Object.defineProperty(exports, "transformReadAllBytes", ({ enumerable: true, get: function () { return async_iterable_js_1.transformReadAllBytes; } }));
Object.defineProperty(exports, "transformCompressEnvelope", ({ enumerable: true, get: function () { return async_iterable_js_1.transformCompressEnvelope; } }));
Object.defineProperty(exports, "transformDecompressEnvelope", ({ enumerable: true, get: function () { return async_iterable_js_1.transformDecompressEnvelope; } }));
Object.defineProperty(exports, "transformJoinEnvelopes", ({ enumerable: true, get: function () { return async_iterable_js_1.transformJoinEnvelopes; } }));
Object.defineProperty(exports, "transformSplitEnvelope", ({ enumerable: true, get: function () { return async_iterable_js_1.transformSplitEnvelope; } }));
Object.defineProperty(exports, "transformSerializeEnvelope", ({ enumerable: true, get: function () { return async_iterable_js_1.transformSerializeEnvelope; } }));
Object.defineProperty(exports, "transformParseEnvelope", ({ enumerable: true, get: function () { return async_iterable_js_1.transformParseEnvelope; } }));
Object.defineProperty(exports, "pipeTo", ({ enumerable: true, get: function () { return async_iterable_js_1.pipeTo; } }));
Object.defineProperty(exports, "sinkAll", ({ enumerable: true, get: function () { return async_iterable_js_1.sinkAll; } }));
Object.defineProperty(exports, "sinkAllBytes", ({ enumerable: true, get: function () { return async_iterable_js_1.sinkAllBytes; } }));
Object.defineProperty(exports, "makeIterableAbortable", ({ enumerable: true, get: function () { return async_iterable_js_1.makeIterableAbortable; } }));
Object.defineProperty(exports, "createWritableIterable", ({ enumerable: true, get: function () { return async_iterable_js_1.createWritableIterable; } }));
Object.defineProperty(exports, "createAsyncIterable", ({ enumerable: true, get: function () { return async_iterable_js_1.createAsyncIterable; } }));
Object.defineProperty(exports, "readAllBytes", ({ enumerable: true, get: function () { return async_iterable_js_1.readAllBytes; } }));
Object.defineProperty(exports, "untilFirst", ({ enumerable: true, get: function () { return async_iterable_js_1.untilFirst; } }));
var content_type_matcher_js_1 = __nccwpck_require__(5331);
Object.defineProperty(exports, "contentTypeMatcher", ({ enumerable: true, get: function () { return content_type_matcher_js_1.contentTypeMatcher; } }));
var invoke_implementation_js_1 = __nccwpck_require__(7049);
Object.defineProperty(exports, "invokeUnaryImplementation", ({ enumerable: true, get: function () { return invoke_implementation_js_1.invokeUnaryImplementation; } }));
Object.defineProperty(exports, "transformInvokeImplementation", ({ enumerable: true, get: function () { return invoke_implementation_js_1.transformInvokeImplementation; } }));
var signals_js_1 = __nccwpck_require__(500);
Object.defineProperty(exports, "createLinkedAbortController", ({ enumerable: true, get: function () { return signals_js_1.createLinkedAbortController; } }));
Object.defineProperty(exports, "getAbortSignalReason", ({ enumerable: true, get: function () { return signals_js_1.getAbortSignalReason; } }));
Object.defineProperty(exports, "createDeadlineSignal", ({ enumerable: true, get: function () { return signals_js_1.createDeadlineSignal; } }));
var universal_js_1 = __nccwpck_require__(19);
Object.defineProperty(exports, "assertByteStreamRequest", ({ enumerable: true, get: function () { return universal_js_1.assertByteStreamRequest; } }));
Object.defineProperty(exports, "uResponseOk", ({ enumerable: true, get: function () { return universal_js_1.uResponseOk; } }));
Object.defineProperty(exports, "uResponseNotFound", ({ enumerable: true, get: function () { return universal_js_1.uResponseNotFound; } }));
Object.defineProperty(exports, "uResponseUnsupportedMediaType", ({ enumerable: true, get: function () { return universal_js_1.uResponseUnsupportedMediaType; } }));
Object.defineProperty(exports, "uResponseMethodNotAllowed", ({ enumerable: true, get: function () { return universal_js_1.uResponseMethodNotAllowed; } }));
Object.defineProperty(exports, "uResponseVersionNotSupported", ({ enumerable: true, get: function () { return universal_js_1.uResponseVersionNotSupported; } }));
var universal_handler_js_1 = __nccwpck_require__(3235);
Object.defineProperty(exports, "validateUniversalHandlerOptions", ({ enumerable: true, get: function () { return universal_handler_js_1.validateUniversalHandlerOptions; } }));
Object.defineProperty(exports, "createUniversalServiceHandlers", ({ enumerable: true, get: function () { return universal_handler_js_1.createUniversalServiceHandlers; } }));
Object.defineProperty(exports, "createUniversalMethodHandler", ({ enumerable: true, get: function () { return universal_handler_js_1.createUniversalMethodHandler; } }));


/***/ }),

/***/ 7049:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transformInvokeImplementation = exports.invokeUnaryImplementation = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const normalize_js_1 = __nccwpck_require__(3964);
/**
 * Invoke a user-provided implementation of a unary RPC. Returns a normalized
 * output message.
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function invokeUnaryImplementation(spec, context, input) {
    const output = await spec.impl(input, context);
    return (0, normalize_js_1.normalize)(spec.method.O, output);
}
exports.invokeUnaryImplementation = invokeUnaryImplementation;
/**
 * Return an AsyncIterableTransform that invokes a user-provided implementation,
 * giving it input from an asynchronous iterable, and returning its output as an
 * asynchronous iterable.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformInvokeImplementation(spec, context) {
    switch (spec.kind) {
        case protobuf_1.MethodKind.Unary:
            return function unary(input) {
                return __asyncGenerator(this, arguments, function* unary_1() {
                    const inputIt = input[Symbol.asyncIterator]();
                    const input1 = yield __await(inputIt.next());
                    if (input1.done === true) {
                        throw new connect_error_js_1.ConnectError("protocol error: missing input message for unary method", code_js_1.Code.InvalidArgument);
                    }
                    yield yield __await((0, normalize_js_1.normalize)(spec.method.O, yield __await(spec.impl(input1.value, context))));
                    const input2 = yield __await(inputIt.next());
                    if (input2.done !== true) {
                        throw new connect_error_js_1.ConnectError("protocol error: received extra input message for unary method", code_js_1.Code.InvalidArgument);
                    }
                });
            };
        case protobuf_1.MethodKind.ServerStreaming: {
            return function serverStreaming(input) {
                return __asyncGenerator(this, arguments, function* serverStreaming_1() {
                    const inputIt = input[Symbol.asyncIterator]();
                    const input1 = yield __await(inputIt.next());
                    if (input1.done === true) {
                        throw new connect_error_js_1.ConnectError("protocol error: missing input message for server-streaming method", code_js_1.Code.InvalidArgument);
                    }
                    yield __await(yield* __asyncDelegator(__asyncValues((0, normalize_js_1.normalizeIterable)(spec.method.O, spec.impl(input1.value, context)))));
                    const input2 = yield __await(inputIt.next());
                    if (input2.done !== true) {
                        throw new connect_error_js_1.ConnectError("protocol error: received extra input message for server-streaming method", code_js_1.Code.InvalidArgument);
                    }
                });
            };
        }
        case protobuf_1.MethodKind.ClientStreaming: {
            return function clientStreaming(input) {
                return __asyncGenerator(this, arguments, function* clientStreaming_1() {
                    yield yield __await((0, normalize_js_1.normalize)(spec.method.O, yield __await(spec.impl(input, context))));
                });
            };
        }
        case protobuf_1.MethodKind.BiDiStreaming:
            return function biDiStreaming(input) {
                return (0, normalize_js_1.normalizeIterable)(spec.method.O, spec.impl(input, context));
            };
    }
}
exports.transformInvokeImplementation = transformInvokeImplementation;


/***/ }),

/***/ 2279:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertReadMaxBytes = exports.assertWriteMaxBytes = exports.validateReadWriteMaxBytes = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
/**
 * At most, allow ~4GiB to be received or sent per message.
 * zlib used by Node.js caps maxOutputLength at this value. It also happens to
 * be the maximum theoretical message size supported by protobuf-es.
 */
const maxReadMaxBytes = 0xffffffff;
const maxWriteMaxBytes = maxReadMaxBytes;
/**
 * The default value for the compressMinBytes option. The CPU cost of compressing
 * very small messages usually isn't worth the small reduction in network I/O, so
 * the default value is 1 kibibyte.
 */
const defaultCompressMinBytes = 1024;
/**
 * Asserts that the options writeMaxBytes, readMaxBytes, and compressMinBytes
 * are within sane limits, and returns default values where no value is
 * provided.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateReadWriteMaxBytes(readMaxBytes, writeMaxBytes, compressMinBytes) {
    writeMaxBytes !== null && writeMaxBytes !== void 0 ? writeMaxBytes : (writeMaxBytes = maxWriteMaxBytes);
    readMaxBytes !== null && readMaxBytes !== void 0 ? readMaxBytes : (readMaxBytes = maxReadMaxBytes);
    compressMinBytes !== null && compressMinBytes !== void 0 ? compressMinBytes : (compressMinBytes = defaultCompressMinBytes);
    if (writeMaxBytes < 1 || writeMaxBytes > maxWriteMaxBytes) {
        throw new connect_error_js_1.ConnectError(`writeMaxBytes ${writeMaxBytes} must be >= 1 and <= ${maxWriteMaxBytes}`, code_js_1.Code.Internal);
    }
    if (readMaxBytes < 1 || readMaxBytes > maxReadMaxBytes) {
        throw new connect_error_js_1.ConnectError(`readMaxBytes ${readMaxBytes} must be >= 1 and <= ${maxReadMaxBytes}`, code_js_1.Code.Internal);
    }
    return {
        readMaxBytes,
        writeMaxBytes,
        compressMinBytes,
    };
}
exports.validateReadWriteMaxBytes = validateReadWriteMaxBytes;
/**
 * Raise an error ResourceExhausted if more than writeMaxByte are written.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function assertWriteMaxBytes(writeMaxBytes, bytesWritten) {
    if (bytesWritten > writeMaxBytes) {
        throw new connect_error_js_1.ConnectError(`message size ${bytesWritten} is larger than configured writeMaxBytes ${writeMaxBytes}`, code_js_1.Code.ResourceExhausted);
    }
}
exports.assertWriteMaxBytes = assertWriteMaxBytes;
/**
 * Raise an error ResourceExhausted if more than readMaxBytes are read.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function assertReadMaxBytes(readMaxBytes, bytesRead, totalSizeKnown = false) {
    if (bytesRead > readMaxBytes) {
        let message = `message size is larger than configured readMaxBytes ${readMaxBytes}`;
        if (totalSizeKnown) {
            message = `message size ${bytesRead} is larger than configured readMaxBytes ${readMaxBytes}`;
        }
        throw new connect_error_js_1.ConnectError(message, code_js_1.Code.ResourceExhausted);
    }
}
exports.assertReadMaxBytes = assertReadMaxBytes;


/***/ }),

/***/ 3964:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.normalizeIterable = exports.normalize = void 0;
/**
 *  Takes a partial protobuf messages of the
 *  specified message type as input, and returns full instances.
 */
function normalize(type, message) {
    return message instanceof type
        ? message
        : new type(message);
}
exports.normalize = normalize;
/**
 * Takes an AsyncIterable of partial protobuf messages of the
 * specified message type as input, and yields full instances.
 */
function normalizeIterable(messageType, input) {
    function transform(result) {
        if (result.done === true) {
            return result;
        }
        return {
            done: result.done,
            value: normalize(messageType, result.value),
        };
    }
    return {
        [Symbol.asyncIterator]() {
            const it = input[Symbol.asyncIterator]();
            const res = {
                next: () => it.next().then(transform),
            };
            if (it.throw !== undefined) {
                res.throw = (e) => it.throw(e).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion
            }
            if (it.return !== undefined) {
                res.return = (v) => it.return(v).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion
            }
            return res;
        },
    };
}
exports.normalizeIterable = normalizeIterable;


/***/ }),

/***/ 5733:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.runStreamingCall = exports.runUnaryCall = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const signals_js_1 = __nccwpck_require__(500);
const normalize_js_1 = __nccwpck_require__(3964);
/**
 * Runs a unary method with the given interceptors. Note that this function
 * is only used when implementing a Transport.
 */
function runUnaryCall(opt) {
    const next = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: (0, normalize_js_1.normalize)(opt.req.method.I, opt.req.message), signal });
    return next(req).then((res) => {
        done();
        return res;
    }, abort);
}
exports.runUnaryCall = runUnaryCall;
/**
 * Runs a server-streaming method with the given interceptors. Note that this
 * function is only used when implementing a Transport.
 */
function runStreamingCall(opt) {
    const next = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: (0, normalize_js_1.normalizeIterable)(opt.req.method.I, opt.req.message), signal });
    let doneCalled = false;
    // Call return on the request iterable to indicate
    // that we will no longer consume it and it should
    // cleanup any allocated resources.
    signal.addEventListener("abort", function () {
        var _a, _b;
        const it = opt.req.message[Symbol.asyncIterator]();
        // If the signal is aborted due to an error, we want to throw
        // the error to the request iterator.
        if (!doneCalled) {
            (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, this.reason).catch(() => {
                // throw returns a promise, which we don't care about.
                //
                // Uncaught promises are thrown at sometime/somewhere by the event loop,
                // this is to ensure error is caught and ignored.
            });
        }
        (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(() => {
            // return returns a promise, which we don't care about.
            //
            // Uncaught promises are thrown at sometime/somewhere by the event loop,
            // this is to ensure error is caught and ignored.
        });
    });
    return next(req).then((res) => {
        return Object.assign(Object.assign({}, res), { message: {
                [Symbol.asyncIterator]() {
                    const it = res.message[Symbol.asyncIterator]();
                    return {
                        next() {
                            return it.next().then((r) => {
                                if (r.done == true) {
                                    doneCalled = true;
                                    done();
                                }
                                return r;
                            }, abort);
                        },
                        // We deliberately omit throw/return.
                    };
                },
            } });
    }, abort);
}
exports.runStreamingCall = runStreamingCall;
/**
 * Create an AbortSignal for Transport implementations. The signal is available
 * in UnaryRequest and StreamingRequest, and is triggered when the call is
 * aborted (via a timeout or explicit cancellation), errored (e.g. when reading
 * an error from the server from the wire), or finished successfully.
 *
 * Transport implementations can pass the signal to HTTP clients to ensure that
 * there are no unused connections leak.
 *
 * Returns a tuple:
 * [0]: The signal, which is also aborted if the optional deadline is reached.
 * [1]: Function to call if the Transport encountered an error.
 * [2]: Function to call if the Transport finished without an error.
 */
function setupSignal(opt) {
    const { signal, cleanup } = (0, signals_js_1.createDeadlineSignal)(opt.timeoutMs);
    const controller = (0, signals_js_1.createLinkedAbortController)(opt.signal, signal);
    return [
        controller.signal,
        function abort(reason) {
            // We peek at the deadline signal because fetch() will throw an error on
            // abort that discards the signal reason.
            const e = connect_error_js_1.ConnectError.from(signal.aborted ? (0, signals_js_1.getAbortSignalReason)(signal) : reason);
            controller.abort(e);
            cleanup();
            return Promise.reject(e);
        },
        function done() {
            cleanup();
            controller.abort();
        },
    ];
}
/**
 * applyInterceptors takes the given UnaryFn or ServerStreamingFn, and wraps
 * it with each of the given interceptors, returning a new UnaryFn or
 * ServerStreamingFn.
 */
function applyInterceptors(next, interceptors) {
    var _a;
    return ((_a = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    (n, i) => i(n), next)) !== null && _a !== void 0 ? _a : next);
}


/***/ }),

/***/ 3263:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createJsonSerialization = exports.createBinarySerialization = exports.limitSerialization = exports.createClientMethodSerializers = exports.createMethodSerializationLookup = exports.getJsonOptions = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const limit_io_js_1 = __nccwpck_require__(2279);
/**
 * Sets default JSON serialization options for connect-es.
 *
 * With standard protobuf JSON serialization, unknown JSON fields are
 * rejected by default. In connect-es, unknown JSON fields are ignored
 * by default.
 */
function getJsonOptions(options) {
    var _a;
    const o = Object.assign({}, options);
    (_a = o.ignoreUnknownFields) !== null && _a !== void 0 ? _a : (o.ignoreUnknownFields = true);
    return o;
}
exports.getJsonOptions = getJsonOptions;
/**
 * Create an object that provides convenient access to request and response
 * message serialization for a given method.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createMethodSerializationLookup(method, binaryOptions, jsonOptions, limitOptions) {
    const inputBinary = limitSerialization(createBinarySerialization(method.I, binaryOptions), limitOptions);
    const inputJson = limitSerialization(createJsonSerialization(method.I, jsonOptions), limitOptions);
    const outputBinary = limitSerialization(createBinarySerialization(method.O, binaryOptions), limitOptions);
    const outputJson = limitSerialization(createJsonSerialization(method.O, jsonOptions), limitOptions);
    return {
        getI(useBinaryFormat) {
            return useBinaryFormat ? inputBinary : inputJson;
        },
        getO(useBinaryFormat) {
            return useBinaryFormat ? outputBinary : outputJson;
        },
    };
}
exports.createMethodSerializationLookup = createMethodSerializationLookup;
/**
 * Returns functions to normalize and serialize the input message
 * of an RPC, and to parse the output message of an RPC.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {
    const input = useBinaryFormat
        ? createBinarySerialization(method.I, binaryOptions)
        : createJsonSerialization(method.I, jsonOptions);
    const output = useBinaryFormat
        ? createBinarySerialization(method.O, binaryOptions)
        : createJsonSerialization(method.O, jsonOptions);
    return { parse: output.parse, serialize: input.serialize };
}
exports.createClientMethodSerializers = createClientMethodSerializers;
/**
 * Apply I/O limits to a Serialization object, returning a new object.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function limitSerialization(serialization, limitOptions) {
    return {
        serialize(data) {
            const bytes = serialization.serialize(data);
            (0, limit_io_js_1.assertWriteMaxBytes)(limitOptions.writeMaxBytes, bytes.byteLength);
            return bytes;
        },
        parse(data) {
            (0, limit_io_js_1.assertReadMaxBytes)(limitOptions.readMaxBytes, data.byteLength, true);
            return serialization.parse(data);
        },
    };
}
exports.limitSerialization = limitSerialization;
/**
 * Creates a Serialization object for serializing the given protobuf message
 * with the protobuf binary format.
 */
function createBinarySerialization(messageType, options) {
    return {
        parse(data) {
            try {
                return messageType.fromBinary(data, options);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new connect_error_js_1.ConnectError(`parse binary: ${m}`, code_js_1.Code.InvalidArgument);
            }
        },
        serialize(data) {
            try {
                return data.toBinary(options);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new connect_error_js_1.ConnectError(`serialize binary: ${m}`, code_js_1.Code.Internal);
            }
        },
    };
}
exports.createBinarySerialization = createBinarySerialization;
/**
 * Creates a Serialization object for serializing the given protobuf message
 * with the protobuf canonical JSON encoding.
 *
 * By default, unknown fields are ignored.
 */
function createJsonSerialization(messageType, options) {
    var _a, _b;
    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();
    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();
    const o = getJsonOptions(options);
    return {
        parse(data) {
            try {
                const json = textDecoder.decode(data);
                return messageType.fromJsonString(json, o);
            }
            catch (e) {
                throw connect_error_js_1.ConnectError.from(e, code_js_1.Code.InvalidArgument);
            }
        },
        serialize(data) {
            try {
                const json = data.toJsonString(o);
                return textEncoder.encode(json);
            }
            catch (e) {
                throw connect_error_js_1.ConnectError.from(e, code_js_1.Code.Internal);
            }
        },
    };
}
exports.createJsonSerialization = createJsonSerialization;


/***/ }),

/***/ 500:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAbortSignalReason = exports.createDeadlineSignal = exports.createLinkedAbortController = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
/**
 * Create an AbortController that is automatically aborted if one of the given
 * signals is aborted.
 *
 * For convenience, the linked AbortSignals can be undefined.
 *
 * If the controller or any of the signals is aborted, all event listeners are
 * removed.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createLinkedAbortController(...signals) {
    const controller = new AbortController();
    const sa = signals
        .filter((s) => s !== undefined)
        .concat(controller.signal);
    for (const signal of sa) {
        if (signal.aborted) {
            onAbort.apply(signal);
            break;
        }
        signal.addEventListener("abort", onAbort);
    }
    function onAbort() {
        if (!controller.signal.aborted) {
            controller.abort(getAbortSignalReason(this));
        }
        for (const signal of sa) {
            signal.removeEventListener("abort", onAbort);
        }
    }
    return controller;
}
exports.createLinkedAbortController = createLinkedAbortController;
/**
 * Create a deadline signal. The returned object contains an AbortSignal, but
 * also a cleanup function to stop the timer, which must be called once the
 * calling code is no longer interested in the signal.
 *
 * Ideally, we would simply use AbortSignal.timeout(), but it is not widely
 * available yet.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createDeadlineSignal(timeoutMs) {
    const controller = new AbortController();
    const listener = () => {
        controller.abort(new connect_error_js_1.ConnectError("the operation timed out", code_js_1.Code.DeadlineExceeded));
    };
    let timeoutId;
    if (timeoutMs !== undefined) {
        if (timeoutMs <= 0)
            listener();
        else
            timeoutId = setTimeout(listener, timeoutMs);
    }
    return {
        signal: controller.signal,
        cleanup: () => clearTimeout(timeoutId),
    };
}
exports.createDeadlineSignal = createDeadlineSignal;
/**
 * Returns the reason why an AbortSignal was aborted. Returns undefined if the
 * signal has not been aborted.
 *
 * The property AbortSignal.reason is not widely available. This function
 * returns an AbortError if the signal is aborted, but reason is undefined.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function getAbortSignalReason(signal) {
    if (!signal.aborted) {
        return undefined;
    }
    if (signal.reason !== undefined) {
        return signal.reason;
    }
    // AbortSignal.reason is available in Node.js v16, v18, and later,
    // and in all browsers since early 2022.
    const e = new Error("This operation was aborted");
    e.name = "AbortError";
    return e;
}
exports.getAbortSignalReason = getAbortSignalReason;


/***/ }),

/***/ 624:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.universalServerResponseToFetch = exports.universalServerRequestFromFetch = exports.universalClientResponseFromFetch = exports.universalClientRequestToFetch = exports.createFetchHandler = exports.createFetchClient = void 0;
/**
 * Create a universal client function, a minimal abstraction of an HTTP client,
 * using the given fetch() implementation.
 */
function createFetchClient(fetchFn) {
    return async function fetchClient(request) {
        const res = await fetchFn(universalClientRequestToFetch(request));
        return universalClientResponseFromFetch(res);
    };
}
exports.createFetchClient = createFetchClient;
/**
 * Convert a universal handler function to a fetch handler.
 */
function createFetchHandler(uHandler, options) {
    async function handleFetch(req) {
        const uReq = universalServerRequestFromFetch(req, options !== null && options !== void 0 ? options : {});
        const uRes = await uHandler(uReq);
        return universalServerResponseToFetch(uRes);
    }
    return Object.assign(handleFetch, uHandler);
}
exports.createFetchHandler = createFetchHandler;
/**
 * Convert a universal client request to a fetch request.
 */
function universalClientRequestToFetch(req) {
    const body = req.body === undefined ? null : iterableToReadableStream(req.body);
    return new Request(req.url, {
        method: req.method,
        headers: req.header,
        signal: req.signal,
        body,
    });
}
exports.universalClientRequestToFetch = universalClientRequestToFetch;
/**
 * Convert a fetch response to a universal client response.
 */
function universalClientResponseFromFetch(res) {
    return {
        status: res.status,
        header: res.headers,
        body: iterableFromReadableStream(res.body),
        trailer: new Headers(),
    };
}
exports.universalClientResponseFromFetch = universalClientResponseFromFetch;
/**
 * Convert a fetch request to a universal server request.
 */
function universalServerRequestFromFetch(req, options) {
    var _a;
    return {
        httpVersion: (_a = options.httpVersion) !== null && _a !== void 0 ? _a : "",
        method: req.method,
        url: req.url,
        header: req.headers,
        body: iterableFromReadableStream(req.body),
        signal: req.signal,
    };
}
exports.universalServerRequestFromFetch = universalServerRequestFromFetch;
/**
 * Convert a universal server response to a fetch response.
 */
function universalServerResponseToFetch(res) {
    let body = null;
    if (res.body !== undefined) {
        body = iterableToReadableStream(res.body);
    }
    return new Response(body, {
        status: res.status,
        headers: res.header,
    });
}
exports.universalServerResponseToFetch = universalServerResponseToFetch;
function iterableToReadableStream(iterable) {
    const it = iterable[Symbol.asyncIterator]();
    return new ReadableStream({
        async pull(controller) {
            const r = await it.next();
            if (r.done === true) {
                controller.close();
                return;
            }
            controller.enqueue(r.value);
        },
        async cancel(reason) {
            if (it.throw) {
                try {
                    await it.throw(reason);
                }
                catch (_a) {
                    // iterator.throw on a generator function rethrows unless the
                    // body catches and swallows.
                }
            }
        },
    });
}
function iterableFromReadableStream(body) {
    const reader = body === null || body === void 0 ? void 0 : body.getReader();
    return {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (reader !== undefined) {
                        const r = await reader.read();
                        if (r.done) {
                            return {
                                done: true,
                                value: undefined,
                            };
                        }
                        return r;
                    }
                    return {
                        done: true,
                        value: undefined,
                    };
                },
                async throw(e) {
                    if (reader !== undefined) {
                        await reader.cancel(e);
                    }
                    return {
                        done: true,
                        value: undefined,
                    };
                },
            };
        },
    };
}


/***/ }),

/***/ 6107:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createUniversalHandlerClient = void 0;
const code_js_1 = __nccwpck_require__(8002);
const connect_error_js_1 = __nccwpck_require__(786);
const async_iterable_js_1 = __nccwpck_require__(4285);
const signals_js_1 = __nccwpck_require__(500);
/**
 * An in-memory UniversalClientFn that can be used to route requests to a ConnectRouter
 * bypassing network calls. Useful for testing and calling in-process services.
 */
function createUniversalHandlerClient(uHandlers) {
    const handlerMap = new Map();
    for (const handler of uHandlers) {
        handlerMap.set(handler.requestPath, handler);
    }
    return async (uClientReq) => {
        var _a, _b, _c;
        const pathname = new URL(uClientReq.url).pathname;
        const handler = handlerMap.get(pathname);
        if (!handler) {
            throw new connect_error_js_1.ConnectError(`RouterHttpClient: no handler registered for ${pathname}`, code_js_1.Code.Unimplemented);
        }
        const reqSignal = (_a = uClientReq.signal) !== null && _a !== void 0 ? _a : new AbortController().signal;
        const uServerRes = await raceSignal(reqSignal, handler({
            body: (_b = uClientReq.body) !== null && _b !== void 0 ? _b : (0, async_iterable_js_1.createAsyncIterable)([]),
            httpVersion: "2.0",
            method: uClientReq.method,
            url: uClientReq.url,
            header: uClientReq.header,
            signal: reqSignal,
        }));
        const body = (_c = uServerRes.body) !== null && _c !== void 0 ? _c : (0, async_iterable_js_1.createAsyncIterable)([]);
        return {
            body: (0, async_iterable_js_1.pipe)(body, (iterable) => {
                return {
                    [Symbol.asyncIterator]() {
                        const it = iterable[Symbol.asyncIterator]();
                        const w = {
                            next() {
                                return raceSignal(reqSignal, it.next());
                            },
                        };
                        if (it.throw !== undefined) {
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- can't handle mutated object sensibly
                            w.throw = (e) => it.throw(e);
                        }
                        if (it.return !== undefined) {
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-explicit-any -- can't handle mutated object sensibly
                            w.return = (value) => it.return(value);
                        }
                        return w;
                    },
                };
            }),
            header: new Headers(uServerRes.header),
            status: uServerRes.status,
            trailer: new Headers(uServerRes.trailer),
        };
    };
}
exports.createUniversalHandlerClient = createUniversalHandlerClient;
/**
 * Wrap a promise, and reject early if the given signal triggers before the
 * promise is settled.
 */
function raceSignal(signal, promise) {
    let cleanup;
    const signalPromise = new Promise((_, reject) => {
        const onAbort = () => reject((0, signals_js_1.getAbortSignalReason)(signal));
        if (signal.aborted) {
            return onAbort();
        }
        signal.addEventListener("abort", onAbort);
        cleanup = () => signal.removeEventListener("abort", onAbort);
    });
    return Promise.race([signalPromise, promise]).finally(cleanup);
}


/***/ }),

/***/ 3235:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.negotiateProtocol = exports.createUniversalMethodHandler = exports.createUniversalServiceHandlers = exports.validateUniversalHandlerOptions = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const universal_js_1 = __nccwpck_require__(19);
const content_type_matcher_js_1 = __nccwpck_require__(5331);
const limit_io_js_1 = __nccwpck_require__(2279);
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
/**
 * Asserts that the options are within sane limits, and returns default values
 * where no value is provided.
 *
 * Note that this function does not set default values for `acceptCompression`.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateUniversalHandlerOptions(opt) {
    var _a, _b;
    opt !== null && opt !== void 0 ? opt : (opt = {});
    const acceptCompression = opt.acceptCompression
        ? [...opt.acceptCompression]
        : [];
    const requireConnectProtocolHeader = (_a = opt.requireConnectProtocolHeader) !== null && _a !== void 0 ? _a : false;
    const maxTimeoutMs = (_b = opt.maxTimeoutMs) !== null && _b !== void 0 ? _b : Number.MAX_SAFE_INTEGER;
    return Object.assign(Object.assign({ acceptCompression }, (0, limit_io_js_1.validateReadWriteMaxBytes)(opt.readMaxBytes, opt.writeMaxBytes, opt.compressMinBytes)), { jsonOptions: opt.jsonOptions, binaryOptions: opt.binaryOptions, maxTimeoutMs, shutdownSignal: opt.shutdownSignal, requireConnectProtocolHeader });
}
exports.validateUniversalHandlerOptions = validateUniversalHandlerOptions;
/**
 * For the given service implementation, return a universal handler for each
 * RPC. The handler serves the given protocols.
 *
 * At least one protocol is required.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createUniversalServiceHandlers(spec, protocols) {
    return Object.entries(spec.methods).map(([, implSpec]) => createUniversalMethodHandler(implSpec, protocols));
}
exports.createUniversalServiceHandlers = createUniversalServiceHandlers;
/**
 * Return a universal handler for the given RPC implementation.
 * The handler serves the given protocols.
 *
 * At least one protocol is required.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createUniversalMethodHandler(spec, protocols) {
    return negotiateProtocol(protocols.map((f) => f(spec)));
}
exports.createUniversalMethodHandler = createUniversalMethodHandler;
/**
 * Create a universal handler that negotiates the protocol.
 *
 * This functions takes one or more handlers - all for the same RPC, but for
 * different protocols - and returns a single handler that looks at the
 * Content-Type header and the HTTP verb of the incoming request to select
 * the appropriate protocol-specific handler.
 *
 * Raises an error if no protocol handlers were provided, or if they do not
 * handle exactly the same RPC.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function negotiateProtocol(protocolHandlers) {
    if (protocolHandlers.length == 0) {
        throw new connect_error_js_1.ConnectError("at least one protocol is required", code_js_1.Code.Internal);
    }
    const service = protocolHandlers[0].service;
    const method = protocolHandlers[0].method;
    const requestPath = protocolHandlers[0].requestPath;
    if (protocolHandlers.some((h) => h.service !== service || h.method !== method)) {
        throw new connect_error_js_1.ConnectError("cannot negotiate protocol for different RPCs", code_js_1.Code.Internal);
    }
    if (protocolHandlers.some((h) => h.requestPath !== requestPath)) {
        throw new connect_error_js_1.ConnectError("cannot negotiate protocol for different requestPaths", code_js_1.Code.Internal);
    }
    async function protocolNegotiatingHandler(request) {
        var _a;
        if (method.kind == protobuf_1.MethodKind.BiDiStreaming &&
            request.httpVersion.startsWith("1.")) {
            return Object.assign(Object.assign({}, universal_js_1.uResponseVersionNotSupported), { 
                // Clients coded to expect full-duplex connections may hang if they've
                // mistakenly negotiated HTTP/1.1. To unblock them, we must close the
                // underlying TCP connection.
                header: new Headers({ Connection: "close" }) });
        }
        const contentType = (_a = request.header.get("Content-Type")) !== null && _a !== void 0 ? _a : "";
        const matchingMethod = protocolHandlers.filter((h) => h.allowedMethods.includes(request.method));
        if (matchingMethod.length == 0) {
            return universal_js_1.uResponseMethodNotAllowed;
        }
        // If Content-Type is unset but only one handler matches, use it.
        if (matchingMethod.length == 1 && contentType === "") {
            const onlyMatch = matchingMethod[0];
            return onlyMatch(request);
        }
        const matchingContentTypes = matchingMethod.filter((h) => h.supportedContentType(contentType));
        if (matchingContentTypes.length == 0) {
            return universal_js_1.uResponseUnsupportedMediaType;
        }
        const firstMatch = matchingContentTypes[0];
        return firstMatch(request);
    }
    return Object.assign(protocolNegotiatingHandler, {
        service,
        method,
        requestPath,
        supportedContentType: (0, content_type_matcher_js_1.contentTypeMatcher)(...protocolHandlers.map((h) => h.supportedContentType)),
        protocolNames: protocolHandlers
            .flatMap((h) => h.protocolNames)
            .filter((value, index, array) => array.indexOf(value) === index),
        allowedMethods: protocolHandlers
            .flatMap((h) => h.allowedMethods)
            .filter((value, index, array) => array.indexOf(value) === index),
    });
}
exports.negotiateProtocol = negotiateProtocol;


/***/ }),

/***/ 19:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.uResponseVersionNotSupported = exports.uResponseMethodNotAllowed = exports.uResponseUnsupportedMediaType = exports.uResponseNotFound = exports.uResponseOk = exports.assertByteStreamRequest = void 0;
/**
 * Assert that the given UniversalServerRequest has a byte stream body, not
 * a JSON value.
 *
 * We accept a JSON object or a byte stream in server requests.
 * In practice, only Connect unary handlers will receive a parse
 * JSON object. Other call-sites can use this assertion to narrow
 * the union type. A failure in such a call-sites indicates that
 * the contract between a server framework and the connect-node \
 * handler is broken.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function assertByteStreamRequest(req) {
    if (typeof req.body == "object" &&
        req.body !== null &&
        Symbol.asyncIterator in req.body) {
        return;
    }
    throw new Error("byte stream required, but received JSON");
}
exports.assertByteStreamRequest = assertByteStreamRequest;
/**
 * HTTP 200 OK
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.uResponseOk = {
    status: 200,
};
/**
 * HTTP 404 Not Found
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.uResponseNotFound = {
    status: 404,
};
/**
 * HTTP 415 Unsupported Media Type
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.uResponseUnsupportedMediaType = {
    status: 415,
};
/**
 * HTTP 405 Method Not Allowed
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.uResponseMethodNotAllowed = {
    status: 405,
};
/**
 * HTTP 505 Version Not Supported
 *
 * @private Internal code, does not follow semantic versioning.
 */
exports.uResponseVersionNotSupported = {
    status: 505,
};


/***/ }),

/***/ 8600:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createRouterTransport = void 0;
const transport_js_1 = __nccwpck_require__(2130);
const universal_handler_client_js_1 = __nccwpck_require__(6107);
const router_js_1 = __nccwpck_require__(2229);
/**
 * Creates a Transport that routes requests to the configured router. Useful for testing
 * and calling services running in the same process.
 *
 * This can be used to test both client logic by using this to stub/mock the backend,
 * and to test server logic by using this to run without needing to spin up a server.
 */
function createRouterTransport(routes, options) {
    var _a, _b;
    const router = (0, router_js_1.createConnectRouter)(Object.assign(Object.assign({}, ((_a = options === null || options === void 0 ? void 0 : options.router) !== null && _a !== void 0 ? _a : {})), { connect: true }));
    routes(router);
    return (0, transport_js_1.createTransport)(Object.assign({ httpClient: (0, universal_handler_client_js_1.createUniversalHandlerClient)(router.handlers), baseUrl: "https://in-memory", useBinaryFormat: true, interceptors: [], acceptCompression: [], sendCompression: null, compressMinBytes: Number.MAX_SAFE_INTEGER, readMaxBytes: Number.MAX_SAFE_INTEGER, writeMaxBytes: Number.MAX_SAFE_INTEGER }, ((_b = options === null || options === void 0 ? void 0 : options.transport) !== null && _b !== void 0 ? _b : {})));
}
exports.createRouterTransport = createRouterTransport;


/***/ }),

/***/ 2229:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2024 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConnectRouter = void 0;
const connect_error_js_1 = __nccwpck_require__(786);
const code_js_1 = __nccwpck_require__(8002);
const implementation_js_1 = __nccwpck_require__(4021);
const handler_factory_js_1 = __nccwpck_require__(8143);
const handler_factory_js_2 = __nccwpck_require__(6256);
const handler_factory_js_3 = __nccwpck_require__(7101);
const universal_handler_js_1 = __nccwpck_require__(3235);
/**
 * Create a new ConnectRouter.
 */
function createConnectRouter(routerOptions) {
    const base = whichProtocols(routerOptions);
    const handlers = [];
    return {
        handlers,
        service(service, implementation, options) {
            const { protocols } = whichProtocols(options, base);
            handlers.push(...(0, universal_handler_js_1.createUniversalServiceHandlers)((0, implementation_js_1.createServiceImplSpec)(service, implementation), protocols));
            return this;
        },
        rpc(serviceOrMethod, methodOrImpl, implementationOrOptions, options) {
            let service;
            let method;
            let impl;
            let opt;
            if ("typeName" in serviceOrMethod) {
                service = serviceOrMethod;
                method = methodOrImpl;
                impl = implementationOrOptions;
                opt = options;
            }
            else {
                service = Object.assign(Object.assign({}, serviceOrMethod.service), { methods: {} });
                method = serviceOrMethod;
                impl = methodOrImpl;
                opt = implementationOrOptions;
            }
            const { protocols } = whichProtocols(opt, base);
            handlers.push((0, universal_handler_js_1.createUniversalMethodHandler)((0, implementation_js_1.createMethodImplSpec)(service, method, impl), protocols));
            return this;
        },
    };
}
exports.createConnectRouter = createConnectRouter;
function whichProtocols(options, base) {
    if (base && !options) {
        return base;
    }
    const opt = base
        ? Object.assign(Object.assign({}, (0, universal_handler_js_1.validateUniversalHandlerOptions)(base.options)), options) : Object.assign(Object.assign({}, options), (0, universal_handler_js_1.validateUniversalHandlerOptions)(options !== null && options !== void 0 ? options : {}));
    const protocols = [];
    if ((options === null || options === void 0 ? void 0 : options.grpc) !== false) {
        protocols.push((0, handler_factory_js_2.createHandlerFactory)(opt));
    }
    if ((options === null || options === void 0 ? void 0 : options.grpcWeb) !== false) {
        protocols.push((0, handler_factory_js_1.createHandlerFactory)(opt));
    }
    if ((options === null || options === void 0 ? void 0 : options.connect) !== false) {
        protocols.push((0, handler_factory_js_3.createHandlerFactory)(opt));
    }
    if (protocols.length === 0) {
        throw new connect_error_js_1.ConnectError("cannot create handler, all protocols are disabled", code_js_1.Code.InvalidArgument);
    }
    return {
        options: opt,
        protocols,
    };
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nccwpck_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// ESM COMPAT FLAG
__nccwpck_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@actions/core/lib/core.js
var core = __nccwpck_require__(2186);
// EXTERNAL MODULE: ./node_modules/@connectrpc/connect/dist/cjs/index.js
var cjs = __nccwpck_require__(632);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/authentication/service_connect.js
var service_connect = __nccwpck_require__(6624);
;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/session_manager.js
var SessionKey;
(function (SessionKey) {
    SessionKey["AccessToken"] = "_access_token";
    SessionKey["RefreshToken"] = "_refresh_token";
    SessionKey["UserID"] = "_user_id";
    SessionKey["User"] = "_user";
    SessionKey["ProjectToken"] = "_project_token";
})(SessionKey || (SessionKey = {}));
class InMemorySessionManager {
    constructor() {
        this.map = new Map();
    }
    set(key, value) {
        this.map.set(key, value);
    }
    get(key) {
        return this.map.get(key);
    }
    remove(key) {
        this.map.delete(key);
    }
}
class LocalStorageSessionManager {
    set(key, value) {
        localStorage.setItem(key, value);
    }
    get(key) {
        return localStorage.getItem(key) ?? undefined;
    }
    remove(key) {
        localStorage.removeItem(key);
    }
}

;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/defaults.js
function defaultHost() {
    const _default = 'http://localhost:4747/';
    if (typeof process === 'undefined') {
        return _default;
    }
    return process.env.RIG_HOST || _default;
}
function defaultProjectID() {
    const _default = 'c10c947b-91f1-41ea-96df-ea13ee68a7fc0';
    if (typeof process === 'undefined') {
        return _default;
    }
    return process.env.RIG_PROJECT_ID || _default;
}
function defaultLoginMethod() {
    if (typeof process === 'undefined') {
        return undefined;
    }
    if (process.env.RIG_CLIENT_ID === undefined || process.env.RIG_CLIENT_SECRET === undefined) {
        return undefined;
    }
    return {
        method: {
            case: 'clientCredentials',
            value: {
                clientId: process.env.RIG_CLIENT_ID,
                clientSecret: process.env.RIG_CLIENT_SECRET
            }
        }
    };
}

// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/user/service_connect.js
var user_service_connect = __nccwpck_require__(5329);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/user/settings/service_connect.js
var settings_service_connect = __nccwpck_require__(3210);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/project/settings/service_connect.js
var project_settings_service_connect = __nccwpck_require__(3886);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/project/service_connect.js
var project_service_connect = __nccwpck_require__(8184);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/group/service_connect.js
var group_service_connect = __nccwpck_require__(1760);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/service_account/service_connect.js
var service_account_service_connect = __nccwpck_require__(2916);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/capsule/service_connect.js
var capsule_service_connect = __nccwpck_require__(6779);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/build/service_connect.js
var build_service_connect = __nccwpck_require__(6442);
// EXTERNAL MODULE: ./node_modules/@connectrpc/connect-web/dist/cjs/index.js
var dist_cjs = __nccwpck_require__(3556);
;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/client.js













const omitTypes = new Set([
    '/api.v1.authentication.Service/Login',
    '/api.v1.authentication.Service/Register',
    '/api.v1.authentication.Service/VerifyEmail',
    '/api.v1.authentication.Service/RefreshToken',
    '/api.v1.authentication.Service/OauthCallback',
    '/api.v1.authentication.Service/SendPasswordReset',
    '/api.v1.authentication.Service/ResetPassword',
    '/api.v1.authentication.Service/GetAuthConfig'
]);
class Client {
    async getAccessToken() {
        let accessToken = this.sessionManager.get(SessionKey.AccessToken);
        if (!accessToken && this.loginRequest !== undefined) {
            const response = await (0,cjs.createPromiseClient)(service_connect/* Service */.t, this._transport).login(this.loginRequest);
            if (response.token) {
                this.sessionManager.set(SessionKey.AccessToken, response.token.accessToken);
                this.sessionManager.set(SessionKey.RefreshToken, response.token.refreshToken);
                accessToken = response.token.accessToken;
            }
        }
        if (!accessToken)
            return;
        try {
            const jwtPayload = JSON.parse(atob(accessToken.split('.')[1]));
            if (Date.now() >= jwtPayload.exp * 1000) {
                const refreshToken = this.sessionManager.get(SessionKey.RefreshToken);
                const response = await (0,cjs.createPromiseClient)(service_connect/* Service */.t, this._transport).refreshToken({
                    refreshToken
                });
                this.sessionManager.set(SessionKey.AccessToken, response.token?.accessToken ?? '');
                this.sessionManager.set(SessionKey.RefreshToken, response.token?.refreshToken ?? '');
                accessToken = response.token?.accessToken ?? '';
            }
        }
        catch (e) {
            this.logout();
            return; // Return undefined to avoid entering the infinite loop
        }
        return accessToken;
    }
    constructor(options) {
        this._authInterceptor = (next) => async (req) => {
            const path = new URL(req.url).pathname;
            if (omitTypes.has(path)) {
                return await next(req);
            }
            const accessToken = await this.getAccessToken();
            if (accessToken) {
                req.header.set('Authorization', 'Bearer ' + accessToken);
                // TODO What is project token and how should I get it??
                // const projectToken = await this.getProjectToken();
                // if (projectToken) {
                //   req.header.set('X-Rig-Project-Token', projectToken);
                // }
            }
            return await next(req);
        };
        this.host = options.host ?? defaultHost();
        if (options.credentials !== undefined) {
            this.loginRequest = {
                method: {
                    case: 'clientCredentials',
                    value: {
                        clientId: options.credentials.id,
                        clientSecret: options.credentials.secret
                    }
                }
            };
        }
        else {
            this.loginRequest = defaultLoginMethod();
        }
        this.sessionManager =
            typeof localStorage === 'undefined' ? new InMemorySessionManager() : new LocalStorageSessionManager();
        this._transport = (0,dist_cjs/* createConnectTransport */.Bc)({
            baseUrl: this.host,
            interceptors: [this._authInterceptor]
        });
        this.user = (0,cjs.createPromiseClient)(user_service_connect/* Service */.t, this._transport);
        this.userSettings = (0,cjs.createPromiseClient)(settings_service_connect/* Service */.t, this._transport);
        this.projectSettings = (0,cjs.createPromiseClient)(project_settings_service_connect/* Service */.t, this._transport);
        this.projects = (0,cjs.createPromiseClient)(project_service_connect/* Service */.t, this._transport);
        this.group = (0,cjs.createPromiseClient)(group_service_connect/* Service */.t, this._transport);
        this.serviceAccount = (0,cjs.createPromiseClient)(service_account_service_connect/* Service */.t, this._transport);
        this.capsule = (0,cjs.createPromiseClient)(capsule_service_connect/* Service */.t, this._transport);
        this.auth = (0,cjs.createPromiseClient)(service_connect/* Service */.t, this._transport);
        this.build = (0,cjs.createPromiseClient)(build_service_connect/* Service */.t, this._transport);
    }
    async login(loginRequest) {
        this.loginRequest = loginRequest;
        const response = await this.auth.login(this.loginRequest);
        if (response.token && response.token.accessToken !== '') {
            this.sessionManager.set(SessionKey.AccessToken, response.token?.accessToken ?? '');
            this.sessionManager.set(SessionKey.RefreshToken, response.token?.refreshToken ?? '');
        }
        return response;
    }
    logout() {
        this.sessionManager.remove(SessionKey.AccessToken);
        this.sessionManager.remove(SessionKey.RefreshToken);
    }
}

;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/index.js




;// CONCATENATED MODULE: ./node_modules/js-yaml/dist/js-yaml.mjs

/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


var isNothing_1      = isNothing;
var isObject_1       = isObject;
var toArray_1        = toArray;
var repeat_1         = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1         = extend;

var common = {
	isNothing: isNothing_1,
	isObject: isObject_1,
	toArray: toArray_1,
	repeat: repeat_1,
	isNegativeZero: isNegativeZero_1,
	extend: extend_1
};

// YAML error class. http://stackoverflow.com/questions/8458984


function formatError(exception, compact) {
  var where = '', message = exception.reason || '(unknown reason)';

  if (!exception.mark) return message;

  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }

  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';

  if (!compact && exception.mark.snippet) {
    where += '\n\n' + exception.mark.snippet;
  }

  return message + ' ' + where;
}


function YAMLException$1(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;


YAMLException$1.prototype.toString = function toString(compact) {
  return this.name + ': ' + formatError(this, compact);
};


var exception = YAMLException$1;

// get snippet for a single line, respecting maxLength
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = '';
  var tail = '';
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;

  if (position - lineStart > maxHalfLength) {
    head = ' ... ';
    lineStart = position - maxHalfLength + head.length;
  }

  if (lineEnd - position > maxHalfLength) {
    tail = ' ...';
    lineEnd = position + maxHalfLength - tail.length;
  }

  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
    pos: position - lineStart + head.length // relative position
  };
}


function padStart(string, max) {
  return common.repeat(' ', max - string.length) + string;
}


function makeSnippet(mark, options) {
  options = Object.create(options || null);

  if (!mark.buffer) return null;

  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent      !== 'number') options.indent      = 1;
  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;

  var re = /\r?\n|\r|\0/g;
  var lineStarts = [ 0 ];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;

  while ((match = re.exec(mark.buffer))) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);

    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }

  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;

  var result = '', i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);

  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n' + result;
  }

  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +
    ' | ' + line.str + '\n';
  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';

  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n';
  }

  return result.replace(/\n$/, '');
}


var snippet = makeSnippet;

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'multi',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'representName',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type$1(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.options       = options; // keep original options in case user wants to extend this type later
  this.tag           = tag;
  this.kind          = options['kind']          || null;
  this.resolve       = options['resolve']       || function () { return true; };
  this.construct     = options['construct']     || function (data) { return data; };
  this.instanceOf    = options['instanceOf']    || null;
  this.predicate     = options['predicate']     || null;
  this.represent     = options['represent']     || null;
  this.representName = options['representName'] || null;
  this.defaultStyle  = options['defaultStyle']  || null;
  this.multi         = options['multi']         || false;
  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

var type = Type$1;

/*eslint-disable max-len*/





function compileList(schema, name) {
  var result = [];

  schema[name].forEach(function (currentType) {
    var newIndex = result.length;

    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag &&
          previousType.kind === currentType.kind &&
          previousType.multi === currentType.multi) {

        newIndex = previousIndex;
      }
    });

    result[newIndex] = currentType;
  });

  return result;
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;

  function collectType(type) {
    if (type.multi) {
      result.multi[type.kind].push(type);
      result.multi['fallback'].push(type);
    } else {
      result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema$1(definition) {
  return this.extend(definition);
}


Schema$1.prototype.extend = function extend(definition) {
  var implicit = [];
  var explicit = [];

  if (definition instanceof type) {
    // Schema.extend(type)
    explicit.push(definition);

  } else if (Array.isArray(definition)) {
    // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);

  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);

  } else {
    throw new exception('Schema.extend argument should be a Type, [ Type ], ' +
      'or a schema definition ({ implicit: [...], explicit: [...] })');
  }

  implicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }

    if (type$1.loadKind && type$1.loadKind !== 'scalar') {
      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }

    if (type$1.multi) {
      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    }
  });

  explicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
  });

  var result = Object.create(Schema$1.prototype);

  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);

  result.compiledImplicit = compileList(result, 'implicit');
  result.compiledExplicit = compileList(result, 'explicit');
  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);

  return result;
};


var schema = Schema$1;

var str = new type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});

var seq = new type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});

var map = new type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});

var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

var _null = new type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; },
    empty:     function () { return '';     }
  },
  defaultStyle: 'lowercase'
});

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

var bool = new type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'o') {
      // base 8
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
  }

  // base 10 (except 0)

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  return true;
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch;

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

var js_yaml_int = new type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

var js_yaml_float = new type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});

var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    js_yaml_int,
    js_yaml_float
  ]
});

var js_yaml_core = json;

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

var timestamp = new type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

var merge = new type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

/*eslint-disable no-bitwise*/





// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  return new Uint8Array(result);
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(obj) {
  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';
}

var binary = new type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});

var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString$2.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

var omap = new type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});

var _toString$1 = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString$1.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

var pairs = new type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});

var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

var set = new type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});

var _default = js_yaml_core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});

/*eslint-disable max-len,no-use-before-define*/







var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}


function State$1(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || _default;
  this.onWarning = options['onWarning'] || null;
  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
  // if such documents have no explicit %YAML directive
  this.legacy    = options['legacy']    || false;

  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  // position of first leading tab in the current line,
  // used to make sure there are no tabs in the indentation
  this.firstTabInLine = -1;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  var mark = {
    name:     state.filename,
    buffer:   state.input.slice(0, -1), // omit trailing \0
    position: state.position,
    line:     state.line,
    column:   state.position - state.lineStart
  };

  mark.snippet = snippet(mark);

  return new exception(message, mark);
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, 'tag prefix is malformed: ' + prefix);
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,
  startLine, startLineStart, startPos) {

  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty$1.call(overridableKeys, keyNode) &&
        _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    // used for this specific key only because Object.defineProperty is slow
    if (keyNode === '__proto__') {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _lineStart,
      _pos,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = Object.create(null),
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    } else if (ch === 0x2C/* , */) {
      // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
      throwError(state, "expected the node content, but found ','");
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line; // Save the current line.
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _keyLine,
      _keyLineStart,
      _keyPos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = Object.create(null),
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;

      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        // Neither implicit nor explicit notation.
        // Reading is done. Go to the epilogue.
        break;
      }

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }

      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, 'tag name is malformed: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      typeList,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }

  } else if (state.tag === '?') {
    // Implicit resolving is not allowed for non-scalar types, and '?'
    // non-specific tag is only automatically assigned to plain scalars.
    //
    // We only need to check kind conformity in case user explicitly assigns '?'
    // tag, for example like this: "!<?> [0]"
    //
    if (state.result !== null && state.kind !== 'scalar') {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }

    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type = state.implicitTypes[typeIndex];

      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
        state.result = type.construct(state.result);
        state.tag = type.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== '!') {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];
    } else {
      // looking for multi type
      type = null;
      typeList = state.typeMap.multi[state.kind || 'fallback'];

      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type = typeList[typeIndex];
          break;
        }
      }
    }

    if (!type) {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }

    if (state.result !== null && type.kind !== state.kind) {
      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
    }

    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched
      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
    } else {
      state.result = type.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State$1(input, options);

  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}


function load$1(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception('expected a single document in the stream, but found more');
}


var loadAll_1 = loadAll$1;
var load_1    = load$1;

var loader = {
	loadAll: loadAll_1,
	load: load_1
};

/*eslint-disable no-use-before-define*/





var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_BOM                  = 0xFEFF;
var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_EQUALS               = 0x3D; /* = */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}


var QUOTING_TYPE_SINGLE = 1,
    QUOTING_TYPE_DOUBLE = 2;

function State(options) {
  this.schema        = options['schema'] || _default;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;
  this.quotingType   = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes   = options['forceQuotes'] || false;
  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark
function isNsCharOrWhitespace(c) {
  return isPrintable(c)
    && c !== CHAR_BOM
    // - b-char
    && c !== CHAR_CARRIAGE_RETURN
    && c !== CHAR_LINE_FEED;
}

// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    inblock ? // c = flow-in
      cIsNsCharOrWhitespace
      : cIsNsCharOrWhitespace
        // - c-flow-indicator
        && c !== CHAR_COMMA
        && c !== CHAR_LEFT_SQUARE_BRACKET
        && c !== CHAR_RIGHT_SQUARE_BRACKET
        && c !== CHAR_LEFT_CURLY_BRACKET
        && c !== CHAR_RIGHT_CURLY_BRACKET
  )
    // ns-plain-char
    && c !== CHAR_SHARP // false on '#'
    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'
    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
  return isPrintable(c) && c !== CHAR_BOM
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_EQUALS
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Simplified test for values allowed as the last character in plain style.
function isPlainSafeLast(c) {
  // just not whitespace or colon, it will be checked to be plain character later
  return !isWhitespace(c) && c !== CHAR_COLON;
}

// Same as 'string'.codePointAt(pos), but works in older browsers.
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,
  testAmbiguousType, quotingType, forceQuotes, inblock) {

  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(codePointAt(string, 0))
          && isPlainSafeLast(codePointAt(string, string.length - 1));

  if (singleLineOnly || forceQuotes) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = (function () {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('"' + string + '"') : ("'" + string + "'");
      }
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,
      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {

      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char = 0;
  var escapeSeq;

  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];

    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 0x10000) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level, value, false, false) ||
        (typeof value === 'undefined' &&
         writeNode(state, level, null, false, false))) {

      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level + 1, value, true, true, false, true) ||
        (typeof value === 'undefined' &&
         writeNode(state, level + 1, null, true, true, false, true))) {

      if (!compact || _result !== '') {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {

    pairBuffer = '';
    if (_result !== '') pairBuffer += ', ';

    if (state.condenseFlow) pairBuffer += '"';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new exception('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || _result !== '') {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      if (explicit) {
        if (type.multi && type.representName) {
          state.tag = type.representName(object);
        } else {
          state.tag = type.tag;
        }
      } else {
        state.tag = '?';
      }

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new exception('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);
  var inblock = block;
  var tagStr;

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && (state.dump.length !== 0)) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type === '[object Undefined]') {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new exception('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      // Need to encode all characters except those allowed by the spec:
      //
      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
      // [36] ns-hex-digit    ::=  ns-dec-digit
      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
      //
      // Also need to encode '!' because it has special meaning (end of tag prefix).
      //
      tagStr = encodeURI(
        state.tag[0] === '!' ? state.tag.slice(1) : state.tag
      ).replace(/!/g, '%21');

      if (state.tag[0] === '!') {
        tagStr = '!' + tagStr;
      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {
        tagStr = '!!' + tagStr.slice(18);
      } else {
        tagStr = '!<' + tagStr + '>';
      }

      state.dump = tagStr + ' ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump$1(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  var value = input;

  if (state.replacer) {
    value = state.replacer.call({ '': value }, '', value);
  }

  if (writeNode(state, 0, value, true, true)) return state.dump + '\n';

  return '';
}

var dump_1 = dump$1;

var dumper = {
	dump: dump_1
};

function renamed(from, to) {
  return function () {
    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +
      'Use yaml.' + to + ' instead, which is now safe by default.');
  };
}


var Type                = type;
var Schema              = schema;
var FAILSAFE_SCHEMA     = failsafe;
var JSON_SCHEMA         = json;
var CORE_SCHEMA         = js_yaml_core;
var DEFAULT_SCHEMA      = _default;
var load                = loader.load;
var loadAll             = loader.loadAll;
var dump                = dumper.dump;
var YAMLException       = exception;

// Re-export all types in case user wants to create custom schema
var types = {
  binary:    binary,
  float:     js_yaml_float,
  map:       map,
  null:      _null,
  pairs:     pairs,
  set:       set,
  timestamp: timestamp,
  bool:      bool,
  int:       js_yaml_int,
  merge:     merge,
  omap:      omap,
  seq:       seq,
  str:       str
};

// Removed functions from JS-YAML 3.0.x
var safeLoad            = renamed('safeLoad', 'load');
var safeLoadAll         = renamed('safeLoadAll', 'loadAll');
var safeDump            = renamed('safeDump', 'dump');

var jsYaml = {
	Type: Type,
	Schema: Schema,
	FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,
	JSON_SCHEMA: JSON_SCHEMA,
	CORE_SCHEMA: CORE_SCHEMA,
	DEFAULT_SCHEMA: DEFAULT_SCHEMA,
	load: load,
	loadAll: loadAll,
	dump: dump,
	YAMLException: YAMLException,
	types: types,
	safeLoad: safeLoad,
	safeLoadAll: safeLoadAll,
	safeDump: safeDump
};

/* harmony default export */ const js_yaml = ((/* unused pure expression or super */ null && (jsYaml)));


;// CONCATENATED MODULE: ./lib.ts



async function makeClient() {
    const input = {
        url: (0,core.getInput)("url"),
        project: (0,core.getInput)("project"),
        clientID: (0,core.getInput)("clientID"),
        clientSecret: (0,core.getInput)("clientSecret"),
    };
    const client = new Client({
        host: input.url,
        projectID: input.project,
        credentials: {
            id: input.clientID,
            secret: input.clientSecret,
        },
    });
    return client;
}
function parseDeployOutput(config) {
    let output = {};
    for (let k in config) {
        let obj = load(config[k]);
        output[k] = obj;
    }
    return output;
}
function getBool(name) {
    return (0,core.getInput)(name) === "true";
}

;// CONCATENATED MODULE: ./deploy.ts


async function action(inputs) {
    const client = await makeClient();
    let resp = await client.capsule.deploy({
        projectId: inputs.project,
        environmentId: inputs.environment,
        capsuleId: inputs.capsule,
        dryRun: inputs.dryRun,
        force: inputs.force,
        changes: [
            {
                field: {
                    case: "buildId",
                    value: inputs.build,
                },
            },
        ],
    });
    let output = parseDeployOutput(resp.resourceYaml);
    (0,core.setOutput)("rolloutConfig", output);
}
try {
    action({
        project: (0,core.getInput)("project"),
        environment: (0,core.getInput)("environment"),
        capsule: (0,core.getInput)("capsule"),
        build: (0,core.getInput)("build"),
        dryRun: getBool("dryRun"),
        force: getBool("force"),
    });
}
catch (e) {
    (0,core.setFailed)(e.message);
}

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=index.js.map