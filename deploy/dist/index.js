require('./sourcemap-register.js');/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(7351);
const file_command_1 = __nccwpck_require__(717);
const utils_1 = __nccwpck_require__(5278);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(8041);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(1327);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(1327);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(2981);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(5840);
const utils_1 = __nccwpck_require__(5278);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 8041:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(6255);
const auth_1 = __nccwpck_require__(5526);
const core_1 = __nccwpck_require__(2186);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 2981:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 1327:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5526:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 6255:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(9835));
const tunnel = __importStar(__nccwpck_require__(4294));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
    readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                this.message.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        try {
            return new URL(proxyVar);
        }
        catch (_a) {
            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))
                return new URL(`http://${proxyVar}`);
        }
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
        return true;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperNoProxyItem === '*' ||
            upperReqHosts.some(x => x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith('.') &&
                    x.endsWith(`${upperNoProxyItem}`)))) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return (hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 6624:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/authentication/service.proto (package api.v1.authentication, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(3708);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage public endpoints in Users
 *
 * @generated from service api.v1.authentication.Service
 */
exports.t = {
    typeName: "api.v1.authentication.Service",
    methods: {
        /**
         * Login authenticats a user and returns a access/refresh token
         *
         * @generated from rpc api.v1.authentication.Service.Login
         */
        login: {
            name: "Login",
            I: service_pb_js_1.LoginRequest,
            O: service_pb_js_1.LoginResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Logout validates the access token and blocks it afterwards
         *
         * @generated from rpc api.v1.authentication.Service.Logout
         */
        logout: {
            name: "Logout",
            I: service_pb_js_1.LogoutRequest,
            O: service_pb_js_1.LogoutResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get the logged in user
         *
         * @generated from rpc api.v1.authentication.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Register creates a new user
         *
         * @generated from rpc api.v1.authentication.Service.Register
         */
        register: {
            name: "Register",
            I: service_pb_js_1.RegisterRequest,
            O: service_pb_js_1.RegisterResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Send reset password email to the user
         *
         * @generated from rpc api.v1.authentication.Service.SendPasswordReset
         */
        sendPasswordReset: {
            name: "SendPasswordReset",
            I: service_pb_js_1.SendPasswordResetRequest,
            O: service_pb_js_1.SendPasswordResetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Reset password of the user
         *
         * @generated from rpc api.v1.authentication.Service.ResetPassword
         */
        resetPassword: {
            name: "ResetPassword",
            I: service_pb_js_1.ResetPasswordRequest,
            O: service_pb_js_1.ResetPasswordResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete logged in user
         *
         * @generated from rpc api.v1.authentication.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Refresh logged in token pair
         *
         * @generated from rpc api.v1.authentication.Service.RefreshToken
         */
        refreshToken: {
            name: "RefreshToken",
            I: service_pb_js_1.RefreshTokenRequest,
            O: service_pb_js_1.RefreshTokenResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get auth config for how available login methods
         *
         * @generated from rpc api.v1.authentication.Service.GetAuthConfig
         */
        getAuthConfig: {
            name: "GetAuthConfig",
            I: service_pb_js_1.GetAuthConfigRequest,
            O: service_pb_js_1.GetAuthConfigResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Verify email
         *
         * @generated from rpc api.v1.authentication.Service.VerifyEmail
         */
        verifyEmail: {
            name: "VerifyEmail",
            I: service_pb_js_1.VerifyEmailRequest,
            O: service_pb_js_1.VerifyEmailResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Verify phone number
         *
         * @generated from rpc api.v1.authentication.Service.VerifyPhoneNumber
         */
        verifyPhoneNumber: {
            name: "VerifyPhoneNumber",
            I: service_pb_js_1.VerifyPhoneNumberRequest,
            O: service_pb_js_1.VerifyPhoneNumberResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 3708:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/authentication/service.proto (package api.v1.authentication, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetAuthConfigResponse = exports.GetAuthConfigRequest = exports.RefreshTokenResponse = exports.RefreshTokenRequest = exports.DeleteResponse = exports.DeleteRequest = exports.ResetPasswordResponse = exports.ResetPasswordRequest = exports.SendPasswordResetResponse = exports.SendPasswordResetRequest = exports.RegisterResponse = exports.RegisterRequest = exports.GetResponse = exports.GetRequest = exports.LogoutResponse = exports.LogoutRequest = exports.LoginResponse = exports.LoginRequest = exports.ClientCredentials = exports.UserPassword = exports.VerifyPhoneNumberResponse = exports.VerifyPhoneNumberRequest = exports.VerifyEmailResponse = exports.VerifyEmailRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const user_pb_js_1 = __nccwpck_require__(3008);
const user_pb_js_2 = __nccwpck_require__(3848);
const auth_pb_js_1 = __nccwpck_require__(7387);
/**
 * the request of a Public.VerifyEmail RPC
 *
 * @generated from message api.v1.authentication.VerifyEmailRequest
 */
class VerifyEmailRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string code = 1;
         */
        this.code = "";
        /**
         * @generated from field: string email = 2;
         */
        this.email = "";
        /**
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyEmailRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyEmailRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyEmailRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyEmailRequest, a, b);
    }
}
exports.VerifyEmailRequest = VerifyEmailRequest;
VerifyEmailRequest.runtime = protobuf_1.proto3;
VerifyEmailRequest.typeName = "api.v1.authentication.VerifyEmailRequest";
VerifyEmailRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * the response of a Public.VerifyEmail RPC
 *
 * @generated from message api.v1.authentication.VerifyEmailResponse
 */
class VerifyEmailResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyEmailResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyEmailResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyEmailResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyEmailResponse, a, b);
    }
}
exports.VerifyEmailResponse = VerifyEmailResponse;
VerifyEmailResponse.runtime = protobuf_1.proto3;
VerifyEmailResponse.typeName = "api.v1.authentication.VerifyEmailResponse";
VerifyEmailResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * the request of a Public.VerifyPhoneNumber RPC
 *
 * @generated from message api.v1.authentication.VerifyPhoneNumberRequest
 */
class VerifyPhoneNumberRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string code = 1;
         */
        this.code = "";
        /**
         * @generated from field: string phone_number = 2;
         */
        this.phoneNumber = "";
        /**
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyPhoneNumberRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyPhoneNumberRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyPhoneNumberRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyPhoneNumberRequest, a, b);
    }
}
exports.VerifyPhoneNumberRequest = VerifyPhoneNumberRequest;
VerifyPhoneNumberRequest.runtime = protobuf_1.proto3;
VerifyPhoneNumberRequest.typeName = "api.v1.authentication.VerifyPhoneNumberRequest";
VerifyPhoneNumberRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * the response of a Public.VerifyPhoneNumber RPC
 *
 * @generated from message api.v1.authentication.VerifyPhoneNumberResponse
 */
class VerifyPhoneNumberResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerifyPhoneNumberResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerifyPhoneNumberResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerifyPhoneNumberResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerifyPhoneNumberResponse, a, b);
    }
}
exports.VerifyPhoneNumberResponse = VerifyPhoneNumberResponse;
VerifyPhoneNumberResponse.runtime = protobuf_1.proto3;
VerifyPhoneNumberResponse.typeName = "api.v1.authentication.VerifyPhoneNumberResponse";
VerifyPhoneNumberResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.authentication.UserPassword
 */
class UserPassword extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string password = 2;
         */
        this.password = "";
        /**
         * @generated from field: string project_id = 3;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserPassword().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserPassword().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserPassword().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserPassword, a, b);
    }
}
exports.UserPassword = UserPassword;
UserPassword.runtime = protobuf_1.proto3;
UserPassword.typeName = "api.v1.authentication.UserPassword";
UserPassword.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: user_pb_js_1.UserIdentifier },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.authentication.ClientCredentials
 */
class ClientCredentials extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * @generated from field: string client_secret = 2;
         */
        this.clientSecret = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClientCredentials().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClientCredentials().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClientCredentials().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ClientCredentials, a, b);
    }
}
exports.ClientCredentials = ClientCredentials;
ClientCredentials.runtime = protobuf_1.proto3;
ClientCredentials.typeName = "api.v1.authentication.ClientCredentials";
ClientCredentials.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The request of a Public.Login RPC
 *
 * @generated from message api.v1.authentication.LoginRequest
 */
class LoginRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.authentication.LoginRequest.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LoginRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LoginRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LoginRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LoginRequest, a, b);
    }
}
exports.LoginRequest = LoginRequest;
LoginRequest.runtime = protobuf_1.proto3;
LoginRequest.typeName = "api.v1.authentication.LoginRequest";
LoginRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_password", kind: "message", T: UserPassword, oneof: "method" },
    { no: 3, name: "client_credentials", kind: "message", T: ClientCredentials, oneof: "method" },
]);
/**
 * The response of a Public.Login RPC
 *
 * @generated from message api.v1.authentication.LoginResponse
 */
class LoginResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LoginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LoginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LoginResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LoginResponse, a, b);
    }
}
exports.LoginResponse = LoginResponse;
LoginResponse.runtime = protobuf_1.proto3;
LoginResponse.typeName = "api.v1.authentication.LoginResponse";
LoginResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: user_pb_js_2.Token },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_info", kind: "message", T: user_pb_js_1.UserInfo },
]);
/**
 * The request of a Public.Logout RPC
 *
 * @generated from message api.v1.authentication.LogoutRequest
 */
class LogoutRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogoutRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogoutRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogoutRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogoutRequest, a, b);
    }
}
exports.LogoutRequest = LogoutRequest;
LogoutRequest.runtime = protobuf_1.proto3;
LogoutRequest.typeName = "api.v1.authentication.LogoutRequest";
LogoutRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The response of a Public.Logout RPC
 *
 * @generated from message api.v1.authentication.LogoutResponse
 */
class LogoutResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogoutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogoutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogoutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogoutResponse, a, b);
    }
}
exports.LogoutResponse = LogoutResponse;
LogoutResponse.runtime = protobuf_1.proto3;
LogoutResponse.typeName = "api.v1.authentication.LogoutResponse";
LogoutResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Public.Get RPC
 *
 * @generated from message api.v1.authentication.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.authentication.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The response of a Public.Get RPC
 *
 * @generated from message api.v1.authentication.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.authentication.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_info", kind: "message", T: user_pb_js_1.UserInfo },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The request of a Public.Create RPC
 *
 * @generated from message api.v1.authentication.RegisterRequest
 */
class RegisterRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.authentication.RegisterRequest.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterRequest, a, b);
    }
}
exports.RegisterRequest = RegisterRequest;
RegisterRequest.runtime = protobuf_1.proto3;
RegisterRequest.typeName = "api.v1.authentication.RegisterRequest";
RegisterRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_password", kind: "message", T: UserPassword, oneof: "method" },
]);
/**
 * The response of a Public.Create RPC
 *
 * @generated from message api.v1.authentication.RegisterResponse
 */
class RegisterResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterResponse, a, b);
    }
}
exports.RegisterResponse = RegisterResponse;
RegisterResponse.runtime = protobuf_1.proto3;
RegisterResponse.typeName = "api.v1.authentication.RegisterResponse";
RegisterResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: user_pb_js_2.Token },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_info", kind: "message", T: user_pb_js_1.UserInfo },
]);
/**
 * @generated from message api.v1.authentication.SendPasswordResetRequest
 */
class SendPasswordResetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SendPasswordResetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SendPasswordResetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SendPasswordResetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SendPasswordResetRequest, a, b);
    }
}
exports.SendPasswordResetRequest = SendPasswordResetRequest;
SendPasswordResetRequest.runtime = protobuf_1.proto3;
SendPasswordResetRequest.typeName = "api.v1.authentication.SendPasswordResetRequest";
SendPasswordResetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: user_pb_js_1.UserIdentifier },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.authentication.SendPasswordResetResponse
 */
class SendPasswordResetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SendPasswordResetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SendPasswordResetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SendPasswordResetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SendPasswordResetResponse, a, b);
    }
}
exports.SendPasswordResetResponse = SendPasswordResetResponse;
SendPasswordResetResponse.runtime = protobuf_1.proto3;
SendPasswordResetResponse.typeName = "api.v1.authentication.SendPasswordResetResponse";
SendPasswordResetResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Public.ResetPassword RPC
 *
 * @generated from message api.v1.authentication.ResetPasswordRequest
 */
class ResetPasswordRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string code = 1;
         */
        this.code = "";
        /**
         * @generated from field: string new_password = 2;
         */
        this.newPassword = "";
        /**
         * @generated from field: string project_id = 4;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResetPasswordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResetPasswordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResetPasswordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResetPasswordRequest, a, b);
    }
}
exports.ResetPasswordRequest = ResetPasswordRequest;
ResetPasswordRequest.runtime = protobuf_1.proto3;
ResetPasswordRequest.typeName = "api.v1.authentication.ResetPasswordRequest";
ResetPasswordRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identifier", kind: "message", T: user_pb_js_1.UserIdentifier },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Public.ResetPassword RPC
 *
 * @generated from message api.v1.authentication.ResetPasswordResponse
 */
class ResetPasswordResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResetPasswordResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResetPasswordResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResetPasswordResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResetPasswordResponse, a, b);
    }
}
exports.ResetPasswordResponse = ResetPasswordResponse;
ResetPasswordResponse.runtime = protobuf_1.proto3;
ResetPasswordResponse.typeName = "api.v1.authentication.ResetPasswordResponse";
ResetPasswordResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Public.Delete RPC
 *
 * @generated from message api.v1.authentication.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.authentication.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The response of a Public.Delete RPC
 *
 * @generated from message api.v1.authentication.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.authentication.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Public.Delete RPC
 *
 * @generated from message api.v1.authentication.RefreshTokenRequest
 */
class RefreshTokenRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The access token of the user
         *
         * @generated from field: string refresh_token = 1;
         */
        this.refreshToken = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RefreshTokenRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RefreshTokenRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RefreshTokenRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RefreshTokenRequest, a, b);
    }
}
exports.RefreshTokenRequest = RefreshTokenRequest;
RefreshTokenRequest.runtime = protobuf_1.proto3;
RefreshTokenRequest.typeName = "api.v1.authentication.RefreshTokenRequest";
RefreshTokenRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Public.Delete RPC
 *
 * @generated from message api.v1.authentication.RefreshTokenResponse
 */
class RefreshTokenResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RefreshTokenResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RefreshTokenResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RefreshTokenResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RefreshTokenResponse, a, b);
    }
}
exports.RefreshTokenResponse = RefreshTokenResponse;
RefreshTokenResponse.runtime = protobuf_1.proto3;
RefreshTokenResponse.typeName = "api.v1.authentication.RefreshTokenResponse";
RefreshTokenResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: user_pb_js_2.Token },
]);
/**
 * The request of a Public.AuthenticationServiceGetAuthConfigRequest RPC
 *
 * @generated from message api.v1.authentication.GetAuthConfigRequest
 */
class GetAuthConfigRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Optional redirect address for OAuth2
         *
         * @generated from field: string redirect_addr = 1;
         */
        this.redirectAddr = "";
        /**
         * @generated from field: string project_id = 2;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetAuthConfigRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetAuthConfigRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetAuthConfigRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetAuthConfigRequest, a, b);
    }
}
exports.GetAuthConfigRequest = GetAuthConfigRequest;
GetAuthConfigRequest.runtime = protobuf_1.proto3;
GetAuthConfigRequest.typeName = "api.v1.authentication.GetAuthConfigRequest";
GetAuthConfigRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "redirect_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Public.AuthenticationServiceGetAuthConfigRequest RPC
 *
 * @generated from message api.v1.authentication.GetAuthConfigResponse
 */
class GetAuthConfigResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The name of the project
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The logo of the project
         *
         * @generated from field: string logo_url = 2;
         */
        this.logoUrl = "";
        /**
         * If to validate password
         *
         * @generated from field: bool validate_password = 3;
         */
        this.validatePassword = false;
        /**
         * Array of supported login methods.
         *
         * @generated from field: repeated model.LoginType login_types = 4;
         */
        this.loginTypes = [];
        /**
         * Array of supported oauth providers.
         *
         * @generated from field: repeated api.v1.authentication.OauthProvider oauth_providers = 5;
         */
        this.oauthProviders = [];
        /**
         * True if new users can sign up.
         *
         * @generated from field: bool allows_register = 7;
         */
        this.allowsRegister = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetAuthConfigResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetAuthConfigResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetAuthConfigResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetAuthConfigResponse, a, b);
    }
}
exports.GetAuthConfigResponse = GetAuthConfigResponse;
GetAuthConfigResponse.runtime = protobuf_1.proto3;
GetAuthConfigResponse.typeName = "api.v1.authentication.GetAuthConfigResponse";
GetAuthConfigResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validate_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "login_types", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), repeated: true },
    { no: 5, name: "oauth_providers", kind: "message", T: user_pb_js_2.OauthProvider, repeated: true },
    { no: 7, name: "allows_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);


/***/ }),

/***/ 3848:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/authentication/user.proto (package api.v1.authentication, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Token = exports.OauthProvider = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message api.v1.authentication.OauthProvider
 */
class OauthProvider extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: string provider_url = 2;
         */
        this.providerUrl = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OauthProvider().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OauthProvider().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OauthProvider().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OauthProvider, a, b);
    }
}
exports.OauthProvider = OauthProvider;
OauthProvider.runtime = protobuf_1.proto3;
OauthProvider.typeName = "api.v1.authentication.OauthProvider";
OauthProvider.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.authentication.Token
 */
class Token extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string access_token = 1;
         */
        this.accessToken = "";
        /**
         * @generated from field: string refresh_token = 2;
         */
        this.refreshToken = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Token().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Token, a, b);
    }
}
exports.Token = Token;
Token.runtime = protobuf_1.proto3;
Token.typeName = "api.v1.authentication.Token";
Token.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 646:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/build.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Origin = exports.GitReference = exports.Build = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * @generated from message api.v1.capsule.Build
 */
class Build extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string build_id = 1;
         */
        this.buildId = "";
        /**
         * @generated from field: string image = 2;
         */
        this.image = "";
        /**
         * @generated from field: map<string, string> labels = 6;
         */
        this.labels = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Build().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Build().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Build().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Build, a, b);
    }
}
exports.Build = Build;
Build.runtime = protobuf_1.proto3;
Build.typeName = "api.v1.capsule.Build";
Build.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 4, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "origin", kind: "message", T: Origin },
    { no: 6, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * @generated from message api.v1.capsule.GitReference
 */
class GitReference extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string repository_url = 1;
         */
        this.repositoryUrl = "";
        /**
         * @generated from field: string commit_sha = 2;
         */
        this.commitSha = "";
        /**
         * @generated from field: string commit_url = 3;
         */
        this.commitUrl = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GitReference().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GitReference().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GitReference().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GitReference, a, b);
    }
}
exports.GitReference = GitReference;
GitReference.runtime = protobuf_1.proto3;
GitReference.typeName = "api.v1.capsule.GitReference";
GitReference.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "repository_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "commit_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.Origin
 */
class Origin extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.Origin.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Origin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Origin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Origin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Origin, a, b);
    }
}
exports.Origin = Origin;
Origin.runtime = protobuf_1.proto3;
Origin.typeName = "api.v1.capsule.Origin";
Origin.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "git_reference", kind: "message", T: GitReference, oneof: "kind" },
]);


/***/ }),

/***/ 7203:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/capsule.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Update = exports.Capsule = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * @generated from message api.v1.capsule.Capsule
 */
class Capsule extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: uint64 current_rollout = 5;
         */
        this.currentRollout = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Capsule().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Capsule().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Capsule().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Capsule, a, b);
    }
}
exports.Capsule = Capsule;
Capsule.runtime = protobuf_1.proto3;
Capsule.typeName = "api.v1.capsule.Capsule";
Capsule.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 5, name: "current_rollout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.capsule.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 1607:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/event.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventData = exports.ErrorEvent = exports.AbortEvent = exports.RolloutEvent = exports.Event = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * @generated from message api.v1.capsule.Event
 */
class Event extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 rollout_id = 3;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: string message = 4;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Event().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Event().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Event().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Event, a, b);
    }
}
exports.Event = Event;
Event.runtime = protobuf_1.proto3;
Event.typeName = "api.v1.capsule.Event";
Event.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "event_data", kind: "message", T: EventData },
]);
/**
 * @generated from message api.v1.capsule.RolloutEvent
 */
class RolloutEvent extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RolloutEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RolloutEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RolloutEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RolloutEvent, a, b);
    }
}
exports.RolloutEvent = RolloutEvent;
RolloutEvent.runtime = protobuf_1.proto3;
RolloutEvent.typeName = "api.v1.capsule.RolloutEvent";
RolloutEvent.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.AbortEvent
 */
class AbortEvent extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AbortEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AbortEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AbortEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AbortEvent, a, b);
    }
}
exports.AbortEvent = AbortEvent;
AbortEvent.runtime = protobuf_1.proto3;
AbortEvent.typeName = "api.v1.capsule.AbortEvent";
AbortEvent.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.ErrorEvent
 */
class ErrorEvent extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ErrorEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ErrorEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ErrorEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ErrorEvent, a, b);
    }
}
exports.ErrorEvent = ErrorEvent;
ErrorEvent.runtime = protobuf_1.proto3;
ErrorEvent.typeName = "api.v1.capsule.ErrorEvent";
ErrorEvent.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.EventData
 */
class EventData extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.EventData.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EventData, a, b);
    }
}
exports.EventData = EventData;
EventData.runtime = protobuf_1.proto3;
EventData.typeName = "api.v1.capsule.EventData";
EventData.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout", kind: "message", T: RolloutEvent, oneof: "kind" },
    { no: 2, name: "error", kind: "message", T: ErrorEvent, oneof: "kind" },
    { no: 3, name: "abort", kind: "message", T: AbortEvent, oneof: "kind" },
]);


/***/ }),

/***/ 1717:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/instance.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Instance = exports.State = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from enum api.v1.capsule.State
 */
var State;
(function (State) {
    /**
     * @generated from enum value: STATE_UNSPECIFIED = 0;
     */
    State[State["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: STATE_PENDING = 1;
     */
    State[State["PENDING"] = 1] = "PENDING";
    /**
     * @generated from enum value: STATE_RUNNING = 2;
     */
    State[State["RUNNING"] = 2] = "RUNNING";
    /**
     * @generated from enum value: STATE_SUCCEEDED = 3;
     */
    State[State["SUCCEEDED"] = 3] = "SUCCEEDED";
    /**
     * @generated from enum value: STATE_FAILED = 4;
     */
    State[State["FAILED"] = 4] = "FAILED";
})(State || (exports.State = State = {}));
// Retrieve enum metadata with: proto3.getEnumType(State)
protobuf_1.proto3.util.setEnumType(State, "api.v1.capsule.State", [
    { no: 0, name: "STATE_UNSPECIFIED" },
    { no: 1, name: "STATE_PENDING" },
    { no: 2, name: "STATE_RUNNING" },
    { no: 3, name: "STATE_SUCCEEDED" },
    { no: 4, name: "STATE_FAILED" },
]);
/**
 * @generated from message api.v1.capsule.Instance
 */
class Instance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string instance_id = 1;
         */
        this.instanceId = "";
        /**
         * @generated from field: string build_id = 2;
         */
        this.buildId = "";
        /**
         * @generated from field: api.v1.capsule.State state = 3;
         */
        this.state = State.UNSPECIFIED;
        /**
         * @generated from field: uint32 restart_count = 4;
         */
        this.restartCount = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Instance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Instance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Instance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Instance, a, b);
    }
}
exports.Instance = Instance;
Instance.runtime = protobuf_1.proto3;
Instance.typeName = "api.v1.capsule.Instance";
Instance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(State) },
    { no: 4, name: "restart_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "started_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "finished_at", kind: "message", T: protobuf_1.Timestamp },
]);


/***/ }),

/***/ 743:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/log.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogMessage = exports.Log = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message api.v1.capsule.Log
 */
class Log extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Log().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Log().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Log().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Log, a, b);
    }
}
exports.Log = Log;
Log.runtime = protobuf_1.proto3;
Log.typeName = "api.v1.capsule.Log";
Log.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: protobuf_1.Timestamp },
    { no: 2, name: "message", kind: "message", T: LogMessage },
]);
/**
 * @generated from message api.v1.capsule.LogMessage
 */
class LogMessage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.LogMessage.message
         */
        this.message = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogMessage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogMessage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogMessage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogMessage, a, b);
    }
}
exports.LogMessage = LogMessage;
LogMessage.runtime = protobuf_1.proto3;
LogMessage.typeName = "api.v1.capsule.LogMessage";
LogMessage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "message" },
    { no: 2, name: "stderr", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "message" },
]);


/***/ }),

/***/ 886:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/metrics.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InstanceMetrics = exports.ContainerMetrics = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message api.v1.capsule.ContainerMetrics
 */
class ContainerMetrics extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 memory_bytes = 2;
         */
        this.memoryBytes = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 cpu_ms = 3;
         */
        this.cpuMs = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: uint64 storage_bytes = 4;
         */
        this.storageBytes = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContainerMetrics().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContainerMetrics().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContainerMetrics().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContainerMetrics, a, b);
    }
}
exports.ContainerMetrics = ContainerMetrics;
ContainerMetrics.runtime = protobuf_1.proto3;
ContainerMetrics.typeName = "api.v1.capsule.ContainerMetrics";
ContainerMetrics.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: protobuf_1.Timestamp },
    { no: 2, name: "memory_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "cpu_ms", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "storage_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.InstanceMetrics
 */
class InstanceMetrics extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstanceMetrics().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstanceMetrics().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstanceMetrics().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(InstanceMetrics, a, b);
    }
}
exports.InstanceMetrics = InstanceMetrics;
InstanceMetrics.runtime = protobuf_1.proto3;
InstanceMetrics.typeName = "api.v1.capsule.InstanceMetrics";
InstanceMetrics.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "main_container", kind: "message", T: ContainerMetrics },
    { no: 4, name: "proxy_container", kind: "message", T: ContainerMetrics },
]);


/***/ }),

/***/ 5638:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/rollout.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Auth_AllowAuthorized = exports.Auth_AllowAny = exports.Auth = exports.GRPCMethod = exports.GRPCService = exports.GRPC = exports.HttpAuth = exports.Authentication = exports.Logging = exports.Middleware = exports.RoutingMethod_Ingress = exports.RoutingMethod_LoadBalancer = exports.RoutingMethod = exports.PublicInterface = exports.Interface = exports.Network = exports.ContainerSettings = exports.RolloutStatus = exports.RolloutConfig = exports.Rollout = exports.Change = exports.EventType = exports.RolloutState = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * @generated from enum api.v1.capsule.RolloutState
 */
var RolloutState;
(function (RolloutState) {
    /**
     * @generated from enum value: ROLLOUT_STATE_UNSPECIFIED = 0;
     */
    RolloutState[RolloutState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: ROLLOUT_STATE_PENDING = 1;
     */
    RolloutState[RolloutState["PENDING"] = 1] = "PENDING";
    /**
     * @generated from enum value: ROLLOUT_STATE_PREPARING = 6;
     */
    RolloutState[RolloutState["PREPARING"] = 6] = "PREPARING";
    /**
     * @generated from enum value: ROLLOUT_STATE_DEPLOYING = 2;
     */
    RolloutState[RolloutState["DEPLOYING"] = 2] = "DEPLOYING";
    /**
     * @generated from enum value: ROLLOUT_STATE_OBSERVING = 7;
     */
    RolloutState[RolloutState["OBSERVING"] = 7] = "OBSERVING";
    /**
     * @generated from enum value: ROLLOUT_STATE_DONE = 3;
     */
    RolloutState[RolloutState["DONE"] = 3] = "DONE";
    /**
     * @generated from enum value: ROLLOUT_STATE_ABORTED = 4;
     */
    RolloutState[RolloutState["ABORTED"] = 4] = "ABORTED";
    /**
     * @generated from enum value: ROLLOUT_STATE_FAILED = 5;
     */
    RolloutState[RolloutState["FAILED"] = 5] = "FAILED";
})(RolloutState || (exports.RolloutState = RolloutState = {}));
// Retrieve enum metadata with: proto3.getEnumType(RolloutState)
protobuf_1.proto3.util.setEnumType(RolloutState, "api.v1.capsule.RolloutState", [
    { no: 0, name: "ROLLOUT_STATE_UNSPECIFIED" },
    { no: 1, name: "ROLLOUT_STATE_PENDING" },
    { no: 6, name: "ROLLOUT_STATE_PREPARING" },
    { no: 2, name: "ROLLOUT_STATE_DEPLOYING" },
    { no: 7, name: "ROLLOUT_STATE_OBSERVING" },
    { no: 3, name: "ROLLOUT_STATE_DONE" },
    { no: 4, name: "ROLLOUT_STATE_ABORTED" },
    { no: 5, name: "ROLLOUT_STATE_FAILED" },
]);
/**
 * @generated from enum api.v1.capsule.EventType
 */
var EventType;
(function (EventType) {
    /**
     * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
     */
    EventType[EventType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: EVENT_TYPE_ABORT = 1;
     */
    EventType[EventType["ABORT"] = 1] = "ABORT";
})(EventType || (exports.EventType = EventType = {}));
// Retrieve enum metadata with: proto3.getEnumType(EventType)
protobuf_1.proto3.util.setEnumType(EventType, "api.v1.capsule.EventType", [
    { no: 0, name: "EVENT_TYPE_UNSPECIFIED" },
    { no: 1, name: "EVENT_TYPE_ABORT" },
]);
/**
 * @generated from message api.v1.capsule.Change
 */
class Change extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.Change.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Change().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Change().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Change().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Change, a, b);
    }
}
exports.Change = Change;
Change.runtime = protobuf_1.proto3;
Change.typeName = "api.v1.capsule.Change";
Change.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "field" },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "network", kind: "message", T: Network, oneof: "field" },
    { no: 4, name: "container_settings", kind: "message", T: ContainerSettings, oneof: "field" },
    { no: 5, name: "auto_add_rig_service_accounts", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
]);
/**
 * @generated from message api.v1.capsule.Rollout
 */
class Rollout extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 rollout_id = 1;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Rollout().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Rollout().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Rollout().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Rollout, a, b);
    }
}
exports.Rollout = Rollout;
Rollout.runtime = protobuf_1.proto3;
Rollout.typeName = "api.v1.capsule.Rollout";
Rollout.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "config", kind: "message", T: RolloutConfig },
    { no: 3, name: "status", kind: "message", T: RolloutStatus },
]);
/**
 * @generated from message api.v1.capsule.RolloutConfig
 */
class RolloutConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.Change changes = 3;
         */
        this.changes = [];
        /**
         * @generated from field: uint32 replicas = 4;
         */
        this.replicas = 0;
        /**
         * @generated from field: string build_id = 5;
         */
        this.buildId = "";
        /**
         * @generated from field: bool auto_add_rig_service_accounts = 8;
         */
        this.autoAddRigServiceAccounts = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RolloutConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RolloutConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RolloutConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RolloutConfig, a, b);
    }
}
exports.RolloutConfig = RolloutConfig;
RolloutConfig.runtime = protobuf_1.proto3;
RolloutConfig.typeName = "api.v1.capsule.RolloutConfig";
RolloutConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "changes", kind: "message", T: Change, repeated: true },
    { no: 4, name: "replicas", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "network", kind: "message", T: Network },
    { no: 7, name: "container_settings", kind: "message", T: ContainerSettings },
    { no: 8, name: "auto_add_rig_service_accounts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.capsule.RolloutStatus
 */
class RolloutStatus extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: api.v1.capsule.RolloutState state = 1;
         */
        this.state = RolloutState.UNSPECIFIED;
        /**
         * @generated from field: string message = 3;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RolloutStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RolloutStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RolloutStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RolloutStatus, a, b);
    }
}
exports.RolloutStatus = RolloutStatus;
RolloutStatus.runtime = protobuf_1.proto3;
RolloutStatus.typeName = "api.v1.capsule.RolloutStatus";
RolloutStatus.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(RolloutState) },
    { no: 2, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.ContainerSettings
 */
class ContainerSettings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, string> environment_variables = 1;
         */
        this.environmentVariables = {};
        /**
         * @generated from field: string command = 2;
         */
        this.command = "";
        /**
         * @generated from field: repeated string args = 3;
         */
        this.args = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContainerSettings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContainerSettings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContainerSettings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ContainerSettings, a, b);
    }
}
exports.ContainerSettings = ContainerSettings;
ContainerSettings.runtime = protobuf_1.proto3;
ContainerSettings.typeName = "api.v1.capsule.ContainerSettings";
ContainerSettings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "environment_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 2, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message api.v1.capsule.Network
 */
class Network extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.Interface interfaces = 1;
         */
        this.interfaces = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Network().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Network().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Network().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Network, a, b);
    }
}
exports.Network = Network;
Network.runtime = protobuf_1.proto3;
Network.typeName = "api.v1.capsule.Network";
Network.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "interfaces", kind: "message", T: Interface, repeated: true },
]);
/**
 * @generated from message api.v1.capsule.Interface
 */
class Interface extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 port = 1;
         */
        this.port = 0;
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Interface().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Interface().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Interface().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Interface, a, b);
    }
}
exports.Interface = Interface;
Interface.runtime = protobuf_1.proto3;
Interface.typeName = "api.v1.capsule.Interface";
Interface.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public", kind: "message", T: PublicInterface },
    { no: 5, name: "logging", kind: "message", T: Logging },
    { no: 6, name: "authentication", kind: "message", T: Authentication },
]);
/**
 * @generated from message api.v1.capsule.PublicInterface
 */
class PublicInterface extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool enabled = 1;
         */
        this.enabled = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicInterface().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicInterface().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicInterface().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicInterface, a, b);
    }
}
exports.PublicInterface = PublicInterface;
PublicInterface.runtime = protobuf_1.proto3;
PublicInterface.typeName = "api.v1.capsule.PublicInterface";
PublicInterface.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "method", kind: "message", T: RoutingMethod },
]);
/**
 * @generated from message api.v1.capsule.RoutingMethod
 */
class RoutingMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.RoutingMethod.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoutingMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoutingMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoutingMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RoutingMethod, a, b);
    }
}
exports.RoutingMethod = RoutingMethod;
RoutingMethod.runtime = protobuf_1.proto3;
RoutingMethod.typeName = "api.v1.capsule.RoutingMethod";
RoutingMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "load_balancer", kind: "message", T: RoutingMethod_LoadBalancer, oneof: "kind" },
    { no: 2, name: "ingress", kind: "message", T: RoutingMethod_Ingress, oneof: "kind" },
]);
/**
 * @generated from message api.v1.capsule.RoutingMethod.LoadBalancer
 */
class RoutingMethod_LoadBalancer extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 port = 1;
         */
        this.port = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoutingMethod_LoadBalancer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoutingMethod_LoadBalancer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoutingMethod_LoadBalancer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RoutingMethod_LoadBalancer, a, b);
    }
}
exports.RoutingMethod_LoadBalancer = RoutingMethod_LoadBalancer;
RoutingMethod_LoadBalancer.runtime = protobuf_1.proto3;
RoutingMethod_LoadBalancer.typeName = "api.v1.capsule.RoutingMethod.LoadBalancer";
RoutingMethod_LoadBalancer.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message api.v1.capsule.RoutingMethod.Ingress
 */
class RoutingMethod_Ingress extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string host = 1;
         */
        this.host = "";
        /**
         * @generated from field: bool tls = 2;
         */
        this.tls = false;
        /**
         * @generated from field: string path_prefix = 3;
         */
        this.pathPrefix = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RoutingMethod_Ingress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RoutingMethod_Ingress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RoutingMethod_Ingress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RoutingMethod_Ingress, a, b);
    }
}
exports.RoutingMethod_Ingress = RoutingMethod_Ingress;
RoutingMethod_Ingress.runtime = protobuf_1.proto3;
RoutingMethod_Ingress.typeName = "api.v1.capsule.RoutingMethod.Ingress";
RoutingMethod_Ingress.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tls", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.Middleware
 */
class Middleware extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.Middleware.kind
         */
        this.kind = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Middleware().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Middleware().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Middleware().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Middleware, a, b);
    }
}
exports.Middleware = Middleware;
Middleware.runtime = protobuf_1.proto3;
Middleware.typeName = "api.v1.capsule.Middleware";
Middleware.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "logging", kind: "message", T: Logging, oneof: "kind" },
    { no: 2, name: "authentication", kind: "message", T: Authentication, oneof: "kind" },
]);
/**
 * @generated from message api.v1.capsule.Logging
 */
class Logging extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool enabled = 1;
         */
        this.enabled = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Logging().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Logging().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Logging().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Logging, a, b);
    }
}
exports.Logging = Logging;
Logging.runtime = protobuf_1.proto3;
Logging.typeName = "api.v1.capsule.Logging";
Logging.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.capsule.Authentication
 */
class Authentication extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool enabled = 1;
         */
        this.enabled = false;
        /**
         * @generated from field: repeated api.v1.capsule.HttpAuth http = 3;
         */
        this.http = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Authentication().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Authentication().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Authentication().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Authentication, a, b);
    }
}
exports.Authentication = Authentication;
Authentication.runtime = protobuf_1.proto3;
Authentication.typeName = "api.v1.capsule.Authentication";
Authentication.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "default", kind: "message", T: Auth },
    { no: 3, name: "http", kind: "message", T: HttpAuth, repeated: true },
    { no: 4, name: "grpc", kind: "message", T: GRPC },
]);
/**
 * @generated from message api.v1.capsule.HttpAuth
 */
class HttpAuth extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string path = 1;
         */
        this.path = "";
        /**
         * @generated from field: bool exact = 3;
         */
        this.exact = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HttpAuth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HttpAuth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HttpAuth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HttpAuth, a, b);
    }
}
exports.HttpAuth = HttpAuth;
HttpAuth.runtime = protobuf_1.proto3;
HttpAuth.typeName = "api.v1.capsule.HttpAuth";
HttpAuth.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth", kind: "message", T: Auth },
    { no: 3, name: "exact", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.capsule.GRPC
 */
class GRPC extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string path_prefix = 2;
         */
        this.pathPrefix = "";
        /**
         * @generated from field: map<string, api.v1.capsule.GRPCService> services = 3;
         */
        this.services = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GRPC().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GRPC().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GRPC().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GRPC, a, b);
    }
}
exports.GRPC = GRPC;
GRPC.runtime = protobuf_1.proto3;
GRPC.typeName = "api.v1.capsule.GRPC";
GRPC.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "services", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: GRPCService } },
]);
/**
 * @generated from message api.v1.capsule.GRPCService
 */
class GRPCService extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, api.v1.capsule.GRPCMethod> methods = 2;
         */
        this.methods = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GRPCService().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GRPCService().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GRPCService().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GRPCService, a, b);
    }
}
exports.GRPCService = GRPCService;
GRPCService.runtime = protobuf_1.proto3;
GRPCService.typeName = "api.v1.capsule.GRPCService";
GRPCService.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "methods", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: GRPCMethod } },
]);
/**
 * @generated from message api.v1.capsule.GRPCMethod
 */
class GRPCMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GRPCMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GRPCMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GRPCMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GRPCMethod, a, b);
    }
}
exports.GRPCMethod = GRPCMethod;
GRPCMethod.runtime = protobuf_1.proto3;
GRPCMethod.typeName = "api.v1.capsule.GRPCMethod";
GRPCMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: Auth },
]);
/**
 * @generated from message api.v1.capsule.Auth
 */
class Auth extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.capsule.Auth.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Auth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Auth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Auth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Auth, a, b);
    }
}
exports.Auth = Auth;
Auth.runtime = protobuf_1.proto3;
Auth.typeName = "api.v1.capsule.Auth";
Auth.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "allow_any", kind: "message", T: Auth_AllowAny, oneof: "method" },
    { no: 2, name: "allow_authorized", kind: "message", T: Auth_AllowAuthorized, oneof: "method" },
]);
/**
 * @generated from message api.v1.capsule.Auth.AllowAny
 */
class Auth_AllowAny extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Auth_AllowAny().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Auth_AllowAny().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Auth_AllowAny().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Auth_AllowAny, a, b);
    }
}
exports.Auth_AllowAny = Auth_AllowAny;
Auth_AllowAny.runtime = protobuf_1.proto3;
Auth_AllowAny.typeName = "api.v1.capsule.Auth.AllowAny";
Auth_AllowAny.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.Auth.AllowAuthorized
 */
class Auth_AllowAuthorized extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, string> claims = 1;
         */
        this.claims = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Auth_AllowAuthorized().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Auth_AllowAuthorized().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Auth_AllowAuthorized().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Auth_AllowAuthorized, a, b);
    }
}
exports.Auth_AllowAuthorized = Auth_AllowAuthorized;
Auth_AllowAuthorized.runtime = protobuf_1.proto3;
Auth_AllowAuthorized.typeName = "api.v1.capsule.Auth.AllowAuthorized";
Auth_AllowAuthorized.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "claims", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);


/***/ }),

/***/ 6779:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/capsule/service.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(7830);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage capsules.
 *
 * @generated from service api.v1.capsule.Service
 */
exports.t = {
    typeName: "api.v1.capsule.Service",
    methods: {
        /**
         * Create a new capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a capsule by id.
         *
         * @generated from rpc api.v1.capsule.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Logs returns (and streams) the log output of a capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Logs
         */
        logs: {
            name: "Logs",
            I: service_pb_js_1.LogsRequest,
            O: service_pb_js_1.LogsResponse,
            kind: protobuf_1.MethodKind.ServerStreaming,
        },
        /**
         * Update a capsule.
         *
         * @generated from rpc api.v1.capsule.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lists all capsules for current project.
         *
         * @generated from rpc api.v1.capsule.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a capsule by name.
         *
         * @generated from rpc api.v1.capsule.Service.GetByName
         */
        getByName: {
            name: "GetByName",
            I: service_pb_js_1.GetByNameRequest,
            O: service_pb_js_1.GetByNameResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Create a new build.
         * Builds are immutable and cannot change. Create a new build to make
         * changes from an existing one.
         *
         * @generated from rpc api.v1.capsule.Service.CreateBuild
         */
        createBuild: {
            name: "CreateBuild",
            I: service_pb_js_1.CreateBuildRequest,
            O: service_pb_js_1.CreateBuildResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List builds for a capsule.
         *
         * @generated from rpc api.v1.capsule.Service.ListBuilds
         */
        listBuilds: {
            name: "ListBuilds",
            I: service_pb_js_1.ListBuildsRequest,
            O: service_pb_js_1.ListBuildsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a build.
         *
         * @generated from rpc api.v1.capsule.Service.DeleteBuild
         */
        deleteBuild: {
            name: "DeleteBuild",
            I: service_pb_js_1.DeleteBuildRequest,
            O: service_pb_js_1.DeleteBuildResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Deploy changes to a capsule.
         * When deploying, a new rollout will be initiated. Only one rollout can be
         * running at a single point in time.
         * Use `Abort` to abort an already running rollout.
         *
         * @generated from rpc api.v1.capsule.Service.Deploy
         */
        deploy: {
            name: "Deploy",
            I: service_pb_js_1.DeployRequest,
            O: service_pb_js_1.DeployResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lists all instances for the capsule.
         *
         * @generated from rpc api.v1.capsule.Service.ListInstances
         */
        listInstances: {
            name: "ListInstances",
            I: service_pb_js_1.ListInstancesRequest,
            O: service_pb_js_1.ListInstancesResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Restart a single capsule instance.
         *
         * @generated from rpc api.v1.capsule.Service.RestartInstance
         */
        restartInstance: {
            name: "RestartInstance",
            I: service_pb_js_1.RestartInstanceRequest,
            O: service_pb_js_1.RestartInstanceResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a single rollout by ID.
         *
         * @generated from rpc api.v1.capsule.Service.GetRollout
         */
        getRollout: {
            name: "GetRollout",
            I: service_pb_js_1.GetRolloutRequest,
            O: service_pb_js_1.GetRolloutResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lists all rollouts for the capsule.
         *
         * @generated from rpc api.v1.capsule.Service.ListRollouts
         */
        listRollouts: {
            name: "ListRollouts",
            I: service_pb_js_1.ListRolloutsRequest,
            O: service_pb_js_1.ListRolloutsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Abort the rollout.
         *
         * @generated from rpc api.v1.capsule.Service.AbortRollout
         */
        abortRollout: {
            name: "AbortRollout",
            I: service_pb_js_1.AbortRolloutRequest,
            O: service_pb_js_1.AbortRolloutResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.capsule.Service.ListEvents
         */
        listEvents: {
            name: "ListEvents",
            I: service_pb_js_1.ListEventsRequest,
            O: service_pb_js_1.ListEventsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get metrics for a capsule
         *
         * @generated from rpc api.v1.capsule.Service.CapsuleMetrics
         */
        capsuleMetrics: {
            name: "CapsuleMetrics",
            I: service_pb_js_1.CapsuleMetricsRequest,
            O: service_pb_js_1.CapsuleMetricsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 7830:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/capsule/service.proto (package api.v1.capsule, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CapsuleMetricsResponse = exports.CapsuleMetricsRequest = exports.ListEventsResponse = exports.ListEventsRequest = exports.AbortRolloutResponse = exports.AbortRolloutRequest = exports.GetRolloutResponse = exports.GetRolloutRequest = exports.ListRolloutsResponse = exports.ListRolloutsRequest = exports.RestartInstanceResponse = exports.RestartInstanceRequest = exports.ListInstancesResponse = exports.ListInstancesRequest = exports.DeployResponse = exports.DeployRequest = exports.DeleteBuildResponse = exports.DeleteBuildRequest = exports.ListBuildsResponse = exports.ListBuildsRequest = exports.CreateBuildResponse = exports.CreateBuildRequest = exports.GetByNameResponse = exports.GetByNameRequest = exports.ListResponse = exports.ListRequest = exports.UpdateResponse = exports.UpdateRequest = exports.LogsResponse = exports.LogsRequest = exports.DeleteResponse = exports.DeleteRequest = exports.GetResponse = exports.GetRequest = exports.CreateResponse = exports.CreateRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const capsule_pb_js_1 = __nccwpck_require__(7203);
const log_pb_js_1 = __nccwpck_require__(743);
const common_pb_js_1 = __nccwpck_require__(1101);
const build_pb_js_1 = __nccwpck_require__(646);
const rollout_pb_js_1 = __nccwpck_require__(5638);
const instance_pb_js_1 = __nccwpck_require__(1717);
const event_pb_js_1 = __nccwpck_require__(1607);
const metrics_pb_js_1 = __nccwpck_require__(886);
/**
 * @generated from message api.v1.capsule.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The name of the capsule. This property must be unique and cannot be changed
         * after creation.
         * Resources created in associating with the capsule will use this name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The initial properties of the capsule.
         *
         * @generated from field: repeated api.v1.capsule.Update initializers = 2;
         */
        this.initializers = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.capsule.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initializers", kind: "message", T: capsule_pb_js_1.Update, repeated: true },
]);
/**
 * @generated from message api.v1.capsule.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.capsule.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.capsule.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.capsule.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: capsule_pb_js_1.Capsule },
]);
/**
 * @generated from message api.v1.capsule.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to delete.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.capsule.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.capsule.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.LogsRequest
 */
class LogsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to read logs from.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The instance in the capsule to read logs from.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        /**
         * If true, the request will stay open and stream new log messages.
         *
         * @generated from field: bool follow = 3;
         */
        this.follow = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogsRequest, a, b);
    }
}
exports.LogsRequest = LogsRequest;
LogsRequest.runtime = protobuf_1.proto3;
LogsRequest.typeName = "api.v1.capsule.LogsRequest";
LogsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "follow", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * The response of a capsule.Logs RPC
 *
 * @generated from message api.v1.capsule.LogsResponse
 */
class LogsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogsResponse, a, b);
    }
}
exports.LogsResponse = LogsResponse;
LogsResponse.runtime = protobuf_1.proto3;
LogsResponse.typeName = "api.v1.capsule.LogsResponse";
LogsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: log_pb_js_1.Log },
]);
/**
 * @generated from message api.v1.capsule.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to update.
         *
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * The updates to apply to the capsule.
         *
         * @generated from field: repeated api.v1.capsule.Update updates = 2;
         */
        this.updates = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.capsule.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: capsule_pb_js_1.Update, repeated: true },
]);
/**
 * @generated from message api.v1.capsule.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.capsule.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.capsule.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.capsule.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsules.
         *
         * @generated from field: repeated api.v1.capsule.Capsule capsules = 1;
         */
        this.capsules = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.capsule.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsules", kind: "message", T: capsule_pb_js_1.Capsule, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.GetByNameRequest
 */
class GetByNameRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The capsule to get.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByNameRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByNameRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByNameRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByNameRequest, a, b);
    }
}
exports.GetByNameRequest = GetByNameRequest;
GetByNameRequest.runtime = protobuf_1.proto3;
GetByNameRequest.typeName = "api.v1.capsule.GetByNameRequest";
GetByNameRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.GetByNameResponse
 */
class GetByNameResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByNameResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByNameResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByNameResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByNameResponse, a, b);
    }
}
exports.GetByNameResponse = GetByNameResponse;
GetByNameResponse.runtime = protobuf_1.proto3;
GetByNameResponse.typeName = "api.v1.capsule.GetByNameResponse";
GetByNameResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule", kind: "message", T: capsule_pb_js_1.Capsule },
]);
/**
 * @generated from message api.v1.capsule.CreateBuildRequest
 */
class CreateBuildRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: string build_id = 2;
         */
        this.buildId = "";
        /**
         * @generated from field: string image = 3;
         */
        this.image = "";
        /**
         * @generated from field: map<string, string> labels = 5;
         */
        this.labels = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateBuildRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateBuildRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateBuildRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateBuildRequest, a, b);
    }
}
exports.CreateBuildRequest = CreateBuildRequest;
CreateBuildRequest.runtime = protobuf_1.proto3;
CreateBuildRequest.typeName = "api.v1.capsule.CreateBuildRequest";
CreateBuildRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "origin", kind: "message", T: build_pb_js_1.Origin },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * @generated from message api.v1.capsule.CreateBuildResponse
 */
class CreateBuildResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateBuildResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateBuildResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateBuildResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateBuildResponse, a, b);
    }
}
exports.CreateBuildResponse = CreateBuildResponse;
CreateBuildResponse.runtime = protobuf_1.proto3;
CreateBuildResponse.typeName = "api.v1.capsule.CreateBuildResponse";
CreateBuildResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.ListBuildsRequest
 */
class ListBuildsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListBuildsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListBuildsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListBuildsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListBuildsRequest, a, b);
    }
}
exports.ListBuildsRequest = ListBuildsRequest;
ListBuildsRequest.runtime = protobuf_1.proto3;
ListBuildsRequest.typeName = "api.v1.capsule.ListBuildsRequest";
ListBuildsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.capsule.ListBuildsResponse
 */
class ListBuildsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.Build builds = 1;
         */
        this.builds = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListBuildsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListBuildsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListBuildsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListBuildsResponse, a, b);
    }
}
exports.ListBuildsResponse = ListBuildsResponse;
ListBuildsResponse.runtime = protobuf_1.proto3;
ListBuildsResponse.typeName = "api.v1.capsule.ListBuildsResponse";
ListBuildsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: build_pb_js_1.Build, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.DeleteBuildRequest
 */
class DeleteBuildRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: string build_id = 2;
         */
        this.buildId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteBuildRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteBuildRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteBuildRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteBuildRequest, a, b);
    }
}
exports.DeleteBuildRequest = DeleteBuildRequest;
DeleteBuildRequest.runtime = protobuf_1.proto3;
DeleteBuildRequest.typeName = "api.v1.capsule.DeleteBuildRequest";
DeleteBuildRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.DeleteBuildResponse
 */
class DeleteBuildResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteBuildResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteBuildResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteBuildResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteBuildResponse, a, b);
    }
}
exports.DeleteBuildResponse = DeleteBuildResponse;
DeleteBuildResponse.runtime = protobuf_1.proto3;
DeleteBuildResponse.typeName = "api.v1.capsule.DeleteBuildResponse";
DeleteBuildResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.DeployRequest
 */
class DeployRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * Changes to include in the new rollout.
         *
         * @generated from field: repeated api.v1.capsule.Change changes = 2;
         */
        this.changes = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeployRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeployRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeployRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeployRequest, a, b);
    }
}
exports.DeployRequest = DeployRequest;
DeployRequest.runtime = protobuf_1.proto3;
DeployRequest.typeName = "api.v1.capsule.DeployRequest";
DeployRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changes", kind: "message", T: rollout_pb_js_1.Change, repeated: true },
]);
/**
 * @generated from message api.v1.capsule.DeployResponse
 */
class DeployResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 rollout_id = 1;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeployResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeployResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeployResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeployResponse, a, b);
    }
}
exports.DeployResponse = DeployResponse;
DeployResponse.runtime = protobuf_1.proto3;
DeployResponse.typeName = "api.v1.capsule.DeployResponse";
DeployResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.ListInstancesRequest
 */
class ListInstancesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListInstancesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListInstancesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListInstancesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListInstancesRequest, a, b);
    }
}
exports.ListInstancesRequest = ListInstancesRequest;
ListInstancesRequest.runtime = protobuf_1.proto3;
ListInstancesRequest.typeName = "api.v1.capsule.ListInstancesRequest";
ListInstancesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.capsule.ListInstancesResponse
 */
class ListInstancesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.Instance instances = 1;
         */
        this.instances = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListInstancesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListInstancesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListInstancesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListInstancesResponse, a, b);
    }
}
exports.ListInstancesResponse = ListInstancesResponse;
ListInstancesResponse.runtime = protobuf_1.proto3;
ListInstancesResponse.typeName = "api.v1.capsule.ListInstancesResponse";
ListInstancesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: instance_pb_js_1.Instance, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.RestartInstanceRequest
 */
class RestartInstanceRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RestartInstanceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RestartInstanceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RestartInstanceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RestartInstanceRequest, a, b);
    }
}
exports.RestartInstanceRequest = RestartInstanceRequest;
RestartInstanceRequest.runtime = protobuf_1.proto3;
RestartInstanceRequest.typeName = "api.v1.capsule.RestartInstanceRequest";
RestartInstanceRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.capsule.RestartInstanceResponse
 */
class RestartInstanceResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RestartInstanceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RestartInstanceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RestartInstanceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RestartInstanceResponse, a, b);
    }
}
exports.RestartInstanceResponse = RestartInstanceResponse;
RestartInstanceResponse.runtime = protobuf_1.proto3;
RestartInstanceResponse.typeName = "api.v1.capsule.RestartInstanceResponse";
RestartInstanceResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.ListRolloutsRequest
 */
class ListRolloutsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRolloutsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRolloutsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRolloutsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRolloutsRequest, a, b);
    }
}
exports.ListRolloutsRequest = ListRolloutsRequest;
ListRolloutsRequest.runtime = protobuf_1.proto3;
ListRolloutsRequest.typeName = "api.v1.capsule.ListRolloutsRequest";
ListRolloutsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.capsule.ListRolloutsResponse
 */
class ListRolloutsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.Rollout rollouts = 1;
         */
        this.rollouts = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRolloutsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRolloutsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRolloutsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRolloutsResponse, a, b);
    }
}
exports.ListRolloutsResponse = ListRolloutsResponse;
ListRolloutsResponse.runtime = protobuf_1.proto3;
ListRolloutsResponse.typeName = "api.v1.capsule.ListRolloutsResponse";
ListRolloutsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollouts", kind: "message", T: rollout_pb_js_1.Rollout, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.GetRolloutRequest
 */
class GetRolloutRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: uint64 rollout_id = 2;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRolloutRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRolloutRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRolloutRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRolloutRequest, a, b);
    }
}
exports.GetRolloutRequest = GetRolloutRequest;
GetRolloutRequest.runtime = protobuf_1.proto3;
GetRolloutRequest.typeName = "api.v1.capsule.GetRolloutRequest";
GetRolloutRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.GetRolloutResponse
 */
class GetRolloutResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRolloutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRolloutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRolloutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRolloutResponse, a, b);
    }
}
exports.GetRolloutResponse = GetRolloutResponse;
GetRolloutResponse.runtime = protobuf_1.proto3;
GetRolloutResponse.typeName = "api.v1.capsule.GetRolloutResponse";
GetRolloutResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "rollout", kind: "message", T: rollout_pb_js_1.Rollout },
]);
/**
 * @generated from message api.v1.capsule.AbortRolloutRequest
 */
class AbortRolloutRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: uint64 rollout_id = 2;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AbortRolloutRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AbortRolloutRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AbortRolloutRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AbortRolloutRequest, a, b);
    }
}
exports.AbortRolloutRequest = AbortRolloutRequest;
AbortRolloutRequest.runtime = protobuf_1.proto3;
AbortRolloutRequest.typeName = "api.v1.capsule.AbortRolloutRequest";
AbortRolloutRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.AbortRolloutResponse
 */
class AbortRolloutResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AbortRolloutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AbortRolloutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AbortRolloutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AbortRolloutResponse, a, b);
    }
}
exports.AbortRolloutResponse = AbortRolloutResponse;
AbortRolloutResponse.runtime = protobuf_1.proto3;
AbortRolloutResponse.typeName = "api.v1.capsule.AbortRolloutResponse";
AbortRolloutResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.capsule.ListEventsRequest
 */
class ListEventsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * @generated from field: uint64 rollout_id = 2;
         */
        this.rolloutId = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListEventsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListEventsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListEventsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListEventsRequest, a, b);
    }
}
exports.ListEventsRequest = ListEventsRequest;
ListEventsRequest.runtime = protobuf_1.proto3;
ListEventsRequest.typeName = "api.v1.capsule.ListEventsRequest";
ListEventsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.capsule.ListEventsResponse
 */
class ListEventsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.Event events = 1;
         */
        this.events = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListEventsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListEventsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListEventsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListEventsResponse, a, b);
    }
}
exports.ListEventsResponse = ListEventsResponse;
ListEventsResponse.runtime = protobuf_1.proto3;
ListEventsResponse.typeName = "api.v1.capsule.ListEventsResponse";
ListEventsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: event_pb_js_1.Event, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.capsule.CapsuleMetricsRequest
 */
class CapsuleMetricsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string capsule_id = 1;
         */
        this.capsuleId = "";
        /**
         * If set, only returns metrics for the given instance_id.
         *
         * @generated from field: string instance_id = 2;
         */
        this.instanceId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CapsuleMetricsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CapsuleMetricsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CapsuleMetricsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CapsuleMetricsRequest, a, b);
    }
}
exports.CapsuleMetricsRequest = CapsuleMetricsRequest;
CapsuleMetricsRequest.runtime = protobuf_1.proto3;
CapsuleMetricsRequest.typeName = "api.v1.capsule.CapsuleMetricsRequest";
CapsuleMetricsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "capsule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.capsule.CapsuleMetricsResponse
 */
class CapsuleMetricsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.capsule.InstanceMetrics instance_metrics = 1;
         */
        this.instanceMetrics = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CapsuleMetricsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CapsuleMetricsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CapsuleMetricsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CapsuleMetricsResponse, a, b);
    }
}
exports.CapsuleMetricsResponse = CapsuleMetricsResponse;
CapsuleMetricsResponse.runtime = protobuf_1.proto3;
CapsuleMetricsResponse.typeName = "api.v1.capsule.CapsuleMetricsResponse";
CapsuleMetricsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "instance_metrics", kind: "message", T: metrics_pb_js_1.InstanceMetrics, repeated: true },
]);


/***/ }),

/***/ 6882:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/database/database.proto (package api.v1.database, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Database = exports.Info = exports.Credential = exports.Table = exports.Update = exports.Type = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from enum api.v1.database.Type
 */
var Type;
(function (Type) {
    /**
     * @generated from enum value: TYPE_UNSPECIFIED = 0;
     */
    Type[Type["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: TYPE_MONGO = 1;
     */
    Type[Type["MONGO"] = 1] = "MONGO";
    /**
     * @generated from enum value: TYPE_POSTGRES = 2;
     */
    Type[Type["POSTGRES"] = 2] = "POSTGRES";
})(Type || (exports.Type = Type = {}));
// Retrieve enum metadata with: proto3.getEnumType(Type)
protobuf_1.proto3.util.setEnumType(Type, "api.v1.database.Type", [
    { no: 0, name: "TYPE_UNSPECIFIED" },
    { no: 1, name: "TYPE_MONGO" },
    { no: 2, name: "TYPE_POSTGRES" },
]);
/**
 * @generated from message api.v1.database.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.database.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.database.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
]);
/**
 * @generated from message api.v1.database.Table
 */
class Table extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Table().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Table().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Table().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Table, a, b);
    }
}
exports.Table = Table;
Table.runtime = protobuf_1.proto3;
Table.typeName = "api.v1.database.Table";
Table.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.Credential
 */
class Credential extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * @generated from field: string secret = 2;
         */
        this.secret = "";
        /**
         * @generated from field: string name = 3;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Credential().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Credential().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Credential().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Credential, a, b);
    }
}
exports.Credential = Credential;
Credential.runtime = protobuf_1.proto3;
Credential.typeName = "api.v1.database.Credential";
Credential.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message api.v1.database.Info
 */
class Info extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.database.Credential credentials = 1;
         */
        this.credentials = [];
        /**
         * @generated from field: repeated api.v1.database.Table tables = 3;
         */
        this.tables = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Info().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Info().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Info().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Info, a, b);
    }
}
exports.Info = Info;
Info.runtime = protobuf_1.proto3;
Info.typeName = "api.v1.database.Info";
Info.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "credentials", kind: "message", T: Credential, repeated: true },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "tables", kind: "message", T: Table, repeated: true },
]);
/**
 * @generated from message api.v1.database.Database
 */
class Database extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        /**
         * unique
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: api.v1.database.Type type = 3;
         */
        this.type = Type.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Database().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Database().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Database().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Database, a, b);
    }
}
exports.Database = Database;
Database.runtime = protobuf_1.proto3;
Database.typeName = "api.v1.database.Database";
Database.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(Type) },
    { no: 4, name: "info", kind: "message", T: Info },
]);


/***/ }),

/***/ 7139:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/database/service.proto (package api.v1.database, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(8861);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage databases.
 *
 * @generated from service api.v1.database.Service
 */
exports.t = {
    typeName: "api.v1.database.Service",
    methods: {
        /**
         * @generated from rpc api.v1.database.Service.CreateCredential
         */
        createCredential: {
            name: "CreateCredential",
            I: service_pb_js_1.CreateCredentialRequest,
            O: service_pb_js_1.CreateCredentialResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.DeleteCredential
         */
        deleteCredential: {
            name: "DeleteCredential",
            I: service_pb_js_1.DeleteCredentialRequest,
            O: service_pb_js_1.DeleteCredentialResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.GetByName
         */
        getByName: {
            name: "GetByName",
            I: service_pb_js_1.GetByNameRequest,
            O: service_pb_js_1.GetByNameResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.GetEndpoint
         */
        getEndpoint: {
            name: "GetEndpoint",
            I: service_pb_js_1.GetEndpointRequest,
            O: service_pb_js_1.GetEndpointResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.CreateTable
         */
        createTable: {
            name: "CreateTable",
            I: service_pb_js_1.CreateTableRequest,
            O: service_pb_js_1.CreateTableResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.DeleteTable
         */
        deleteTable: {
            name: "DeleteTable",
            I: service_pb_js_1.DeleteTableRequest,
            O: service_pb_js_1.DeleteTableResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.database.Service.ListTables
         */
        listTables: {
            name: "ListTables",
            I: service_pb_js_1.ListTablesRequest,
            O: service_pb_js_1.ListTablesResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 8861:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/database/service.proto (package api.v1.database, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListTablesResponse = exports.ListTablesRequest = exports.DeleteTableResponse = exports.DeleteTableRequest = exports.CreateTableResponse = exports.CreateTableRequest = exports.GetEndpointResponse = exports.GetEndpointRequest = exports.ListResponse = exports.ListRequest = exports.DeleteResponse = exports.DeleteRequest = exports.UpdateResponse = exports.UpdateRequest = exports.GetResponse = exports.GetRequest = exports.CreateResponse = exports.CreateRequest = exports.DeleteCredentialResponse = exports.DeleteCredentialRequest = exports.CreateCredentialResponse = exports.CreateCredentialRequest = exports.GetByNameResponse = exports.GetByNameRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const database_pb_js_1 = __nccwpck_require__(6882);
const common_pb_js_1 = __nccwpck_require__(1101);
/**
 * @generated from message api.v1.database.GetByNameRequest
 */
class GetByNameRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByNameRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByNameRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByNameRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByNameRequest, a, b);
    }
}
exports.GetByNameRequest = GetByNameRequest;
GetByNameRequest.runtime = protobuf_1.proto3;
GetByNameRequest.typeName = "api.v1.database.GetByNameRequest";
GetByNameRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.GetByNameResponse
 */
class GetByNameResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByNameResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByNameResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByNameResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByNameResponse, a, b);
    }
}
exports.GetByNameResponse = GetByNameResponse;
GetByNameResponse.runtime = protobuf_1.proto3;
GetByNameResponse.typeName = "api.v1.database.GetByNameResponse";
GetByNameResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "database", kind: "message", T: database_pb_js_1.Database },
]);
/**
 * @generated from message api.v1.database.CreateCredentialRequest
 */
class CreateCredentialRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: string database_id = 2;
         */
        this.databaseId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateCredentialRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateCredentialRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateCredentialRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateCredentialRequest, a, b);
    }
}
exports.CreateCredentialRequest = CreateCredentialRequest;
CreateCredentialRequest.runtime = protobuf_1.proto3;
CreateCredentialRequest.typeName = "api.v1.database.CreateCredentialRequest";
CreateCredentialRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.CreateCredentialResponse
 */
class CreateCredentialResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * @generated from field: string client_secret = 2;
         */
        this.clientSecret = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateCredentialResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateCredentialResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateCredentialResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateCredentialResponse, a, b);
    }
}
exports.CreateCredentialResponse = CreateCredentialResponse;
CreateCredentialResponse.runtime = protobuf_1.proto3;
CreateCredentialResponse.typeName = "api.v1.database.CreateCredentialResponse";
CreateCredentialResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.DeleteCredentialRequest
 */
class DeleteCredentialRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        /**
         * @generated from field: string credential_name = 2;
         */
        this.credentialName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteCredentialRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteCredentialRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteCredentialRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteCredentialRequest, a, b);
    }
}
exports.DeleteCredentialRequest = DeleteCredentialRequest;
DeleteCredentialRequest.runtime = protobuf_1.proto3;
DeleteCredentialRequest.typeName = "api.v1.database.DeleteCredentialRequest";
DeleteCredentialRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credential_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.DeleteCredentialResponse
 */
class DeleteCredentialResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteCredentialResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteCredentialResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteCredentialResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteCredentialResponse, a, b);
    }
}
exports.DeleteCredentialResponse = DeleteCredentialResponse;
DeleteCredentialResponse.runtime = protobuf_1.proto3;
DeleteCredentialResponse.typeName = "api.v1.database.DeleteCredentialResponse";
DeleteCredentialResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.database.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.database.Update initializers = 1;
         */
        this.initializers = [];
        /**
         * @generated from field: api.v1.database.Type type = 2;
         */
        this.type = database_pb_js_1.Type.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.database.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "initializers", kind: "message", T: database_pb_js_1.Update, repeated: true },
    { no: 2, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(database_pb_js_1.Type) },
]);
/**
 * @generated from message api.v1.database.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * @generated from field: string client_secret = 3;
         */
        this.clientSecret = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.database.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "message", T: database_pb_js_1.Database },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.database.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.database.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "message", T: database_pb_js_1.Database },
]);
/**
 * @generated from message api.v1.database.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        /**
         * @generated from field: repeated api.v1.database.Update updates = 2;
         */
        this.updates = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.database.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: database_pb_js_1.Update, repeated: true },
]);
/**
 * @generated from message api.v1.database.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.database.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "message", T: database_pb_js_1.Database },
]);
/**
 * @generated from message api.v1.database.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.database.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.database.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.database.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.database.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.database.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.database.Database databases = 1;
         */
        this.databases = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.database.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "databases", kind: "message", T: database_pb_js_1.Database, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.database.GetEndpointRequest
 */
class GetEndpointRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        /**
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * @generated from field: string client_secret = 3;
         */
        this.clientSecret = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetEndpointRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetEndpointRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetEndpointRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetEndpointRequest, a, b);
    }
}
exports.GetEndpointRequest = GetEndpointRequest;
GetEndpointRequest.runtime = protobuf_1.proto3;
GetEndpointRequest.typeName = "api.v1.database.GetEndpointRequest";
GetEndpointRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.GetEndpointResponse
 */
class GetEndpointResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string endpoint = 1;
         */
        this.endpoint = "";
        /**
         * @generated from field: string database_name = 2;
         */
        this.databaseName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetEndpointResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetEndpointResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetEndpointResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetEndpointResponse, a, b);
    }
}
exports.GetEndpointResponse = GetEndpointResponse;
GetEndpointResponse.runtime = protobuf_1.proto3;
GetEndpointResponse.typeName = "api.v1.database.GetEndpointResponse";
GetEndpointResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "database_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.CreateTableRequest
 */
class CreateTableRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        /**
         * @generated from field: string table_name = 2;
         */
        this.tableName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateTableRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateTableRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateTableRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateTableRequest, a, b);
    }
}
exports.CreateTableRequest = CreateTableRequest;
CreateTableRequest.runtime = protobuf_1.proto3;
CreateTableRequest.typeName = "api.v1.database.CreateTableRequest";
CreateTableRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.CreateTableResponse
 */
class CreateTableResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateTableResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateTableResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateTableResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateTableResponse, a, b);
    }
}
exports.CreateTableResponse = CreateTableResponse;
CreateTableResponse.runtime = protobuf_1.proto3;
CreateTableResponse.typeName = "api.v1.database.CreateTableResponse";
CreateTableResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.database.DeleteTableRequest
 */
class DeleteTableRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        /**
         * @generated from field: string table_name = 2;
         */
        this.tableName = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteTableRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteTableRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteTableRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteTableRequest, a, b);
    }
}
exports.DeleteTableRequest = DeleteTableRequest;
DeleteTableRequest.runtime = protobuf_1.proto3;
DeleteTableRequest.typeName = "api.v1.database.DeleteTableRequest";
DeleteTableRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.DeleteTableResponse
 */
class DeleteTableResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteTableResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteTableResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteTableResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteTableResponse, a, b);
    }
}
exports.DeleteTableResponse = DeleteTableResponse;
DeleteTableResponse.runtime = protobuf_1.proto3;
DeleteTableResponse.typeName = "api.v1.database.DeleteTableResponse";
DeleteTableResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.database.ListTablesRequest
 */
class ListTablesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string database_id = 1;
         */
        this.databaseId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListTablesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListTablesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListTablesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListTablesRequest, a, b);
    }
}
exports.ListTablesRequest = ListTablesRequest;
ListTablesRequest.runtime = protobuf_1.proto3;
ListTablesRequest.typeName = "api.v1.database.ListTablesRequest";
ListTablesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 1, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.database.ListTablesResponse
 */
class ListTablesResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.database.Table tables = 1;
         */
        this.tables = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListTablesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListTablesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListTablesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListTablesResponse, a, b);
    }
}
exports.ListTablesResponse = ListTablesResponse;
ListTablesResponse.runtime = protobuf_1.proto3;
ListTablesResponse.typeName = "api.v1.database.ListTablesResponse";
ListTablesResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "tables", kind: "message", T: database_pb_js_1.Table, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);


/***/ }),

/***/ 9350:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/group/group.proto (package api.v1.group, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Update = exports.Group = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const metadata_pb_js_1 = __nccwpck_require__(4951);
/**
 * @generated from message api.v1.group.Group
 */
class Group extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: uint64 num_members = 5;
         */
        this.numMembers = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: map<string, bytes> metadata = 6;
         */
        this.metadata = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Group().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Group().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Group().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Group, a, b);
    }
}
exports.Group = Group;
Group.runtime = protobuf_1.proto3;
Group.typeName = "api.v1.group.Group";
Group.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "num_members", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 12 /* ScalarType.BYTES */ } },
    { no: 7, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message api.v1.group.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.group.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.group.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 2, name: "set_metadata", kind: "message", T: metadata_pb_js_1.Metadata, oneof: "field" },
    { no: 3, name: "delete_metadata_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
]);


/***/ }),

/***/ 1760:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/group/service.proto (package api.v1.group, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(4575);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage groups in Users
 *
 * @generated from service api.v1.group.Service
 */
exports.t = {
    typeName: "api.v1.group.Service",
    methods: {
        /**
         * Create a new group
         *
         * @generated from rpc api.v1.group.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete group
         *
         * @generated from rpc api.v1.group.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List groups
         *
         * @generated from rpc api.v1.group.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Update group
         *
         * @generated from rpc api.v1.group.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get group
         *
         * @generated from rpc api.v1.group.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a group by name
         *
         * @generated from rpc api.v1.group.Service.GetByName
         */
        getByName: {
            name: "GetByName",
            I: service_pb_js_1.GetByNameRequest,
            O: service_pb_js_1.GetByNameResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Add User to Group
         *
         * @generated from rpc api.v1.group.Service.AddMember
         */
        addMember: {
            name: "AddMember",
            I: service_pb_js_1.AddMemberRequest,
            O: service_pb_js_1.AddMemberResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Remove User from Group
         *
         * @generated from rpc api.v1.group.Service.RemoveMember
         */
        removeMember: {
            name: "RemoveMember",
            I: service_pb_js_1.RemoveMemberRequest,
            O: service_pb_js_1.RemoveMemberResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get Group Members
         *
         * @generated from rpc api.v1.group.Service.ListMembers
         */
        listMembers: {
            name: "ListMembers",
            I: service_pb_js_1.ListMembersRequest,
            O: service_pb_js_1.ListMembersResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get Groups
         *
         * @generated from rpc api.v1.group.Service.ListGroupsForUser
         */
        listGroupsForUser: {
            name: "ListGroupsForUser",
            I: service_pb_js_1.ListGroupsForUserRequest,
            O: service_pb_js_1.ListGroupsForUserResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 4575:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/group/service.proto (package api.v1.group, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListGroupsForUserResponse = exports.ListGroupsForUserRequest = exports.ListMembersResponse = exports.ListMembersRequest = exports.RemoveMemberResponse = exports.RemoveMemberRequest = exports.AddMemberResponse = exports.AddMemberRequest = exports.GetResponse = exports.GetRequest = exports.UpdateResponse = exports.UpdateRequest = exports.DeleteResponse = exports.DeleteRequest = exports.ListResponse = exports.ListRequest = exports.CreateResponse = exports.CreateRequest = exports.GetByNameResponse = exports.GetByNameRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const group_pb_js_1 = __nccwpck_require__(9350);
const common_pb_js_1 = __nccwpck_require__(1101);
const user_pb_js_1 = __nccwpck_require__(3008);
/**
 * The request of a Groups.Lookup RPC
 *
 * @generated from message api.v1.group.GetByNameRequest
 */
class GetByNameRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group name
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByNameRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByNameRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByNameRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByNameRequest, a, b);
    }
}
exports.GetByNameRequest = GetByNameRequest;
GetByNameRequest.runtime = protobuf_1.proto3;
GetByNameRequest.typeName = "api.v1.group.GetByNameRequest";
GetByNameRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Groups.Lookup RPC
 *
 * @generated from message api.v1.group.GetByNameResponse
 */
class GetByNameResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByNameResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByNameResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByNameResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByNameResponse, a, b);
    }
}
exports.GetByNameResponse = GetByNameResponse;
GetByNameResponse.runtime = protobuf_1.proto3;
GetByNameResponse.typeName = "api.v1.group.GetByNameResponse";
GetByNameResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: group_pb_js_1.Group },
]);
/**
 * The request of a Groups.Create RPC
 *
 * @generated from message api.v1.group.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.group.Update initializers = 1;
         */
        this.initializers = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.group.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "initializers", kind: "message", T: group_pb_js_1.Update, repeated: true },
]);
/**
 * The response of a Groups.Create RPC
 *
 * @generated from message api.v1.group.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.group.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: group_pb_js_1.Group },
]);
/**
 * The request of a Groups.List RPC
 *
 * @generated from message api.v1.group.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string search = 2;
         */
        this.search = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.group.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 2, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Groups.List RPC
 *
 * @generated from message api.v1.group.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * list of groups
         *
         * @generated from field: repeated api.v1.group.Group groups = 1;
         */
        this.groups = [];
        /**
         * count of total amount of groups
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.group.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: group_pb_js_1.Group, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * The request of a Group.Delete RPC
 *
 * @generated from message api.v1.group.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group to delete
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.group.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Group.Delete RPC
 *
 * @generated from message api.v1.group.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.group.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Groups.Update RPC
 *
 * @generated from message api.v1.group.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.group.Update updates = 1;
         */
        this.updates = [];
        /**
         * The group id
         *
         * @generated from field: string group_id = 2;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.group.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: group_pb_js_1.Update, repeated: true },
    { no: 2, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Groups.Update RPC
 *
 * @generated from message api.v1.group.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.group.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Groups.Get RPC
 *
 * @generated from message api.v1.group.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The group id
         *
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.group.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Groups.Get RPC
 *
 * @generated from message api.v1.group.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.group.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: group_pb_js_1.Group },
]);
/**
 * @generated from message api.v1.group.AddMemberRequest
 */
class AddMemberRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        /**
         * @generated from field: repeated string user_ids = 2;
         */
        this.userIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddMemberRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddMemberRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddMemberRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AddMemberRequest, a, b);
    }
}
exports.AddMemberRequest = AddMemberRequest;
AddMemberRequest.runtime = protobuf_1.proto3;
AddMemberRequest.typeName = "api.v1.group.AddMemberRequest";
AddMemberRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message api.v1.group.AddMemberResponse
 */
class AddMemberResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddMemberResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddMemberResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddMemberResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AddMemberResponse, a, b);
    }
}
exports.AddMemberResponse = AddMemberResponse;
AddMemberResponse.runtime = protobuf_1.proto3;
AddMemberResponse.typeName = "api.v1.group.AddMemberResponse";
AddMemberResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.group.RemoveMemberRequest
 */
class RemoveMemberRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        /**
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemoveMemberRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemoveMemberRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemoveMemberRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RemoveMemberRequest, a, b);
    }
}
exports.RemoveMemberRequest = RemoveMemberRequest;
RemoveMemberRequest.runtime = protobuf_1.proto3;
RemoveMemberRequest.typeName = "api.v1.group.RemoveMemberRequest";
RemoveMemberRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.group.RemoveMemberResponse
 */
class RemoveMemberResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RemoveMemberResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RemoveMemberResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RemoveMemberResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RemoveMemberResponse, a, b);
    }
}
exports.RemoveMemberResponse = RemoveMemberResponse;
RemoveMemberResponse.runtime = protobuf_1.proto3;
RemoveMemberResponse.typeName = "api.v1.group.RemoveMemberResponse";
RemoveMemberResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.group.ListMembersRequest
 */
class ListMembersRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string group_id = 1;
         */
        this.groupId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListMembersRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListMembersRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListMembersRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListMembersRequest, a, b);
    }
}
exports.ListMembersRequest = ListMembersRequest;
ListMembersRequest.runtime = protobuf_1.proto3;
ListMembersRequest.typeName = "api.v1.group.ListMembersRequest";
ListMembersRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.group.ListMembersResponse
 */
class ListMembersResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated model.MemberEntry members = 1;
         */
        this.members = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListMembersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListMembersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListMembersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListMembersResponse, a, b);
    }
}
exports.ListMembersResponse = ListMembersResponse;
ListMembersResponse.runtime = protobuf_1.proto3;
ListMembersResponse.typeName = "api.v1.group.ListMembersResponse";
ListMembersResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: user_pb_js_1.MemberEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.group.ListGroupsForUserRequest
 */
class ListGroupsForUserRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListGroupsForUserRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListGroupsForUserRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListGroupsForUserRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListGroupsForUserRequest, a, b);
    }
}
exports.ListGroupsForUserRequest = ListGroupsForUserRequest;
ListGroupsForUserRequest.runtime = protobuf_1.proto3;
ListGroupsForUserRequest.typeName = "api.v1.group.ListGroupsForUserRequest";
ListGroupsForUserRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.group.ListGroupsForUserResponse
 */
class ListGroupsForUserResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.group.Group groups = 1;
         */
        this.groups = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListGroupsForUserResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListGroupsForUserResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListGroupsForUserResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListGroupsForUserResponse, a, b);
    }
}
exports.ListGroupsForUserResponse = ListGroupsForUserResponse;
ListGroupsForUserResponse.runtime = protobuf_1.proto3;
ListGroupsForUserResponse.typeName = "api.v1.group.ListGroupsForUserResponse";
ListGroupsForUserResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: group_pb_js_1.Group, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);


/***/ }),

/***/ 4191:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/project/project.proto (package api.v1.project, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Update = exports.Project = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message api.v1.project.Project
 */
class Project extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string project_id = 1;
         */
        this.projectId = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: string installation_id = 5;
         */
        this.installationId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Project().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Project().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Project().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Project, a, b);
    }
}
exports.Project = Project;
Project.runtime = protobuf_1.proto3;
Project.typeName = "api.v1.project.Project";
Project.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "installation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.project.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.project.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.project.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
]);


/***/ }),

/***/ 8184:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/project/service.proto (package api.v1.project, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(8355);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage your project in Users
 *
 * @generated from service api.v1.project.Service
 */
exports.t = {
    typeName: "api.v1.project.Service",
    methods: {
        /**
         * Create project
         *
         * @generated from rpc api.v1.project.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete project (everything in Users)
         *
         * @generated from rpc api.v1.project.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get project
         *
         * @generated from rpc api.v1.project.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get project list
         *
         * @generated from rpc api.v1.project.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Update updates the profile of the project
         *
         * @generated from rpc api.v1.project.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get public key of system
         *
         * @generated from rpc api.v1.project.Service.PublicKey
         */
        publicKey: {
            name: "PublicKey",
            I: service_pb_js_1.PublicKeyRequest,
            O: service_pb_js_1.PublicKeyResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Use generates a project token for editing the project as the current
         * user.
         *
         * @generated from rpc api.v1.project.Service.Use
         */
        use: {
            name: "Use",
            I: service_pb_js_1.UseRequest,
            O: service_pb_js_1.UseResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 8355:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/project/service.proto (package api.v1.project, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UseResponse = exports.UseRequest = exports.PublicKeyResponse = exports.PublicKeyRequest = exports.ListResponse = exports.ListRequest = exports.GetResponse = exports.GetRequest = exports.UpdateResponse = exports.UpdateRequest = exports.DeleteResponse = exports.DeleteRequest = exports.CreateResponse = exports.CreateRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const project_pb_js_1 = __nccwpck_require__(4191);
const common_pb_js_1 = __nccwpck_require__(1101);
/**
 * The request of a Namespace.Create RPC
 *
 * @generated from message api.v1.project.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.project.Update initializers = 1;
         */
        this.initializers = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.project.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "initializers", kind: "message", T: project_pb_js_1.Update, repeated: true },
]);
/**
 * The response of a Namespace.Create RPC
 *
 * @generated from message api.v1.project.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.project.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: project_pb_js_1.Project },
]);
/**
 * The request of a Namespace.Delete RPC
 *
 * @generated from message api.v1.project.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.project.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The response of a Namespace.Delete RPC
 *
 * @generated from message api.v1.project.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.project.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Namespace.Update RPC
 *
 * @generated from message api.v1.project.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.project.Update updates = 1;
         */
        this.updates = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.project.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: project_pb_js_1.Update, repeated: true },
]);
/**
 * The response of a Namespace.Update RPC
 *
 * @generated from message api.v1.project.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.project.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Namespace.Get RPC
 *
 * @generated from message api.v1.project.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.project.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The response of a Namespace.Get RPC
 *
 * @generated from message api.v1.project.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.project.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: project_pb_js_1.Project },
]);
/**
 * The request of a Namespace.List RPC
 *
 * @generated from message api.v1.project.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.project.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.project.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.project.Project projects = 1;
         */
        this.projects = [];
        /**
         * @generated from field: int64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.project.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: project_pb_js_1.Project, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * The request of a Namespace.PublicKey RPC
 *
 * @generated from message api.v1.project.PublicKeyRequest
 */
class PublicKeyRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicKeyRequest, a, b);
    }
}
exports.PublicKeyRequest = PublicKeyRequest;
PublicKeyRequest.runtime = protobuf_1.proto3;
PublicKeyRequest.typeName = "api.v1.project.PublicKeyRequest";
PublicKeyRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The response of a Namespace.PublicKey RPC
 *
 * @generated from message api.v1.project.PublicKeyResponse
 */
class PublicKeyResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The id of the project
         *
         * @generated from field: string public_key = 1;
         */
        this.publicKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PublicKeyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PublicKeyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PublicKeyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PublicKeyResponse, a, b);
    }
}
exports.PublicKeyResponse = PublicKeyResponse;
PublicKeyResponse.runtime = protobuf_1.proto3;
PublicKeyResponse.typeName = "api.v1.project.PublicKeyResponse";
PublicKeyResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.project.UseRequest
 */
class UseRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string project_id = 1;
         */
        this.projectId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UseRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UseRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UseRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UseRequest, a, b);
    }
}
exports.UseRequest = UseRequest;
UseRequest.runtime = protobuf_1.proto3;
UseRequest.typeName = "api.v1.project.UseRequest";
UseRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.project.UseResponse
 */
class UseResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string project_token = 1;
         */
        this.projectToken = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UseResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UseResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UseResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UseResponse, a, b);
    }
}
exports.UseResponse = UseResponse;
UseResponse.runtime = protobuf_1.proto3;
UseResponse.typeName = "api.v1.project.UseResponse";
UseResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 3886:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/project/settings/service.proto (package api.v1.project.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(2205);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from service api.v1.project.settings.Service
 */
exports.t = {
    typeName: "api.v1.project.settings.Service",
    methods: {
        /**
         * Gets the users settings for the current project.
         *
         * @generated from rpc api.v1.project.settings.Service.GetSettings
         */
        getSettings: {
            name: "GetSettings",
            I: service_pb_js_1.GetSettingsRequest,
            O: service_pb_js_1.GetSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Sets the users settings for the current project.
         *
         * @generated from rpc api.v1.project.settings.Service.UpdateSettings
         */
        updateSettings: {
            name: "UpdateSettings",
            I: service_pb_js_1.UpdateSettingsRequest,
            O: service_pb_js_1.UpdateSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 2205:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/project/settings/service.proto (package api.v1.project.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateSettingsResponse = exports.UpdateSettingsRequest = exports.GetSettingsResponse = exports.GetSettingsRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const settings_pb_js_1 = __nccwpck_require__(2411);
/**
 * @generated from message api.v1.project.settings.GetSettingsRequest
 */
class GetSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsRequest, a, b);
    }
}
exports.GetSettingsRequest = GetSettingsRequest;
GetSettingsRequest.runtime = protobuf_1.proto3;
GetSettingsRequest.typeName = "api.v1.project.settings.GetSettingsRequest";
GetSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.project.settings.GetSettingsResponse
 */
class GetSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsResponse, a, b);
    }
}
exports.GetSettingsResponse = GetSettingsResponse;
GetSettingsResponse.runtime = protobuf_1.proto3;
GetSettingsResponse.typeName = "api.v1.project.settings.GetSettingsResponse";
GetSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: settings_pb_js_1.Settings },
]);
/**
 * @generated from message api.v1.project.settings.UpdateSettingsRequest
 */
class UpdateSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.project.settings.Update updates = 1;
         */
        this.updates = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsRequest, a, b);
    }
}
exports.UpdateSettingsRequest = UpdateSettingsRequest;
UpdateSettingsRequest.runtime = protobuf_1.proto3;
UpdateSettingsRequest.typeName = "api.v1.project.settings.UpdateSettingsRequest";
UpdateSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: settings_pb_js_1.Update, repeated: true },
]);
/**
 * @generated from message api.v1.project.settings.UpdateSettingsResponse
 */
class UpdateSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsResponse, a, b);
    }
}
exports.UpdateSettingsResponse = UpdateSettingsResponse;
UpdateSettingsResponse.runtime = protobuf_1.proto3;
UpdateSettingsResponse.typeName = "api.v1.project.settings.UpdateSettingsResponse";
UpdateSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 2411:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/project/settings/settings.proto (package api.v1.project.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Update = exports.DockerRegistryCredentials = exports.DockerRegistry = exports.DockerRegistries = exports.Settings = exports.Templates = exports.Template = exports.TextProviderEntry = exports.TextProvider = exports.EmailProviderEntry = exports.EmailProvider = exports.TextInstance = exports.EmailInstance = exports.SmtpInstance = exports.TwilioInstance = exports.MailjetInstance = exports.DefaultInstance = exports.TemplateType = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const credentials_pb_js_1 = __nccwpck_require__(9705);
/**
 * @generated from enum api.v1.project.settings.TemplateType
 */
var TemplateType;
(function (TemplateType) {
    /**
     * @generated from enum value: TEMPLATE_TYPE_UNSPECIFIED = 0;
     */
    TemplateType[TemplateType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: TEMPLATE_TYPE_WELCOME_EMAIL = 1;
     */
    TemplateType[TemplateType["WELCOME_EMAIL"] = 1] = "WELCOME_EMAIL";
    /**
     * @generated from enum value: TEMPLATE_TYPE_EMAIL_VERIFICATION = 2;
     */
    TemplateType[TemplateType["EMAIL_VERIFICATION"] = 2] = "EMAIL_VERIFICATION";
    /**
     * @generated from enum value: TEMPLATE_TYPE_EMAIL_RESET_PASSWORD = 3;
     */
    TemplateType[TemplateType["EMAIL_RESET_PASSWORD"] = 3] = "EMAIL_RESET_PASSWORD";
    /**
     * @generated from enum value: TEMPLATE_TYPE_WELCOME_TEXT = 4;
     */
    TemplateType[TemplateType["WELCOME_TEXT"] = 4] = "WELCOME_TEXT";
    /**
     * @generated from enum value: TEMPLATE_TYPE_TEXT_VERIFICATION = 5;
     */
    TemplateType[TemplateType["TEXT_VERIFICATION"] = 5] = "TEXT_VERIFICATION";
    /**
     * @generated from enum value: TEMPLATE_TYPE_TEXT_RESET_PASSWORD = 6;
     */
    TemplateType[TemplateType["TEXT_RESET_PASSWORD"] = 6] = "TEXT_RESET_PASSWORD";
})(TemplateType || (exports.TemplateType = TemplateType = {}));
// Retrieve enum metadata with: proto3.getEnumType(TemplateType)
protobuf_1.proto3.util.setEnumType(TemplateType, "api.v1.project.settings.TemplateType", [
    { no: 0, name: "TEMPLATE_TYPE_UNSPECIFIED" },
    { no: 1, name: "TEMPLATE_TYPE_WELCOME_EMAIL" },
    { no: 2, name: "TEMPLATE_TYPE_EMAIL_VERIFICATION" },
    { no: 3, name: "TEMPLATE_TYPE_EMAIL_RESET_PASSWORD" },
    { no: 4, name: "TEMPLATE_TYPE_WELCOME_TEXT" },
    { no: 5, name: "TEMPLATE_TYPE_TEXT_VERIFICATION" },
    { no: 6, name: "TEMPLATE_TYPE_TEXT_RESET_PASSWORD" },
]);
/**
 * @generated from message api.v1.project.settings.DefaultInstance
 */
class DefaultInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DefaultInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DefaultInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DefaultInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DefaultInstance, a, b);
    }
}
exports.DefaultInstance = DefaultInstance;
DefaultInstance.runtime = protobuf_1.proto3;
DefaultInstance.typeName = "api.v1.project.settings.DefaultInstance";
DefaultInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.project.settings.MailjetInstance
 */
class MailjetInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MailjetInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MailjetInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MailjetInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MailjetInstance, a, b);
    }
}
exports.MailjetInstance = MailjetInstance;
MailjetInstance.runtime = protobuf_1.proto3;
MailjetInstance.typeName = "api.v1.project.settings.MailjetInstance";
MailjetInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.project.settings.TwilioInstance
 */
class TwilioInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TwilioInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TwilioInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TwilioInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TwilioInstance, a, b);
    }
}
exports.TwilioInstance = TwilioInstance;
TwilioInstance.runtime = protobuf_1.proto3;
TwilioInstance.typeName = "api.v1.project.settings.TwilioInstance";
TwilioInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.project.settings.SmtpInstance
 */
class SmtpInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string host = 1;
         */
        this.host = "";
        /**
         * @generated from field: int64 port = 2;
         */
        this.port = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SmtpInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SmtpInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SmtpInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SmtpInstance, a, b);
    }
}
exports.SmtpInstance = SmtpInstance;
SmtpInstance.runtime = protobuf_1.proto3;
SmtpInstance.typeName = "api.v1.project.settings.SmtpInstance";
SmtpInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message api.v1.project.settings.EmailInstance
 */
class EmailInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.project.settings.EmailInstance.instance
         */
        this.instance = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmailInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmailInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmailInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EmailInstance, a, b);
    }
}
exports.EmailInstance = EmailInstance;
EmailInstance.runtime = protobuf_1.proto3;
EmailInstance.typeName = "api.v1.project.settings.EmailInstance";
EmailInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "message", T: DefaultInstance, oneof: "instance" },
    { no: 2, name: "mailjet", kind: "message", T: MailjetInstance, oneof: "instance" },
    { no: 3, name: "smtp", kind: "message", T: SmtpInstance, oneof: "instance" },
]);
/**
 * @generated from message api.v1.project.settings.TextInstance
 */
class TextInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.project.settings.TextInstance.instance
         */
        this.instance = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextInstance, a, b);
    }
}
exports.TextInstance = TextInstance;
TextInstance.runtime = protobuf_1.proto3;
TextInstance.typeName = "api.v1.project.settings.TextInstance";
TextInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "message", T: DefaultInstance, oneof: "instance" },
    { no: 2, name: "twilio", kind: "message", T: TwilioInstance, oneof: "instance" },
]);
/**
 * @generated from message api.v1.project.settings.EmailProvider
 */
class EmailProvider extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string from = 1;
         */
        this.from = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmailProvider().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmailProvider().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmailProvider().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EmailProvider, a, b);
    }
}
exports.EmailProvider = EmailProvider;
EmailProvider.runtime = protobuf_1.proto3;
EmailProvider.typeName = "api.v1.project.settings.EmailProvider";
EmailProvider.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: credentials_pb_js_1.ProviderCredentials },
    { no: 3, name: "instance", kind: "message", T: EmailInstance },
]);
/**
 * @generated from message api.v1.project.settings.EmailProviderEntry
 */
class EmailProviderEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string from = 1;
         */
        this.from = "";
        /**
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * @generated from field: string secret_id = 3;
         */
        this.secretId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmailProviderEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmailProviderEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmailProviderEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EmailProviderEntry, a, b);
    }
}
exports.EmailProviderEntry = EmailProviderEntry;
EmailProviderEntry.runtime = protobuf_1.proto3;
EmailProviderEntry.typeName = "api.v1.project.settings.EmailProviderEntry";
EmailProviderEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance", kind: "message", T: EmailInstance },
]);
/**
 * @generated from message api.v1.project.settings.TextProvider
 */
class TextProvider extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string from = 1;
         */
        this.from = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextProvider().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextProvider().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextProvider().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextProvider, a, b);
    }
}
exports.TextProvider = TextProvider;
TextProvider.runtime = protobuf_1.proto3;
TextProvider.typeName = "api.v1.project.settings.TextProvider";
TextProvider.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: credentials_pb_js_1.ProviderCredentials },
    { no: 3, name: "instance", kind: "message", T: TextInstance },
]);
/**
 * @generated from message api.v1.project.settings.TextProviderEntry
 */
class TextProviderEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string from = 1;
         */
        this.from = "";
        /**
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * @generated from field: string secret_id = 3;
         */
        this.secretId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TextProviderEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TextProviderEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TextProviderEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TextProviderEntry, a, b);
    }
}
exports.TextProviderEntry = TextProviderEntry;
TextProviderEntry.runtime = protobuf_1.proto3;
TextProviderEntry.typeName = "api.v1.project.settings.TextProviderEntry";
TextProviderEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance", kind: "message", T: TextInstance },
]);
/**
 * @generated from message api.v1.project.settings.Template
 */
class Template extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string body = 1;
         */
        this.body = "";
        /**
         * @generated from field: string subject = 2;
         */
        this.subject = "";
        /**
         * @generated from field: api.v1.project.settings.TemplateType type = 3;
         */
        this.type = TemplateType.UNSPECIFIED;
        /**
         * @generated from field: repeated string format = 4;
         */
        this.format = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Template().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Template().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Template().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Template, a, b);
    }
}
exports.Template = Template;
Template.runtime = protobuf_1.proto3;
Template.typeName = "api.v1.project.settings.Template";
Template.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(TemplateType) },
    { no: 4, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message api.v1.project.settings.Templates
 */
class Templates extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Templates().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Templates().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Templates().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Templates, a, b);
    }
}
exports.Templates = Templates;
Templates.runtime = protobuf_1.proto3;
Templates.typeName = "api.v1.project.settings.Templates";
Templates.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "welcome_email", kind: "message", T: Template },
    { no: 2, name: "welcome_text", kind: "message", T: Template },
    { no: 3, name: "reset_password_email", kind: "message", T: Template },
    { no: 4, name: "reset_password_text", kind: "message", T: Template },
    { no: 5, name: "verify_email", kind: "message", T: Template },
    { no: 6, name: "verify_phone_number", kind: "message", T: Template },
]);
/**
 * @generated from message api.v1.project.settings.Settings
 */
class Settings extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Settings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Settings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Settings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Settings, a, b);
    }
}
exports.Settings = Settings;
Settings.runtime = protobuf_1.proto3;
Settings.typeName = "api.v1.project.settings.Settings";
Settings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "email_provider", kind: "message", T: EmailProviderEntry },
    { no: 2, name: "text_provider", kind: "message", T: TextProviderEntry },
    { no: 3, name: "templates", kind: "message", T: Templates },
    { no: 4, name: "docker_registries", kind: "message", T: DockerRegistries },
]);
/**
 * @generated from message api.v1.project.settings.DockerRegistries
 */
class DockerRegistries extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string secret_id = 1;
         */
        this.secretId = "";
        /**
         * @generated from field: repeated string hosts = 2;
         */
        this.hosts = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DockerRegistries().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DockerRegistries().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DockerRegistries().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DockerRegistries, a, b);
    }
}
exports.DockerRegistries = DockerRegistries;
DockerRegistries.runtime = protobuf_1.proto3;
DockerRegistries.typeName = "api.v1.project.settings.DockerRegistries";
DockerRegistries.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hosts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message api.v1.project.settings.DockerRegistry
 */
class DockerRegistry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string host = 1;
         */
        this.host = "";
        /**
         * @generated from oneof api.v1.project.settings.DockerRegistry.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DockerRegistry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DockerRegistry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DockerRegistry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DockerRegistry, a, b);
    }
}
exports.DockerRegistry = DockerRegistry;
DockerRegistry.runtime = protobuf_1.proto3;
DockerRegistry.typeName = "api.v1.project.settings.DockerRegistry";
DockerRegistry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "credentials", kind: "message", T: DockerRegistryCredentials, oneof: "field" },
]);
/**
 * @generated from message api.v1.project.settings.DockerRegistryCredentials
 */
class DockerRegistryCredentials extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string username = 1;
         */
        this.username = "";
        /**
         * @generated from field: string password = 2;
         */
        this.password = "";
        /**
         * @generated from field: string email = 3;
         */
        this.email = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DockerRegistryCredentials().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DockerRegistryCredentials().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DockerRegistryCredentials().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DockerRegistryCredentials, a, b);
    }
}
exports.DockerRegistryCredentials = DockerRegistryCredentials;
DockerRegistryCredentials.runtime = protobuf_1.proto3;
DockerRegistryCredentials.typeName = "api.v1.project.settings.DockerRegistryCredentials";
DockerRegistryCredentials.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.project.settings.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.project.settings.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.project.settings.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "email_provider", kind: "message", T: EmailProvider, oneof: "field" },
    { no: 2, name: "text_provider", kind: "message", T: TextProvider, oneof: "field" },
    { no: 3, name: "template", kind: "message", T: Template, oneof: "field" },
    { no: 4, name: "add_docker_registry", kind: "message", T: DockerRegistry, oneof: "field" },
    { no: 5, name: "delete_docker_registry", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
]);


/***/ }),

/***/ 7813:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/service_account/service_account.proto (package api.v1.service_account, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServiceAccount = exports.Entry = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const author_pb_js_1 = __nccwpck_require__(4810);
/**
 * @generated from message api.v1.service_account.Entry
 */
class Entry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string service_account_id = 1;
         */
        this.serviceAccountId = "";
        /**
         * @generated from field: string client_id = 3;
         */
        this.clientId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Entry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Entry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Entry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Entry, a, b);
    }
}
exports.Entry = Entry;
Entry.runtime = protobuf_1.proto3;
Entry.typeName = "api.v1.service_account.Entry";
Entry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_account", kind: "message", T: ServiceAccount },
    { no: 3, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.service_account.ServiceAccount
 */
class ServiceAccount extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: bool managed = 4;
         */
        this.managed = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceAccount().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceAccount().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceAccount().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ServiceAccount, a, b);
    }
}
exports.ServiceAccount = ServiceAccount;
ServiceAccount.runtime = protobuf_1.proto3;
ServiceAccount.typeName = "api.v1.service_account.ServiceAccount";
ServiceAccount.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "created_by", kind: "message", T: author_pb_js_1.Author },
    { no: 4, name: "managed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);


/***/ }),

/***/ 2916:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/service_account/service.proto (package api.v1.service_account, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(3813);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage your project Service Accounts
 *
 * @generated from service api.v1.service_account.Service
 */
exports.t = {
    typeName: "api.v1.service_account.Service",
    methods: {
        /**
         * Create a new Service Account. The returned client_id and client_secret can
         * be used as login credentials. Note that the client_secret can only be read
         * out once, at creation.
         *
         * @generated from rpc api.v1.service_account.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List all service accounts for the current project.
         *
         * @generated from rpc api.v1.service_account.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a service account. It can take up to the TTL of access tokens for
         * existing sessions using this service_account, to expire.
         *
         * @generated from rpc api.v1.service_account.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 3813:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/service_account/service.proto (package api.v1.service_account, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteResponse = exports.DeleteRequest = exports.ListResponse = exports.ListRequest = exports.CreateResponse = exports.CreateRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const service_account_pb_js_1 = __nccwpck_require__(7813);
/**
 * @generated from message api.v1.service_account.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.service_account.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.service_account.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * @generated from field: string client_secret = 3;
         */
        this.clientSecret = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.service_account.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_account", kind: "message", T: service_account_pb_js_1.ServiceAccount },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.service_account.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.service_account.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.service_account.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.service_account.Entry service_accounts = 1;
         */
        this.serviceAccounts = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.service_account.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_accounts", kind: "message", T: service_account_pb_js_1.Entry, repeated: true },
]);
/**
 * @generated from message api.v1.service_account.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string service_account_id = 1;
         */
        this.serviceAccountId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.service_account.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "service_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.service_account.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.service_account.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 9068:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/storage/service.proto (package api.v1.storage, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(5175);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from service api.v1.storage.Service
 */
exports.t = {
    typeName: "api.v1.storage.Service",
    methods: {
        /**
         * @generated from rpc api.v1.storage.Service.CreateBucket
         */
        createBucket: {
            name: "CreateBucket",
            I: service_pb_js_1.CreateBucketRequest,
            O: service_pb_js_1.CreateBucketResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.GetBucket
         */
        getBucket: {
            name: "GetBucket",
            I: service_pb_js_1.GetBucketRequest,
            O: service_pb_js_1.GetBucketResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.ListBuckets
         */
        listBuckets: {
            name: "ListBuckets",
            I: service_pb_js_1.ListBucketsRequest,
            O: service_pb_js_1.ListBucketsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.DeleteBucket
         */
        deleteBucket: {
            name: "DeleteBucket",
            I: service_pb_js_1.DeleteBucketRequest,
            O: service_pb_js_1.DeleteBucketResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.UnlinkBucket
         */
        unlinkBucket: {
            name: "UnlinkBucket",
            I: service_pb_js_1.UnlinkBucketRequest,
            O: service_pb_js_1.UnlinkBucketResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.GetObject
         */
        getObject: {
            name: "GetObject",
            I: service_pb_js_1.GetObjectRequest,
            O: service_pb_js_1.GetObjectResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.ListObjects
         */
        listObjects: {
            name: "ListObjects",
            I: service_pb_js_1.ListObjectsRequest,
            O: service_pb_js_1.ListObjectsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.DeleteObject
         */
        deleteObject: {
            name: "DeleteObject",
            I: service_pb_js_1.DeleteObjectRequest,
            O: service_pb_js_1.DeleteObjectResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.CopyObject
         */
        copyObject: {
            name: "CopyObject",
            I: service_pb_js_1.CopyObjectRequest,
            O: service_pb_js_1.CopyObjectResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.UploadObject
         */
        uploadObject: {
            name: "UploadObject",
            I: service_pb_js_1.UploadObjectRequest,
            O: service_pb_js_1.UploadObjectResponse,
            kind: protobuf_1.MethodKind.ClientStreaming,
        },
        /**
         * @generated from rpc api.v1.storage.Service.DownloadObject
         */
        downloadObject: {
            name: "DownloadObject",
            I: service_pb_js_1.DownloadObjectRequest,
            O: service_pb_js_1.DownloadObjectResponse,
            kind: protobuf_1.MethodKind.ServerStreaming,
        },
        /**
         * @generated from rpc api.v1.storage.Service.CreateProvider
         */
        createProvider: {
            name: "CreateProvider",
            I: service_pb_js_1.CreateProviderRequest,
            O: service_pb_js_1.CreateProviderResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.DeleteProvider
         */
        deleteProvider: {
            name: "DeleteProvider",
            I: service_pb_js_1.DeleteProviderRequest,
            O: service_pb_js_1.DeleteProviderResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.GetProvider
         */
        getProvider: {
            name: "GetProvider",
            I: service_pb_js_1.GetProviderRequest,
            O: service_pb_js_1.GetProviderResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.ListProviders
         */
        listProviders: {
            name: "ListProviders",
            I: service_pb_js_1.ListProvidersRequest,
            O: service_pb_js_1.ListProvidersResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * @generated from rpc api.v1.storage.Service.LookupProvider
         */
        lookupProvider: {
            name: "LookupProvider",
            I: service_pb_js_1.LookupProviderRequest,
            O: service_pb_js_1.LookupProviderResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 5175:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/storage/service.proto (package api.v1.storage, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DownloadObjectResponse = exports.DownloadObjectRequest = exports.UploadObjectResponse = exports.UploadObjectRequest_Metadata = exports.UploadObjectRequest = exports.CopyObjectResponse = exports.CopyObjectRequest = exports.DeleteObjectResponse = exports.DeleteObjectRequest = exports.ListObjectsResponse_Result = exports.ListObjectsResponse = exports.ListObjectsRequest = exports.GetObjectResponse = exports.GetObjectRequest = exports.DeleteBucketResponse = exports.DeleteBucketRequest = exports.ListBucketsResponse = exports.ListBucketsRequest = exports.GetBucketResponse = exports.GetBucketRequest = exports.CreateBucketResponse = exports.CreateBucketRequest = exports.ListProvidersResponse = exports.ListProvidersRequest = exports.GetProviderResponse = exports.GetProviderRequest = exports.DeleteProviderResponse = exports.DeleteProviderRequest = exports.CreateProviderResponse = exports.CreateProviderRequest = exports.LookupProviderResponse = exports.LookupProviderRequest = exports.UnlinkBucketResponse = exports.UnlinkBucketRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const storage_pb_js_1 = __nccwpck_require__(6298);
const common_pb_js_1 = __nccwpck_require__(1101);
/**
 * @generated from message api.v1.storage.UnlinkBucketRequest
 */
class UnlinkBucketRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnlinkBucketRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnlinkBucketRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnlinkBucketRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnlinkBucketRequest, a, b);
    }
}
exports.UnlinkBucketRequest = UnlinkBucketRequest;
UnlinkBucketRequest.runtime = protobuf_1.proto3;
UnlinkBucketRequest.typeName = "api.v1.storage.UnlinkBucketRequest";
UnlinkBucketRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.UnlinkBucketResponse
 */
class UnlinkBucketResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnlinkBucketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnlinkBucketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnlinkBucketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnlinkBucketResponse, a, b);
    }
}
exports.UnlinkBucketResponse = UnlinkBucketResponse;
UnlinkBucketResponse.runtime = protobuf_1.proto3;
UnlinkBucketResponse.typeName = "api.v1.storage.UnlinkBucketResponse";
UnlinkBucketResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.storage.LookupProviderRequest
 */
class LookupProviderRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LookupProviderRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LookupProviderRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LookupProviderRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LookupProviderRequest, a, b);
    }
}
exports.LookupProviderRequest = LookupProviderRequest;
LookupProviderRequest.runtime = protobuf_1.proto3;
LookupProviderRequest.typeName = "api.v1.storage.LookupProviderRequest";
LookupProviderRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.LookupProviderResponse
 */
class LookupProviderResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider_id = 1;
         */
        this.providerId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LookupProviderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LookupProviderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LookupProviderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LookupProviderResponse, a, b);
    }
}
exports.LookupProviderResponse = LookupProviderResponse;
LookupProviderResponse.runtime = protobuf_1.proto3;
LookupProviderResponse.typeName = "api.v1.storage.LookupProviderResponse";
LookupProviderResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "message", T: storage_pb_js_1.Provider },
]);
/**
 * @generated from message api.v1.storage.CreateProviderRequest
 */
class CreateProviderRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: bool link_buckets = 3;
         */
        this.linkBuckets = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateProviderRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateProviderRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateProviderRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateProviderRequest, a, b);
    }
}
exports.CreateProviderRequest = CreateProviderRequest;
CreateProviderRequest.runtime = protobuf_1.proto3;
CreateProviderRequest.typeName = "api.v1.storage.CreateProviderRequest";
CreateProviderRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: storage_pb_js_1.Config },
    { no: 3, name: "link_buckets", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.storage.CreateProviderResponse
 */
class CreateProviderResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider_id = 1;
         */
        this.providerId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateProviderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateProviderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateProviderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateProviderResponse, a, b);
    }
}
exports.CreateProviderResponse = CreateProviderResponse;
CreateProviderResponse.runtime = protobuf_1.proto3;
CreateProviderResponse.typeName = "api.v1.storage.CreateProviderResponse";
CreateProviderResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "message", T: storage_pb_js_1.Provider },
]);
/**
 * @generated from message api.v1.storage.DeleteProviderRequest
 */
class DeleteProviderRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider_id = 1;
         */
        this.providerId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteProviderRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteProviderRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteProviderRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteProviderRequest, a, b);
    }
}
exports.DeleteProviderRequest = DeleteProviderRequest;
DeleteProviderRequest.runtime = protobuf_1.proto3;
DeleteProviderRequest.typeName = "api.v1.storage.DeleteProviderRequest";
DeleteProviderRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.DeleteProviderResponse
 */
class DeleteProviderResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteProviderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteProviderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteProviderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteProviderResponse, a, b);
    }
}
exports.DeleteProviderResponse = DeleteProviderResponse;
DeleteProviderResponse.runtime = protobuf_1.proto3;
DeleteProviderResponse.typeName = "api.v1.storage.DeleteProviderResponse";
DeleteProviderResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.storage.GetProviderRequest
 */
class GetProviderRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider_id = 1;
         */
        this.providerId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetProviderRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetProviderRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetProviderRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetProviderRequest, a, b);
    }
}
exports.GetProviderRequest = GetProviderRequest;
GetProviderRequest.runtime = protobuf_1.proto3;
GetProviderRequest.typeName = "api.v1.storage.GetProviderRequest";
GetProviderRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.GetProviderResponse
 */
class GetProviderResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetProviderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetProviderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetProviderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetProviderResponse, a, b);
    }
}
exports.GetProviderResponse = GetProviderResponse;
GetProviderResponse.runtime = protobuf_1.proto3;
GetProviderResponse.typeName = "api.v1.storage.GetProviderResponse";
GetProviderResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "message", T: storage_pb_js_1.Provider },
]);
/**
 * @generated from message api.v1.storage.ListProvidersRequest
 */
class ListProvidersRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListProvidersRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListProvidersRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListProvidersRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListProvidersRequest, a, b);
    }
}
exports.ListProvidersRequest = ListProvidersRequest;
ListProvidersRequest.runtime = protobuf_1.proto3;
ListProvidersRequest.typeName = "api.v1.storage.ListProvidersRequest";
ListProvidersRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * @generated from message api.v1.storage.ListProvidersResponse
 */
class ListProvidersResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.storage.ProviderEntry providers = 1;
         */
        this.providers = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListProvidersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListProvidersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListProvidersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListProvidersResponse, a, b);
    }
}
exports.ListProvidersResponse = ListProvidersResponse;
ListProvidersResponse.runtime = protobuf_1.proto3;
ListProvidersResponse.typeName = "api.v1.storage.ListProvidersResponse";
ListProvidersResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "providers", kind: "message", T: storage_pb_js_1.ProviderEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.storage.CreateBucketRequest
 */
class CreateBucketRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        /**
         * @generated from field: string provider_bucket = 2;
         */
        this.providerBucket = "";
        /**
         * @generated from field: string region = 3;
         */
        this.region = "";
        /**
         * @generated from field: string provider_id = 4;
         */
        this.providerId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateBucketRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateBucketRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateBucketRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateBucketRequest, a, b);
    }
}
exports.CreateBucketRequest = CreateBucketRequest;
CreateBucketRequest.runtime = protobuf_1.proto3;
CreateBucketRequest.typeName = "api.v1.storage.CreateBucketRequest";
CreateBucketRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.CreateBucketResponse
 */
class CreateBucketResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateBucketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateBucketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateBucketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateBucketResponse, a, b);
    }
}
exports.CreateBucketResponse = CreateBucketResponse;
CreateBucketResponse.runtime = protobuf_1.proto3;
CreateBucketResponse.typeName = "api.v1.storage.CreateBucketResponse";
CreateBucketResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.storage.GetBucketRequest
 */
class GetBucketRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetBucketRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetBucketRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetBucketRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetBucketRequest, a, b);
    }
}
exports.GetBucketRequest = GetBucketRequest;
GetBucketRequest.runtime = protobuf_1.proto3;
GetBucketRequest.typeName = "api.v1.storage.GetBucketRequest";
GetBucketRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.GetBucketResponse
 */
class GetBucketResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetBucketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetBucketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetBucketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetBucketResponse, a, b);
    }
}
exports.GetBucketResponse = GetBucketResponse;
GetBucketResponse.runtime = protobuf_1.proto3;
GetBucketResponse.typeName = "api.v1.storage.GetBucketResponse";
GetBucketResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "message", T: storage_pb_js_1.Bucket },
]);
/**
 * @generated from message api.v1.storage.ListBucketsRequest
 */
class ListBucketsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token = 1;
         */
        this.token = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListBucketsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListBucketsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListBucketsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListBucketsRequest, a, b);
    }
}
exports.ListBucketsRequest = ListBucketsRequest;
ListBucketsRequest.runtime = protobuf_1.proto3;
ListBucketsRequest.typeName = "api.v1.storage.ListBucketsRequest";
ListBucketsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.ListBucketsResponse
 */
class ListBucketsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token = 1;
         */
        this.token = "";
        /**
         * @generated from field: repeated api.v1.storage.Bucket buckets = 2;
         */
        this.buckets = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListBucketsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListBucketsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListBucketsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListBucketsResponse, a, b);
    }
}
exports.ListBucketsResponse = ListBucketsResponse;
ListBucketsResponse.runtime = protobuf_1.proto3;
ListBucketsResponse.typeName = "api.v1.storage.ListBucketsResponse";
ListBucketsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buckets", kind: "message", T: storage_pb_js_1.Bucket, repeated: true },
]);
/**
 * @generated from message api.v1.storage.DeleteBucketRequest
 */
class DeleteBucketRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteBucketRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteBucketRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteBucketRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteBucketRequest, a, b);
    }
}
exports.DeleteBucketRequest = DeleteBucketRequest;
DeleteBucketRequest.runtime = protobuf_1.proto3;
DeleteBucketRequest.typeName = "api.v1.storage.DeleteBucketRequest";
DeleteBucketRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.DeleteBucketResponse
 */
class DeleteBucketResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteBucketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteBucketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteBucketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteBucketResponse, a, b);
    }
}
exports.DeleteBucketResponse = DeleteBucketResponse;
DeleteBucketResponse.runtime = protobuf_1.proto3;
DeleteBucketResponse.typeName = "api.v1.storage.DeleteBucketResponse";
DeleteBucketResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.storage.GetObjectRequest
 */
class GetObjectRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        /**
         * @generated from field: string path = 2;
         */
        this.path = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetObjectRequest, a, b);
    }
}
exports.GetObjectRequest = GetObjectRequest;
GetObjectRequest.runtime = protobuf_1.proto3;
GetObjectRequest.typeName = "api.v1.storage.GetObjectRequest";
GetObjectRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.GetObjectResponse
 */
class GetObjectResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetObjectResponse, a, b);
    }
}
exports.GetObjectResponse = GetObjectResponse;
GetObjectResponse.runtime = protobuf_1.proto3;
GetObjectResponse.typeName = "api.v1.storage.GetObjectResponse";
GetObjectResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: storage_pb_js_1.Object$ },
]);
/**
 * @generated from message api.v1.storage.ListObjectsRequest
 */
class ListObjectsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token = 1;
         */
        this.token = "";
        /**
         * @generated from field: string bucket = 2;
         */
        this.bucket = "";
        /**
         * @generated from field: string prefix = 3;
         */
        this.prefix = "";
        /**
         * @generated from field: string start_path = 4;
         */
        this.startPath = "";
        /**
         * @generated from field: string end_path = 5;
         */
        this.endPath = "";
        /**
         * @generated from field: bool recursive = 6;
         */
        this.recursive = false;
        /**
         * @generated from field: uint32 limit = 7;
         */
        this.limit = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListObjectsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListObjectsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListObjectsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListObjectsRequest, a, b);
    }
}
exports.ListObjectsRequest = ListObjectsRequest;
ListObjectsRequest.runtime = protobuf_1.proto3;
ListObjectsRequest.typeName = "api.v1.storage.ListObjectsRequest";
ListObjectsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "end_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "recursive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * @generated from message api.v1.storage.ListObjectsResponse
 */
class ListObjectsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token = 1;
         */
        this.token = "";
        /**
         * @generated from field: repeated api.v1.storage.ListObjectsResponse.Result results = 2;
         */
        this.results = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListObjectsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListObjectsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListObjectsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListObjectsResponse, a, b);
    }
}
exports.ListObjectsResponse = ListObjectsResponse;
ListObjectsResponse.runtime = protobuf_1.proto3;
ListObjectsResponse.typeName = "api.v1.storage.ListObjectsResponse";
ListObjectsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: ListObjectsResponse_Result, repeated: true },
]);
/**
 * @generated from message api.v1.storage.ListObjectsResponse.Result
 */
class ListObjectsResponse_Result extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.storage.ListObjectsResponse.Result.result
         */
        this.result = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListObjectsResponse_Result().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListObjectsResponse_Result().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListObjectsResponse_Result().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListObjectsResponse_Result, a, b);
    }
}
exports.ListObjectsResponse_Result = ListObjectsResponse_Result;
ListObjectsResponse_Result.runtime = protobuf_1.proto3;
ListObjectsResponse_Result.typeName = "api.v1.storage.ListObjectsResponse.Result";
ListObjectsResponse_Result.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "object", kind: "message", T: storage_pb_js_1.Object$, oneof: "result" },
    { no: 2, name: "folder", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result" },
]);
/**
 * @generated from message api.v1.storage.DeleteObjectRequest
 */
class DeleteObjectRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        /**
         * @generated from field: string path = 2;
         */
        this.path = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteObjectRequest, a, b);
    }
}
exports.DeleteObjectRequest = DeleteObjectRequest;
DeleteObjectRequest.runtime = protobuf_1.proto3;
DeleteObjectRequest.typeName = "api.v1.storage.DeleteObjectRequest";
DeleteObjectRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.DeleteObjectResponse
 */
class DeleteObjectResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteObjectResponse, a, b);
    }
}
exports.DeleteObjectResponse = DeleteObjectResponse;
DeleteObjectResponse.runtime = protobuf_1.proto3;
DeleteObjectResponse.typeName = "api.v1.storage.DeleteObjectResponse";
DeleteObjectResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.storage.CopyObjectRequest
 */
class CopyObjectRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string from_bucket = 1;
         */
        this.fromBucket = "";
        /**
         * @generated from field: string from_path = 2;
         */
        this.fromPath = "";
        /**
         * @generated from field: string to_bucket = 3;
         */
        this.toBucket = "";
        /**
         * @generated from field: string to_path = 4;
         */
        this.toPath = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CopyObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CopyObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CopyObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CopyObjectRequest, a, b);
    }
}
exports.CopyObjectRequest = CopyObjectRequest;
CopyObjectRequest.runtime = protobuf_1.proto3;
CopyObjectRequest.typeName = "api.v1.storage.CopyObjectRequest";
CopyObjectRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.CopyObjectResponse
 */
class CopyObjectResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CopyObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CopyObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CopyObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CopyObjectResponse, a, b);
    }
}
exports.CopyObjectResponse = CopyObjectResponse;
CopyObjectResponse.runtime = protobuf_1.proto3;
CopyObjectResponse.typeName = "api.v1.storage.CopyObjectResponse";
CopyObjectResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.storage.UploadObjectRequest
 */
class UploadObjectRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.storage.UploadObjectRequest.request
         */
        this.request = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UploadObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UploadObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UploadObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UploadObjectRequest, a, b);
    }
}
exports.UploadObjectRequest = UploadObjectRequest;
UploadObjectRequest.runtime = protobuf_1.proto3;
UploadObjectRequest.typeName = "api.v1.storage.UploadObjectRequest";
UploadObjectRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: UploadObjectRequest_Metadata, oneof: "request" },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "request" },
]);
/**
 * @generated from message api.v1.storage.UploadObjectRequest.Metadata
 */
class UploadObjectRequest_Metadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        /**
         * @generated from field: string path = 2;
         */
        this.path = "";
        /**
         * @generated from field: uint64 size = 3;
         */
        this.size = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: bool only_replace = 4;
         */
        this.onlyReplace = false;
        /**
         * @generated from field: bool only_create = 5;
         */
        this.onlyCreate = false;
        /**
         * @generated from field: string content_type = 6;
         */
        this.contentType = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UploadObjectRequest_Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UploadObjectRequest_Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UploadObjectRequest_Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UploadObjectRequest_Metadata, a, b);
    }
}
exports.UploadObjectRequest_Metadata = UploadObjectRequest_Metadata;
UploadObjectRequest_Metadata.runtime = protobuf_1.proto3;
UploadObjectRequest_Metadata.typeName = "api.v1.storage.UploadObjectRequest.Metadata";
UploadObjectRequest_Metadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "only_replace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "only_create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.UploadObjectResponse
 */
class UploadObjectResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string path = 1;
         */
        this.path = "";
        /**
         * @generated from field: uint64 size = 2;
         */
        this.size = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UploadObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UploadObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UploadObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UploadObjectResponse, a, b);
    }
}
exports.UploadObjectResponse = UploadObjectResponse;
UploadObjectResponse.runtime = protobuf_1.proto3;
UploadObjectResponse.typeName = "api.v1.storage.UploadObjectResponse";
UploadObjectResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message api.v1.storage.DownloadObjectRequest
 */
class DownloadObjectRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bucket = 1;
         */
        this.bucket = "";
        /**
         * @generated from field: string path = 2;
         */
        this.path = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DownloadObjectRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DownloadObjectRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DownloadObjectRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DownloadObjectRequest, a, b);
    }
}
exports.DownloadObjectRequest = DownloadObjectRequest;
DownloadObjectRequest.runtime = protobuf_1.proto3;
DownloadObjectRequest.typeName = "api.v1.storage.DownloadObjectRequest";
DownloadObjectRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.DownloadObjectResponse
 */
class DownloadObjectResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes chunk = 1;
         */
        this.chunk = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DownloadObjectResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DownloadObjectResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DownloadObjectResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DownloadObjectResponse, a, b);
    }
}
exports.DownloadObjectResponse = DownloadObjectResponse;
DownloadObjectResponse.runtime = protobuf_1.proto3;
DownloadObjectResponse.typeName = "api.v1.storage.DownloadObjectResponse";
DownloadObjectResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);


/***/ }),

/***/ 6298:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/storage/storage.proto (package api.v1.storage, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.S3Config = exports.MinioConfig = exports.GcsConfig = exports.ProviderEntry = exports.Config = exports.Provider = exports.Object$ = exports.Bucket = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const credentials_pb_js_1 = __nccwpck_require__(9705);
/**
 * @generated from message api.v1.storage.Bucket
 */
class Bucket extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: string region = 2;
         */
        this.region = "";
        /**
         * @generated from field: string provider_bucket = 3;
         */
        this.providerBucket = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Bucket().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Bucket().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Bucket().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Bucket, a, b);
    }
}
exports.Bucket = Bucket;
Bucket.runtime = protobuf_1.proto3;
Bucket.typeName = "api.v1.storage.Bucket";
Bucket.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "provider_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message api.v1.storage.Object
 */
class Object$ extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string path = 1;
         */
        this.path = "";
        /**
         * @generated from field: uint64 size = 3;
         */
        this.size = protobuf_1.protoInt64.zero;
        /**
         * @generated from field: string etag = 4;
         */
        this.etag = "";
        /**
         * @generated from field: string content_type = 5;
         */
        this.contentType = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Object$().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Object$().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Object$().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Object$, a, b);
    }
}
exports.Object$ = Object$;
Object$.runtime = protobuf_1.proto3;
Object$.typeName = "api.v1.storage.Object";
Object$.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_modified", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.storage.Provider
 */
class Provider extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * @generated from field: repeated api.v1.storage.Bucket buckets = 4;
         */
        this.buckets = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Provider().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Provider().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Provider().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Provider, a, b);
    }
}
exports.Provider = Provider;
Provider.runtime = protobuf_1.proto3;
Provider.typeName = "api.v1.storage.Provider";
Provider.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "message", T: Config },
    { no: 4, name: "buckets", kind: "message", T: Bucket, repeated: true },
    { no: 5, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message api.v1.storage.Config
 */
class Config extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.storage.Config.config
         */
        this.config = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Config().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Config().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Config().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Config, a, b);
    }
}
exports.Config = Config;
Config.runtime = protobuf_1.proto3;
Config.typeName = "api.v1.storage.Config";
Config.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "minio", kind: "message", T: MinioConfig, oneof: "config" },
    { no: 2, name: "gcs", kind: "message", T: GcsConfig, oneof: "config" },
    { no: 3, name: "s3", kind: "message", T: S3Config, oneof: "config" },
]);
/**
 * @generated from message api.v1.storage.ProviderEntry
 */
class ProviderEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider_id = 1;
         */
        this.providerId = "";
        /**
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * @generated from field: repeated api.v1.storage.Bucket buckets = 4;
         */
        this.buckets = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProviderEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProviderEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProviderEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ProviderEntry, a, b);
    }
}
exports.ProviderEntry = ProviderEntry;
ProviderEntry.runtime = protobuf_1.proto3;
ProviderEntry.typeName = "api.v1.storage.ProviderEntry";
ProviderEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "provider_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "message", T: Config },
    { no: 4, name: "buckets", kind: "message", T: Bucket, repeated: true },
    { no: 5, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message api.v1.storage.GcsConfig
 */
class GcsConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes config = 1;
         */
        this.config = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GcsConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GcsConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GcsConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GcsConfig, a, b);
    }
}
exports.GcsConfig = GcsConfig;
GcsConfig.runtime = protobuf_1.proto3;
GcsConfig.typeName = "api.v1.storage.GcsConfig";
GcsConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message api.v1.storage.MinioConfig
 */
class MinioConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string endpoint = 1;
         */
        this.endpoint = "";
        /**
         * @generated from field: string region = 2;
         */
        this.region = "";
        /**
         * @generated from field: bool secure = 4;
         */
        this.secure = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MinioConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MinioConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MinioConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MinioConfig, a, b);
    }
}
exports.MinioConfig = MinioConfig;
MinioConfig.runtime = protobuf_1.proto3;
MinioConfig.typeName = "api.v1.storage.MinioConfig";
MinioConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "credentials", kind: "message", T: credentials_pb_js_1.ProviderCredentials },
    { no: 4, name: "secure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.storage.S3Config
 */
class S3Config extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string region = 1;
         */
        this.region = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new S3Config().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new S3Config().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new S3Config().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(S3Config, a, b);
    }
}
exports.S3Config = S3Config;
S3Config.runtime = protobuf_1.proto3;
S3Config.typeName = "api.v1.storage.S3Config";
S3Config.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentials", kind: "message", T: credentials_pb_js_1.ProviderCredentials },
]);


/***/ }),

/***/ 5329:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/user/service.proto (package api.v1.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(7061);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * The service to manage users in Users
 *
 * @generated from service api.v1.user.Service
 */
exports.t = {
    typeName: "api.v1.user.Service",
    methods: {
        /**
         * Create a new user
         *
         * @generated from rpc api.v1.user.Service.Create
         */
        create: {
            name: "Create",
            I: service_pb_js_1.CreateRequest,
            O: service_pb_js_1.CreateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Update a users profile and info
         *
         * @generated from rpc api.v1.user.Service.Update
         */
        update: {
            name: "Update",
            I: service_pb_js_1.UpdateRequest,
            O: service_pb_js_1.UpdateResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get the list of active sessions for the given user.
         *
         * @generated from rpc api.v1.user.Service.ListSessions
         */
        listSessions: {
            name: "ListSessions",
            I: service_pb_js_1.ListSessionsRequest,
            O: service_pb_js_1.ListSessionsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Get a user by user-id.
         *
         * @generated from rpc api.v1.user.Service.Get
         */
        get: {
            name: "Get",
            I: service_pb_js_1.GetRequest,
            O: service_pb_js_1.GetResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Lookup a user by a unique identifier - email, username, phone number etc.
         *
         * @generated from rpc api.v1.user.Service.GetByIdentifier
         */
        getByIdentifier: {
            name: "GetByIdentifier",
            I: service_pb_js_1.GetByIdentifierRequest,
            O: service_pb_js_1.GetByIdentifierResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * List users
         *
         * @generated from rpc api.v1.user.Service.List
         */
        list: {
            name: "List",
            I: service_pb_js_1.ListRequest,
            O: service_pb_js_1.ListResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Delete a specific user
         *
         * @generated from rpc api.v1.user.Service.Delete
         */
        delete: {
            name: "Delete",
            I: service_pb_js_1.DeleteRequest,
            O: service_pb_js_1.DeleteResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 7061:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/user/service.proto (package api.v1.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListResponse = exports.ListRequest = exports.DeleteResponse = exports.DeleteRequest = exports.ListSessionsResponse = exports.ListSessionsRequest = exports.GetResponse = exports.GetRequest = exports.UpdateResponse = exports.UpdateRequest = exports.CreateResponse = exports.CreateRequest = exports.GetByIdentifierResponse = exports.GetByIdentifierRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const user_pb_js_1 = __nccwpck_require__(3008);
const user_pb_js_2 = __nccwpck_require__(8554);
const common_pb_js_1 = __nccwpck_require__(1101);
/**
 * @generated from message api.v1.user.GetByIdentifierRequest
 */
class GetByIdentifierRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByIdentifierRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByIdentifierRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByIdentifierRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByIdentifierRequest, a, b);
    }
}
exports.GetByIdentifierRequest = GetByIdentifierRequest;
GetByIdentifierRequest.runtime = protobuf_1.proto3;
GetByIdentifierRequest.typeName = "api.v1.user.GetByIdentifierRequest";
GetByIdentifierRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: user_pb_js_1.UserIdentifier },
]);
/**
 * @generated from message api.v1.user.GetByIdentifierResponse
 */
class GetByIdentifierResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetByIdentifierResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetByIdentifierResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetByIdentifierResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetByIdentifierResponse, a, b);
    }
}
exports.GetByIdentifierResponse = GetByIdentifierResponse;
GetByIdentifierResponse.runtime = protobuf_1.proto3;
GetByIdentifierResponse.typeName = "api.v1.user.GetByIdentifierResponse";
GetByIdentifierResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: user_pb_js_2.User },
]);
/**
 * The request of a Users.Create RPC
 *
 * @generated from message api.v1.user.CreateRequest
 */
class CreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Initial fields to set.
         *
         * @generated from field: repeated api.v1.user.Update initializers = 1;
         */
        this.initializers = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateRequest, a, b);
    }
}
exports.CreateRequest = CreateRequest;
CreateRequest.runtime = protobuf_1.proto3;
CreateRequest.typeName = "api.v1.user.CreateRequest";
CreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "initializers", kind: "message", T: user_pb_js_2.Update, repeated: true },
]);
/**
 * The response of a Users.Create RPC
 *
 * @generated from message api.v1.user.CreateResponse
 */
class CreateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateResponse, a, b);
    }
}
exports.CreateResponse = CreateResponse;
CreateResponse.runtime = protobuf_1.proto3;
CreateResponse.typeName = "api.v1.user.CreateResponse";
CreateResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: user_pb_js_2.User },
]);
/**
 * The request of a Users.Update RPC
 *
 * @generated from message api.v1.user.UpdateRequest
 */
class UpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user identifier to fetch the user
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        /**
         * @generated from field: repeated api.v1.user.Update updates = 2;
         */
        this.updates = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateRequest, a, b);
    }
}
exports.UpdateRequest = UpdateRequest;
UpdateRequest.runtime = protobuf_1.proto3;
UpdateRequest.typeName = "api.v1.user.UpdateRequest";
UpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updates", kind: "message", T: user_pb_js_2.Update, repeated: true },
]);
/**
 * The response of a Users.Update RPC
 *
 * @generated from message api.v1.user.UpdateResponse
 */
class UpdateResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateResponse, a, b);
    }
}
exports.UpdateResponse = UpdateResponse;
UpdateResponse.runtime = protobuf_1.proto3;
UpdateResponse.typeName = "api.v1.user.UpdateResponse";
UpdateResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of an Users.Get RPC
 *
 * @generated from message api.v1.user.GetRequest
 */
class GetRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user identifier to fetch the user
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetRequest, a, b);
    }
}
exports.GetRequest = GetRequest;
GetRequest.runtime = protobuf_1.proto3;
GetRequest.typeName = "api.v1.user.GetRequest";
GetRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of an Users.Get RPC
 *
 * @generated from message api.v1.user.GetResponse
 */
class GetResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetResponse, a, b);
    }
}
exports.GetResponse = GetResponse;
GetResponse.runtime = protobuf_1.proto3;
GetResponse.typeName = "api.v1.user.GetResponse";
GetResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: user_pb_js_2.User },
]);
/**
 * The request of an Users.ListSessions RPC
 *
 * @generated from message api.v1.user.ListSessionsRequest
 */
class ListSessionsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListSessionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListSessionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListSessionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListSessionsRequest, a, b);
    }
}
exports.ListSessionsRequest = ListSessionsRequest;
ListSessionsRequest.runtime = protobuf_1.proto3;
ListSessionsRequest.typeName = "api.v1.user.ListSessionsRequest";
ListSessionsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
]);
/**
 * The response of a Users.ListSessions RPC
 *
 * @generated from message api.v1.user.ListSessionsResponse
 */
class ListSessionsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.user.SessionEntry sessions = 1;
         */
        this.sessions = [];
        /**
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListSessionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListSessionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListSessionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListSessionsResponse, a, b);
    }
}
exports.ListSessionsResponse = ListSessionsResponse;
ListSessionsResponse.runtime = protobuf_1.proto3;
ListSessionsResponse.typeName = "api.v1.user.ListSessionsResponse";
ListSessionsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "sessions", kind: "message", T: user_pb_js_2.SessionEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * The request of an Users.Delete RPC
 *
 * @generated from message api.v1.user.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The user identifier to fetch the user
         *
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
DeleteRequest.runtime = protobuf_1.proto3;
DeleteRequest.typeName = "api.v1.user.DeleteRequest";
DeleteRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of an Users.Delete RPC
 *
 * @generated from message api.v1.user.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
DeleteResponse.runtime = protobuf_1.proto3;
DeleteResponse.typeName = "api.v1.user.DeleteResponse";
DeleteResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * The request of a Users.List RPC
 *
 * @generated from message api.v1.user.ListRequest
 */
class ListRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string search = 2;
         */
        this.search = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListRequest, a, b);
    }
}
exports.ListRequest = ListRequest;
ListRequest.runtime = protobuf_1.proto3;
ListRequest.typeName = "api.v1.user.ListRequest";
ListRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: common_pb_js_1.Pagination },
    { no: 2, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * The response of a Users.List RPC
 *
 * @generated from message api.v1.user.ListResponse
 */
class ListResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The users returned
         *
         * @generated from field: repeated model.UserEntry users = 1;
         */
        this.users = [];
        /**
         * Return number of users in database
         *
         * @generated from field: uint64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ListResponse, a, b);
    }
}
exports.ListResponse = ListResponse;
ListResponse.runtime = protobuf_1.proto3;
ListResponse.typeName = "api.v1.user.ListResponse";
ListResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: user_pb_js_1.UserEntry, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);


/***/ }),

/***/ 3210:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";
var __webpack_unused_export__;

// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file api/v1/user/settings/service.proto (package api.v1.user.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
__webpack_unused_export__ = ({ value: true });
exports.t = void 0;
const service_pb_js_1 = __nccwpck_require__(185);
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from service api.v1.user.settings.Service
 */
exports.t = {
    typeName: "api.v1.user.settings.Service",
    methods: {
        /**
         * Gets the users settings for the current project.
         *
         * @generated from rpc api.v1.user.settings.Service.GetSettings
         */
        getSettings: {
            name: "GetSettings",
            I: service_pb_js_1.GetSettingsRequest,
            O: service_pb_js_1.GetSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Sets the users settings for the current project.
         *
         * @generated from rpc api.v1.user.settings.Service.UpdateSettings
         */
        updateSettings: {
            name: "UpdateSettings",
            I: service_pb_js_1.UpdateSettingsRequest,
            O: service_pb_js_1.UpdateSettingsResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};


/***/ }),

/***/ 185:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/user/settings/service.proto (package api.v1.user.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateSettingsResponse = exports.UpdateSettingsRequest = exports.GetSettingsResponse = exports.GetSettingsRequest = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const settings_pb_js_1 = __nccwpck_require__(466);
/**
 * @generated from message api.v1.user.settings.GetSettingsRequest
 */
class GetSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsRequest, a, b);
    }
}
exports.GetSettingsRequest = GetSettingsRequest;
GetSettingsRequest.runtime = protobuf_1.proto3;
GetSettingsRequest.typeName = "api.v1.user.settings.GetSettingsRequest";
GetSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.user.settings.GetSettingsResponse
 */
class GetSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(GetSettingsResponse, a, b);
    }
}
exports.GetSettingsResponse = GetSettingsResponse;
GetSettingsResponse.runtime = protobuf_1.proto3;
GetSettingsResponse.typeName = "api.v1.user.settings.GetSettingsResponse";
GetSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: settings_pb_js_1.Settings },
]);
/**
 * @generated from message api.v1.user.settings.UpdateSettingsRequest
 */
class UpdateSettingsRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated api.v1.user.settings.Update settings = 1;
         */
        this.settings = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsRequest, a, b);
    }
}
exports.UpdateSettingsRequest = UpdateSettingsRequest;
UpdateSettingsRequest.runtime = protobuf_1.proto3;
UpdateSettingsRequest.typeName = "api.v1.user.settings.UpdateSettingsRequest";
UpdateSettingsRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: settings_pb_js_1.Update, repeated: true },
]);
/**
 * @generated from message api.v1.user.settings.UpdateSettingsResponse
 */
class UpdateSettingsResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateSettingsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateSettingsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateSettingsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UpdateSettingsResponse, a, b);
    }
}
exports.UpdateSettingsResponse = UpdateSettingsResponse;
UpdateSettingsResponse.runtime = protobuf_1.proto3;
UpdateSettingsResponse.typeName = "api.v1.user.settings.UpdateSettingsResponse";
UpdateSettingsResponse.fields = protobuf_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 466:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/user/settings/settings.proto (package api.v1.user.settings, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OauthSettings = exports.OauthProviderUpdate = exports.OauthProviderSettings = exports.Settings = exports.AuthMethod = exports.RegisterMethod_Signup = exports.RegisterMethod_System = exports.RegisterMethod = exports.Update_CallbackUrls = exports.Update_LoginMechanisms = exports.Update = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const common_pb_js_1 = __nccwpck_require__(1101);
const auth_pb_js_1 = __nccwpck_require__(7387);
const credentials_pb_js_1 = __nccwpck_require__(9705);
/**
 * @generated from message api.v1.user.settings.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.settings.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.user.settings.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 2, name: "is_verified_email_required", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 3, name: "is_verified_phone_required", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 4, name: "access_token_ttl", kind: "message", T: protobuf_1.Duration, oneof: "field" },
    { no: 5, name: "refresh_token_ttl", kind: "message", T: protobuf_1.Duration, oneof: "field" },
    { no: 6, name: "verification_code_ttl", kind: "message", T: protobuf_1.Duration, oneof: "field" },
    { no: 7, name: "password_hashing", kind: "message", T: common_pb_js_1.HashingConfig, oneof: "field" },
    { no: 8, name: "login_mechanisms", kind: "message", T: Update_LoginMechanisms, oneof: "field" },
    { no: 9, name: "callback_urls", kind: "message", T: Update_CallbackUrls, oneof: "field" },
    { no: 10, name: "oauth_provider", kind: "message", T: OauthProviderUpdate, oneof: "field" },
]);
/**
 * @generated from message api.v1.user.settings.Update.LoginMechanisms
 */
class Update_LoginMechanisms extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated model.LoginType login_mechanisms = 1;
         */
        this.loginMechanisms = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update_LoginMechanisms().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update_LoginMechanisms().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update_LoginMechanisms().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update_LoginMechanisms, a, b);
    }
}
exports.Update_LoginMechanisms = Update_LoginMechanisms;
Update_LoginMechanisms.runtime = protobuf_1.proto3;
Update_LoginMechanisms.typeName = "api.v1.user.settings.Update.LoginMechanisms";
Update_LoginMechanisms.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_mechanisms", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), repeated: true },
]);
/**
 * @generated from message api.v1.user.settings.Update.CallbackUrls
 */
class Update_CallbackUrls extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string callback_urls = 1;
         */
        this.callbackUrls = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update_CallbackUrls().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update_CallbackUrls().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update_CallbackUrls().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update_CallbackUrls, a, b);
    }
}
exports.Update_CallbackUrls = Update_CallbackUrls;
Update_CallbackUrls.runtime = protobuf_1.proto3;
Update_CallbackUrls.typeName = "api.v1.user.settings.Update.CallbackUrls";
Update_CallbackUrls.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "callback_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message api.v1.user.settings.RegisterMethod
 */
class RegisterMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.settings.RegisterMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod, a, b);
    }
}
exports.RegisterMethod = RegisterMethod;
RegisterMethod.runtime = protobuf_1.proto3;
RegisterMethod.typeName = "api.v1.user.settings.RegisterMethod";
RegisterMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "message", T: RegisterMethod_System, oneof: "method" },
    { no: 2, name: "signup", kind: "message", T: RegisterMethod_Signup, oneof: "method" },
    { no: 3, name: "oauth_provider", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.OauthProvider), oneof: "method" },
]);
/**
 * @generated from message api.v1.user.settings.RegisterMethod.System
 */
class RegisterMethod_System extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_System().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_System().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_System().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_System, a, b);
    }
}
exports.RegisterMethod_System = RegisterMethod_System;
RegisterMethod_System.runtime = protobuf_1.proto3;
RegisterMethod_System.typeName = "api.v1.user.settings.RegisterMethod.System";
RegisterMethod_System.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.user.settings.RegisterMethod.Signup
 */
class RegisterMethod_Signup extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: model.LoginType login_type = 1;
         */
        this.loginType = auth_pb_js_1.LoginType.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_Signup().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_Signup().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_Signup().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_Signup, a, b);
    }
}
exports.RegisterMethod_Signup = RegisterMethod_Signup;
RegisterMethod_Signup.runtime = protobuf_1.proto3;
RegisterMethod_Signup.typeName = "api.v1.user.settings.RegisterMethod.Signup";
RegisterMethod_Signup.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType) },
]);
/**
 * @generated from message api.v1.user.settings.AuthMethod
 */
class AuthMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.settings.AuthMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AuthMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AuthMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AuthMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AuthMethod, a, b);
    }
}
exports.AuthMethod = AuthMethod;
AuthMethod.runtime = protobuf_1.proto3;
AuthMethod.typeName = "api.v1.user.settings.AuthMethod";
AuthMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), oneof: "method" },
    { no: 2, name: "oauth_provider", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.OauthProvider), oneof: "method" },
]);
/**
 * @generated from message api.v1.user.settings.Settings
 */
class Settings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool allow_register = 1;
         */
        this.allowRegister = false;
        /**
         * @generated from field: bool is_verified_email_required = 2;
         */
        this.isVerifiedEmailRequired = false;
        /**
         * @generated from field: bool is_verified_phone_required = 3;
         */
        this.isVerifiedPhoneRequired = false;
        /**
         * @generated from field: repeated model.LoginType login_mechanisms = 8;
         */
        this.loginMechanisms = [];
        /**
         * @generated from field: bool send_welcome_mail = 10;
         */
        this.sendWelcomeMail = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Settings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Settings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Settings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Settings, a, b);
    }
}
exports.Settings = Settings;
Settings.runtime = protobuf_1.proto3;
Settings.typeName = "api.v1.user.settings.Settings";
Settings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_verified_email_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_verified_phone_required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "access_token_ttl", kind: "message", T: protobuf_1.Duration },
    { no: 5, name: "refresh_token_ttl", kind: "message", T: protobuf_1.Duration },
    { no: 6, name: "verification_code_ttl", kind: "message", T: protobuf_1.Duration },
    { no: 7, name: "password_hashing", kind: "message", T: common_pb_js_1.HashingConfig },
    { no: 8, name: "login_mechanisms", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), repeated: true },
    { no: 9, name: "oauth_settings", kind: "message", T: OauthSettings },
    { no: 10, name: "send_welcome_mail", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.user.settings.OauthProviderSettings
 */
class OauthProviderSettings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string secret_id = 1;
         */
        this.secretId = "";
        /**
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * @generated from field: string issuer = 3;
         */
        this.issuer = "";
        /**
         * @generated from field: bool allow_login = 4;
         */
        this.allowLogin = false;
        /**
         * @generated from field: bool allow_register = 5;
         */
        this.allowRegister = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OauthProviderSettings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OauthProviderSettings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OauthProviderSettings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OauthProviderSettings, a, b);
    }
}
exports.OauthProviderSettings = OauthProviderSettings;
OauthProviderSettings.runtime = protobuf_1.proto3;
OauthProviderSettings.typeName = "api.v1.user.settings.OauthProviderSettings";
OauthProviderSettings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allow_login", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.user.settings.OauthProviderUpdate
 */
class OauthProviderUpdate extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: model.OauthProvider provider = 1;
         */
        this.provider = auth_pb_js_1.OauthProvider.UNSPECIFIED;
        /**
         * @generated from field: bool allow_login = 3;
         */
        this.allowLogin = false;
        /**
         * @generated from field: bool allow_register = 4;
         */
        this.allowRegister = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OauthProviderUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OauthProviderUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OauthProviderUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OauthProviderUpdate, a, b);
    }
}
exports.OauthProviderUpdate = OauthProviderUpdate;
OauthProviderUpdate.runtime = protobuf_1.proto3;
OauthProviderUpdate.typeName = "api.v1.user.settings.OauthProviderUpdate";
OauthProviderUpdate.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.OauthProvider) },
    { no: 2, name: "credentials", kind: "message", T: credentials_pb_js_1.ProviderCredentials },
    { no: 3, name: "allow_login", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "allow_register", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message api.v1.user.settings.OauthSettings
 */
class OauthSettings extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string callback_urls = 2;
         */
        this.callbackUrls = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OauthSettings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OauthSettings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OauthSettings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OauthSettings, a, b);
    }
}
exports.OauthSettings = OauthSettings;
OauthSettings.runtime = protobuf_1.proto3;
OauthSettings.typeName = "api.v1.user.settings.OauthSettings";
OauthSettings.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "callback_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "google", kind: "message", T: OauthProviderSettings },
    { no: 4, name: "github", kind: "message", T: OauthProviderSettings },
    { no: 5, name: "facebook", kind: "message", T: OauthProviderSettings },
]);


/***/ }),

/***/ 8554:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api/v1/user/user.proto (package api.v1.user, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Session = exports.SessionEntry = exports.AuthMethod = exports.Update_ResetSessions = exports.Update = exports.User = exports.Profile = exports.VerificationCode = exports.Permissionship = exports.DeviceInfo = exports.VerificationType = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const common_pb_js_1 = __nccwpck_require__(1101);
const user_pb_js_1 = __nccwpck_require__(3008);
const metadata_pb_js_1 = __nccwpck_require__(4951);
const auth_pb_js_1 = __nccwpck_require__(7387);
/**
 * @generated from enum api.v1.user.VerificationType
 */
var VerificationType;
(function (VerificationType) {
    /**
     * @generated from enum value: VERIFICATION_TYPE_UNSPECIFIED = 0;
     */
    VerificationType[VerificationType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: VERIFICATION_TYPE_EMAIL = 1;
     */
    VerificationType[VerificationType["EMAIL"] = 1] = "EMAIL";
    /**
     * @generated from enum value: VERIFICATION_TYPE_TEXT = 2;
     */
    VerificationType[VerificationType["TEXT"] = 2] = "TEXT";
    /**
     * @generated from enum value: VERIFICATION_TYPE_RESET_PASSWORD = 3;
     */
    VerificationType[VerificationType["RESET_PASSWORD"] = 3] = "RESET_PASSWORD";
})(VerificationType || (exports.VerificationType = VerificationType = {}));
// Retrieve enum metadata with: proto3.getEnumType(VerificationType)
protobuf_1.proto3.util.setEnumType(VerificationType, "api.v1.user.VerificationType", [
    { no: 0, name: "VERIFICATION_TYPE_UNSPECIFIED" },
    { no: 1, name: "VERIFICATION_TYPE_EMAIL" },
    { no: 2, name: "VERIFICATION_TYPE_TEXT" },
    { no: 3, name: "VERIFICATION_TYPE_RESET_PASSWORD" },
]);
/**
 * @generated from enum api.v1.user.DeviceInfo
 */
var DeviceInfo;
(function (DeviceInfo) {
    /**
     * @generated from enum value: DEVICE_INFO_UNSPECIFIED = 0;
     */
    DeviceInfo[DeviceInfo["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: DEVICE_INFO_IOS = 1;
     */
    DeviceInfo[DeviceInfo["IOS"] = 1] = "IOS";
    /**
     * @generated from enum value: DEVICE_INFO_MACOS = 2;
     */
    DeviceInfo[DeviceInfo["MACOS"] = 2] = "MACOS";
    /**
     * @generated from enum value: DEVICE_INFO_WINDOWS = 3;
     */
    DeviceInfo[DeviceInfo["WINDOWS"] = 3] = "WINDOWS";
    /**
     * @generated from enum value: DEVICE_INFO_WEB = 4;
     */
    DeviceInfo[DeviceInfo["WEB"] = 4] = "WEB";
    /**
     * @generated from enum value: DEVICE_INFO_LINUX = 5;
     */
    DeviceInfo[DeviceInfo["LINUX"] = 5] = "LINUX";
    /**
     * @generated from enum value: DEVICE_INFO_ANDROID = 6;
     */
    DeviceInfo[DeviceInfo["ANDROID"] = 6] = "ANDROID";
})(DeviceInfo || (exports.DeviceInfo = DeviceInfo = {}));
// Retrieve enum metadata with: proto3.getEnumType(DeviceInfo)
protobuf_1.proto3.util.setEnumType(DeviceInfo, "api.v1.user.DeviceInfo", [
    { no: 0, name: "DEVICE_INFO_UNSPECIFIED" },
    { no: 1, name: "DEVICE_INFO_IOS" },
    { no: 2, name: "DEVICE_INFO_MACOS" },
    { no: 3, name: "DEVICE_INFO_WINDOWS" },
    { no: 4, name: "DEVICE_INFO_WEB" },
    { no: 5, name: "DEVICE_INFO_LINUX" },
    { no: 6, name: "DEVICE_INFO_ANDROID" },
]);
/**
 * @generated from enum api.v1.user.Permissionship
 */
var Permissionship;
(function (Permissionship) {
    /**
     * @generated from enum value: PERMISSIONSHIP_UNSPECIFIED = 0;
     */
    Permissionship[Permissionship["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: PERMISSIONSHIP_NO_PERMISSION = 1;
     */
    Permissionship[Permissionship["NO_PERMISSION"] = 1] = "NO_PERMISSION";
    /**
     * @generated from enum value: PERMISSIONSHIP_HAS_PERMISSION = 2;
     */
    Permissionship[Permissionship["HAS_PERMISSION"] = 2] = "HAS_PERMISSION";
    /**
     * @generated from enum value: PERMISSIONSHIP_CONDITIONAL_PERMISSION = 3;
     */
    Permissionship[Permissionship["CONDITIONAL_PERMISSION"] = 3] = "CONDITIONAL_PERMISSION";
})(Permissionship || (exports.Permissionship = Permissionship = {}));
// Retrieve enum metadata with: proto3.getEnumType(Permissionship)
protobuf_1.proto3.util.setEnumType(Permissionship, "api.v1.user.Permissionship", [
    { no: 0, name: "PERMISSIONSHIP_UNSPECIFIED" },
    { no: 1, name: "PERMISSIONSHIP_NO_PERMISSION" },
    { no: 2, name: "PERMISSIONSHIP_HAS_PERMISSION" },
    { no: 3, name: "PERMISSIONSHIP_CONDITIONAL_PERMISSION" },
]);
/**
 * @generated from message api.v1.user.VerificationCode
 */
class VerificationCode extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 attempts = 4;
         */
        this.attempts = 0;
        /**
         * @generated from field: api.v1.user.VerificationType type = 6;
         */
        this.type = VerificationType.UNSPECIFIED;
        /**
         * @generated from field: string user_id = 7;
         */
        this.userId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerificationCode().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerificationCode().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerificationCode().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(VerificationCode, a, b);
    }
}
exports.VerificationCode = VerificationCode;
VerificationCode.runtime = protobuf_1.proto3;
VerificationCode.typeName = "api.v1.user.VerificationCode";
VerificationCode.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "message", T: common_pb_js_1.HashingInstance },
    { no: 2, name: "sent_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "expires_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "attempts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "last_attempt", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(VerificationType) },
    { no: 7, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.user.Profile
 */
class Profile extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string first_name = 1;
         */
        this.firstName = "";
        /**
         * @generated from field: string last_name = 2;
         */
        this.lastName = "";
        /**
         * @generated from field: string preferred_language = 3;
         */
        this.preferredLanguage = "";
        /**
         * @generated from field: string country = 4;
         */
        this.country = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Profile().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Profile().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Profile().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Profile, a, b);
    }
}
exports.Profile = Profile;
Profile.runtime = protobuf_1.proto3;
Profile.typeName = "api.v1.user.Profile";
Profile.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "preferred_language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message api.v1.user.User
 */
class User extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        /**
         * @generated from field: bool is_phone_verified = 6;
         */
        this.isPhoneVerified = false;
        /**
         * @generated from field: bool is_email_verified = 7;
         */
        this.isEmailVerified = false;
        /**
         * @generated from field: map<string, bytes> metadata = 9;
         */
        this.metadata = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new User().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new User().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new User().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(User, a, b);
    }
}
exports.User = User;
User.runtime = protobuf_1.proto3;
User.typeName = "api.v1.user.User";
User.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_info", kind: "message", T: user_pb_js_1.UserInfo },
    { no: 3, name: "profile", kind: "message", T: Profile },
    { no: 4, name: "updated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "register_info", kind: "message", T: user_pb_js_1.RegisterInfo },
    { no: 6, name: "is_phone_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "is_email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "new_sessions_since", kind: "message", T: protobuf_1.Timestamp },
    { no: 9, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 12 /* ScalarType.BYTES */ } },
]);
/**
 * @generated from message api.v1.user.Update
 */
class Update extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.Update.field
         */
        this.field = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update, a, b);
    }
}
exports.Update = Update;
Update.runtime = protobuf_1.proto3;
Update.typeName = "api.v1.user.Update";
Update.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 5, name: "profile", kind: "message", T: Profile, oneof: "field" },
    { no: 6, name: "is_email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 7, name: "is_phone_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "field" },
    { no: 8, name: "reset_sessions", kind: "message", T: Update_ResetSessions, oneof: "field" },
    { no: 9, name: "set_metadata", kind: "message", T: metadata_pb_js_1.Metadata, oneof: "field" },
    { no: 10, name: "delete_metadata_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "field" },
    { no: 12, name: "hashed_password", kind: "message", T: common_pb_js_1.HashingInstance, oneof: "field" },
]);
/**
 * @generated from message api.v1.user.Update.ResetSessions
 */
class Update_ResetSessions extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Update_ResetSessions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Update_ResetSessions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Update_ResetSessions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Update_ResetSessions, a, b);
    }
}
exports.Update_ResetSessions = Update_ResetSessions;
Update_ResetSessions.runtime = protobuf_1.proto3;
Update_ResetSessions.typeName = "api.v1.user.Update.ResetSessions";
Update_ResetSessions.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message api.v1.user.AuthMethod
 */
class AuthMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof api.v1.user.AuthMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AuthMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AuthMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AuthMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AuthMethod, a, b);
    }
}
exports.AuthMethod = AuthMethod;
AuthMethod.runtime = protobuf_1.proto3;
AuthMethod.typeName = "api.v1.user.AuthMethod";
AuthMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType), oneof: "method" },
    { no: 2, name: "oauth_provider", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.OauthProvider), oneof: "method" },
]);
/**
 * @generated from message api.v1.user.SessionEntry
 */
class SessionEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string session_id = 1;
         */
        this.sessionId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SessionEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SessionEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SessionEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SessionEntry, a, b);
    }
}
exports.SessionEntry = SessionEntry;
SessionEntry.runtime = protobuf_1.proto3;
SessionEntry.typeName = "api.v1.user.SessionEntry";
SessionEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session", kind: "message", T: Session },
]);
/**
 * @generated from message api.v1.user.Session
 */
class Session extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool is_invalidated = 2;
         */
        this.isInvalidated = false;
        /**
         * @generated from field: string country = 7;
         */
        this.country = "";
        /**
         * @generated from field: int32 postal_code = 8;
         */
        this.postalCode = 0;
        /**
         * @generated from field: api.v1.user.DeviceInfo device = 9;
         */
        this.device = DeviceInfo.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Session().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Session().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Session().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Session, a, b);
    }
}
exports.Session = Session;
Session.runtime = protobuf_1.proto3;
Session.typeName = "api.v1.user.Session";
Session.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "auth_method", kind: "message", T: AuthMethod },
    { no: 2, name: "is_invalidated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 4, name: "invalidated_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "expires_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "renewed_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 7, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "postal_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "device", kind: "enum", T: protobuf_1.proto3.getEnumType(DeviceInfo) },
]);


/***/ }),

/***/ 7387:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file model/auth.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OauthProvider = exports.LoginType = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from enum model.LoginType
 */
var LoginType;
(function (LoginType) {
    /**
     * @generated from enum value: LOGIN_TYPE_UNSPECIFIED = 0;
     */
    LoginType[LoginType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: LOGIN_TYPE_EMAIL_PASSWORD = 1;
     */
    LoginType[LoginType["EMAIL_PASSWORD"] = 1] = "EMAIL_PASSWORD";
    /**
     * @generated from enum value: LOGIN_TYPE_PHONE_PASSWORD = 2;
     */
    LoginType[LoginType["PHONE_PASSWORD"] = 2] = "PHONE_PASSWORD";
    /**
     * @generated from enum value: LOGIN_TYPE_USERNAME_PASSWORD = 3;
     */
    LoginType[LoginType["USERNAME_PASSWORD"] = 3] = "USERNAME_PASSWORD";
})(LoginType || (exports.LoginType = LoginType = {}));
// Retrieve enum metadata with: proto3.getEnumType(LoginType)
protobuf_1.proto3.util.setEnumType(LoginType, "model.LoginType", [
    { no: 0, name: "LOGIN_TYPE_UNSPECIFIED" },
    { no: 1, name: "LOGIN_TYPE_EMAIL_PASSWORD" },
    { no: 2, name: "LOGIN_TYPE_PHONE_PASSWORD" },
    { no: 3, name: "LOGIN_TYPE_USERNAME_PASSWORD" },
]);
/**
 * @generated from enum model.OauthProvider
 */
var OauthProvider;
(function (OauthProvider) {
    /**
     * @generated from enum value: OAUTH_PROVIDER_UNSPECIFIED = 0;
     */
    OauthProvider[OauthProvider["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: OAUTH_PROVIDER_GOOGLE = 1;
     */
    OauthProvider[OauthProvider["GOOGLE"] = 1] = "GOOGLE";
    /**
     * @generated from enum value: OAUTH_PROVIDER_GITHUB = 2;
     */
    OauthProvider[OauthProvider["GITHUB"] = 2] = "GITHUB";
    /**
     * @generated from enum value: OAUTH_PROVIDER_FACEBOOK = 3;
     */
    OauthProvider[OauthProvider["FACEBOOK"] = 3] = "FACEBOOK";
})(OauthProvider || (exports.OauthProvider = OauthProvider = {}));
// Retrieve enum metadata with: proto3.getEnumType(OauthProvider)
protobuf_1.proto3.util.setEnumType(OauthProvider, "model.OauthProvider", [
    { no: 0, name: "OAUTH_PROVIDER_UNSPECIFIED" },
    { no: 1, name: "OAUTH_PROVIDER_GOOGLE" },
    { no: 2, name: "OAUTH_PROVIDER_GITHUB" },
    { no: 3, name: "OAUTH_PROVIDER_FACEBOOK" },
]);


/***/ }),

/***/ 4810:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file model/author.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Author = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message model.Author
 */
class Author extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Cached identifier of the author, e.g. email or username at the time of
         * change.
         *
         * @generated from field: string identifier = 1;
         */
        this.identifier = "";
        /**
         * Cached pretty-printed name of the author at the time of
         * change.
         *
         * @generated from field: string printable_name = 2;
         */
        this.printableName = "";
        /**
         * User ID of the author. This should be used to get current information
         * about the author.
         *
         * @generated from oneof model.Author.account
         */
        this.account = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Author().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Author().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Author().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Author, a, b);
    }
}
exports.Author = Author;
Author.runtime = protobuf_1.proto3;
Author.typeName = "model.Author";
Author.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "printable_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "account" },
    { no: 4, name: "service_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "account" },
]);


/***/ }),

/***/ 1101:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file model/common.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pagination = exports.HashingInstance = exports.HashingConfig = exports.ScryptHashingInstance = exports.ScryptHashingConfig = exports.BcryptHashingInstance = exports.BcryptHashingConfig = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message model.BcryptHashingConfig
 */
class BcryptHashingConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 cost = 1;
         */
        this.cost = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BcryptHashingConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BcryptHashingConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BcryptHashingConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BcryptHashingConfig, a, b);
    }
}
exports.BcryptHashingConfig = BcryptHashingConfig;
BcryptHashingConfig.runtime = protobuf_1.proto3;
BcryptHashingConfig.typeName = "model.BcryptHashingConfig";
BcryptHashingConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "cost", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message model.BcryptHashingInstance
 */
class BcryptHashingInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BcryptHashingInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BcryptHashingInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BcryptHashingInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BcryptHashingInstance, a, b);
    }
}
exports.BcryptHashingInstance = BcryptHashingInstance;
BcryptHashingInstance.runtime = protobuf_1.proto3;
BcryptHashingInstance.typeName = "model.BcryptHashingInstance";
BcryptHashingInstance.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message model.ScryptHashingConfig
 */
class ScryptHashingConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string signer_key = 1;
         */
        this.signerKey = "";
        /**
         * @generated from field: string salt_separator = 2;
         */
        this.saltSeparator = "";
        /**
         * @generated from field: int32 rounds = 3;
         */
        this.rounds = 0;
        /**
         * @generated from field: int32 mem_cost = 4;
         */
        this.memCost = 0;
        /**
         * @generated from field: int32 p = 5;
         */
        this.p = 0;
        /**
         * @generated from field: int32 key_len = 6;
         */
        this.keyLen = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScryptHashingConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScryptHashingConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScryptHashingConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScryptHashingConfig, a, b);
    }
}
exports.ScryptHashingConfig = ScryptHashingConfig;
ScryptHashingConfig.runtime = protobuf_1.proto3;
ScryptHashingConfig.typeName = "model.ScryptHashingConfig";
ScryptHashingConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "signer_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "salt_separator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rounds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "mem_cost", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "p", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "key_len", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
/**
 * @generated from message model.ScryptHashingInstance
 */
class ScryptHashingInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes salt = 1;
         */
        this.salt = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScryptHashingInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScryptHashingInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScryptHashingInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScryptHashingInstance, a, b);
    }
}
exports.ScryptHashingInstance = ScryptHashingInstance;
ScryptHashingInstance.runtime = protobuf_1.proto3;
ScryptHashingInstance.typeName = "model.ScryptHashingInstance";
ScryptHashingInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message model.HashingConfig
 */
class HashingConfig extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof model.HashingConfig.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HashingConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HashingConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HashingConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HashingConfig, a, b);
    }
}
exports.HashingConfig = HashingConfig;
HashingConfig.runtime = protobuf_1.proto3;
HashingConfig.typeName = "model.HashingConfig";
HashingConfig.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "bcrypt", kind: "message", T: BcryptHashingConfig, oneof: "method" },
    { no: 2, name: "scrypt", kind: "message", T: ScryptHashingConfig, oneof: "method" },
]);
/**
 * @generated from message model.HashingInstance
 */
class HashingInstance extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes hash = 2;
         */
        this.hash = new Uint8Array(0);
        /**
         * @generated from oneof model.HashingInstance.instance
         */
        this.instance = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HashingInstance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HashingInstance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HashingInstance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HashingInstance, a, b);
    }
}
exports.HashingInstance = HashingInstance;
HashingInstance.runtime = protobuf_1.proto3;
HashingInstance.typeName = "model.HashingInstance";
HashingInstance.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: HashingConfig },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "bcrypt", kind: "message", T: BcryptHashingInstance, oneof: "instance" },
    { no: 4, name: "scrypt", kind: "message", T: ScryptHashingInstance, oneof: "instance" },
]);
/**
 * @generated from message model.Pagination
 */
class Pagination extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 offset = 1;
         */
        this.offset = 0;
        /**
         * @generated from field: uint32 limit = 2;
         */
        this.limit = 0;
        /**
         * @generated from field: bool descending = 3;
         */
        this.descending = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Pagination().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Pagination().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Pagination().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Pagination, a, b);
    }
}
exports.Pagination = Pagination;
Pagination.runtime = protobuf_1.proto3;
Pagination.typeName = "model.Pagination";
Pagination.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "descending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);


/***/ }),

/***/ 9705:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file model/credentials.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProviderCredentials = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message model.ProviderCredentials
 */
class ProviderCredentials extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string public_key = 1;
         */
        this.publicKey = "";
        /**
         * @generated from field: string private_key = 2;
         */
        this.privateKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProviderCredentials().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProviderCredentials().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProviderCredentials().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ProviderCredentials, a, b);
    }
}
exports.ProviderCredentials = ProviderCredentials;
ProviderCredentials.runtime = protobuf_1.proto3;
ProviderCredentials.typeName = "model.ProviderCredentials";
ProviderCredentials.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "private_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 4951:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file model/metadata.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Metadata = void 0;
const protobuf_1 = __nccwpck_require__(1344);
/**
 * @generated from message model.Metadata
 */
class Metadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        /**
         * @generated from field: bytes value = 2;
         */
        this.value = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Metadata, a, b);
    }
}
exports.Metadata = Metadata;
Metadata.runtime = protobuf_1.proto3;
Metadata.typeName = "model.Metadata";
Metadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);


/***/ }),

/***/ 3008:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file model/user.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RegisterMethod_Migration = exports.RegisterMethod_Signup = exports.RegisterMethod_System = exports.RegisterMethod = exports.RegisterInfo = exports.MemberEntry = exports.UserEntry = exports.UserInfo = exports.UserIdentifier = void 0;
const protobuf_1 = __nccwpck_require__(1344);
const auth_pb_js_1 = __nccwpck_require__(7387);
/**
 * @generated from message model.UserIdentifier
 */
class UserIdentifier extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof model.UserIdentifier.identifier
         */
        this.identifier = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserIdentifier().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserIdentifier().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserIdentifier().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserIdentifier, a, b);
    }
}
exports.UserIdentifier = UserIdentifier;
UserIdentifier.runtime = protobuf_1.proto3;
UserIdentifier.typeName = "model.UserIdentifier";
UserIdentifier.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
]);
/**
 * @generated from message model.UserInfo
 */
class UserInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string email = 1;
         */
        this.email = "";
        /**
         * @generated from field: string username = 2;
         */
        this.username = "";
        /**
         * @generated from field: string phone_number = 3;
         */
        this.phoneNumber = "";
        /**
         * @generated from field: repeated string group_ids = 6;
         */
        this.groupIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserInfo, a, b);
    }
}
exports.UserInfo = UserInfo;
UserInfo.runtime = protobuf_1.proto3;
UserInfo.typeName = "model.UserInfo";
UserInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message model.UserEntry
 */
class UserEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string user_id = 1;
         */
        this.userId = "";
        /**
         * @generated from field: string printable_name = 2;
         */
        this.printableName = "";
        /**
         * @generated from field: bool verified = 4;
         */
        this.verified = false;
        /**
         * @generated from field: repeated string group_ids = 5;
         */
        this.groupIds = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserEntry, a, b);
    }
}
exports.UserEntry = UserEntry;
UserEntry.runtime = protobuf_1.proto3;
UserEntry.typeName = "model.UserEntry";
UserEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "printable_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "register_info", kind: "message", T: RegisterInfo },
    { no: 4, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "group_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "created_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message model.MemberEntry
 */
class MemberEntry extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MemberEntry().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MemberEntry().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MemberEntry().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MemberEntry, a, b);
    }
}
exports.MemberEntry = MemberEntry;
MemberEntry.runtime = protobuf_1.proto3;
MemberEntry.typeName = "model.MemberEntry";
MemberEntry.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: UserEntry },
    { no: 5, name: "joined_at", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message model.RegisterInfo
 */
class RegisterInfo extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string creater_id = 1;
         */
        this.createrId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterInfo, a, b);
    }
}
exports.RegisterInfo = RegisterInfo;
RegisterInfo.runtime = protobuf_1.proto3;
RegisterInfo.typeName = "model.RegisterInfo";
RegisterInfo.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "creater_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "message", T: RegisterMethod },
]);
/**
 * @generated from message model.RegisterMethod
 */
class RegisterMethod extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof model.RegisterMethod.method
         */
        this.method = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod, a, b);
    }
}
exports.RegisterMethod = RegisterMethod;
RegisterMethod.runtime = protobuf_1.proto3;
RegisterMethod.typeName = "model.RegisterMethod";
RegisterMethod.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "message", T: RegisterMethod_System, oneof: "method" },
    { no: 2, name: "signup", kind: "message", T: RegisterMethod_Signup, oneof: "method" },
    { no: 3, name: "oauth_provider", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.OauthProvider), oneof: "method" },
    { no: 4, name: "migration", kind: "message", T: RegisterMethod_Migration, oneof: "method" },
]);
/**
 * @generated from message model.RegisterMethod.System
 */
class RegisterMethod_System extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_System().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_System().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_System().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_System, a, b);
    }
}
exports.RegisterMethod_System = RegisterMethod_System;
RegisterMethod_System.runtime = protobuf_1.proto3;
RegisterMethod_System.typeName = "model.RegisterMethod.System";
RegisterMethod_System.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 * @generated from message model.RegisterMethod.Signup
 */
class RegisterMethod_Signup extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: model.LoginType login_type = 1;
         */
        this.loginType = auth_pb_js_1.LoginType.UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_Signup().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_Signup().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_Signup().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_Signup, a, b);
    }
}
exports.RegisterMethod_Signup = RegisterMethod_Signup;
RegisterMethod_Signup.runtime = protobuf_1.proto3;
RegisterMethod_Signup.typeName = "model.RegisterMethod.Signup";
RegisterMethod_Signup.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "login_type", kind: "enum", T: protobuf_1.proto3.getEnumType(auth_pb_js_1.LoginType) },
]);
/**
 * @generated from message model.RegisterMethod.Migration
 */
class RegisterMethod_Migration extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string from = 1;
         */
        this.from = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisterMethod_Migration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisterMethod_Migration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisterMethod_Migration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RegisterMethod_Migration, a, b);
    }
}
exports.RegisterMethod_Migration = RegisterMethod_Migration;
RegisterMethod_Migration.runtime = protobuf_1.proto3;
RegisterMethod_Migration.typeName = "model.RegisterMethod.Migration";
RegisterMethod_Migration.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 5840:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(8628));

var _v2 = _interopRequireDefault(__nccwpck_require__(6409));

var _v3 = _interopRequireDefault(__nccwpck_require__(5122));

var _v4 = _interopRequireDefault(__nccwpck_require__(9120));

var _nil = _interopRequireDefault(__nccwpck_require__(5332));

var _version = _interopRequireDefault(__nccwpck_require__(1595));

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 4569:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 5332:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 2746:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 814:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 807:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 5274:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 8950:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 8628:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 6409:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _md = _interopRequireDefault(__nccwpck_require__(4569));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 5998:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

var _parse = _interopRequireDefault(__nccwpck_require__(2746));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 5122:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(807));

var _stringify = _interopRequireDefault(__nccwpck_require__(8950));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 9120:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(5998));

var _sha = _interopRequireDefault(__nccwpck_require__(5274));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6900:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(814));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 1595:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6900));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 9491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 6113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 2361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 2037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 4404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 3837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 1304:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinaryReader = exports.BinaryWriter = exports.WireType = void 0;
const varint_js_1 = __nccwpck_require__(9119);
const assert_js_1 = __nccwpck_require__(1594);
const proto_int64_js_1 = __nccwpck_require__(6865);
/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */
/**
 * Protobuf binary format wire types.
 *
 * A wire type provides just enough information to find the length of the
 * following value.
 *
 * See https://developers.google.com/protocol-buffers/docs/encoding#structure
 */
var WireType;
(function (WireType) {
    /**
     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum
     */
    WireType[WireType["Varint"] = 0] = "Varint";
    /**
     * Used for fixed64, sfixed64, double.
     * Always 8 bytes with little-endian byte order.
     */
    WireType[WireType["Bit64"] = 1] = "Bit64";
    /**
     * Used for string, bytes, embedded messages, packed repeated fields
     *
     * Only repeated numeric types (types which use the varint, 32-bit,
     * or 64-bit wire types) can be packed. In proto3, such fields are
     * packed by default.
     */
    WireType[WireType["LengthDelimited"] = 2] = "LengthDelimited";
    /**
     * Used for groups
     * @deprecated
     */
    WireType[WireType["StartGroup"] = 3] = "StartGroup";
    /**
     * Used for groups
     * @deprecated
     */
    WireType[WireType["EndGroup"] = 4] = "EndGroup";
    /**
     * Used for fixed32, sfixed32, float.
     * Always 4 bytes with little-endian byte order.
     */
    WireType[WireType["Bit32"] = 5] = "Bit32";
})(WireType || (exports.WireType = WireType = {}));
class BinaryWriter {
    constructor(textEncoder) {
        /**
         * Previous fork states.
         */
        this.stack = [];
        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
        this.chunks = [];
        this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer
        let len = 0;
        for (let i = 0; i < this.chunks.length; i++)
            len += this.chunks[i].length;
        let bytes = new Uint8Array(len);
        let offset = 0;
        for (let i = 0; i < this.chunks.length; i++) {
            bytes.set(this.chunks[i], offset);
            offset += this.chunks[i].length;
        }
        this.chunks = [];
        return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
        this.stack.push({ chunks: this.chunks, buf: this.buf });
        this.chunks = [];
        this.buf = [];
        return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
        // get chunk of fork
        let chunk = this.finish();
        // restore previous state
        let prev = this.stack.pop();
        if (!prev)
            throw new Error("invalid state, fork stack empty");
        this.chunks = prev.chunks;
        this.buf = prev.buf;
        // write length of chunk as varint
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
        return this.uint32(((fieldNo << 3) | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
        if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf));
            this.buf = [];
        }
        this.chunks.push(chunk);
        return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
        (0, assert_js_1.assertUInt32)(value);
        // write value as varint 32, inlined for speed
        while (value > 0x7f) {
            this.buf.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        this.buf.push(value);
        return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
        (0, assert_js_1.assertInt32)(value);
        (0, varint_js_1.varint32write)(value, this.buf);
        return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
        this.buf.push(value ? 1 : 0);
        return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
        this.uint32(value.byteLength); // write length of chunk as varint
        return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
        let chunk = this.textEncoder.encode(value);
        this.uint32(chunk.byteLength); // write length of chunk as varint
        return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
        (0, assert_js_1.assertFloat32)(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setFloat32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
        let chunk = new Uint8Array(8);
        new DataView(chunk.buffer).setFloat64(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
        (0, assert_js_1.assertUInt32)(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setUint32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
        (0, assert_js_1.assertInt32)(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setInt32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
        (0, assert_js_1.assertInt32)(value);
        // zigzag encode
        value = ((value << 1) ^ (value >> 31)) >>> 0;
        (0, varint_js_1.varint32write)(value, this.buf);
        return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = proto_int64_js_1.protoInt64.enc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = proto_int64_js_1.protoInt64.uEnc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
        let tc = proto_int64_js_1.protoInt64.enc(value);
        (0, varint_js_1.varint64write)(tc.lo, tc.hi, this.buf);
        return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
        let tc = proto_int64_js_1.protoInt64.enc(value), 
        // zigzag encode
        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;
        (0, varint_js_1.varint64write)(lo, hi, this.buf);
        return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
        let tc = proto_int64_js_1.protoInt64.uEnc(value);
        (0, varint_js_1.varint64write)(tc.lo, tc.hi, this.buf);
        return this;
    }
}
exports.BinaryWriter = BinaryWriter;
class BinaryReader {
    constructor(buf, textDecoder) {
        this.varint64 = varint_js_1.varint64read; // dirty cast for `this`
        /**
         * Read a `uint32` field, an unsigned 32 bit varint.
         */
        this.uint32 = varint_js_1.varint32read; // dirty cast for `this` and access to protected `buf`
        this.buf = buf;
        this.len = buf.length;
        this.pos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
        if (fieldNo <= 0 || wireType < 0 || wireType > 5)
            throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
        return [fieldNo, wireType];
    }
    /**
     * Skip one element on the wire and return the skipped data.
     * Supports WireType.StartGroup since v2.0.0-alpha.23.
     */
    skip(wireType) {
        let start = this.pos;
        switch (wireType) {
            case WireType.Varint:
                while (this.buf[this.pos++] & 0x80) {
                    // ignore
                }
                break;
            // eslint-disable-next-line
            // @ts-ignore TS7029: Fallthrough case in switch
            case WireType.Bit64:
                this.pos += 4;
            // eslint-disable-next-line
            // @ts-ignore TS7029: Fallthrough case in switch
            case WireType.Bit32:
                this.pos += 4;
                break;
            case WireType.LengthDelimited:
                let len = this.uint32();
                this.pos += len;
                break;
            case WireType.StartGroup:
                // From descriptor.proto: Group type is deprecated, not supported in proto3.
                // But we must still be able to parse and treat as unknown.
                let t;
                while ((t = this.tag()[1]) !== WireType.EndGroup) {
                    this.skip(t);
                }
                break;
            default:
                throw new Error("cant skip wire type " + wireType);
        }
        this.assertBounds();
        return this.buf.subarray(start, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
        if (this.pos > this.len)
            throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
        return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
        let zze = this.uint32();
        // decode zigzag
        return (zze >>> 1) ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
        return proto_int64_js_1.protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
        return proto_int64_js_1.protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
        let [lo, hi] = this.varint64();
        // decode zig zag
        let s = -(lo & 1);
        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;
        hi = (hi >>> 1) ^ s;
        return proto_int64_js_1.protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
        let [lo, hi] = this.varint64();
        return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
        return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
        return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
        return proto_int64_js_1.protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
        return proto_int64_js_1.protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
        return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
        return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
        let len = this.uint32(), start = this.pos;
        this.pos += len;
        this.assertBounds();
        return this.buf.subarray(start, start + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
        return this.textDecoder.decode(this.bytes());
    }
}
exports.BinaryReader = BinaryReader;


/***/ }),

/***/ 4193:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codegenInfo = void 0;
const names_js_1 = __nccwpck_require__(9214);
const field_wrapper_js_1 = __nccwpck_require__(7579);
const scalars_js_1 = __nccwpck_require__(5618);
const reify_wkt_js_1 = __nccwpck_require__(514);
const packageName = "@bufbuild/protobuf";
exports.codegenInfo = {
    packageName,
    localName: names_js_1.localName,
    reifyWkt: reify_wkt_js_1.reifyWkt,
    getUnwrappedFieldType: field_wrapper_js_1.getUnwrappedFieldType,
    scalarDefaultValue: scalars_js_1.scalarDefaultValue,
    safeIdentifier: names_js_1.safeIdentifier,
    safeObjectProperty: names_js_1.safeObjectProperty,
    // prettier-ignore
    symbols: {
        proto2: { typeOnly: false, privateImportPath: "./proto2.js", publicImportPath: packageName },
        proto3: { typeOnly: false, privateImportPath: "./proto3.js", publicImportPath: packageName },
        Message: { typeOnly: false, privateImportPath: "./message.js", publicImportPath: packageName },
        PartialMessage: { typeOnly: true, privateImportPath: "./message.js", publicImportPath: packageName },
        PlainMessage: { typeOnly: true, privateImportPath: "./message.js", publicImportPath: packageName },
        FieldList: { typeOnly: true, privateImportPath: "./field-list.js", publicImportPath: packageName },
        MessageType: { typeOnly: true, privateImportPath: "./message-type.js", publicImportPath: packageName },
        BinaryReadOptions: { typeOnly: true, privateImportPath: "./binary-format.js", publicImportPath: packageName },
        BinaryWriteOptions: { typeOnly: true, privateImportPath: "./binary-format.js", publicImportPath: packageName },
        JsonReadOptions: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        JsonWriteOptions: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        JsonValue: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        JsonObject: { typeOnly: true, privateImportPath: "./json-format.js", publicImportPath: packageName },
        protoDouble: { typeOnly: false, privateImportPath: "./proto-double.js", publicImportPath: packageName },
        protoInt64: { typeOnly: false, privateImportPath: "./proto-int64.js", publicImportPath: packageName },
        ScalarType: { typeOnly: false, privateImportPath: "./field.js", publicImportPath: packageName },
        MethodKind: { typeOnly: false, privateImportPath: "./service-type.js", publicImportPath: packageName },
        MethodIdempotency: { typeOnly: false, privateImportPath: "./service-type.js", publicImportPath: packageName },
        IMessageTypeRegistry: { typeOnly: true, privateImportPath: "./type-registry.js", publicImportPath: packageName },
    },
    wktSourceFiles: [
        "google/protobuf/compiler/plugin.proto",
        "google/protobuf/any.proto",
        "google/protobuf/api.proto",
        "google/protobuf/descriptor.proto",
        "google/protobuf/duration.proto",
        "google/protobuf/empty.proto",
        "google/protobuf/field_mask.proto",
        "google/protobuf/source_context.proto",
        "google/protobuf/struct.proto",
        "google/protobuf/timestamp.proto",
        "google/protobuf/type.proto",
        "google/protobuf/wrappers.proto",
    ],
};


/***/ }),

/***/ 6619:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isPackedFieldByDefault = exports.createDescriptorSet = void 0;
const descriptor_pb_js_1 = __nccwpck_require__(2959);
const assert_js_1 = __nccwpck_require__(1594);
const field_js_1 = __nccwpck_require__(4756);
const service_type_js_1 = __nccwpck_require__(9552);
const names_js_1 = __nccwpck_require__(9214);
const proto_int64_js_1 = __nccwpck_require__(6865);
/**
 * Create a DescriptorSet, a convenient interface for working with a set of
 * google.protobuf.FileDescriptorProto.
 *
 * Note that files must be given in topological order, so each file appears
 * before any file that imports it. Protocol buffer compilers always produce
 * files in topological order.
 */
function createDescriptorSet(input) {
    const cart = {
        enums: new Map(),
        messages: new Map(),
        services: new Map(),
        extensions: new Map(),
        mapEntries: new Map(),
    };
    const fileDescriptors = input instanceof descriptor_pb_js_1.FileDescriptorSet
        ? input.file
        : input instanceof Uint8Array
            ? descriptor_pb_js_1.FileDescriptorSet.fromBinary(input).file
            : input;
    const files = fileDescriptors.map((proto) => newFile(proto, cart));
    return Object.assign({ files }, cart);
}
exports.createDescriptorSet = createDescriptorSet;
/**
 * Create a descriptor for a file.
 */
function newFile(proto, cart) {
    var _a, _b, _c;
    (0, assert_js_1.assert)(proto.name, `invalid FileDescriptorProto: missing name`);
    (0, assert_js_1.assert)(proto.syntax === undefined || proto.syntax === "proto3", `invalid FileDescriptorProto: unsupported syntax: ${(_a = proto.syntax) !== null && _a !== void 0 ? _a : "undefined"}`);
    const file = {
        kind: "file",
        proto,
        deprecated: (_c = (_b = proto.options) === null || _b === void 0 ? void 0 : _b.deprecated) !== null && _c !== void 0 ? _c : false,
        syntax: proto.syntax === "proto3" ? "proto3" : "proto2",
        name: proto.name.replace(/\.proto/, ""),
        enums: [],
        messages: [],
        extensions: [],
        services: [],
        toString() {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- we asserted above
            return `file ${this.proto.name}`;
        },
        getSyntaxComments() {
            return findComments(this.proto.sourceCodeInfo, [
                FieldNumber.FileDescriptorProto_Syntax,
            ]);
        },
        getPackageComments() {
            return findComments(this.proto.sourceCodeInfo, [
                FieldNumber.FileDescriptorProto_Package,
            ]);
        },
    };
    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard
    for (const enumProto of proto.enumType) {
        addEnum(enumProto, file, undefined, cart);
    }
    for (const messageProto of proto.messageType) {
        addMessage(messageProto, file, undefined, cart);
    }
    for (const serviceProto of proto.service) {
        addService(serviceProto, file, cart);
    }
    addExtensions(file, cart);
    for (const mapEntry of cart.mapEntries.values()) {
        addFields(mapEntry, cart);
    }
    for (const message of file.messages) {
        addFields(message, cart);
        addExtensions(message, cart);
    }
    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard
    return file;
}
/**
 * Create descriptors for extensions, and add them to the message / file,
 * and to our cart.
 * Recurses into nested types.
 */
function addExtensions(desc, cart) {
    switch (desc.kind) {
        case "file":
            for (const proto of desc.proto.extension) {
                const ext = newExtension(proto, desc, undefined, cart);
                desc.extensions.push(ext);
                cart.extensions.set(ext.typeName, ext);
            }
            break;
        case "message":
            for (const proto of desc.proto.extension) {
                const ext = newExtension(proto, desc.file, desc, cart);
                desc.nestedExtensions.push(ext);
                cart.extensions.set(ext.typeName, ext);
            }
            for (const message of desc.nestedMessages) {
                addExtensions(message, cart);
            }
            break;
    }
}
/**
 * Create descriptors for fields and oneof groups, and add them to the message.
 * Recurses into nested types.
 */
function addFields(message, cart) {
    const allOneofs = message.proto.oneofDecl.map((proto) => newOneof(proto, message));
    const oneofsSeen = new Set();
    for (const proto of message.proto.field) {
        const oneof = findOneof(proto, allOneofs);
        const field = newField(proto, message.file, message, oneof, cart);
        message.fields.push(field);
        if (oneof === undefined) {
            message.members.push(field);
        }
        else {
            oneof.fields.push(field);
            if (!oneofsSeen.has(oneof)) {
                oneofsSeen.add(oneof);
                message.members.push(oneof);
            }
        }
    }
    for (const oneof of allOneofs.filter((o) => oneofsSeen.has(o))) {
        message.oneofs.push(oneof);
    }
    for (const child of message.nestedMessages) {
        addFields(child, cart);
    }
}
/**
 * Create a descriptor for an enumeration, and add it our cart and to the
 * parent type, if any.
 */
function addEnum(proto, file, parent, cart) {
    var _a, _b, _c;
    (0, assert_js_1.assert)(proto.name, `invalid EnumDescriptorProto: missing name`);
    const desc = {
        kind: "enum",
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        file,
        parent,
        name: proto.name,
        typeName: makeTypeName(proto, parent, file),
        values: [],
        sharedPrefix: (0, names_js_1.findEnumSharedPrefix)(proto.name, proto.value.map((v) => { var _a; return (_a = v.name) !== null && _a !== void 0 ? _a : ""; })),
        toString() {
            return `enum ${this.typeName}`;
        },
        getComments() {
            const path = this.parent
                ? [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.DescriptorProto_EnumType,
                    this.parent.proto.enumType.indexOf(this.proto),
                ]
                : [
                    FieldNumber.FileDescriptorProto_EnumType,
                    this.file.proto.enumType.indexOf(this.proto),
                ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
    };
    cart.enums.set(desc.typeName, desc);
    proto.value.forEach((proto) => {
        var _a, _b;
        (0, assert_js_1.assert)(proto.name, `invalid EnumValueDescriptorProto: missing name`);
        (0, assert_js_1.assert)(proto.number !== undefined, `invalid EnumValueDescriptorProto: missing number`);
        desc.values.push({
            kind: "enum_value",
            proto,
            deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
            parent: desc,
            name: proto.name,
            number: proto.number,
            toString() {
                return `enum value ${desc.typeName}.${this.name}`;
            },
            declarationString() {
                var _a;
                let str = `${this.name} = ${this.number}`;
                if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) === true) {
                    str += " [deprecated = true]";
                }
                return str;
            },
            getComments() {
                const path = [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.EnumDescriptorProto_Value,
                    this.parent.proto.value.indexOf(this.proto),
                ];
                return findComments(file.proto.sourceCodeInfo, path);
            },
        });
    });
    ((_c = parent === null || parent === void 0 ? void 0 : parent.nestedEnums) !== null && _c !== void 0 ? _c : file.enums).push(desc);
}
/**
 * Create a descriptor for a message, including nested types, and add it to our
 * cart. Note that this does not create descriptors fields.
 */
function addMessage(proto, file, parent, cart) {
    var _a, _b, _c, _d;
    (0, assert_js_1.assert)(proto.name, `invalid DescriptorProto: missing name`);
    const desc = {
        kind: "message",
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        file,
        parent,
        name: proto.name,
        typeName: makeTypeName(proto, parent, file),
        fields: [],
        oneofs: [],
        members: [],
        nestedEnums: [],
        nestedMessages: [],
        nestedExtensions: [],
        toString() {
            return `message ${this.typeName}`;
        },
        getComments() {
            const path = this.parent
                ? [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.DescriptorProto_NestedType,
                    this.parent.proto.nestedType.indexOf(this.proto),
                ]
                : [
                    FieldNumber.FileDescriptorProto_MessageType,
                    this.file.proto.messageType.indexOf(this.proto),
                ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
    };
    if (((_c = proto.options) === null || _c === void 0 ? void 0 : _c.mapEntry) === true) {
        cart.mapEntries.set(desc.typeName, desc);
    }
    else {
        ((_d = parent === null || parent === void 0 ? void 0 : parent.nestedMessages) !== null && _d !== void 0 ? _d : file.messages).push(desc);
        cart.messages.set(desc.typeName, desc);
    }
    for (const enumProto of proto.enumType) {
        addEnum(enumProto, file, desc, cart);
    }
    for (const messageProto of proto.nestedType) {
        addMessage(messageProto, file, desc, cart);
    }
}
/**
 * Create a descriptor for a service, including methods, and add it to our
 * cart.
 */
function addService(proto, file, cart) {
    var _a, _b;
    (0, assert_js_1.assert)(proto.name, `invalid ServiceDescriptorProto: missing name`);
    const desc = {
        kind: "service",
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        file,
        name: proto.name,
        typeName: makeTypeName(proto, undefined, file),
        methods: [],
        toString() {
            return `service ${this.typeName}`;
        },
        getComments() {
            const path = [
                FieldNumber.FileDescriptorProto_Service,
                this.file.proto.service.indexOf(this.proto),
            ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
    };
    file.services.push(desc);
    cart.services.set(desc.typeName, desc);
    for (const methodProto of proto.method) {
        desc.methods.push(newMethod(methodProto, desc, cart));
    }
}
/**
 * Create a descriptor for a method.
 */
function newMethod(proto, parent, cart) {
    var _a, _b, _c;
    (0, assert_js_1.assert)(proto.name, `invalid MethodDescriptorProto: missing name`);
    (0, assert_js_1.assert)(proto.inputType, `invalid MethodDescriptorProto: missing input_type`);
    (0, assert_js_1.assert)(proto.outputType, `invalid MethodDescriptorProto: missing output_type`);
    let methodKind;
    if (proto.clientStreaming === true && proto.serverStreaming === true) {
        methodKind = service_type_js_1.MethodKind.BiDiStreaming;
    }
    else if (proto.clientStreaming === true) {
        methodKind = service_type_js_1.MethodKind.ClientStreaming;
    }
    else if (proto.serverStreaming === true) {
        methodKind = service_type_js_1.MethodKind.ServerStreaming;
    }
    else {
        methodKind = service_type_js_1.MethodKind.Unary;
    }
    let idempotency;
    switch ((_a = proto.options) === null || _a === void 0 ? void 0 : _a.idempotencyLevel) {
        case descriptor_pb_js_1.MethodOptions_IdempotencyLevel.IDEMPOTENT:
            idempotency = service_type_js_1.MethodIdempotency.Idempotent;
            break;
        case descriptor_pb_js_1.MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:
            idempotency = service_type_js_1.MethodIdempotency.NoSideEffects;
            break;
        case descriptor_pb_js_1.MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:
        case undefined:
            idempotency = undefined;
            break;
    }
    const input = cart.messages.get(trimLeadingDot(proto.inputType));
    const output = cart.messages.get(trimLeadingDot(proto.outputType));
    (0, assert_js_1.assert)(input, `invalid MethodDescriptorProto: input_type ${proto.inputType} not found`);
    (0, assert_js_1.assert)(output, `invalid MethodDescriptorProto: output_type ${proto.inputType} not found`);
    const name = proto.name;
    return {
        kind: "rpc",
        proto,
        deprecated: (_c = (_b = proto.options) === null || _b === void 0 ? void 0 : _b.deprecated) !== null && _c !== void 0 ? _c : false,
        parent,
        name,
        methodKind,
        input,
        output,
        idempotency,
        toString() {
            return `rpc ${parent.typeName}.${name}`;
        },
        getComments() {
            const path = [
                ...this.parent.getComments().sourcePath,
                FieldNumber.ServiceDescriptorProto_Method,
                this.parent.proto.method.indexOf(this.proto),
            ];
            return findComments(parent.file.proto.sourceCodeInfo, path);
        },
    };
}
/**
 * Create a descriptor for a oneof group.
 */
function newOneof(proto, parent) {
    (0, assert_js_1.assert)(proto.name, `invalid OneofDescriptorProto: missing name`);
    return {
        kind: "oneof",
        proto,
        deprecated: false,
        parent,
        fields: [],
        name: proto.name,
        toString() {
            return `oneof ${parent.typeName}.${this.name}`;
        },
        getComments() {
            const path = [
                ...this.parent.getComments().sourcePath,
                FieldNumber.DescriptorProto_OneofDecl,
                this.parent.proto.oneofDecl.indexOf(this.proto),
            ];
            return findComments(parent.file.proto.sourceCodeInfo, path);
        },
    };
}
/**
 * Create a descriptor for a field.
 */
function newField(proto, file, parent, oneof, cart) {
    var _a, _b, _c, _d;
    (0, assert_js_1.assert)(proto.name, `invalid FieldDescriptorProto: missing name`);
    (0, assert_js_1.assert)(proto.number, `invalid FieldDescriptorProto: missing number`);
    (0, assert_js_1.assert)(proto.type, `invalid FieldDescriptorProto: missing type`);
    const packedByDefault = isPackedFieldByDefault(proto, file.syntax);
    const common = {
        proto,
        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,
        name: proto.name,
        number: proto.number,
        parent,
        oneof,
        optional: isOptionalField(proto, file.syntax),
        packed: (_d = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.packed) !== null && _d !== void 0 ? _d : packedByDefault,
        packedByDefault,
        jsonName: proto.jsonName === (0, names_js_1.fieldJsonName)(proto.name) ? undefined : proto.jsonName,
        scalar: undefined,
        message: undefined,
        enum: undefined,
        mapKey: undefined,
        mapValue: undefined,
        toString() {
            // note that newExtension() calls us with parent = null
            return `field ${this.parent.typeName}.${this.name}`;
        },
        declarationString,
        getComments() {
            const path = [
                ...this.parent.getComments().sourcePath,
                FieldNumber.DescriptorProto_Field,
                this.parent.proto.field.indexOf(this.proto),
            ];
            return findComments(file.proto.sourceCodeInfo, path);
        },
    };
    const repeated = proto.label === descriptor_pb_js_1.FieldDescriptorProto_Label.REPEATED;
    switch (proto.type) {
        case descriptor_pb_js_1.FieldDescriptorProto_Type.MESSAGE:
        case descriptor_pb_js_1.FieldDescriptorProto_Type.GROUP: {
            (0, assert_js_1.assert)(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);
            const mapEntry = cart.mapEntries.get(trimLeadingDot(proto.typeName));
            if (mapEntry !== undefined) {
                (0, assert_js_1.assert)(repeated, `invalid FieldDescriptorProto: expected map entry to be repeated`);
                return Object.assign(Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "map", repeated: false }), getMapFieldTypes(mapEntry));
            }
            const message = cart.messages.get(trimLeadingDot(proto.typeName));
            (0, assert_js_1.assert)(message !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);
            return Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "message", repeated,
                message });
        }
        case descriptor_pb_js_1.FieldDescriptorProto_Type.ENUM: {
            (0, assert_js_1.assert)(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);
            const e = cart.enums.get(trimLeadingDot(proto.typeName));
            (0, assert_js_1.assert)(e !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);
            return Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "enum", getDefaultValue,
                repeated, enum: e });
        }
        default: {
            const scalar = fieldTypeToScalarType[proto.type];
            (0, assert_js_1.assert)(scalar, `invalid FieldDescriptorProto: unknown type ${proto.type}`);
            return Object.assign(Object.assign({}, common), { kind: "field", fieldKind: "scalar", getDefaultValue,
                repeated,
                scalar });
        }
    }
}
/**
 * Create a descriptor for an extension field.
 */
function newExtension(proto, file, parent, cart) {
    (0, assert_js_1.assert)(proto.extendee, `invalid FieldDescriptorProto: missing extendee`);
    const field = newField(proto, file, null, // to safe us many lines of duplicated code, we trick the type system
    undefined, cart);
    const extendee = cart.messages.get(trimLeadingDot(proto.extendee));
    (0, assert_js_1.assert)(extendee, `invalid FieldDescriptorProto: extendee ${proto.extendee} not found`);
    return Object.assign(Object.assign({}, field), { kind: "extension", typeName: makeTypeName(proto, parent, file), parent,
        file,
        extendee,
        toString() {
            return `extension ${this.typeName}`;
        },
        getComments() {
            const path = this.parent
                ? [
                    ...this.parent.getComments().sourcePath,
                    FieldNumber.DescriptorProto_Extension,
                    this.parent.proto.extension.indexOf(proto),
                ]
                : [
                    FieldNumber.FileDescriptorProto_Extension,
                    this.file.proto.extension.indexOf(proto),
                ];
            return findComments(file.proto.sourceCodeInfo, path);
        } });
}
/**
 * Create a fully qualified name for a protobuf type or extension field.
 *
 * The fully qualified name for messages, enumerations, and services is
 * constructed by concatenating the package name (if present), parent
 * message names (for nested types), and the type name. We omit the leading
 * dot added by protobuf compilers. Examples:
 * - mypackage.MyMessage
 * - mypackage.MyMessage.NestedMessage
 *
 * The fully qualified name for extension fields is constructed by
 * concatenating the package name (if present), parent message names (for
 * extensions declared within a message), and the field name. Examples:
 * - mypackage.extfield
 * - mypackage.MyMessage.extfield
 */
function makeTypeName(proto, parent, file) {
    (0, assert_js_1.assert)(proto.name, `invalid ${proto.getType().typeName}: missing name`);
    let typeName;
    if (parent) {
        typeName = `${parent.typeName}.${proto.name}`;
    }
    else if (file.proto.package !== undefined) {
        typeName = `${file.proto.package}.${proto.name}`;
    }
    else {
        typeName = `${proto.name}`;
    }
    return typeName;
}
/**
 * Remove the leading dot from a fully qualified type name.
 */
function trimLeadingDot(typeName) {
    return typeName.startsWith(".") ? typeName.substring(1) : typeName;
}
function getMapFieldTypes(mapEntry) {
    var _a, _b;
    (0, assert_js_1.assert)((_a = mapEntry.proto.options) === null || _a === void 0 ? void 0 : _a.mapEntry, `invalid DescriptorProto: expected ${mapEntry.toString()} to be a map entry`);
    (0, assert_js_1.assert)(mapEntry.fields.length === 2, `invalid DescriptorProto: map entry ${mapEntry.toString()} has ${mapEntry.fields.length} fields`);
    const keyField = mapEntry.fields.find((f) => f.proto.number === 1);
    (0, assert_js_1.assert)(keyField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing key field`);
    const mapKey = keyField.scalar;
    (0, assert_js_1.assert)(mapKey !== undefined &&
        mapKey !== field_js_1.ScalarType.BYTES &&
        mapKey !== field_js_1.ScalarType.FLOAT &&
        mapKey !== field_js_1.ScalarType.DOUBLE, `invalid DescriptorProto: map entry ${mapEntry.toString()} has unexpected key type ${(_b = keyField.proto.type) !== null && _b !== void 0 ? _b : -1}`);
    const valueField = mapEntry.fields.find((f) => f.proto.number === 2);
    (0, assert_js_1.assert)(valueField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing value field`);
    switch (valueField.fieldKind) {
        case "scalar":
            return {
                mapKey,
                mapValue: Object.assign(Object.assign({}, valueField), { kind: "scalar" }),
            };
        case "message":
            return {
                mapKey,
                mapValue: Object.assign(Object.assign({}, valueField), { kind: "message" }),
            };
        case "enum":
            return {
                mapKey,
                mapValue: Object.assign(Object.assign({}, valueField), { kind: "enum" }),
            };
        default:
            throw new Error("invalid DescriptorProto: unsupported map entry value field");
    }
}
/**
 * Did the user put the field in a oneof group?
 * This handles proto3 optionals.
 */
function findOneof(proto, allOneofs) {
    var _a;
    const oneofIndex = proto.oneofIndex;
    if (oneofIndex === undefined) {
        return undefined;
    }
    let oneof;
    if (proto.proto3Optional !== true) {
        oneof = allOneofs[oneofIndex];
        (0, assert_js_1.assert)(oneof, `invalid FieldDescriptorProto: oneof #${oneofIndex} for field #${(_a = proto.number) !== null && _a !== void 0 ? _a : -1} not found`);
    }
    return oneof;
}
/**
 * Did the user use the `optional` keyword?
 * This handles proto3 optionals.
 */
function isOptionalField(proto, syntax) {
    switch (syntax) {
        case "proto2":
            return (proto.oneofIndex === undefined &&
                proto.label === descriptor_pb_js_1.FieldDescriptorProto_Label.OPTIONAL);
        case "proto3":
            return proto.proto3Optional === true;
    }
}
/**
 * Get the default `packed` state of a repeated field.
 */
function isPackedFieldByDefault(proto, syntax) {
    (0, assert_js_1.assert)(proto.type, `invalid FieldDescriptorProto: missing type`);
    if (syntax === "proto3") {
        switch (proto.type) {
            case descriptor_pb_js_1.FieldDescriptorProto_Type.DOUBLE:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.FLOAT:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.INT64:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.UINT64:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.INT32:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.FIXED64:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.FIXED32:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.UINT32:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.SFIXED32:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.SFIXED64:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.SINT32:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.SINT64:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.BOOL:
            case descriptor_pb_js_1.FieldDescriptorProto_Type.ENUM:
                // From the proto3 language guide:
                // > In proto3, repeated fields of scalar numeric types are packed by default.
                // This information is incomplete - according to the conformance tests, BOOL
                // and ENUM are packed by default as well. This means only STRING and BYTES
                // are not packed by default, which makes sense because they are length-delimited.
                return true;
            default:
                return false;
        }
    }
    return false;
}
exports.isPackedFieldByDefault = isPackedFieldByDefault;
/**
 * Map from a compiler-generated field type to our ScalarType, which is a
 * subset of field types declared by protobuf enum google.protobuf.FieldDescriptorProto.
 */
const fieldTypeToScalarType = {
    [descriptor_pb_js_1.FieldDescriptorProto_Type.DOUBLE]: field_js_1.ScalarType.DOUBLE,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.FLOAT]: field_js_1.ScalarType.FLOAT,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.INT64]: field_js_1.ScalarType.INT64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.UINT64]: field_js_1.ScalarType.UINT64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.INT32]: field_js_1.ScalarType.INT32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.FIXED64]: field_js_1.ScalarType.FIXED64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.FIXED32]: field_js_1.ScalarType.FIXED32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.BOOL]: field_js_1.ScalarType.BOOL,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.STRING]: field_js_1.ScalarType.STRING,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.GROUP]: undefined,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.MESSAGE]: undefined,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.BYTES]: field_js_1.ScalarType.BYTES,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.UINT32]: field_js_1.ScalarType.UINT32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.ENUM]: undefined,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SFIXED32]: field_js_1.ScalarType.SFIXED32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SFIXED64]: field_js_1.ScalarType.SFIXED64,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SINT32]: field_js_1.ScalarType.SINT32,
    [descriptor_pb_js_1.FieldDescriptorProto_Type.SINT64]: field_js_1.ScalarType.SINT64,
};
/**
 * Find comments.
 */
function findComments(sourceCodeInfo, sourcePath) {
    if (!sourceCodeInfo) {
        return {
            leadingDetached: [],
            sourcePath,
        };
    }
    for (const location of sourceCodeInfo.location) {
        if (location.path.length !== sourcePath.length) {
            continue;
        }
        if (location.path.some((value, index) => sourcePath[index] !== value)) {
            continue;
        }
        return {
            leadingDetached: location.leadingDetachedComments,
            leading: location.leadingComments,
            trailing: location.trailingComments,
            sourcePath,
        };
    }
    return {
        leadingDetached: [],
        sourcePath,
    };
}
/**
 * The following field numbers are used to find comments in
 * google.protobuf.SourceCodeInfo.
 */
var FieldNumber;
(function (FieldNumber) {
    FieldNumber[FieldNumber["FileDescriptorProto_Package"] = 2] = "FileDescriptorProto_Package";
    FieldNumber[FieldNumber["FileDescriptorProto_MessageType"] = 4] = "FileDescriptorProto_MessageType";
    FieldNumber[FieldNumber["FileDescriptorProto_EnumType"] = 5] = "FileDescriptorProto_EnumType";
    FieldNumber[FieldNumber["FileDescriptorProto_Service"] = 6] = "FileDescriptorProto_Service";
    FieldNumber[FieldNumber["FileDescriptorProto_Extension"] = 7] = "FileDescriptorProto_Extension";
    FieldNumber[FieldNumber["FileDescriptorProto_Syntax"] = 12] = "FileDescriptorProto_Syntax";
    FieldNumber[FieldNumber["DescriptorProto_Field"] = 2] = "DescriptorProto_Field";
    FieldNumber[FieldNumber["DescriptorProto_NestedType"] = 3] = "DescriptorProto_NestedType";
    FieldNumber[FieldNumber["DescriptorProto_EnumType"] = 4] = "DescriptorProto_EnumType";
    FieldNumber[FieldNumber["DescriptorProto_Extension"] = 6] = "DescriptorProto_Extension";
    FieldNumber[FieldNumber["DescriptorProto_OneofDecl"] = 8] = "DescriptorProto_OneofDecl";
    FieldNumber[FieldNumber["EnumDescriptorProto_Value"] = 2] = "EnumDescriptorProto_Value";
    FieldNumber[FieldNumber["ServiceDescriptorProto_Method"] = 2] = "ServiceDescriptorProto_Method";
})(FieldNumber || (FieldNumber = {}));
/**
 * Return a string that matches the definition of a field in the protobuf
 * source. Does not take custom options into account.
 */
function declarationString() {
    var _a, _b;
    const parts = [];
    if (this.repeated) {
        parts.push("repeated");
    }
    if (this.optional) {
        parts.push("optional");
    }
    const file = this.kind === "extension" ? this.file : this.parent.file;
    if (file.syntax == "proto2" &&
        this.proto.label === descriptor_pb_js_1.FieldDescriptorProto_Label.REQUIRED) {
        parts.push("required");
    }
    let type;
    switch (this.fieldKind) {
        case "scalar":
            type = field_js_1.ScalarType[this.scalar].toLowerCase();
            break;
        case "enum":
            type = this.enum.typeName;
            break;
        case "message":
            type = this.message.typeName;
            break;
        case "map": {
            const k = field_js_1.ScalarType[this.mapKey].toLowerCase();
            let v;
            switch (this.mapValue.kind) {
                case "scalar":
                    v = field_js_1.ScalarType[this.mapValue.scalar].toLowerCase();
                    break;
                case "enum":
                    v = this.mapValue.enum.typeName;
                    break;
                case "message":
                    v = this.mapValue.message.typeName;
                    break;
            }
            type = `map<${k}, ${v}>`;
            break;
        }
    }
    parts.push(`${type} ${this.name} = ${this.number}`);
    const options = [];
    if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.packed) !== undefined) {
        options.push(`packed = ${this.proto.options.packed.toString()}`);
    }
    let defaultValue = this.proto.defaultValue;
    if (defaultValue !== undefined) {
        if (this.proto.type == descriptor_pb_js_1.FieldDescriptorProto_Type.BYTES ||
            this.proto.type == descriptor_pb_js_1.FieldDescriptorProto_Type.STRING) {
            defaultValue = '"' + defaultValue.replace('"', '\\"') + '"';
        }
        options.push(`default = ${defaultValue}`);
    }
    if (this.jsonName !== undefined) {
        options.push(`json_name = "${this.jsonName}"`);
    }
    if (((_b = this.proto.options) === null || _b === void 0 ? void 0 : _b.deprecated) === true) {
        options.push(`deprecated = true`);
    }
    if (options.length > 0) {
        parts.push("[" + options.join(", ") + "]");
    }
    return parts.join(" ");
}
/**
 * Parses a text-encoded default value (proto2) of a scalar or enum field.
 */
function getDefaultValue() {
    const d = this.proto.defaultValue;
    if (d === undefined) {
        return undefined;
    }
    switch (this.fieldKind) {
        case "enum": {
            const enumValue = this.enum.values.find((v) => v.name === d);
            (0, assert_js_1.assert)(enumValue, `cannot parse ${this.toString()} default value: ${d}`);
            return enumValue.number;
        }
        case "scalar":
            switch (this.scalar) {
                case field_js_1.ScalarType.STRING:
                    return d;
                case field_js_1.ScalarType.BYTES: {
                    const u = unescapeBytesDefaultValue(d);
                    if (u === false) {
                        throw new Error(`cannot parse ${this.toString()} default value: ${d}`);
                    }
                    return u;
                }
                case field_js_1.ScalarType.INT64:
                case field_js_1.ScalarType.SFIXED64:
                case field_js_1.ScalarType.SINT64:
                    return proto_int64_js_1.protoInt64.parse(d);
                case field_js_1.ScalarType.UINT64:
                case field_js_1.ScalarType.FIXED64:
                    return proto_int64_js_1.protoInt64.uParse(d);
                case field_js_1.ScalarType.DOUBLE:
                case field_js_1.ScalarType.FLOAT:
                    switch (d) {
                        case "inf":
                            return Number.POSITIVE_INFINITY;
                        case "-inf":
                            return Number.NEGATIVE_INFINITY;
                        case "nan":
                            return Number.NaN;
                        default:
                            return parseFloat(d);
                    }
                case field_js_1.ScalarType.BOOL:
                    return d === "true";
                case field_js_1.ScalarType.INT32:
                case field_js_1.ScalarType.UINT32:
                case field_js_1.ScalarType.SINT32:
                case field_js_1.ScalarType.FIXED32:
                case field_js_1.ScalarType.SFIXED32:
                    return parseInt(d, 10);
            }
            break;
        default:
            return undefined;
    }
}
/**
 * Parses a text-encoded default value (proto2) of a BYTES field.
 */
function unescapeBytesDefaultValue(str) {
    const b = [];
    const input = {
        tail: str,
        c: "",
        next() {
            if (this.tail.length == 0) {
                return false;
            }
            this.c = this.tail[0];
            this.tail = this.tail.substring(1);
            return true;
        },
        take(n) {
            if (this.tail.length >= n) {
                const r = this.tail.substring(0, n);
                this.tail = this.tail.substring(n);
                return r;
            }
            return false;
        },
    };
    while (input.next()) {
        switch (input.c) {
            case "\\":
                if (input.next()) {
                    switch (input.c) {
                        case "\\":
                            b.push(input.c.charCodeAt(0));
                            break;
                        case "b":
                            b.push(0x08);
                            break;
                        case "f":
                            b.push(0x0c);
                            break;
                        case "n":
                            b.push(0x0a);
                            break;
                        case "r":
                            b.push(0x0d);
                            break;
                        case "t":
                            b.push(0x09);
                            break;
                        case "v":
                            b.push(0x0b);
                            break;
                        case "0":
                        case "1":
                        case "2":
                        case "3":
                        case "4":
                        case "5":
                        case "6":
                        case "7": {
                            const s = input.c;
                            const t = input.take(2);
                            if (t === false) {
                                return false;
                            }
                            const n = parseInt(s + t, 8);
                            if (isNaN(n)) {
                                return false;
                            }
                            b.push(n);
                            break;
                        }
                        case "x": {
                            const s = input.c;
                            const t = input.take(2);
                            if (t === false) {
                                return false;
                            }
                            const n = parseInt(s + t, 16);
                            if (isNaN(n)) {
                                return false;
                            }
                            b.push(n);
                            break;
                        }
                        case "u": {
                            const s = input.c;
                            const t = input.take(4);
                            if (t === false) {
                                return false;
                            }
                            const n = parseInt(s + t, 16);
                            if (isNaN(n)) {
                                return false;
                            }
                            const chunk = new Uint8Array(4);
                            const view = new DataView(chunk.buffer);
                            view.setInt32(0, n, true);
                            b.push(chunk[0], chunk[1], chunk[2], chunk[3]);
                            break;
                        }
                        case "U": {
                            const s = input.c;
                            const t = input.take(8);
                            if (t === false) {
                                return false;
                            }
                            const tc = proto_int64_js_1.protoInt64.uEnc(s + t);
                            const chunk = new Uint8Array(8);
                            const view = new DataView(chunk.buffer);
                            view.setInt32(0, tc.lo, true);
                            view.setInt32(4, tc.hi, true);
                            b.push(chunk[0], chunk[1], chunk[2], chunk[3], chunk[4], chunk[5], chunk[6], chunk[7]);
                            break;
                        }
                    }
                }
                break;
            default:
                b.push(input.c.charCodeAt(0));
        }
    }
    return new Uint8Array(b);
}


/***/ }),

/***/ 6804:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createRegistryFromDescriptors = void 0;
const assert_js_1 = __nccwpck_require__(1594);
const proto3_js_1 = __nccwpck_require__(9947);
const proto2_js_1 = __nccwpck_require__(3605);
const names_js_1 = __nccwpck_require__(9214);
const timestamp_pb_js_1 = __nccwpck_require__(7974);
const duration_pb_js_1 = __nccwpck_require__(2183);
const any_pb_js_1 = __nccwpck_require__(8466);
const empty_pb_js_1 = __nccwpck_require__(4261);
const field_mask_pb_js_1 = __nccwpck_require__(8080);
const struct_pb_js_1 = __nccwpck_require__(6400);
const enum_js_1 = __nccwpck_require__(8504);
const wrappers_pb_js_1 = __nccwpck_require__(7854);
const descriptor_pb_js_1 = __nccwpck_require__(2959);
const create_descriptor_set_js_1 = __nccwpck_require__(6619);
// well-known message types with specialized JSON representation
const wkMessages = [
    any_pb_js_1.Any,
    duration_pb_js_1.Duration,
    empty_pb_js_1.Empty,
    field_mask_pb_js_1.FieldMask,
    struct_pb_js_1.Struct,
    struct_pb_js_1.Value,
    struct_pb_js_1.ListValue,
    timestamp_pb_js_1.Timestamp,
    duration_pb_js_1.Duration,
    wrappers_pb_js_1.DoubleValue,
    wrappers_pb_js_1.FloatValue,
    wrappers_pb_js_1.Int64Value,
    wrappers_pb_js_1.Int32Value,
    wrappers_pb_js_1.UInt32Value,
    wrappers_pb_js_1.UInt64Value,
    wrappers_pb_js_1.BoolValue,
    wrappers_pb_js_1.StringValue,
    wrappers_pb_js_1.BytesValue,
];
// well-known enum types with specialized JSON representation
const wkEnums = [(0, enum_js_1.getEnumType)(struct_pb_js_1.NullValue)];
/**
 * Create a registry from a set of descriptors. The types returned by this
 * registry behave exactly like types from generated code.
 *
 * This function accepts google.protobuf.FileDescriptorSet in serialized or
 * deserialized form. Alternatively, it also accepts a DescriptorSet (see
 * createDescriptorSet()).
 *
 * By default, all well-known types with a specialized JSON representation
 * are replaced with their generated counterpart in this package.
 */
function createRegistryFromDescriptors(input, replaceWkt = true) {
    const set = input instanceof Uint8Array || input instanceof descriptor_pb_js_1.FileDescriptorSet
        ? (0, create_descriptor_set_js_1.createDescriptorSet)(input)
        : input;
    const enums = {};
    const messages = {};
    const services = {};
    if (replaceWkt) {
        for (const mt of wkMessages) {
            messages[mt.typeName] = mt;
        }
        for (const et of wkEnums) {
            enums[et.typeName] = et;
        }
    }
    return {
        /**
         * May raise an error on invalid descriptors.
         */
        findEnum(typeName) {
            const existing = enums[typeName];
            if (existing) {
                return existing;
            }
            const desc = set.enums.get(typeName);
            if (!desc) {
                return undefined;
            }
            const runtime = desc.file.syntax == "proto3" ? proto3_js_1.proto3 : proto2_js_1.proto2;
            const type = runtime.makeEnumType(typeName, desc.values.map((u) => ({
                no: u.number,
                name: u.name,
                localName: (0, names_js_1.localName)(u),
            })), {});
            enums[typeName] = type;
            return type;
        },
        /**
         * May raise an error on invalid descriptors.
         */
        findMessage(typeName) {
            const existing = messages[typeName];
            if (existing) {
                return existing;
            }
            const desc = set.messages.get(typeName);
            if (!desc) {
                return undefined;
            }
            const runtime = desc.file.syntax == "proto3" ? proto3_js_1.proto3 : proto2_js_1.proto2;
            const fields = [];
            const type = runtime.makeMessageType(typeName, () => fields, {
                localName: (0, names_js_1.localName)(desc),
            });
            messages[typeName] = type;
            for (const field of desc.fields) {
                const fieldInfo = makeFieldInfo(field, this);
                fields.push(fieldInfo);
            }
            return type;
        },
        /**
         * May raise an error on invalid descriptors.
         */
        findService(typeName) {
            const existing = services[typeName];
            if (existing) {
                return existing;
            }
            const desc = set.services.get(typeName);
            if (!desc) {
                return undefined;
            }
            const methods = {};
            for (const method of desc.methods) {
                const I = this.findMessage(method.input.typeName);
                const O = this.findMessage(method.output.typeName);
                (0, assert_js_1.assert)(I, `message "${method.input.typeName}" for ${method.toString()} not found`);
                (0, assert_js_1.assert)(O, `output message "${method.output.typeName}" for ${method.toString()} not found`);
                methods[(0, names_js_1.localName)(method)] = {
                    name: method.name,
                    I,
                    O,
                    kind: method.methodKind,
                    idempotency: method.idempotency,
                    // We do not surface options at this time
                    // options: {},
                };
            }
            return (services[typeName] = {
                typeName: desc.typeName,
                methods,
            });
        },
    };
}
exports.createRegistryFromDescriptors = createRegistryFromDescriptors;
function makeFieldInfo(desc, resolver) {
    switch (desc.fieldKind) {
        case "map":
            return makeMapFieldInfo(desc, resolver);
        case "message":
            return makeMessageFieldInfo(desc, resolver);
        case "enum": {
            const fi = makeEnumFieldInfo(desc, resolver);
            fi.default = desc.getDefaultValue();
            return fi;
        }
        case "scalar": {
            const fi = makeScalarFieldInfo(desc);
            fi.default = desc.getDefaultValue();
            return fi;
        }
    }
}
function makeMapFieldInfo(field, resolver) {
    const base = {
        kind: "map",
        no: field.number,
        name: field.name,
        jsonName: field.jsonName,
        K: field.mapKey,
    };
    if (field.mapValue.message) {
        const messageType = resolver.findMessage(field.mapValue.message.typeName);
        (0, assert_js_1.assert)(messageType, `message "${field.mapValue.message.typeName}" for ${field.toString()} not found`);
        return Object.assign(Object.assign({}, base), { V: {
                kind: "message",
                T: messageType,
            } });
    }
    if (field.mapValue.enum) {
        const enumType = resolver.findEnum(field.mapValue.enum.typeName);
        (0, assert_js_1.assert)(enumType, `enum "${field.mapValue.enum.typeName}" for ${field.toString()} not found`);
        return Object.assign(Object.assign({}, base), { V: {
                kind: "enum",
                T: enumType,
            } });
    }
    return Object.assign(Object.assign({}, base), { V: {
            kind: "scalar",
            T: field.mapValue.scalar,
        } });
}
function makeScalarFieldInfo(field) {
    const base = {
        kind: "scalar",
        no: field.number,
        name: field.name,
        jsonName: field.jsonName,
        T: field.scalar,
    };
    if (field.repeated) {
        return Object.assign(Object.assign({}, base), { repeated: true, packed: field.packed, oneof: undefined, T: field.scalar });
    }
    if (field.oneof) {
        return Object.assign(Object.assign({}, base), { oneof: field.oneof.name });
    }
    if (field.optional) {
        return Object.assign(Object.assign({}, base), { opt: true });
    }
    return base;
}
function makeMessageFieldInfo(field, resolver) {
    const messageType = resolver.findMessage(field.message.typeName);
    (0, assert_js_1.assert)(messageType, `message "${field.message.typeName}" for ${field.toString()} not found`);
    const base = {
        kind: "message",
        no: field.number,
        name: field.name,
        jsonName: field.jsonName,
        T: messageType,
    };
    if (field.repeated) {
        return Object.assign(Object.assign({}, base), { repeated: true, packed: field.packed, oneof: undefined });
    }
    if (field.oneof) {
        return Object.assign(Object.assign({}, base), { oneof: field.oneof.name });
    }
    if (field.optional) {
        return Object.assign(Object.assign({}, base), { opt: true });
    }
    return base;
}
function makeEnumFieldInfo(field, resolver) {
    const enumType = resolver.findEnum(field.enum.typeName);
    (0, assert_js_1.assert)(enumType, `enum "${field.enum.typeName}" for ${field.toString()} not found`);
    const base = {
        kind: "enum",
        no: field.number,
        name: field.name,
        jsonName: field.jsonName,
        T: enumType,
    };
    if (field.repeated) {
        return Object.assign(Object.assign({}, base), { repeated: true, packed: field.packed, oneof: undefined });
    }
    if (field.oneof) {
        return Object.assign(Object.assign({}, base), { oneof: field.oneof.name });
    }
    if (field.optional) {
        return Object.assign(Object.assign({}, base), { opt: true });
    }
    return base;
}


/***/ }),

/***/ 1948:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createRegistry = void 0;
/**
 * Create a new registry from the given types.
 */
function createRegistry(...types) {
    const messages = {};
    const enums = {};
    const services = {};
    const registry = {
        /**
         * Add a type to the registry. For messages, the types used in message
         * fields are added recursively. For services, the message types used
         * for requests and responses are added recursively.
         */
        add(type) {
            if ("fields" in type) {
                if (!this.findMessage(type.typeName)) {
                    messages[type.typeName] = type;
                    for (const field of type.fields.list()) {
                        if (field.kind == "message") {
                            this.add(field.T);
                        }
                        else if (field.kind == "map" && field.V.kind == "message") {
                            this.add(field.V.T);
                        }
                        else if (field.kind == "enum") {
                            this.add(field.T);
                        }
                    }
                }
            }
            else if ("methods" in type) {
                if (!this.findService(type.typeName)) {
                    services[type.typeName] = type;
                    for (const method of Object.values(type.methods)) {
                        this.add(method.I);
                        this.add(method.O);
                    }
                }
            }
            else {
                enums[type.typeName] = type;
            }
        },
        findMessage(typeName) {
            return messages[typeName];
        },
        findEnum(typeName) {
            return enums[typeName];
        },
        findService(typeName) {
            return services[typeName];
        },
    };
    for (const type of types) {
        registry.add(type);
    }
    return registry;
}
exports.createRegistry = createRegistry;


/***/ }),

/***/ 4756:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScalarType = void 0;
/**
 * Scalar value types. This is a subset of field types declared by protobuf
 * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE
 * are omitted, but the numerical values are identical.
 */
var ScalarType;
(function (ScalarType) {
    // 0 is reserved for errors.
    // Order is weird for historical reasons.
    ScalarType[ScalarType["DOUBLE"] = 1] = "DOUBLE";
    ScalarType[ScalarType["FLOAT"] = 2] = "FLOAT";
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
    // negative values are likely.
    ScalarType[ScalarType["INT64"] = 3] = "INT64";
    ScalarType[ScalarType["UINT64"] = 4] = "UINT64";
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
    // negative values are likely.
    ScalarType[ScalarType["INT32"] = 5] = "INT32";
    ScalarType[ScalarType["FIXED64"] = 6] = "FIXED64";
    ScalarType[ScalarType["FIXED32"] = 7] = "FIXED32";
    ScalarType[ScalarType["BOOL"] = 8] = "BOOL";
    ScalarType[ScalarType["STRING"] = 9] = "STRING";
    // Tag-delimited aggregate.
    // Group type is deprecated and not supported in proto3. However, Proto3
    // implementations should still be able to parse the group wire format and
    // treat group fields as unknown fields.
    // TYPE_GROUP = 10,
    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.
    // New in version 2.
    ScalarType[ScalarType["BYTES"] = 12] = "BYTES";
    ScalarType[ScalarType["UINT32"] = 13] = "UINT32";
    // TYPE_ENUM = 14,
    ScalarType[ScalarType["SFIXED32"] = 15] = "SFIXED32";
    ScalarType[ScalarType["SFIXED64"] = 16] = "SFIXED64";
    ScalarType[ScalarType["SINT32"] = 17] = "SINT32";
    ScalarType[ScalarType["SINT64"] = 18] = "SINT64";
})(ScalarType || (exports.ScalarType = ScalarType = {}));


/***/ }),

/***/ 8466:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Any = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a
 * URL that describes the type of the serialized message.
 *
 * Protobuf library provides support to pack/unpack Any values in the form
 * of utility functions or additional generated methods of the Any type.
 *
 * Example 1: Pack and unpack a message in C++.
 *
 *     Foo foo = ...;
 *     Any any;
 *     any.PackFrom(foo);
 *     ...
 *     if (any.UnpackTo(&foo)) {
 *       ...
 *     }
 *
 * Example 2: Pack and unpack a message in Java.
 *
 *     Foo foo = ...;
 *     Any any = Any.pack(foo);
 *     ...
 *     if (any.is(Foo.class)) {
 *       foo = any.unpack(Foo.class);
 *     }
 *     // or ...
 *     if (any.isSameTypeAs(Foo.getDefaultInstance())) {
 *       foo = any.unpack(Foo.getDefaultInstance());
 *     }
 *
 *  Example 3: Pack and unpack a message in Python.
 *
 *     foo = Foo(...)
 *     any = Any()
 *     any.Pack(foo)
 *     ...
 *     if any.Is(Foo.DESCRIPTOR):
 *       any.Unpack(foo)
 *       ...
 *
 *  Example 4: Pack and unpack a message in Go
 *
 *      foo := &pb.Foo{...}
 *      any, err := anypb.New(foo)
 *      if err != nil {
 *        ...
 *      }
 *      ...
 *      foo := &pb.Foo{}
 *      if err := any.UnmarshalTo(foo); err != nil {
 *        ...
 *      }
 *
 * The pack methods provided by protobuf library will by default use
 * 'type.googleapis.com/full.type.name' as the type URL and the unpack
 * methods only use the fully qualified type name after the last '/'
 * in the type URL, for example "foo.bar.com/x/y.z" will yield type
 * name "y.z".
 *
 * JSON
 * ====
 * The JSON representation of an `Any` value uses the regular
 * representation of the deserialized, embedded message, with an
 * additional field `@type` which contains the type URL. Example:
 *
 *     package google.profile;
 *     message Person {
 *       string first_name = 1;
 *       string last_name = 2;
 *     }
 *
 *     {
 *       "@type": "type.googleapis.com/google.profile.Person",
 *       "firstName": <string>,
 *       "lastName": <string>
 *     }
 *
 * If the embedded message type is well-known and has a custom JSON
 * representation, that representation will be embedded adding a field
 * `value` which holds the custom JSON in addition to the `@type`
 * field. Example (for message [google.protobuf.Duration][]):
 *
 *     {
 *       "@type": "type.googleapis.com/google.protobuf.Duration",
 *       "value": "1.212s"
 *     }
 *
 *
 * @generated from message google.protobuf.Any
 */
class Any extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * A URL/resource name that uniquely identifies the type of the serialized
         * protocol buffer message. This string must contain at least
         * one "/" character. The last segment of the URL's path must represent
         * the fully qualified name of the type (as in
         * `path/google.protobuf.Duration`). The name should be in a canonical form
         * (e.g., leading "." is not accepted).
         *
         * In practice, teams usually precompile into the binary all types that they
         * expect it to use in the context of Any. However, for URLs which use the
         * scheme `http`, `https`, or no scheme, one can optionally set up a type
         * server that maps type URLs to message definitions as follows:
         *
         * * If no scheme is provided, `https` is assumed.
         * * An HTTP GET on the URL must yield a [google.protobuf.Type][]
         *   value in binary format, or produce an error.
         * * Applications are allowed to cache lookup results based on the
         *   URL, or have them precompiled into a binary to avoid any
         *   lookup. Therefore, binary compatibility needs to be preserved
         *   on changes to types. (Use versioned type names to manage
         *   breaking changes.)
         *
         * Note: this functionality is not currently available in the official
         * protobuf release, and it is not used for type URLs beginning with
         * type.googleapis.com.
         *
         * Schemes other than `http`, `https` (or the empty scheme) might be
         * used with implementation specific semantics.
         *
         *
         * @generated from field: string type_url = 1;
         */
        this.typeUrl = "";
        /**
         * Must be a valid serialized protocol buffer of the above specified type.
         *
         * @generated from field: bytes value = 2;
         */
        this.value = new Uint8Array(0);
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        var _a;
        if (this.typeUrl === "") {
            return {};
        }
        const typeName = this.typeUrlToName(this.typeUrl);
        const messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);
        if (!messageType) {
            throw new Error(`cannot encode message google.protobuf.Any to JSON: "${this.typeUrl}" is not in the type registry`);
        }
        const message = messageType.fromBinary(this.value);
        let json = message.toJson(options);
        if (typeName.startsWith("google.protobuf.") || (json === null || Array.isArray(json) || typeof json !== "object")) {
            json = { value: json };
        }
        json["@type"] = this.typeUrl;
        return json;
    }
    fromJson(json, options) {
        var _a;
        if (json === null || Array.isArray(json) || typeof json != "object") {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: expected object but got ${json === null ? "null" : Array.isArray(json) ? "array" : typeof json}`);
        }
        if (Object.keys(json).length == 0) {
            return this;
        }
        const typeUrl = json["@type"];
        if (typeof typeUrl != "string" || typeUrl == "") {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: "@type" is empty`);
        }
        const typeName = this.typeUrlToName(typeUrl), messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);
        if (!messageType) {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: ${typeUrl} is not in the type registry`);
        }
        let message;
        if (typeName.startsWith("google.protobuf.") && Object.prototype.hasOwnProperty.call(json, "value")) {
            message = messageType.fromJson(json["value"], options);
        }
        else {
            const copy = Object.assign({}, json);
            delete copy["@type"];
            message = messageType.fromJson(copy, options);
        }
        this.packFrom(message);
        return this;
    }
    packFrom(message) {
        this.value = message.toBinary();
        this.typeUrl = this.typeNameToUrl(message.getType().typeName);
    }
    unpackTo(target) {
        if (!this.is(target.getType())) {
            return false;
        }
        target.fromBinary(this.value);
        return true;
    }
    unpack(registry) {
        if (this.typeUrl === "") {
            return undefined;
        }
        const messageType = registry.findMessage(this.typeUrlToName(this.typeUrl));
        if (!messageType) {
            return undefined;
        }
        return messageType.fromBinary(this.value);
    }
    is(type) {
        if (this.typeUrl === '') {
            return false;
        }
        const name = this.typeUrlToName(this.typeUrl);
        let typeName = '';
        if (typeof type === 'string') {
            typeName = type;
        }
        else {
            typeName = type.typeName;
        }
        return name === typeName;
    }
    typeNameToUrl(name) {
        return `type.googleapis.com/${name}`;
    }
    typeUrlToName(url) {
        if (!url.length) {
            throw new Error(`invalid type url: ${url}`);
        }
        const slash = url.lastIndexOf("/");
        const name = slash > 0 ? url.substring(slash + 1) : url;
        if (!name.length) {
            throw new Error(`invalid type url: ${url}`);
        }
        return name;
    }
    static pack(message) {
        const any = new Any();
        any.packFrom(message);
        return any;
    }
    static fromBinary(bytes, options) {
        return new Any().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Any().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Any().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Any, a, b);
    }
}
exports.Any = Any;
Any.runtime = proto3_js_1.proto3;
Any.typeName = "google.protobuf.Any";
Any.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);


/***/ }),

/***/ 1731:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Mixin = exports.Method = exports.Api = void 0;
const message_js_1 = __nccwpck_require__(2779);
const type_pb_js_1 = __nccwpck_require__(3672);
const source_context_pb_js_1 = __nccwpck_require__(1280);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * Api is a light-weight descriptor for an API Interface.
 *
 * Interfaces are also described as "protocol buffer services" in some contexts,
 * such as by the "service" keyword in a .proto file, but they are different
 * from API Services, which represent a concrete implementation of an interface
 * as opposed to simply a description of methods and bindings. They are also
 * sometimes simply referred to as "APIs" in other contexts, such as the name of
 * this message itself. See https://cloud.google.com/apis/design/glossary for
 * detailed terminology.
 *
 * @generated from message google.protobuf.Api
 */
class Api extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The fully qualified name of this interface, including package name
         * followed by the interface's simple name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The methods of this interface, in unspecified order.
         *
         * @generated from field: repeated google.protobuf.Method methods = 2;
         */
        this.methods = [];
        /**
         * Any metadata attached to the interface.
         *
         * @generated from field: repeated google.protobuf.Option options = 3;
         */
        this.options = [];
        /**
         * A version string for this interface. If specified, must have the form
         * `major-version.minor-version`, as in `1.10`. If the minor version is
         * omitted, it defaults to zero. If the entire version field is empty, the
         * major version is derived from the package name, as outlined below. If the
         * field is not empty, the version in the package name will be verified to be
         * consistent with what is provided here.
         *
         * The versioning schema uses [semantic
         * versioning](http://semver.org) where the major version number
         * indicates a breaking change and the minor version an additive,
         * non-breaking change. Both version numbers are signals to users
         * what to expect from different versions, and should be carefully
         * chosen based on the product plan.
         *
         * The major version is also reflected in the package name of the
         * interface, which must end in `v<major-version>`, as in
         * `google.feature.v1`. For major versions 0 and 1, the suffix can
         * be omitted. Zero major versions must only be used for
         * experimental, non-GA interfaces.
         *
         *
         * @generated from field: string version = 4;
         */
        this.version = "";
        /**
         * Included interfaces. See [Mixin][].
         *
         * @generated from field: repeated google.protobuf.Mixin mixins = 6;
         */
        this.mixins = [];
        /**
         * The source syntax of the service.
         *
         * @generated from field: google.protobuf.Syntax syntax = 7;
         */
        this.syntax = type_pb_js_1.Syntax.PROTO2;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Api().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Api().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Api().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Api, a, b);
    }
}
exports.Api = Api;
Api.runtime = proto3_js_1.proto3;
Api.typeName = "google.protobuf.Api";
Api.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "methods", kind: "message", T: Method, repeated: true },
    { no: 3, name: "options", kind: "message", T: type_pb_js_1.Option, repeated: true },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "source_context", kind: "message", T: source_context_pb_js_1.SourceContext },
    { no: 6, name: "mixins", kind: "message", T: Mixin, repeated: true },
    { no: 7, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(type_pb_js_1.Syntax) },
]);
/**
 * Method represents a method of an API interface.
 *
 * @generated from message google.protobuf.Method
 */
class Method extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The simple name of this method.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * A URL of the input message type.
         *
         * @generated from field: string request_type_url = 2;
         */
        this.requestTypeUrl = "";
        /**
         * If true, the request is streamed.
         *
         * @generated from field: bool request_streaming = 3;
         */
        this.requestStreaming = false;
        /**
         * The URL of the output message type.
         *
         * @generated from field: string response_type_url = 4;
         */
        this.responseTypeUrl = "";
        /**
         * If true, the response is streamed.
         *
         * @generated from field: bool response_streaming = 5;
         */
        this.responseStreaming = false;
        /**
         * Any metadata attached to the method.
         *
         * @generated from field: repeated google.protobuf.Option options = 6;
         */
        this.options = [];
        /**
         * The source syntax of this method.
         *
         * @generated from field: google.protobuf.Syntax syntax = 7;
         */
        this.syntax = type_pb_js_1.Syntax.PROTO2;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Method().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Method().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Method().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Method, a, b);
    }
}
exports.Method = Method;
Method.runtime = proto3_js_1.proto3;
Method.typeName = "google.protobuf.Method";
Method.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "response_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "response_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "options", kind: "message", T: type_pb_js_1.Option, repeated: true },
    { no: 7, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(type_pb_js_1.Syntax) },
]);
/**
 * Declares an API Interface to be included in this interface. The including
 * interface must redeclare all the methods from the included interface, but
 * documentation and options are inherited as follows:
 *
 * - If after comment and whitespace stripping, the documentation
 *   string of the redeclared method is empty, it will be inherited
 *   from the original method.
 *
 * - Each annotation belonging to the service config (http,
 *   visibility) which is not set in the redeclared method will be
 *   inherited.
 *
 * - If an http annotation is inherited, the path pattern will be
 *   modified as follows. Any version prefix will be replaced by the
 *   version of the including interface plus the [root][] path if
 *   specified.
 *
 * Example of a simple mixin:
 *
 *     package google.acl.v1;
 *     service AccessControl {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v1/{resource=**}:getAcl";
 *       }
 *     }
 *
 *     package google.storage.v2;
 *     service Storage {
 *       rpc GetAcl(GetAclRequest) returns (Acl);
 *
 *       // Get a data record.
 *       rpc GetData(GetDataRequest) returns (Data) {
 *         option (google.api.http).get = "/v2/{resource=**}";
 *       }
 *     }
 *
 * Example of a mixin configuration:
 *
 *     apis:
 *     - name: google.storage.v2.Storage
 *       mixins:
 *       - name: google.acl.v1.AccessControl
 *
 * The mixin construct implies that all methods in `AccessControl` are
 * also declared with same name and request/response types in
 * `Storage`. A documentation generator or annotation processor will
 * see the effective `Storage.GetAcl` method after inherting
 * documentation and annotations as follows:
 *
 *     service Storage {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v2/{resource=**}:getAcl";
 *       }
 *       ...
 *     }
 *
 * Note how the version in the path pattern changed from `v1` to `v2`.
 *
 * If the `root` field in the mixin is specified, it should be a
 * relative path under which inherited HTTP paths are placed. Example:
 *
 *     apis:
 *     - name: google.storage.v2.Storage
 *       mixins:
 *       - name: google.acl.v1.AccessControl
 *         root: acls
 *
 * This implies the following inherited HTTP annotation:
 *
 *     service Storage {
 *       // Get the underlying ACL object.
 *       rpc GetAcl(GetAclRequest) returns (Acl) {
 *         option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
 *       }
 *       ...
 *     }
 *
 * @generated from message google.protobuf.Mixin
 */
class Mixin extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The fully qualified name of the interface which is included.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * If non-empty specifies a path under which inherited HTTP paths
         * are rooted.
         *
         * @generated from field: string root = 2;
         */
        this.root = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Mixin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mixin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mixin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Mixin, a, b);
    }
}
exports.Mixin = Mixin;
Mixin.runtime = proto3_js_1.proto3;
Mixin.typeName = "google.protobuf.Mixin";
Mixin.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 7291:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeGeneratorResponse_File = exports.CodeGeneratorResponse_Feature = exports.CodeGeneratorResponse = exports.CodeGeneratorRequest = exports.Version = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto2_js_1 = __nccwpck_require__(3605);
const descriptor_pb_js_1 = __nccwpck_require__(2959);
/**
 * The version number of protocol compiler.
 *
 * @generated from message google.protobuf.compiler.Version
 */
class Version extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Version().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Version().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Version().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(Version, a, b);
    }
}
exports.Version = Version;
Version.runtime = proto2_js_1.proto2;
Version.typeName = "google.protobuf.compiler.Version";
Version.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "major", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "minor", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "patch", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * An encoded CodeGeneratorRequest is written to the plugin's stdin.
 *
 * @generated from message google.protobuf.compiler.CodeGeneratorRequest
 */
class CodeGeneratorRequest extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The .proto files that were explicitly listed on the command-line.  The
         * code generator should generate code only for these files.  Each file's
         * descriptor will be included in proto_file, below.
         *
         * @generated from field: repeated string file_to_generate = 1;
         */
        this.fileToGenerate = [];
        /**
         * FileDescriptorProtos for all files in files_to_generate and everything
         * they import.  The files will appear in topological order, so each file
         * appears before any file that imports it.
         *
         * protoc guarantees that all proto_files will be written after
         * the fields above, even though this is not technically guaranteed by the
         * protobuf wire format.  This theoretically could allow a plugin to stream
         * in the FileDescriptorProtos and handle them one by one rather than read
         * the entire set into memory at once.  However, as of this writing, this
         * is not similarly optimized on protoc's end -- it will store all fields in
         * memory at once before sending them to the plugin.
         *
         * Type names of fields and extensions in the FileDescriptorProto are always
         * fully qualified.
         *
         * @generated from field: repeated google.protobuf.FileDescriptorProto proto_file = 15;
         */
        this.protoFile = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CodeGeneratorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CodeGeneratorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CodeGeneratorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(CodeGeneratorRequest, a, b);
    }
}
exports.CodeGeneratorRequest = CodeGeneratorRequest;
CodeGeneratorRequest.runtime = proto2_js_1.proto2;
CodeGeneratorRequest.typeName = "google.protobuf.compiler.CodeGeneratorRequest";
CodeGeneratorRequest.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "file_to_generate", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "parameter", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "proto_file", kind: "message", T: descriptor_pb_js_1.FileDescriptorProto, repeated: true },
    { no: 3, name: "compiler_version", kind: "message", T: Version, opt: true },
]);
/**
 * The plugin writes an encoded CodeGeneratorResponse to stdout.
 *
 * @generated from message google.protobuf.compiler.CodeGeneratorResponse
 */
class CodeGeneratorResponse extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.compiler.CodeGeneratorResponse.File file = 15;
         */
        this.file = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CodeGeneratorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CodeGeneratorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CodeGeneratorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(CodeGeneratorResponse, a, b);
    }
}
exports.CodeGeneratorResponse = CodeGeneratorResponse;
CodeGeneratorResponse.runtime = proto2_js_1.proto2;
CodeGeneratorResponse.typeName = "google.protobuf.compiler.CodeGeneratorResponse";
CodeGeneratorResponse.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "supported_features", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 15, name: "file", kind: "message", T: CodeGeneratorResponse_File, repeated: true },
]);
/**
 * Sync with code_generator.h.
 *
 * @generated from enum google.protobuf.compiler.CodeGeneratorResponse.Feature
 */
var CodeGeneratorResponse_Feature;
(function (CodeGeneratorResponse_Feature) {
    /**
     * @generated from enum value: FEATURE_NONE = 0;
     */
    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature["NONE"] = 0] = "NONE";
    /**
     * @generated from enum value: FEATURE_PROTO3_OPTIONAL = 1;
     */
    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature["PROTO3_OPTIONAL"] = 1] = "PROTO3_OPTIONAL";
})(CodeGeneratorResponse_Feature || (exports.CodeGeneratorResponse_Feature = CodeGeneratorResponse_Feature = {}));
// Retrieve enum metadata with: proto2.getEnumType(CodeGeneratorResponse_Feature)
proto2_js_1.proto2.util.setEnumType(CodeGeneratorResponse_Feature, "google.protobuf.compiler.CodeGeneratorResponse.Feature", [
    { no: 0, name: "FEATURE_NONE" },
    { no: 1, name: "FEATURE_PROTO3_OPTIONAL" },
]);
/**
 * Represents a single generated file.
 *
 * @generated from message google.protobuf.compiler.CodeGeneratorResponse.File
 */
class CodeGeneratorResponse_File extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CodeGeneratorResponse_File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CodeGeneratorResponse_File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CodeGeneratorResponse_File().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(CodeGeneratorResponse_File, a, b);
    }
}
exports.CodeGeneratorResponse_File = CodeGeneratorResponse_File;
CodeGeneratorResponse_File.runtime = proto2_js_1.proto2;
CodeGeneratorResponse_File.typeName = "google.protobuf.compiler.CodeGeneratorResponse.File";
CodeGeneratorResponse_File.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "insertion_point", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "generated_code_info", kind: "message", T: descriptor_pb_js_1.GeneratedCodeInfo, opt: true },
]);


/***/ }),

/***/ 2959:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GeneratedCodeInfo_Annotation_Semantic = exports.GeneratedCodeInfo_Annotation = exports.GeneratedCodeInfo = exports.SourceCodeInfo_Location = exports.SourceCodeInfo = exports.UninterpretedOption_NamePart = exports.UninterpretedOption = exports.MethodOptions_IdempotencyLevel = exports.MethodOptions = exports.ServiceOptions = exports.EnumValueOptions = exports.EnumOptions = exports.OneofOptions = exports.FieldOptions_OptionTargetType = exports.FieldOptions_OptionRetention = exports.FieldOptions_JSType = exports.FieldOptions_CType = exports.FieldOptions = exports.MessageOptions = exports.FileOptions_OptimizeMode = exports.FileOptions = exports.MethodDescriptorProto = exports.ServiceDescriptorProto = exports.EnumValueDescriptorProto = exports.EnumDescriptorProto_EnumReservedRange = exports.EnumDescriptorProto = exports.OneofDescriptorProto = exports.FieldDescriptorProto_Label = exports.FieldDescriptorProto_Type = exports.FieldDescriptorProto = exports.ExtensionRangeOptions_Declaration = exports.ExtensionRangeOptions_VerificationState = exports.ExtensionRangeOptions = exports.DescriptorProto_ReservedRange = exports.DescriptorProto_ExtensionRange = exports.DescriptorProto = exports.FileDescriptorProto = exports.FileDescriptorSet = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto2_js_1 = __nccwpck_require__(3605);
/**
 * The protocol compiler can output a FileDescriptorSet containing the .proto
 * files it parses.
 *
 * @generated from message google.protobuf.FileDescriptorSet
 */
class FileDescriptorSet extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.FileDescriptorProto file = 1;
         */
        this.file = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileDescriptorSet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileDescriptorSet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileDescriptorSet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FileDescriptorSet, a, b);
    }
}
exports.FileDescriptorSet = FileDescriptorSet;
FileDescriptorSet.runtime = proto2_js_1.proto2;
FileDescriptorSet.typeName = "google.protobuf.FileDescriptorSet";
FileDescriptorSet.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "file", kind: "message", T: FileDescriptorProto, repeated: true },
]);
/**
 * Describes a complete .proto file.
 *
 * @generated from message google.protobuf.FileDescriptorProto
 */
class FileDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Names of files imported by this file.
         *
         * @generated from field: repeated string dependency = 3;
         */
        this.dependency = [];
        /**
         * Indexes of the public imported files in the dependency list above.
         *
         * @generated from field: repeated int32 public_dependency = 10;
         */
        this.publicDependency = [];
        /**
         * Indexes of the weak imported files in the dependency list.
         * For Google-internal migration only. Do not use.
         *
         * @generated from field: repeated int32 weak_dependency = 11;
         */
        this.weakDependency = [];
        /**
         * All top-level definitions in this file.
         *
         * @generated from field: repeated google.protobuf.DescriptorProto message_type = 4;
         */
        this.messageType = [];
        /**
         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 5;
         */
        this.enumType = [];
        /**
         * @generated from field: repeated google.protobuf.ServiceDescriptorProto service = 6;
         */
        this.service = [];
        /**
         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 7;
         */
        this.extension = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FileDescriptorProto, a, b);
    }
}
exports.FileDescriptorProto = FileDescriptorProto;
FileDescriptorProto.runtime = proto2_js_1.proto2;
FileDescriptorProto.typeName = "google.protobuf.FileDescriptorProto";
FileDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "dependency", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "public_dependency", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 11, name: "weak_dependency", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "message_type", kind: "message", T: DescriptorProto, repeated: true },
    { no: 5, name: "enum_type", kind: "message", T: EnumDescriptorProto, repeated: true },
    { no: 6, name: "service", kind: "message", T: ServiceDescriptorProto, repeated: true },
    { no: 7, name: "extension", kind: "message", T: FieldDescriptorProto, repeated: true },
    { no: 8, name: "options", kind: "message", T: FileOptions, opt: true },
    { no: 9, name: "source_code_info", kind: "message", T: SourceCodeInfo, opt: true },
    { no: 12, name: "syntax", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "edition", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Describes a message type.
 *
 * @generated from message google.protobuf.DescriptorProto
 */
class DescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.FieldDescriptorProto field = 2;
         */
        this.field = [];
        /**
         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 6;
         */
        this.extension = [];
        /**
         * @generated from field: repeated google.protobuf.DescriptorProto nested_type = 3;
         */
        this.nestedType = [];
        /**
         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 4;
         */
        this.enumType = [];
        /**
         * @generated from field: repeated google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;
         */
        this.extensionRange = [];
        /**
         * @generated from field: repeated google.protobuf.OneofDescriptorProto oneof_decl = 8;
         */
        this.oneofDecl = [];
        /**
         * @generated from field: repeated google.protobuf.DescriptorProto.ReservedRange reserved_range = 9;
         */
        this.reservedRange = [];
        /**
         * Reserved field names, which may not be used by fields in the same message.
         * A given name may only be reserved once.
         *
         * @generated from field: repeated string reserved_name = 10;
         */
        this.reservedName = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(DescriptorProto, a, b);
    }
}
exports.DescriptorProto = DescriptorProto;
DescriptorProto.runtime = proto2_js_1.proto2;
DescriptorProto.typeName = "google.protobuf.DescriptorProto";
DescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "field", kind: "message", T: FieldDescriptorProto, repeated: true },
    { no: 6, name: "extension", kind: "message", T: FieldDescriptorProto, repeated: true },
    { no: 3, name: "nested_type", kind: "message", T: DescriptorProto, repeated: true },
    { no: 4, name: "enum_type", kind: "message", T: EnumDescriptorProto, repeated: true },
    { no: 5, name: "extension_range", kind: "message", T: DescriptorProto_ExtensionRange, repeated: true },
    { no: 8, name: "oneof_decl", kind: "message", T: OneofDescriptorProto, repeated: true },
    { no: 7, name: "options", kind: "message", T: MessageOptions, opt: true },
    { no: 9, name: "reserved_range", kind: "message", T: DescriptorProto_ReservedRange, repeated: true },
    { no: 10, name: "reserved_name", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message google.protobuf.DescriptorProto.ExtensionRange
 */
class DescriptorProto_ExtensionRange extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DescriptorProto_ExtensionRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DescriptorProto_ExtensionRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DescriptorProto_ExtensionRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(DescriptorProto_ExtensionRange, a, b);
    }
}
exports.DescriptorProto_ExtensionRange = DescriptorProto_ExtensionRange;
DescriptorProto_ExtensionRange.runtime = proto2_js_1.proto2;
DescriptorProto_ExtensionRange.typeName = "google.protobuf.DescriptorProto.ExtensionRange";
DescriptorProto_ExtensionRange.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "options", kind: "message", T: ExtensionRangeOptions, opt: true },
]);
/**
 * Range of reserved tag numbers. Reserved tag numbers may not be used by
 * fields or extension ranges in the same message. Reserved ranges may
 * not overlap.
 *
 * @generated from message google.protobuf.DescriptorProto.ReservedRange
 */
class DescriptorProto_ReservedRange extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DescriptorProto_ReservedRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DescriptorProto_ReservedRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DescriptorProto_ReservedRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(DescriptorProto_ReservedRange, a, b);
    }
}
exports.DescriptorProto_ReservedRange = DescriptorProto_ReservedRange;
DescriptorProto_ReservedRange.runtime = proto2_js_1.proto2;
DescriptorProto_ReservedRange.typeName = "google.protobuf.DescriptorProto.ReservedRange";
DescriptorProto_ReservedRange.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
]);
/**
 * @generated from message google.protobuf.ExtensionRangeOptions
 */
class ExtensionRangeOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        /**
         * go/protobuf-stripping-extension-declarations
         * Like Metadata, but we use a repeated field to hold all extension
         * declarations. This should avoid the size increases of transforming a large
         * extension range into small ranges in generated binaries.
         *
         * @generated from field: repeated google.protobuf.ExtensionRangeOptions.Declaration declaration = 2;
         */
        this.declaration = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExtensionRangeOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExtensionRangeOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExtensionRangeOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ExtensionRangeOptions, a, b);
    }
}
exports.ExtensionRangeOptions = ExtensionRangeOptions;
ExtensionRangeOptions.runtime = proto2_js_1.proto2;
ExtensionRangeOptions.typeName = "google.protobuf.ExtensionRangeOptions";
ExtensionRangeOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
    { no: 2, name: "declaration", kind: "message", T: ExtensionRangeOptions_Declaration, repeated: true },
    { no: 3, name: "verification", kind: "enum", T: proto2_js_1.proto2.getEnumType(ExtensionRangeOptions_VerificationState), opt: true, default: ExtensionRangeOptions_VerificationState.UNVERIFIED },
]);
/**
 * The verification state of the extension range.
 *
 * @generated from enum google.protobuf.ExtensionRangeOptions.VerificationState
 */
var ExtensionRangeOptions_VerificationState;
(function (ExtensionRangeOptions_VerificationState) {
    /**
     * All the extensions of the range must be declared.
     *
     * @generated from enum value: DECLARATION = 0;
     */
    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState["DECLARATION"] = 0] = "DECLARATION";
    /**
     * @generated from enum value: UNVERIFIED = 1;
     */
    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState["UNVERIFIED"] = 1] = "UNVERIFIED";
})(ExtensionRangeOptions_VerificationState || (exports.ExtensionRangeOptions_VerificationState = ExtensionRangeOptions_VerificationState = {}));
// Retrieve enum metadata with: proto2.getEnumType(ExtensionRangeOptions_VerificationState)
proto2_js_1.proto2.util.setEnumType(ExtensionRangeOptions_VerificationState, "google.protobuf.ExtensionRangeOptions.VerificationState", [
    { no: 0, name: "DECLARATION" },
    { no: 1, name: "UNVERIFIED" },
]);
/**
 * @generated from message google.protobuf.ExtensionRangeOptions.Declaration
 */
class ExtensionRangeOptions_Declaration extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExtensionRangeOptions_Declaration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExtensionRangeOptions_Declaration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExtensionRangeOptions_Declaration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ExtensionRangeOptions_Declaration, a, b);
    }
}
exports.ExtensionRangeOptions_Declaration = ExtensionRangeOptions_Declaration;
ExtensionRangeOptions_Declaration.runtime = proto2_js_1.proto2;
ExtensionRangeOptions_Declaration.typeName = "google.protobuf.ExtensionRangeOptions.Declaration";
ExtensionRangeOptions_Declaration.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "is_repeated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "reserved", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "repeated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * Describes a field within a message.
 *
 * @generated from message google.protobuf.FieldDescriptorProto
 */
class FieldDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FieldDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FieldDescriptorProto, a, b);
    }
}
exports.FieldDescriptorProto = FieldDescriptorProto;
FieldDescriptorProto.runtime = proto2_js_1.proto2;
FieldDescriptorProto.typeName = "google.protobuf.FieldDescriptorProto";
FieldDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "label", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldDescriptorProto_Label), opt: true },
    { no: 5, name: "type", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldDescriptorProto_Type), opt: true },
    { no: 6, name: "type_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "extendee", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "oneof_index", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "json_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "options", kind: "message", T: FieldOptions, opt: true },
    { no: 17, name: "proto3_optional", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * @generated from enum google.protobuf.FieldDescriptorProto.Type
 */
var FieldDescriptorProto_Type;
(function (FieldDescriptorProto_Type) {
    /**
     * 0 is reserved for errors.
     * Order is weird for historical reasons.
     *
     * @generated from enum value: TYPE_DOUBLE = 1;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["DOUBLE"] = 1] = "DOUBLE";
    /**
     * @generated from enum value: TYPE_FLOAT = 2;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["FLOAT"] = 2] = "FLOAT";
    /**
     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
     * negative values are likely.
     *
     * @generated from enum value: TYPE_INT64 = 3;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["INT64"] = 3] = "INT64";
    /**
     * @generated from enum value: TYPE_UINT64 = 4;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["UINT64"] = 4] = "UINT64";
    /**
     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
     * negative values are likely.
     *
     * @generated from enum value: TYPE_INT32 = 5;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["INT32"] = 5] = "INT32";
    /**
     * @generated from enum value: TYPE_FIXED64 = 6;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["FIXED64"] = 6] = "FIXED64";
    /**
     * @generated from enum value: TYPE_FIXED32 = 7;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["FIXED32"] = 7] = "FIXED32";
    /**
     * @generated from enum value: TYPE_BOOL = 8;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["BOOL"] = 8] = "BOOL";
    /**
     * @generated from enum value: TYPE_STRING = 9;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["STRING"] = 9] = "STRING";
    /**
     * Tag-delimited aggregate.
     * Group type is deprecated and not supported in proto3. However, Proto3
     * implementations should still be able to parse the group wire format and
     * treat group fields as unknown fields.
     *
     * @generated from enum value: TYPE_GROUP = 10;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["GROUP"] = 10] = "GROUP";
    /**
     * Length-delimited aggregate.
     *
     * @generated from enum value: TYPE_MESSAGE = 11;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["MESSAGE"] = 11] = "MESSAGE";
    /**
     * New in version 2.
     *
     * @generated from enum value: TYPE_BYTES = 12;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["BYTES"] = 12] = "BYTES";
    /**
     * @generated from enum value: TYPE_UINT32 = 13;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["UINT32"] = 13] = "UINT32";
    /**
     * @generated from enum value: TYPE_ENUM = 14;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["ENUM"] = 14] = "ENUM";
    /**
     * @generated from enum value: TYPE_SFIXED32 = 15;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SFIXED32"] = 15] = "SFIXED32";
    /**
     * @generated from enum value: TYPE_SFIXED64 = 16;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SFIXED64"] = 16] = "SFIXED64";
    /**
     * Uses ZigZag encoding.
     *
     * @generated from enum value: TYPE_SINT32 = 17;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SINT32"] = 17] = "SINT32";
    /**
     * Uses ZigZag encoding.
     *
     * @generated from enum value: TYPE_SINT64 = 18;
     */
    FieldDescriptorProto_Type[FieldDescriptorProto_Type["SINT64"] = 18] = "SINT64";
})(FieldDescriptorProto_Type || (exports.FieldDescriptorProto_Type = FieldDescriptorProto_Type = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Type)
proto2_js_1.proto2.util.setEnumType(FieldDescriptorProto_Type, "google.protobuf.FieldDescriptorProto.Type", [
    { no: 1, name: "TYPE_DOUBLE" },
    { no: 2, name: "TYPE_FLOAT" },
    { no: 3, name: "TYPE_INT64" },
    { no: 4, name: "TYPE_UINT64" },
    { no: 5, name: "TYPE_INT32" },
    { no: 6, name: "TYPE_FIXED64" },
    { no: 7, name: "TYPE_FIXED32" },
    { no: 8, name: "TYPE_BOOL" },
    { no: 9, name: "TYPE_STRING" },
    { no: 10, name: "TYPE_GROUP" },
    { no: 11, name: "TYPE_MESSAGE" },
    { no: 12, name: "TYPE_BYTES" },
    { no: 13, name: "TYPE_UINT32" },
    { no: 14, name: "TYPE_ENUM" },
    { no: 15, name: "TYPE_SFIXED32" },
    { no: 16, name: "TYPE_SFIXED64" },
    { no: 17, name: "TYPE_SINT32" },
    { no: 18, name: "TYPE_SINT64" },
]);
/**
 * @generated from enum google.protobuf.FieldDescriptorProto.Label
 */
var FieldDescriptorProto_Label;
(function (FieldDescriptorProto_Label) {
    /**
     * 0 is reserved for errors
     *
     * @generated from enum value: LABEL_OPTIONAL = 1;
     */
    FieldDescriptorProto_Label[FieldDescriptorProto_Label["OPTIONAL"] = 1] = "OPTIONAL";
    /**
     * @generated from enum value: LABEL_REQUIRED = 2;
     */
    FieldDescriptorProto_Label[FieldDescriptorProto_Label["REQUIRED"] = 2] = "REQUIRED";
    /**
     * @generated from enum value: LABEL_REPEATED = 3;
     */
    FieldDescriptorProto_Label[FieldDescriptorProto_Label["REPEATED"] = 3] = "REPEATED";
})(FieldDescriptorProto_Label || (exports.FieldDescriptorProto_Label = FieldDescriptorProto_Label = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Label)
proto2_js_1.proto2.util.setEnumType(FieldDescriptorProto_Label, "google.protobuf.FieldDescriptorProto.Label", [
    { no: 1, name: "LABEL_OPTIONAL" },
    { no: 2, name: "LABEL_REQUIRED" },
    { no: 3, name: "LABEL_REPEATED" },
]);
/**
 * Describes a oneof.
 *
 * @generated from message google.protobuf.OneofDescriptorProto
 */
class OneofDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OneofDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OneofDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OneofDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(OneofDescriptorProto, a, b);
    }
}
exports.OneofDescriptorProto = OneofDescriptorProto;
OneofDescriptorProto.runtime = proto2_js_1.proto2;
OneofDescriptorProto.typeName = "google.protobuf.OneofDescriptorProto";
OneofDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "options", kind: "message", T: OneofOptions, opt: true },
]);
/**
 * Describes an enum type.
 *
 * @generated from message google.protobuf.EnumDescriptorProto
 */
class EnumDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.EnumValueDescriptorProto value = 2;
         */
        this.value = [];
        /**
         * Range of reserved numeric values. Reserved numeric values may not be used
         * by enum values in the same enum declaration. Reserved ranges may not
         * overlap.
         *
         * @generated from field: repeated google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range = 4;
         */
        this.reservedRange = [];
        /**
         * Reserved enum value names, which may not be reused. A given name may only
         * be reserved once.
         *
         * @generated from field: repeated string reserved_name = 5;
         */
        this.reservedName = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumDescriptorProto, a, b);
    }
}
exports.EnumDescriptorProto = EnumDescriptorProto;
EnumDescriptorProto.runtime = proto2_js_1.proto2;
EnumDescriptorProto.typeName = "google.protobuf.EnumDescriptorProto";
EnumDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "value", kind: "message", T: EnumValueDescriptorProto, repeated: true },
    { no: 3, name: "options", kind: "message", T: EnumOptions, opt: true },
    { no: 4, name: "reserved_range", kind: "message", T: EnumDescriptorProto_EnumReservedRange, repeated: true },
    { no: 5, name: "reserved_name", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * Range of reserved numeric values. Reserved values may not be used by
 * entries in the same enum. Reserved ranges may not overlap.
 *
 * Note that this is distinct from DescriptorProto.ReservedRange in that it
 * is inclusive such that it can appropriately represent the entire int32
 * domain.
 *
 * @generated from message google.protobuf.EnumDescriptorProto.EnumReservedRange
 */
class EnumDescriptorProto_EnumReservedRange extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumDescriptorProto_EnumReservedRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumDescriptorProto_EnumReservedRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumDescriptorProto_EnumReservedRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumDescriptorProto_EnumReservedRange, a, b);
    }
}
exports.EnumDescriptorProto_EnumReservedRange = EnumDescriptorProto_EnumReservedRange;
EnumDescriptorProto_EnumReservedRange.runtime = proto2_js_1.proto2;
EnumDescriptorProto_EnumReservedRange.typeName = "google.protobuf.EnumDescriptorProto.EnumReservedRange";
EnumDescriptorProto_EnumReservedRange.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
]);
/**
 * Describes a value within an enum.
 *
 * @generated from message google.protobuf.EnumValueDescriptorProto
 */
class EnumValueDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumValueDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumValueDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumValueDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumValueDescriptorProto, a, b);
    }
}
exports.EnumValueDescriptorProto = EnumValueDescriptorProto;
EnumValueDescriptorProto.runtime = proto2_js_1.proto2;
EnumValueDescriptorProto.typeName = "google.protobuf.EnumValueDescriptorProto";
EnumValueDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "options", kind: "message", T: EnumValueOptions, opt: true },
]);
/**
 * Describes a service.
 *
 * @generated from message google.protobuf.ServiceDescriptorProto
 */
class ServiceDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.MethodDescriptorProto method = 2;
         */
        this.method = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ServiceDescriptorProto, a, b);
    }
}
exports.ServiceDescriptorProto = ServiceDescriptorProto;
ServiceDescriptorProto.runtime = proto2_js_1.proto2;
ServiceDescriptorProto.typeName = "google.protobuf.ServiceDescriptorProto";
ServiceDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "method", kind: "message", T: MethodDescriptorProto, repeated: true },
    { no: 3, name: "options", kind: "message", T: ServiceOptions, opt: true },
]);
/**
 * Describes a method of a service.
 *
 * @generated from message google.protobuf.MethodDescriptorProto
 */
class MethodDescriptorProto extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodDescriptorProto().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodDescriptorProto().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodDescriptorProto().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(MethodDescriptorProto, a, b);
    }
}
exports.MethodDescriptorProto = MethodDescriptorProto;
MethodDescriptorProto.runtime = proto2_js_1.proto2;
MethodDescriptorProto.typeName = "google.protobuf.MethodDescriptorProto";
MethodDescriptorProto.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "input_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "output_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "options", kind: "message", T: MethodOptions, opt: true },
    { no: 5, name: "client_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 6, name: "server_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
]);
/**
 * @generated from message google.protobuf.FileOptions
 */
class FileOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here.
         * See the documentation for the "Options" section above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FileOptions, a, b);
    }
}
exports.FileOptions = FileOptions;
FileOptions.runtime = proto2_js_1.proto2;
FileOptions.typeName = "google.protobuf.FileOptions";
FileOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "java_package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "java_outer_classname", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "java_multiple_files", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 20, name: "java_generate_equals_and_hash", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 27, name: "java_string_check_utf8", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 9, name: "optimize_for", kind: "enum", T: proto2_js_1.proto2.getEnumType(FileOptions_OptimizeMode), opt: true, default: FileOptions_OptimizeMode.SPEED },
    { no: 11, name: "go_package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "cc_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 17, name: "java_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 18, name: "py_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 42, name: "php_generic_services", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 23, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 31, name: "cc_enable_arenas", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: true },
    { no: 36, name: "objc_class_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 37, name: "csharp_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 39, name: "swift_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 40, name: "php_class_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 41, name: "php_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 44, name: "php_metadata_namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 45, name: "ruby_package", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * Generated classes can be optimized for speed or code size.
 *
 * @generated from enum google.protobuf.FileOptions.OptimizeMode
 */
var FileOptions_OptimizeMode;
(function (FileOptions_OptimizeMode) {
    /**
     * Generate complete code for parsing, serialization,
     *
     * @generated from enum value: SPEED = 1;
     */
    FileOptions_OptimizeMode[FileOptions_OptimizeMode["SPEED"] = 1] = "SPEED";
    /**
     * etc.
     *
     * Use ReflectionOps to implement these methods.
     *
     * @generated from enum value: CODE_SIZE = 2;
     */
    FileOptions_OptimizeMode[FileOptions_OptimizeMode["CODE_SIZE"] = 2] = "CODE_SIZE";
    /**
     * Generate code using MessageLite and the lite runtime.
     *
     * @generated from enum value: LITE_RUNTIME = 3;
     */
    FileOptions_OptimizeMode[FileOptions_OptimizeMode["LITE_RUNTIME"] = 3] = "LITE_RUNTIME";
})(FileOptions_OptimizeMode || (exports.FileOptions_OptimizeMode = FileOptions_OptimizeMode = {}));
// Retrieve enum metadata with: proto2.getEnumType(FileOptions_OptimizeMode)
proto2_js_1.proto2.util.setEnumType(FileOptions_OptimizeMode, "google.protobuf.FileOptions.OptimizeMode", [
    { no: 1, name: "SPEED" },
    { no: 2, name: "CODE_SIZE" },
    { no: 3, name: "LITE_RUNTIME" },
]);
/**
 * @generated from message google.protobuf.MessageOptions
 */
class MessageOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MessageOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MessageOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MessageOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(MessageOptions, a, b);
    }
}
exports.MessageOptions = MessageOptions;
MessageOptions.runtime = proto2_js_1.proto2;
MessageOptions.typeName = "google.protobuf.MessageOptions";
MessageOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "message_set_wire_format", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 2, name: "no_standard_descriptor_accessor", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 3, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 7, name: "map_entry", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "deprecated_legacy_json_field_conflicts", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.FieldOptions
 */
class FieldOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.FieldOptions.OptionTargetType targets = 19;
         */
        this.targets = [];
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FieldOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(FieldOptions, a, b);
    }
}
exports.FieldOptions = FieldOptions;
FieldOptions.runtime = proto2_js_1.proto2;
FieldOptions.typeName = "google.protobuf.FieldOptions";
FieldOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "ctype", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_CType), opt: true, default: FieldOptions_CType.STRING },
    { no: 2, name: "packed", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "jstype", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_JSType), opt: true, default: FieldOptions_JSType.JS_NORMAL },
    { no: 5, name: "lazy", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 15, name: "unverified_lazy", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 3, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 10, name: "weak", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 16, name: "debug_redact", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 17, name: "retention", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_OptionRetention), opt: true },
    { no: 18, name: "target", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_OptionTargetType), opt: true },
    { no: 19, name: "targets", kind: "enum", T: proto2_js_1.proto2.getEnumType(FieldOptions_OptionTargetType), repeated: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from enum google.protobuf.FieldOptions.CType
 */
var FieldOptions_CType;
(function (FieldOptions_CType) {
    /**
     * Default mode.
     *
     * @generated from enum value: STRING = 0;
     */
    FieldOptions_CType[FieldOptions_CType["STRING"] = 0] = "STRING";
    /**
     * The option [ctype=CORD] may be applied to a non-repeated field of type
     * "bytes". It indicates that in C++, the data should be stored in a Cord
     * instead of a string.  For very large strings, this may reduce memory
     * fragmentation. It may also allow better performance when parsing from a
     * Cord, or when parsing with aliasing enabled, as the parsed Cord may then
     * alias the original buffer.
     *
     * @generated from enum value: CORD = 1;
     */
    FieldOptions_CType[FieldOptions_CType["CORD"] = 1] = "CORD";
    /**
     * @generated from enum value: STRING_PIECE = 2;
     */
    FieldOptions_CType[FieldOptions_CType["STRING_PIECE"] = 2] = "STRING_PIECE";
})(FieldOptions_CType || (exports.FieldOptions_CType = FieldOptions_CType = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_CType)
proto2_js_1.proto2.util.setEnumType(FieldOptions_CType, "google.protobuf.FieldOptions.CType", [
    { no: 0, name: "STRING" },
    { no: 1, name: "CORD" },
    { no: 2, name: "STRING_PIECE" },
]);
/**
 * @generated from enum google.protobuf.FieldOptions.JSType
 */
var FieldOptions_JSType;
(function (FieldOptions_JSType) {
    /**
     * Use the default type.
     *
     * @generated from enum value: JS_NORMAL = 0;
     */
    FieldOptions_JSType[FieldOptions_JSType["JS_NORMAL"] = 0] = "JS_NORMAL";
    /**
     * Use JavaScript strings.
     *
     * @generated from enum value: JS_STRING = 1;
     */
    FieldOptions_JSType[FieldOptions_JSType["JS_STRING"] = 1] = "JS_STRING";
    /**
     * Use JavaScript numbers.
     *
     * @generated from enum value: JS_NUMBER = 2;
     */
    FieldOptions_JSType[FieldOptions_JSType["JS_NUMBER"] = 2] = "JS_NUMBER";
})(FieldOptions_JSType || (exports.FieldOptions_JSType = FieldOptions_JSType = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_JSType)
proto2_js_1.proto2.util.setEnumType(FieldOptions_JSType, "google.protobuf.FieldOptions.JSType", [
    { no: 0, name: "JS_NORMAL" },
    { no: 1, name: "JS_STRING" },
    { no: 2, name: "JS_NUMBER" },
]);
/**
 * If set to RETENTION_SOURCE, the option will be omitted from the binary.
 * Note: as of January 2023, support for this is in progress and does not yet
 * have an effect (b/264593489).
 *
 * @generated from enum google.protobuf.FieldOptions.OptionRetention
 */
var FieldOptions_OptionRetention;
(function (FieldOptions_OptionRetention) {
    /**
     * @generated from enum value: RETENTION_UNKNOWN = 0;
     */
    FieldOptions_OptionRetention[FieldOptions_OptionRetention["RETENTION_UNKNOWN"] = 0] = "RETENTION_UNKNOWN";
    /**
     * @generated from enum value: RETENTION_RUNTIME = 1;
     */
    FieldOptions_OptionRetention[FieldOptions_OptionRetention["RETENTION_RUNTIME"] = 1] = "RETENTION_RUNTIME";
    /**
     * @generated from enum value: RETENTION_SOURCE = 2;
     */
    FieldOptions_OptionRetention[FieldOptions_OptionRetention["RETENTION_SOURCE"] = 2] = "RETENTION_SOURCE";
})(FieldOptions_OptionRetention || (exports.FieldOptions_OptionRetention = FieldOptions_OptionRetention = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionRetention)
proto2_js_1.proto2.util.setEnumType(FieldOptions_OptionRetention, "google.protobuf.FieldOptions.OptionRetention", [
    { no: 0, name: "RETENTION_UNKNOWN" },
    { no: 1, name: "RETENTION_RUNTIME" },
    { no: 2, name: "RETENTION_SOURCE" },
]);
/**
 * This indicates the types of entities that the field may apply to when used
 * as an option. If it is unset, then the field may be freely used as an
 * option on any kind of entity. Note: as of January 2023, support for this is
 * in progress and does not yet have an effect (b/264593489).
 *
 * @generated from enum google.protobuf.FieldOptions.OptionTargetType
 */
var FieldOptions_OptionTargetType;
(function (FieldOptions_OptionTargetType) {
    /**
     * @generated from enum value: TARGET_TYPE_UNKNOWN = 0;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_UNKNOWN"] = 0] = "TARGET_TYPE_UNKNOWN";
    /**
     * @generated from enum value: TARGET_TYPE_FILE = 1;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_FILE"] = 1] = "TARGET_TYPE_FILE";
    /**
     * @generated from enum value: TARGET_TYPE_EXTENSION_RANGE = 2;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_EXTENSION_RANGE"] = 2] = "TARGET_TYPE_EXTENSION_RANGE";
    /**
     * @generated from enum value: TARGET_TYPE_MESSAGE = 3;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_MESSAGE"] = 3] = "TARGET_TYPE_MESSAGE";
    /**
     * @generated from enum value: TARGET_TYPE_FIELD = 4;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_FIELD"] = 4] = "TARGET_TYPE_FIELD";
    /**
     * @generated from enum value: TARGET_TYPE_ONEOF = 5;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_ONEOF"] = 5] = "TARGET_TYPE_ONEOF";
    /**
     * @generated from enum value: TARGET_TYPE_ENUM = 6;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_ENUM"] = 6] = "TARGET_TYPE_ENUM";
    /**
     * @generated from enum value: TARGET_TYPE_ENUM_ENTRY = 7;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_ENUM_ENTRY"] = 7] = "TARGET_TYPE_ENUM_ENTRY";
    /**
     * @generated from enum value: TARGET_TYPE_SERVICE = 8;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_SERVICE"] = 8] = "TARGET_TYPE_SERVICE";
    /**
     * @generated from enum value: TARGET_TYPE_METHOD = 9;
     */
    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType["TARGET_TYPE_METHOD"] = 9] = "TARGET_TYPE_METHOD";
})(FieldOptions_OptionTargetType || (exports.FieldOptions_OptionTargetType = FieldOptions_OptionTargetType = {}));
// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionTargetType)
proto2_js_1.proto2.util.setEnumType(FieldOptions_OptionTargetType, "google.protobuf.FieldOptions.OptionTargetType", [
    { no: 0, name: "TARGET_TYPE_UNKNOWN" },
    { no: 1, name: "TARGET_TYPE_FILE" },
    { no: 2, name: "TARGET_TYPE_EXTENSION_RANGE" },
    { no: 3, name: "TARGET_TYPE_MESSAGE" },
    { no: 4, name: "TARGET_TYPE_FIELD" },
    { no: 5, name: "TARGET_TYPE_ONEOF" },
    { no: 6, name: "TARGET_TYPE_ENUM" },
    { no: 7, name: "TARGET_TYPE_ENUM_ENTRY" },
    { no: 8, name: "TARGET_TYPE_SERVICE" },
    { no: 9, name: "TARGET_TYPE_METHOD" },
]);
/**
 * @generated from message google.protobuf.OneofOptions
 */
class OneofOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OneofOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OneofOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OneofOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(OneofOptions, a, b);
    }
}
exports.OneofOptions = OneofOptions;
OneofOptions.runtime = proto2_js_1.proto2;
OneofOptions.typeName = "google.protobuf.OneofOptions";
OneofOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.EnumOptions
 */
class EnumOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumOptions, a, b);
    }
}
exports.EnumOptions = EnumOptions;
EnumOptions.runtime = proto2_js_1.proto2;
EnumOptions.typeName = "google.protobuf.EnumOptions";
EnumOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 2, name: "allow_alias", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 6, name: "deprecated_legacy_json_field_conflicts", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.EnumValueOptions
 */
class EnumValueOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumValueOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumValueOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumValueOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(EnumValueOptions, a, b);
    }
}
exports.EnumValueOptions = EnumValueOptions;
EnumValueOptions.runtime = proto2_js_1.proto2;
EnumValueOptions.typeName = "google.protobuf.EnumValueOptions";
EnumValueOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.ServiceOptions
 */
class ServiceOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ServiceOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ServiceOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ServiceOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(ServiceOptions, a, b);
    }
}
exports.ServiceOptions = ServiceOptions;
ServiceOptions.runtime = proto2_js_1.proto2;
ServiceOptions.typeName = "google.protobuf.ServiceOptions";
ServiceOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 33, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * @generated from message google.protobuf.MethodOptions
 */
class MethodOptions extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The parser stores options it doesn't recognize here. See above.
         *
         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;
         */
        this.uninterpretedOption = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(MethodOptions, a, b);
    }
}
exports.MethodOptions = MethodOptions;
MethodOptions.runtime = proto2_js_1.proto2;
MethodOptions.typeName = "google.protobuf.MethodOptions";
MethodOptions.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 33, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: false },
    { no: 34, name: "idempotency_level", kind: "enum", T: proto2_js_1.proto2.getEnumType(MethodOptions_IdempotencyLevel), opt: true, default: MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN },
    { no: 999, name: "uninterpreted_option", kind: "message", T: UninterpretedOption, repeated: true },
]);
/**
 * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
 * or neither? HTTP based RPC implementation may choose GET verb for safe
 * methods, and PUT verb for idempotent methods instead of the default POST.
 *
 * @generated from enum google.protobuf.MethodOptions.IdempotencyLevel
 */
var MethodOptions_IdempotencyLevel;
(function (MethodOptions_IdempotencyLevel) {
    /**
     * @generated from enum value: IDEMPOTENCY_UNKNOWN = 0;
     */
    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel["IDEMPOTENCY_UNKNOWN"] = 0] = "IDEMPOTENCY_UNKNOWN";
    /**
     * implies idempotent
     *
     * @generated from enum value: NO_SIDE_EFFECTS = 1;
     */
    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel["NO_SIDE_EFFECTS"] = 1] = "NO_SIDE_EFFECTS";
    /**
     * idempotent, but may have side effects
     *
     * @generated from enum value: IDEMPOTENT = 2;
     */
    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel["IDEMPOTENT"] = 2] = "IDEMPOTENT";
})(MethodOptions_IdempotencyLevel || (exports.MethodOptions_IdempotencyLevel = MethodOptions_IdempotencyLevel = {}));
// Retrieve enum metadata with: proto2.getEnumType(MethodOptions_IdempotencyLevel)
proto2_js_1.proto2.util.setEnumType(MethodOptions_IdempotencyLevel, "google.protobuf.MethodOptions.IdempotencyLevel", [
    { no: 0, name: "IDEMPOTENCY_UNKNOWN" },
    { no: 1, name: "NO_SIDE_EFFECTS" },
    { no: 2, name: "IDEMPOTENT" },
]);
/**
 * A message representing a option the parser does not recognize. This only
 * appears in options protos created by the compiler::Parser class.
 * DescriptorPool resolves these when building Descriptor objects. Therefore,
 * options protos in descriptor objects (e.g. returned by Descriptor::options(),
 * or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
 * in them.
 *
 * @generated from message google.protobuf.UninterpretedOption
 */
class UninterpretedOption extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.UninterpretedOption.NamePart name = 2;
         */
        this.name = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UninterpretedOption().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UninterpretedOption().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UninterpretedOption().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(UninterpretedOption, a, b);
    }
}
exports.UninterpretedOption = UninterpretedOption;
UninterpretedOption.runtime = proto2_js_1.proto2;
UninterpretedOption.typeName = "google.protobuf.UninterpretedOption";
UninterpretedOption.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 2, name: "name", kind: "message", T: UninterpretedOption_NamePart, repeated: true },
    { no: 3, name: "identifier_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "positive_int_value", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "negative_int_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 6, name: "double_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 7, name: "string_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 8, name: "aggregate_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * The name of the uninterpreted option.  Each string represents a segment in
 * a dot-separated name.  is_extension is true iff a segment represents an
 * extension (denoted with parentheses in options specs in .proto files).
 * E.g.,{ ["foo", false], ["bar.baz", true], ["moo", false] } represents
 * "foo.(bar.baz).moo".
 *
 * @generated from message google.protobuf.UninterpretedOption.NamePart
 */
class UninterpretedOption_NamePart extends message_js_1.Message {
    constructor(data) {
        super();
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UninterpretedOption_NamePart().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UninterpretedOption_NamePart().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UninterpretedOption_NamePart().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(UninterpretedOption_NamePart, a, b);
    }
}
exports.UninterpretedOption_NamePart = UninterpretedOption_NamePart;
UninterpretedOption_NamePart.runtime = proto2_js_1.proto2;
UninterpretedOption_NamePart.typeName = "google.protobuf.UninterpretedOption.NamePart";
UninterpretedOption_NamePart.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "name_part", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_extension", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Encapsulates information about the original source file from which a
 * FileDescriptorProto was generated.
 *
 * @generated from message google.protobuf.SourceCodeInfo
 */
class SourceCodeInfo extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * A Location identifies a piece of source code in a .proto file which
         * corresponds to a particular definition.  This information is intended
         * to be useful to IDEs, code indexers, documentation generators, and similar
         * tools.
         *
         * For example, say we have a file like:
         *   message Foo {
         *     optional string foo = 1;
         *   }
         * Let's look at just the field definition:
         *   optional string foo = 1;
         *   ^       ^^     ^^  ^  ^^^
         *   a       bc     de  f  ghi
         * We have the following locations:
         *   span   path               represents
         *   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
         *   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
         *   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
         *   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
         *   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
         *
         * Notes:
         * - A location may refer to a repeated field itself (i.e. not to any
         *   particular index within it).  This is used whenever a set of elements are
         *   logically enclosed in a single code segment.  For example, an entire
         *   extend block (possibly containing multiple extension definitions) will
         *   have an outer location whose path refers to the "extensions" repeated
         *   field without an index.
         * - Multiple locations may have the same path.  This happens when a single
         *   logical declaration is spread out across multiple places.  The most
         *   obvious example is the "extend" block again -- there may be multiple
         *   extend blocks in the same scope, each of which will have the same path.
         * - A location's span is not always a subset of its parent's span.  For
         *   example, the "extendee" of an extension declaration appears at the
         *   beginning of the "extend" block and is shared by all extensions within
         *   the block.
         * - Just because a location's span is a subset of some other location's span
         *   does not mean that it is a descendant.  For example, a "group" defines
         *   both a type and a field in a single declaration.  Thus, the locations
         *   corresponding to the type and field and their components will overlap.
         * - Code which tries to interpret locations should probably be designed to
         *   ignore those that it doesn't understand, as more types of locations could
         *   be recorded in the future.
         *
         * @generated from field: repeated google.protobuf.SourceCodeInfo.Location location = 1;
         */
        this.location = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SourceCodeInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SourceCodeInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SourceCodeInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(SourceCodeInfo, a, b);
    }
}
exports.SourceCodeInfo = SourceCodeInfo;
SourceCodeInfo.runtime = proto2_js_1.proto2;
SourceCodeInfo.typeName = "google.protobuf.SourceCodeInfo";
SourceCodeInfo.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "location", kind: "message", T: SourceCodeInfo_Location, repeated: true },
]);
/**
 * @generated from message google.protobuf.SourceCodeInfo.Location
 */
class SourceCodeInfo_Location extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Identifies which part of the FileDescriptorProto was defined at this
         * location.
         *
         * Each element is a field number or an index.  They form a path from
         * the root FileDescriptorProto to the place where the definition occurs.
         * For example, this path:
         *   [ 4, 3, 2, 7, 1 ]
         * refers to:
         *   file.message_type(3)  // 4, 3
         *       .field(7)         // 2, 7
         *       .name()           // 1
         * This is because FileDescriptorProto.message_type has field number 4:
         *   repeated DescriptorProto message_type = 4;
         * and DescriptorProto.field has field number 2:
         *   repeated FieldDescriptorProto field = 2;
         * and FieldDescriptorProto.name has field number 1:
         *   optional string name = 1;
         *
         * Thus, the above path gives the location of a field name.  If we removed
         * the last element:
         *   [ 4, 3, 2, 7 ]
         * this path refers to the whole field declaration (from the beginning
         * of the label to the terminating semicolon).
         *
         * @generated from field: repeated int32 path = 1 [packed = true];
         */
        this.path = [];
        /**
         * Always has exactly three or four elements: start line, start column,
         * end line (optional, otherwise assumed same as start line), end column.
         * These are packed into a single field for efficiency.  Note that line
         * and column numbers are zero-based -- typically you will want to add
         * 1 to each before displaying to a user.
         *
         * @generated from field: repeated int32 span = 2 [packed = true];
         */
        this.span = [];
        /**
         * @generated from field: repeated string leading_detached_comments = 6;
         */
        this.leadingDetachedComments = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SourceCodeInfo_Location().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SourceCodeInfo_Location().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SourceCodeInfo_Location().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(SourceCodeInfo_Location, a, b);
    }
}
exports.SourceCodeInfo_Location = SourceCodeInfo_Location;
SourceCodeInfo_Location.runtime = proto2_js_1.proto2;
SourceCodeInfo_Location.typeName = "google.protobuf.SourceCodeInfo.Location";
SourceCodeInfo_Location.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 2, name: "span", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 3, name: "leading_comments", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "trailing_comments", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "leading_detached_comments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * Describes the relationship between generated code and its original source
 * file. A GeneratedCodeInfo message is associated with only one generated
 * source file, but may contain references to different source .proto files.
 *
 * @generated from message google.protobuf.GeneratedCodeInfo
 */
class GeneratedCodeInfo extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * An Annotation connects some span of text in generated code to an element
         * of its generating .proto file.
         *
         * @generated from field: repeated google.protobuf.GeneratedCodeInfo.Annotation annotation = 1;
         */
        this.annotation = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeneratedCodeInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeneratedCodeInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeneratedCodeInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(GeneratedCodeInfo, a, b);
    }
}
exports.GeneratedCodeInfo = GeneratedCodeInfo;
GeneratedCodeInfo.runtime = proto2_js_1.proto2;
GeneratedCodeInfo.typeName = "google.protobuf.GeneratedCodeInfo";
GeneratedCodeInfo.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "annotation", kind: "message", T: GeneratedCodeInfo_Annotation, repeated: true },
]);
/**
 * @generated from message google.protobuf.GeneratedCodeInfo.Annotation
 */
class GeneratedCodeInfo_Annotation extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Identifies the element in the original source .proto file. This field
         * is formatted the same as SourceCodeInfo.Location.path.
         *
         * @generated from field: repeated int32 path = 1 [packed = true];
         */
        this.path = [];
        proto2_js_1.proto2.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeneratedCodeInfo_Annotation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeneratedCodeInfo_Annotation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeneratedCodeInfo_Annotation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto2_js_1.proto2.util.equals(GeneratedCodeInfo_Annotation, a, b);
    }
}
exports.GeneratedCodeInfo_Annotation = GeneratedCodeInfo_Annotation;
GeneratedCodeInfo_Annotation.runtime = proto2_js_1.proto2;
GeneratedCodeInfo_Annotation.typeName = "google.protobuf.GeneratedCodeInfo.Annotation";
GeneratedCodeInfo_Annotation.fields = proto2_js_1.proto2.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 2, name: "source_file", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "begin", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "semantic", kind: "enum", T: proto2_js_1.proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic), opt: true },
]);
/**
 * Represents the identified object's effect on the element in the original
 * .proto file.
 *
 * @generated from enum google.protobuf.GeneratedCodeInfo.Annotation.Semantic
 */
var GeneratedCodeInfo_Annotation_Semantic;
(function (GeneratedCodeInfo_Annotation_Semantic) {
    /**
     * There is no effect or the effect is indescribable.
     *
     * @generated from enum value: NONE = 0;
     */
    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic["NONE"] = 0] = "NONE";
    /**
     * The element is set or otherwise mutated.
     *
     * @generated from enum value: SET = 1;
     */
    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic["SET"] = 1] = "SET";
    /**
     * An alias to the element is returned.
     *
     * @generated from enum value: ALIAS = 2;
     */
    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic["ALIAS"] = 2] = "ALIAS";
})(GeneratedCodeInfo_Annotation_Semantic || (exports.GeneratedCodeInfo_Annotation_Semantic = GeneratedCodeInfo_Annotation_Semantic = {}));
// Retrieve enum metadata with: proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic)
proto2_js_1.proto2.util.setEnumType(GeneratedCodeInfo_Annotation_Semantic, "google.protobuf.GeneratedCodeInfo.Annotation.Semantic", [
    { no: 0, name: "NONE" },
    { no: 1, name: "SET" },
    { no: 2, name: "ALIAS" },
]);


/***/ }),

/***/ 2183:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Duration = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto_int64_js_1 = __nccwpck_require__(6865);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * A Duration represents a signed, fixed-length span of time represented
 * as a count of seconds and fractions of seconds at nanosecond
 * resolution. It is independent of any calendar and concepts like "day"
 * or "month". It is related to Timestamp in that the difference between
 * two Timestamp values is a Duration and it can be added or subtracted
 * from a Timestamp. Range is approximately +-10,000 years.
 *
 * # Examples
 *
 * Example 1: Compute Duration from two Timestamps in pseudo code.
 *
 *     Timestamp start = ...;
 *     Timestamp end = ...;
 *     Duration duration = ...;
 *
 *     duration.seconds = end.seconds - start.seconds;
 *     duration.nanos = end.nanos - start.nanos;
 *
 *     if (duration.seconds < 0 && duration.nanos > 0) {
 *       duration.seconds += 1;
 *       duration.nanos -= 1000000000;
 *     } else if (duration.seconds > 0 && duration.nanos < 0) {
 *       duration.seconds -= 1;
 *       duration.nanos += 1000000000;
 *     }
 *
 * Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.
 *
 *     Timestamp start = ...;
 *     Duration duration = ...;
 *     Timestamp end = ...;
 *
 *     end.seconds = start.seconds + duration.seconds;
 *     end.nanos = start.nanos + duration.nanos;
 *
 *     if (end.nanos < 0) {
 *       end.seconds -= 1;
 *       end.nanos += 1000000000;
 *     } else if (end.nanos >= 1000000000) {
 *       end.seconds += 1;
 *       end.nanos -= 1000000000;
 *     }
 *
 * Example 3: Compute Duration from datetime.timedelta in Python.
 *
 *     td = datetime.timedelta(days=3, minutes=10)
 *     duration = Duration()
 *     duration.FromTimedelta(td)
 *
 * # JSON Mapping
 *
 * In JSON format, the Duration type is encoded as a string rather than an
 * object, where the string ends in the suffix "s" (indicating seconds) and
 * is preceded by the number of seconds, with nanoseconds expressed as
 * fractional seconds. For example, 3 seconds with 0 nanoseconds should be
 * encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
 * be expressed in JSON format as "3.000000001s", and 3 seconds and 1
 * microsecond should be expressed in JSON format as "3.000001s".
 *
 *
 * @generated from message google.protobuf.Duration
 */
class Duration extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Signed seconds of the span of time. Must be from -315,576,000,000
         * to +315,576,000,000 inclusive. Note: these bounds are computed from:
         * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
         *
         * @generated from field: int64 seconds = 1;
         */
        this.seconds = proto_int64_js_1.protoInt64.zero;
        /**
         * Signed fractions of a second at nanosecond resolution of the span
         * of time. Durations less than one second are represented with a 0
         * `seconds` field and a positive or negative `nanos` field. For durations
         * of one second or more, a non-zero value for the `nanos` field must be
         * of the same sign as the `seconds` field. Must be from -999,999,999
         * to +999,999,999 inclusive.
         *
         * @generated from field: int32 nanos = 2;
         */
        this.nanos = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    fromJson(json, options) {
        if (typeof json !== "string") {
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        const match = json.match(/^(-?[0-9]+)(?:\.([0-9]+))?s/);
        if (match === null) {
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        const longSeconds = Number(match[1]);
        if (longSeconds > 315576000000 || longSeconds < -315576000000) {
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        this.seconds = proto_int64_js_1.protoInt64.parse(longSeconds);
        if (typeof match[2] == "string") {
            const nanosStr = match[2] + "0".repeat(9 - match[2].length);
            this.nanos = parseInt(nanosStr);
            if (longSeconds < 0 || Object.is(longSeconds, -0)) {
                this.nanos = -this.nanos;
            }
        }
        return this;
    }
    toJson(options) {
        if (Number(this.seconds) > 315576000000 || Number(this.seconds) < -315576000000) {
            throw new Error(`cannot encode google.protobuf.Duration to JSON: value out of range`);
        }
        let text = this.seconds.toString();
        if (this.nanos !== 0) {
            let nanosStr = Math.abs(this.nanos).toString();
            nanosStr = "0".repeat(9 - nanosStr.length) + nanosStr;
            if (nanosStr.substring(3) === "000000") {
                nanosStr = nanosStr.substring(0, 3);
            }
            else if (nanosStr.substring(6) === "000") {
                nanosStr = nanosStr.substring(0, 6);
            }
            text += "." + nanosStr;
            if (this.nanos < 0 && this.seconds === proto_int64_js_1.protoInt64.zero) {
                text = "-" + text;
            }
        }
        return text + "s";
    }
    static fromBinary(bytes, options) {
        return new Duration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Duration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Duration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Duration, a, b);
    }
}
exports.Duration = Duration;
Duration.runtime = proto3_js_1.proto3;
Duration.typeName = "google.protobuf.Duration";
Duration.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "nanos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);


/***/ }),

/***/ 4261:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Empty = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * A generic empty message that you can re-use to avoid defining duplicated
 * empty messages in your APIs. A typical example is to use it as the request
 * or the response type of an API method. For instance:
 *
 *     service Foo {
 *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *     }
 *
 *
 * @generated from message google.protobuf.Empty
 */
class Empty extends message_js_1.Message {
    constructor(data) {
        super();
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Empty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Empty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Empty().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Empty, a, b);
    }
}
exports.Empty = Empty;
Empty.runtime = proto3_js_1.proto3;
Empty.typeName = "google.protobuf.Empty";
Empty.fields = proto3_js_1.proto3.util.newFieldList(() => []);


/***/ }),

/***/ 8080:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldMask = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * `FieldMask` represents a set of symbolic field paths, for example:
 *
 *     paths: "f.a"
 *     paths: "f.b.d"
 *
 * Here `f` represents a field in some root message, `a` and `b`
 * fields in the message found in `f`, and `d` a field found in the
 * message in `f.b`.
 *
 * Field masks are used to specify a subset of fields that should be
 * returned by a get operation or modified by an update operation.
 * Field masks also have a custom JSON encoding (see below).
 *
 * # Field Masks in Projections
 *
 * When used in the context of a projection, a response message or
 * sub-message is filtered by the API to only contain those fields as
 * specified in the mask. For example, if the mask in the previous
 * example is applied to a response message as follows:
 *
 *     f {
 *       a : 22
 *       b {
 *         d : 1
 *         x : 2
 *       }
 *       y : 13
 *     }
 *     z: 8
 *
 * The result will not contain specific values for fields x,y and z
 * (their value will be set to the default, and omitted in proto text
 * output):
 *
 *
 *     f {
 *       a : 22
 *       b {
 *         d : 1
 *       }
 *     }
 *
 * A repeated field is not allowed except at the last position of a
 * paths string.
 *
 * If a FieldMask object is not present in a get operation, the
 * operation applies to all fields (as if a FieldMask of all fields
 * had been specified).
 *
 * Note that a field mask does not necessarily apply to the
 * top-level response message. In case of a REST get operation, the
 * field mask applies directly to the response, but in case of a REST
 * list operation, the mask instead applies to each individual message
 * in the returned resource list. In case of a REST custom method,
 * other definitions may be used. Where the mask applies will be
 * clearly documented together with its declaration in the API.  In
 * any case, the effect on the returned resource/resources is required
 * behavior for APIs.
 *
 * # Field Masks in Update Operations
 *
 * A field mask in update operations specifies which fields of the
 * targeted resource are going to be updated. The API is required
 * to only change the values of the fields as specified in the mask
 * and leave the others untouched. If a resource is passed in to
 * describe the updated values, the API ignores the values of all
 * fields not covered by the mask.
 *
 * If a repeated field is specified for an update operation, new values will
 * be appended to the existing repeated field in the target resource. Note that
 * a repeated field is only allowed in the last position of a `paths` string.
 *
 * If a sub-message is specified in the last position of the field mask for an
 * update operation, then new value will be merged into the existing sub-message
 * in the target resource.
 *
 * For example, given the target message:
 *
 *     f {
 *       b {
 *         d: 1
 *         x: 2
 *       }
 *       c: [1]
 *     }
 *
 * And an update message:
 *
 *     f {
 *       b {
 *         d: 10
 *       }
 *       c: [2]
 *     }
 *
 * then if the field mask is:
 *
 *  paths: ["f.b", "f.c"]
 *
 * then the result will be:
 *
 *     f {
 *       b {
 *         d: 10
 *         x: 2
 *       }
 *       c: [1, 2]
 *     }
 *
 * An implementation may provide options to override this default behavior for
 * repeated and message fields.
 *
 * In order to reset a field's value to the default, the field must
 * be in the mask and set to the default value in the provided resource.
 * Hence, in order to reset all fields of a resource, provide a default
 * instance of the resource and set all fields in the mask, or do
 * not provide a mask as described below.
 *
 * If a field mask is not present on update, the operation applies to
 * all fields (as if a field mask of all fields has been specified).
 * Note that in the presence of schema evolution, this may mean that
 * fields the client does not know and has therefore not filled into
 * the request will be reset to their default. If this is unwanted
 * behavior, a specific service may require a client to always specify
 * a field mask, producing an error if not.
 *
 * As with get operations, the location of the resource which
 * describes the updated values in the request message depends on the
 * operation kind. In any case, the effect of the field mask is
 * required to be honored by the API.
 *
 * ## Considerations for HTTP REST
 *
 * The HTTP kind of an update operation which uses a field mask must
 * be set to PATCH instead of PUT in order to satisfy HTTP semantics
 * (PUT must only be used for full updates).
 *
 * # JSON Encoding of Field Masks
 *
 * In JSON, a field mask is encoded as a single string where paths are
 * separated by a comma. Fields name in each path are converted
 * to/from lower-camel naming conventions.
 *
 * As an example, consider the following message declarations:
 *
 *     message Profile {
 *       User user = 1;
 *       Photo photo = 2;
 *     }
 *     message User {
 *       string display_name = 1;
 *       string address = 2;
 *     }
 *
 * In proto a field mask for `Profile` may look as such:
 *
 *     mask {
 *       paths: "user.display_name"
 *       paths: "photo"
 *     }
 *
 * In JSON, the same mask is represented as below:
 *
 *     {
 *       mask: "user.displayName,photo"
 *     }
 *
 * # Field Masks and Oneof Fields
 *
 * Field masks treat fields in oneofs just as regular fields. Consider the
 * following message:
 *
 *     message SampleMessage {
 *       oneof test_oneof {
 *         string name = 4;
 *         SubMessage sub_message = 9;
 *       }
 *     }
 *
 * The field mask can be:
 *
 *     mask {
 *       paths: "name"
 *     }
 *
 * Or:
 *
 *     mask {
 *       paths: "sub_message"
 *     }
 *
 * Note that oneof type names ("test_oneof" in this case) cannot be used in
 * paths.
 *
 * ## Field Mask Verification
 *
 * The implementation of any API method which has a FieldMask type field in the
 * request should verify the included field paths, and return an
 * `INVALID_ARGUMENT` error if any path is unmappable.
 *
 * @generated from message google.protobuf.FieldMask
 */
class FieldMask extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The set of field mask paths.
         *
         * @generated from field: repeated string paths = 1;
         */
        this.paths = [];
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        // Converts snake_case to protoCamelCase according to the convention
        // used by protoc to convert a field name to a JSON name.
        function protoCamelCase(snakeCase) {
            let capNext = false;
            const b = [];
            for (let i = 0; i < snakeCase.length; i++) {
                let c = snakeCase.charAt(i);
                switch (c) {
                    case '_':
                        capNext = true;
                        break;
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                        b.push(c);
                        capNext = false;
                        break;
                    default:
                        if (capNext) {
                            capNext = false;
                            c = c.toUpperCase();
                        }
                        b.push(c);
                        break;
                }
            }
            return b.join('');
        }
        return this.paths.map(p => {
            if (p.match(/_[0-9]?_/g) || p.match(/[A-Z]/g)) {
                throw new Error("cannot encode google.protobuf.FieldMask to JSON: lowerCamelCase of path name \"" + p + "\" is irreversible");
            }
            return protoCamelCase(p);
        }).join(",");
    }
    fromJson(json, options) {
        if (typeof json !== "string") {
            throw new Error("cannot decode google.protobuf.FieldMask from JSON: " + proto3_js_1.proto3.json.debug(json));
        }
        if (json === "") {
            return this;
        }
        function camelToSnake(str) {
            if (str.includes("_")) {
                throw new Error("cannot decode google.protobuf.FieldMask from JSON: path names must be lowerCamelCase");
            }
            const sc = str.replace(/[A-Z]/g, letter => "_" + letter.toLowerCase());
            return (sc[0] === "_") ? sc.substring(1) : sc;
        }
        this.paths = json.split(",").map(camelToSnake);
        return this;
    }
    static fromBinary(bytes, options) {
        return new FieldMask().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FieldMask().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FieldMask().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(FieldMask, a, b);
    }
}
exports.FieldMask = FieldMask;
FieldMask.runtime = proto3_js_1.proto3;
FieldMask.typeName = "google.protobuf.FieldMask";
FieldMask.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);


/***/ }),

/***/ 1280:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SourceContext = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * `SourceContext` represents information about the source of a
 * protobuf element, like the file in which it is defined.
 *
 * @generated from message google.protobuf.SourceContext
 */
class SourceContext extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The path-qualified name of the .proto file that contained the associated
         * protobuf element.  For example: `"google/protobuf/source_context.proto"`.
         *
         * @generated from field: string file_name = 1;
         */
        this.fileName = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SourceContext().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SourceContext().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SourceContext().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(SourceContext, a, b);
    }
}
exports.SourceContext = SourceContext;
SourceContext.runtime = proto3_js_1.proto3;
SourceContext.typeName = "google.protobuf.SourceContext";
SourceContext.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);


/***/ }),

/***/ 6400:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListValue = exports.Value = exports.Struct = exports.NullValue = void 0;
// @generated by protoc-gen-es v1.3.0 with parameter "bootstrap_wkt=true,ts_nocheck=false,target=ts"
// @generated from file google/protobuf/struct.proto (package google.protobuf, syntax proto3)
/* eslint-disable */
const proto3_js_1 = __nccwpck_require__(9947);
const message_js_1 = __nccwpck_require__(2779);
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 *
 * @generated from enum google.protobuf.NullValue
 */
var NullValue;
(function (NullValue) {
    /**
     * Null value.
     *
     * @generated from enum value: NULL_VALUE = 0;
     */
    NullValue[NullValue["NULL_VALUE"] = 0] = "NULL_VALUE";
})(NullValue || (exports.NullValue = NullValue = {}));
// Retrieve enum metadata with: proto3.getEnumType(NullValue)
proto3_js_1.proto3.util.setEnumType(NullValue, "google.protobuf.NullValue", [
    { no: 0, name: "NULL_VALUE" },
]);
/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 *
 * @generated from message google.protobuf.Struct
 */
class Struct extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Unordered map of dynamically typed values.
         *
         * @generated from field: map<string, google.protobuf.Value> fields = 1;
         */
        this.fields = {};
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        const json = {};
        for (const [k, v] of Object.entries(this.fields)) {
            json[k] = v.toJson(options);
        }
        return json;
    }
    fromJson(json, options) {
        if (typeof json != "object" || json == null || Array.isArray(json)) {
            throw new Error("cannot decode google.protobuf.Struct from JSON " + proto3_js_1.proto3.json.debug(json));
        }
        for (const [k, v] of Object.entries(json)) {
            this.fields[k] = Value.fromJson(v);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Struct().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Struct().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Struct().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Struct, a, b);
    }
}
exports.Struct = Struct;
Struct.runtime = proto3_js_1.proto3;
Struct.typeName = "google.protobuf.Struct";
Struct.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Value } },
]);
/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of these
 * variants. Absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 *
 * @generated from message google.protobuf.Value
 */
class Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The kind of value.
         *
         * @generated from oneof google.protobuf.Value.kind
         */
        this.kind = { case: undefined };
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        switch (this.kind.case) {
            case "nullValue":
                return null;
            case "numberValue":
                if (!Number.isFinite(this.kind.value)) {
                    throw new Error("google.protobuf.Value cannot be NaN or Infinity");
                }
                return this.kind.value;
            case "boolValue":
                return this.kind.value;
            case "stringValue":
                return this.kind.value;
            case "structValue":
            case "listValue":
                return this.kind.value.toJson(Object.assign(Object.assign({}, options), { emitDefaultValues: true }));
        }
        throw new Error("google.protobuf.Value must have a value");
    }
    fromJson(json, options) {
        switch (typeof json) {
            case "number":
                this.kind = { case: "numberValue", value: json };
                break;
            case "string":
                this.kind = { case: "stringValue", value: json };
                break;
            case "boolean":
                this.kind = { case: "boolValue", value: json };
                break;
            case "object":
                if (json === null) {
                    this.kind = { case: "nullValue", value: NullValue.NULL_VALUE };
                }
                else if (Array.isArray(json)) {
                    this.kind = { case: "listValue", value: ListValue.fromJson(json) };
                }
                else {
                    this.kind = { case: "structValue", value: Struct.fromJson(json) };
                }
                break;
            default:
                throw new Error("cannot decode google.protobuf.Value from JSON " + proto3_js_1.proto3.json.debug(json));
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Value, a, b);
    }
}
exports.Value = Value;
Value.runtime = proto3_js_1.proto3;
Value.typeName = "google.protobuf.Value";
Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "null_value", kind: "enum", T: proto3_js_1.proto3.getEnumType(NullValue), oneof: "kind" },
    { no: 2, name: "number_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "kind" },
    { no: 3, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 4, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "kind" },
    { no: 5, name: "struct_value", kind: "message", T: Struct, oneof: "kind" },
    { no: 6, name: "list_value", kind: "message", T: ListValue, oneof: "kind" },
]);
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 *
 * @generated from message google.protobuf.ListValue
 */
class ListValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Repeated field of dynamically typed values.
         *
         * @generated from field: repeated google.protobuf.Value values = 1;
         */
        this.values = [];
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return this.values.map(v => v.toJson());
    }
    fromJson(json, options) {
        if (!Array.isArray(json)) {
            throw new Error("cannot decode google.protobuf.ListValue from JSON " + proto3_js_1.proto3.json.debug(json));
        }
        for (let e of json) {
            this.values.push(Value.fromJson(e));
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new ListValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(ListValue, a, b);
    }
}
exports.ListValue = ListValue;
ListValue.runtime = proto3_js_1.proto3;
ListValue.typeName = "google.protobuf.ListValue";
ListValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: Value, repeated: true },
]);


/***/ }),

/***/ 7974:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Timestamp = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto_int64_js_1 = __nccwpck_require__(6865);
const proto3_js_1 = __nccwpck_require__(9947);
/**
 * A Timestamp represents a point in time independent of any time zone or local
 * calendar, encoded as a count of seconds and fractions of seconds at
 * nanosecond resolution. The count is relative to an epoch at UTC midnight on
 * January 1, 1970, in the proleptic Gregorian calendar which extends the
 * Gregorian calendar backwards to year one.
 *
 * All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 * second table is needed for interpretation, using a [24-hour linear
 * smear](https://developers.google.com/time/smear).
 *
 * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 * restricting to that range, we ensure that we can convert to and from [RFC
 * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 *
 * # Examples
 *
 * Example 1: Compute Timestamp from POSIX `time()`.
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(time(NULL));
 *     timestamp.set_nanos(0);
 *
 * Example 2: Compute Timestamp from POSIX `gettimeofday()`.
 *
 *     struct timeval tv;
 *     gettimeofday(&tv, NULL);
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(tv.tv_sec);
 *     timestamp.set_nanos(tv.tv_usec * 1000);
 *
 * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
 *
 *     FILETIME ft;
 *     GetSystemTimeAsFileTime(&ft);
 *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
 *
 *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
 *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
 *     Timestamp timestamp;
 *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
 *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
 *
 * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
 *
 *     long millis = System.currentTimeMillis();
 *
 *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
 *         .setNanos((int) ((millis % 1000) * 1000000)).build();
 *
 * Example 5: Compute Timestamp from Java `Instant.now()`.
 *
 *     Instant now = Instant.now();
 *
 *     Timestamp timestamp =
 *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())
 *             .setNanos(now.getNano()).build();
 *
 * Example 6: Compute Timestamp from current time in Python.
 *
 *     timestamp = Timestamp()
 *     timestamp.GetCurrentTime()
 *
 * # JSON Mapping
 *
 * In JSON format, the Timestamp type is encoded as a string in the
 * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 * format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 * where {year} is always expressed using four digits while {month}, {day},
 * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 * are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 * is required. A proto3 JSON serializer should always use UTC (as indicated by
 * "Z") when printing the Timestamp type and a proto3 JSON parser should be
 * able to accept both UTC and other timezones (as indicated by an offset).
 *
 * For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 * 01:30 UTC on January 15, 2017.
 *
 * In JavaScript, one can convert a Date object to this format using the
 * standard
 * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 * method. In Python, a standard `datetime.datetime` object can be converted
 * to this format using
 * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 * the Joda Time's [`ISODateTimeFormat.dateTime()`](
 * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
 * ) to obtain a formatter capable of generating timestamps in this format.
 *
 *
 * @generated from message google.protobuf.Timestamp
 */
class Timestamp extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Represents seconds of UTC time since Unix epoch
         * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         * 9999-12-31T23:59:59Z inclusive.
         *
         * @generated from field: int64 seconds = 1;
         */
        this.seconds = proto_int64_js_1.protoInt64.zero;
        /**
         * Non-negative fractions of a second at nanosecond resolution. Negative
         * second values with fractions must still have non-negative nanos values
         * that count forward in time. Must be from 0 to 999,999,999
         * inclusive.
         *
         * @generated from field: int32 nanos = 2;
         */
        this.nanos = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    fromJson(json, options) {
        if (typeof json !== "string") {
            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${proto3_js_1.proto3.json.debug(json)}`);
        }
        const matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
        if (!matches) {
            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);
        }
        const ms = Date.parse(matches[1] + "-" + matches[2] + "-" + matches[3] + "T" + matches[4] + ":" + matches[5] + ":" + matches[6] + (matches[8] ? matches[8] : "Z"));
        if (Number.isNaN(ms)) {
            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);
        }
        if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z")) {
            throw new Error(`cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);
        }
        this.seconds = proto_int64_js_1.protoInt64.parse(ms / 1000);
        this.nanos = 0;
        if (matches[7]) {
            this.nanos = (parseInt("1" + matches[7] + "0".repeat(9 - matches[7].length)) - 1000000000);
        }
        return this;
    }
    toJson(options) {
        const ms = Number(this.seconds) * 1000;
        if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z")) {
            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);
        }
        if (this.nanos < 0) {
            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative`);
        }
        let z = "Z";
        if (this.nanos > 0) {
            const nanosStr = (this.nanos + 1000000000).toString().substring(1);
            if (nanosStr.substring(3) === "000000") {
                z = "." + nanosStr.substring(0, 3) + "Z";
            }
            else if (nanosStr.substring(6) === "000") {
                z = "." + nanosStr.substring(0, 6) + "Z";
            }
            else {
                z = "." + nanosStr + "Z";
            }
        }
        return new Date(ms).toISOString().replace(".000Z", z);
    }
    toDate() {
        return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));
    }
    static now() {
        return Timestamp.fromDate(new Date());
    }
    static fromDate(date) {
        const ms = date.getTime();
        return new Timestamp({
            seconds: proto_int64_js_1.protoInt64.parse(Math.floor(ms / 1000)),
            nanos: (ms % 1000) * 1000000,
        });
    }
    static fromBinary(bytes, options) {
        return new Timestamp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Timestamp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Timestamp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Timestamp, a, b);
    }
}
exports.Timestamp = Timestamp;
Timestamp.runtime = proto3_js_1.proto3;
Timestamp.typeName = "google.protobuf.Timestamp";
Timestamp.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "seconds", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "nanos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);


/***/ }),

/***/ 3672:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Option = exports.EnumValue = exports.Enum = exports.Field_Cardinality = exports.Field_Kind = exports.Field = exports.Type = exports.Syntax = void 0;
// @generated by protoc-gen-es v1.3.0 with parameter "bootstrap_wkt=true,ts_nocheck=false,target=ts"
// @generated from file google/protobuf/type.proto (package google.protobuf, syntax proto3)
/* eslint-disable */
const proto3_js_1 = __nccwpck_require__(9947);
const message_js_1 = __nccwpck_require__(2779);
const source_context_pb_js_1 = __nccwpck_require__(1280);
const any_pb_js_1 = __nccwpck_require__(8466);
/**
 * The syntax in which a protocol buffer element is defined.
 *
 * @generated from enum google.protobuf.Syntax
 */
var Syntax;
(function (Syntax) {
    /**
     * Syntax `proto2`.
     *
     * @generated from enum value: SYNTAX_PROTO2 = 0;
     */
    Syntax[Syntax["PROTO2"] = 0] = "PROTO2";
    /**
     * Syntax `proto3`.
     *
     * @generated from enum value: SYNTAX_PROTO3 = 1;
     */
    Syntax[Syntax["PROTO3"] = 1] = "PROTO3";
    /**
     * Syntax `editions`.
     *
     * @generated from enum value: SYNTAX_EDITIONS = 2;
     */
    Syntax[Syntax["EDITIONS"] = 2] = "EDITIONS";
})(Syntax || (exports.Syntax = Syntax = {}));
// Retrieve enum metadata with: proto3.getEnumType(Syntax)
proto3_js_1.proto3.util.setEnumType(Syntax, "google.protobuf.Syntax", [
    { no: 0, name: "SYNTAX_PROTO2" },
    { no: 1, name: "SYNTAX_PROTO3" },
    { no: 2, name: "SYNTAX_EDITIONS" },
]);
/**
 * A protocol buffer message type.
 *
 * @generated from message google.protobuf.Type
 */
class Type extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The fully qualified message name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The list of fields.
         *
         * @generated from field: repeated google.protobuf.Field fields = 2;
         */
        this.fields = [];
        /**
         * The list of types appearing in `oneof` definitions in this type.
         *
         * @generated from field: repeated string oneofs = 3;
         */
        this.oneofs = [];
        /**
         * The protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 4;
         */
        this.options = [];
        /**
         * The source syntax.
         *
         * @generated from field: google.protobuf.Syntax syntax = 6;
         */
        this.syntax = Syntax.PROTO2;
        /**
         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.
         *
         * @generated from field: string edition = 7;
         */
        this.edition = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Type().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Type().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Type().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Type, a, b);
    }
}
exports.Type = Type;
Type.runtime = proto3_js_1.proto3;
Type.typeName = "google.protobuf.Type";
Type.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fields", kind: "message", T: Field, repeated: true },
    { no: 3, name: "oneofs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "options", kind: "message", T: Option, repeated: true },
    { no: 5, name: "source_context", kind: "message", T: source_context_pb_js_1.SourceContext },
    { no: 6, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(Syntax) },
    { no: 7, name: "edition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * A single field of a message type.
 *
 * @generated from message google.protobuf.Field
 */
class Field extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The field type.
         *
         * @generated from field: google.protobuf.Field.Kind kind = 1;
         */
        this.kind = Field_Kind.TYPE_UNKNOWN;
        /**
         * The field cardinality.
         *
         * @generated from field: google.protobuf.Field.Cardinality cardinality = 2;
         */
        this.cardinality = Field_Cardinality.UNKNOWN;
        /**
         * The field number.
         *
         * @generated from field: int32 number = 3;
         */
        this.number = 0;
        /**
         * The field name.
         *
         * @generated from field: string name = 4;
         */
        this.name = "";
        /**
         * The field type URL, without the scheme, for message or enumeration
         * types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
         *
         * @generated from field: string type_url = 6;
         */
        this.typeUrl = "";
        /**
         * The index of the field type in `Type.oneofs`, for message or enumeration
         * types. The first type has index 1; zero means the type is not in the list.
         *
         * @generated from field: int32 oneof_index = 7;
         */
        this.oneofIndex = 0;
        /**
         * Whether to use alternative packed wire representation.
         *
         * @generated from field: bool packed = 8;
         */
        this.packed = false;
        /**
         * The protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 9;
         */
        this.options = [];
        /**
         * The field JSON name.
         *
         * @generated from field: string json_name = 10;
         */
        this.jsonName = "";
        /**
         * The string value of the default value of this field. Proto2 syntax only.
         *
         * @generated from field: string default_value = 11;
         */
        this.defaultValue = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Field().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Field().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Field().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Field, a, b);
    }
}
exports.Field = Field;
Field.runtime = proto3_js_1.proto3;
Field.typeName = "google.protobuf.Field";
Field.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3_js_1.proto3.getEnumType(Field_Kind) },
    { no: 2, name: "cardinality", kind: "enum", T: proto3_js_1.proto3.getEnumType(Field_Cardinality) },
    { no: 3, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "oneof_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "packed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "options", kind: "message", T: Option, repeated: true },
    { no: 10, name: "json_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Basic field types.
 *
 * @generated from enum google.protobuf.Field.Kind
 */
var Field_Kind;
(function (Field_Kind) {
    /**
     * Field type unknown.
     *
     * @generated from enum value: TYPE_UNKNOWN = 0;
     */
    Field_Kind[Field_Kind["TYPE_UNKNOWN"] = 0] = "TYPE_UNKNOWN";
    /**
     * Field type double.
     *
     * @generated from enum value: TYPE_DOUBLE = 1;
     */
    Field_Kind[Field_Kind["TYPE_DOUBLE"] = 1] = "TYPE_DOUBLE";
    /**
     * Field type float.
     *
     * @generated from enum value: TYPE_FLOAT = 2;
     */
    Field_Kind[Field_Kind["TYPE_FLOAT"] = 2] = "TYPE_FLOAT";
    /**
     * Field type int64.
     *
     * @generated from enum value: TYPE_INT64 = 3;
     */
    Field_Kind[Field_Kind["TYPE_INT64"] = 3] = "TYPE_INT64";
    /**
     * Field type uint64.
     *
     * @generated from enum value: TYPE_UINT64 = 4;
     */
    Field_Kind[Field_Kind["TYPE_UINT64"] = 4] = "TYPE_UINT64";
    /**
     * Field type int32.
     *
     * @generated from enum value: TYPE_INT32 = 5;
     */
    Field_Kind[Field_Kind["TYPE_INT32"] = 5] = "TYPE_INT32";
    /**
     * Field type fixed64.
     *
     * @generated from enum value: TYPE_FIXED64 = 6;
     */
    Field_Kind[Field_Kind["TYPE_FIXED64"] = 6] = "TYPE_FIXED64";
    /**
     * Field type fixed32.
     *
     * @generated from enum value: TYPE_FIXED32 = 7;
     */
    Field_Kind[Field_Kind["TYPE_FIXED32"] = 7] = "TYPE_FIXED32";
    /**
     * Field type bool.
     *
     * @generated from enum value: TYPE_BOOL = 8;
     */
    Field_Kind[Field_Kind["TYPE_BOOL"] = 8] = "TYPE_BOOL";
    /**
     * Field type string.
     *
     * @generated from enum value: TYPE_STRING = 9;
     */
    Field_Kind[Field_Kind["TYPE_STRING"] = 9] = "TYPE_STRING";
    /**
     * Field type group. Proto2 syntax only, and deprecated.
     *
     * @generated from enum value: TYPE_GROUP = 10;
     */
    Field_Kind[Field_Kind["TYPE_GROUP"] = 10] = "TYPE_GROUP";
    /**
     * Field type message.
     *
     * @generated from enum value: TYPE_MESSAGE = 11;
     */
    Field_Kind[Field_Kind["TYPE_MESSAGE"] = 11] = "TYPE_MESSAGE";
    /**
     * Field type bytes.
     *
     * @generated from enum value: TYPE_BYTES = 12;
     */
    Field_Kind[Field_Kind["TYPE_BYTES"] = 12] = "TYPE_BYTES";
    /**
     * Field type uint32.
     *
     * @generated from enum value: TYPE_UINT32 = 13;
     */
    Field_Kind[Field_Kind["TYPE_UINT32"] = 13] = "TYPE_UINT32";
    /**
     * Field type enum.
     *
     * @generated from enum value: TYPE_ENUM = 14;
     */
    Field_Kind[Field_Kind["TYPE_ENUM"] = 14] = "TYPE_ENUM";
    /**
     * Field type sfixed32.
     *
     * @generated from enum value: TYPE_SFIXED32 = 15;
     */
    Field_Kind[Field_Kind["TYPE_SFIXED32"] = 15] = "TYPE_SFIXED32";
    /**
     * Field type sfixed64.
     *
     * @generated from enum value: TYPE_SFIXED64 = 16;
     */
    Field_Kind[Field_Kind["TYPE_SFIXED64"] = 16] = "TYPE_SFIXED64";
    /**
     * Field type sint32.
     *
     * @generated from enum value: TYPE_SINT32 = 17;
     */
    Field_Kind[Field_Kind["TYPE_SINT32"] = 17] = "TYPE_SINT32";
    /**
     * Field type sint64.
     *
     * @generated from enum value: TYPE_SINT64 = 18;
     */
    Field_Kind[Field_Kind["TYPE_SINT64"] = 18] = "TYPE_SINT64";
})(Field_Kind || (exports.Field_Kind = Field_Kind = {}));
// Retrieve enum metadata with: proto3.getEnumType(Field_Kind)
proto3_js_1.proto3.util.setEnumType(Field_Kind, "google.protobuf.Field.Kind", [
    { no: 0, name: "TYPE_UNKNOWN" },
    { no: 1, name: "TYPE_DOUBLE" },
    { no: 2, name: "TYPE_FLOAT" },
    { no: 3, name: "TYPE_INT64" },
    { no: 4, name: "TYPE_UINT64" },
    { no: 5, name: "TYPE_INT32" },
    { no: 6, name: "TYPE_FIXED64" },
    { no: 7, name: "TYPE_FIXED32" },
    { no: 8, name: "TYPE_BOOL" },
    { no: 9, name: "TYPE_STRING" },
    { no: 10, name: "TYPE_GROUP" },
    { no: 11, name: "TYPE_MESSAGE" },
    { no: 12, name: "TYPE_BYTES" },
    { no: 13, name: "TYPE_UINT32" },
    { no: 14, name: "TYPE_ENUM" },
    { no: 15, name: "TYPE_SFIXED32" },
    { no: 16, name: "TYPE_SFIXED64" },
    { no: 17, name: "TYPE_SINT32" },
    { no: 18, name: "TYPE_SINT64" },
]);
/**
 * Whether a field is optional, required, or repeated.
 *
 * @generated from enum google.protobuf.Field.Cardinality
 */
var Field_Cardinality;
(function (Field_Cardinality) {
    /**
     * For fields with unknown cardinality.
     *
     * @generated from enum value: CARDINALITY_UNKNOWN = 0;
     */
    Field_Cardinality[Field_Cardinality["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * For optional fields.
     *
     * @generated from enum value: CARDINALITY_OPTIONAL = 1;
     */
    Field_Cardinality[Field_Cardinality["OPTIONAL"] = 1] = "OPTIONAL";
    /**
     * For required fields. Proto2 syntax only.
     *
     * @generated from enum value: CARDINALITY_REQUIRED = 2;
     */
    Field_Cardinality[Field_Cardinality["REQUIRED"] = 2] = "REQUIRED";
    /**
     * For repeated fields.
     *
     * @generated from enum value: CARDINALITY_REPEATED = 3;
     */
    Field_Cardinality[Field_Cardinality["REPEATED"] = 3] = "REPEATED";
})(Field_Cardinality || (exports.Field_Cardinality = Field_Cardinality = {}));
// Retrieve enum metadata with: proto3.getEnumType(Field_Cardinality)
proto3_js_1.proto3.util.setEnumType(Field_Cardinality, "google.protobuf.Field.Cardinality", [
    { no: 0, name: "CARDINALITY_UNKNOWN" },
    { no: 1, name: "CARDINALITY_OPTIONAL" },
    { no: 2, name: "CARDINALITY_REQUIRED" },
    { no: 3, name: "CARDINALITY_REPEATED" },
]);
/**
 * Enum type definition.
 *
 * @generated from message google.protobuf.Enum
 */
class Enum extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Enum type name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Enum value definitions.
         *
         * @generated from field: repeated google.protobuf.EnumValue enumvalue = 2;
         */
        this.enumvalue = [];
        /**
         * Protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 3;
         */
        this.options = [];
        /**
         * The source syntax.
         *
         * @generated from field: google.protobuf.Syntax syntax = 5;
         */
        this.syntax = Syntax.PROTO2;
        /**
         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.
         *
         * @generated from field: string edition = 6;
         */
        this.edition = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Enum().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Enum().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Enum().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Enum, a, b);
    }
}
exports.Enum = Enum;
Enum.runtime = proto3_js_1.proto3;
Enum.typeName = "google.protobuf.Enum";
Enum.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enumvalue", kind: "message", T: EnumValue, repeated: true },
    { no: 3, name: "options", kind: "message", T: Option, repeated: true },
    { no: 4, name: "source_context", kind: "message", T: source_context_pb_js_1.SourceContext },
    { no: 5, name: "syntax", kind: "enum", T: proto3_js_1.proto3.getEnumType(Syntax) },
    { no: 6, name: "edition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Enum value definition.
 *
 * @generated from message google.protobuf.EnumValue
 */
class EnumValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * Enum value name.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * Enum value number.
         *
         * @generated from field: int32 number = 2;
         */
        this.number = 0;
        /**
         * Protocol buffer options.
         *
         * @generated from field: repeated google.protobuf.Option options = 3;
         */
        this.options = [];
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EnumValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EnumValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EnumValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(EnumValue, a, b);
    }
}
exports.EnumValue = EnumValue;
EnumValue.runtime = proto3_js_1.proto3;
EnumValue.typeName = "google.protobuf.EnumValue";
EnumValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "options", kind: "message", T: Option, repeated: true },
]);
/**
 * A protocol buffer option, which can be attached to a message, field,
 * enumeration, etc.
 *
 * @generated from message google.protobuf.Option
 */
class Option extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The option's name. For protobuf built-in options (options defined in
         * descriptor.proto), this is the short name. For example, `"map_entry"`.
         * For custom options, it should be the fully-qualified name. For example,
         * `"google.api.http"`.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Option().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Option().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Option().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Option, a, b);
    }
}
exports.Option = Option;
Option.runtime = proto3_js_1.proto3;
Option.typeName = "google.protobuf.Option";
Option.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: any_pb_js_1.Any },
]);


/***/ }),

/***/ 7854:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BytesValue = exports.StringValue = exports.BoolValue = exports.UInt32Value = exports.Int32Value = exports.UInt64Value = exports.Int64Value = exports.FloatValue = exports.DoubleValue = void 0;
const message_js_1 = __nccwpck_require__(2779);
const proto3_js_1 = __nccwpck_require__(9947);
const field_js_1 = __nccwpck_require__(4756);
const proto_int64_js_1 = __nccwpck_require__(6865);
/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 *
 * @generated from message google.protobuf.DoubleValue
 */
class DoubleValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The double value.
         *
         * @generated from field: double value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.DOUBLE, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.DOUBLE, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.DoubleValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new DoubleValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DoubleValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DoubleValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(DoubleValue, a, b);
    }
}
exports.DoubleValue = DoubleValue;
DoubleValue.runtime = proto3_js_1.proto3;
DoubleValue.typeName = "google.protobuf.DoubleValue";
DoubleValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
DoubleValue.fieldWrapper = {
    wrapField(value) {
        return new DoubleValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 *
 * @generated from message google.protobuf.FloatValue
 */
class FloatValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The float value.
         *
         * @generated from field: float value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.FLOAT, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.FLOAT, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.FloatValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new FloatValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FloatValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FloatValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(FloatValue, a, b);
    }
}
exports.FloatValue = FloatValue;
FloatValue.runtime = proto3_js_1.proto3;
FloatValue.typeName = "google.protobuf.FloatValue";
FloatValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
]);
FloatValue.fieldWrapper = {
    wrapField(value) {
        return new FloatValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 *
 * @generated from message google.protobuf.Int64Value
 */
class Int64Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The int64 value.
         *
         * @generated from field: int64 value = 1;
         */
        this.value = proto_int64_js_1.protoInt64.zero;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.INT64, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.INT64, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.Int64Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Int64Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int64Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int64Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Int64Value, a, b);
    }
}
exports.Int64Value = Int64Value;
Int64Value.runtime = proto3_js_1.proto3;
Int64Value.typeName = "google.protobuf.Int64Value";
Int64Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
Int64Value.fieldWrapper = {
    wrapField(value) {
        return new Int64Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 *
 * @generated from message google.protobuf.UInt64Value
 */
class UInt64Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The uint64 value.
         *
         * @generated from field: uint64 value = 1;
         */
        this.value = proto_int64_js_1.protoInt64.zero;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.UINT64, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.UINT64, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.UInt64Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new UInt64Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UInt64Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UInt64Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(UInt64Value, a, b);
    }
}
exports.UInt64Value = UInt64Value;
UInt64Value.runtime = proto3_js_1.proto3;
UInt64Value.typeName = "google.protobuf.UInt64Value";
UInt64Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
UInt64Value.fieldWrapper = {
    wrapField(value) {
        return new UInt64Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 *
 * @generated from message google.protobuf.Int32Value
 */
class Int32Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The int32 value.
         *
         * @generated from field: int32 value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.INT32, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.INT32, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.Int32Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new Int32Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Int32Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Int32Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(Int32Value, a, b);
    }
}
exports.Int32Value = Int32Value;
Int32Value.runtime = proto3_js_1.proto3;
Int32Value.typeName = "google.protobuf.Int32Value";
Int32Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
]);
Int32Value.fieldWrapper = {
    wrapField(value) {
        return new Int32Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 *
 * @generated from message google.protobuf.UInt32Value
 */
class UInt32Value extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The uint32 value.
         *
         * @generated from field: uint32 value = 1;
         */
        this.value = 0;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.UINT32, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.UINT32, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.UInt32Value from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new UInt32Value().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UInt32Value().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UInt32Value().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(UInt32Value, a, b);
    }
}
exports.UInt32Value = UInt32Value;
UInt32Value.runtime = proto3_js_1.proto3;
UInt32Value.typeName = "google.protobuf.UInt32Value";
UInt32Value.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
UInt32Value.fieldWrapper = {
    wrapField(value) {
        return new UInt32Value({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 *
 * @generated from message google.protobuf.BoolValue
 */
class BoolValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The bool value.
         *
         * @generated from field: bool value = 1;
         */
        this.value = false;
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.BOOL, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.BOOL, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.BoolValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new BoolValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BoolValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BoolValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(BoolValue, a, b);
    }
}
exports.BoolValue = BoolValue;
BoolValue.runtime = proto3_js_1.proto3;
BoolValue.typeName = "google.protobuf.BoolValue";
BoolValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
BoolValue.fieldWrapper = {
    wrapField(value) {
        return new BoolValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 *
 * @generated from message google.protobuf.StringValue
 */
class StringValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The string value.
         *
         * @generated from field: string value = 1;
         */
        this.value = "";
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.STRING, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.STRING, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.StringValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new StringValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StringValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StringValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(StringValue, a, b);
    }
}
exports.StringValue = StringValue;
StringValue.runtime = proto3_js_1.proto3;
StringValue.typeName = "google.protobuf.StringValue";
StringValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
StringValue.fieldWrapper = {
    wrapField(value) {
        return new StringValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};
/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 *
 * @generated from message google.protobuf.BytesValue
 */
class BytesValue extends message_js_1.Message {
    constructor(data) {
        super();
        /**
         * The bytes value.
         *
         * @generated from field: bytes value = 1;
         */
        this.value = new Uint8Array(0);
        proto3_js_1.proto3.util.initPartial(data, this);
    }
    toJson(options) {
        return proto3_js_1.proto3.json.writeScalar(field_js_1.ScalarType.BYTES, this.value, true);
    }
    fromJson(json, options) {
        try {
            this.value = proto3_js_1.proto3.json.readScalar(field_js_1.ScalarType.BYTES, json);
        }
        catch (e) {
            let m = `cannot decode message google.protobuf.BytesValue from JSON"`;
            if (e instanceof Error && e.message.length > 0) {
                m += `: ${e.message}`;
            }
            throw new Error(m);
        }
        return this;
    }
    static fromBinary(bytes, options) {
        return new BytesValue().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BytesValue().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BytesValue().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3_js_1.proto3.util.equals(BytesValue, a, b);
    }
}
exports.BytesValue = BytesValue;
BytesValue.runtime = proto3_js_1.proto3;
BytesValue.typeName = "google.protobuf.BytesValue";
BytesValue.fields = proto3_js_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
BytesValue.fieldWrapper = {
    wrapField(value) {
        return new BytesValue({ value });
    },
    unwrapField(value) {
        return value.value;
    }
};


/***/ }),

/***/ 9119:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2008 Google Inc.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Code generated by the Protocol Buffer compiler is owned by the owner
// of the input file used when generating it.  This code is not
// standalone and requires a support library to be linked with it.  This
// support library is itself covered by the above license.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.varint32read = exports.varint32write = exports.uInt64ToString = exports.int64ToString = exports.int64FromString = exports.varint64write = exports.varint64read = void 0;
/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */
/**
 * Read a 64 bit varint as two JS numbers.
 *
 * Returns tuple:
 * [0]: low bits
 * [1]: high bits
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175
 */
function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
        let b = this.buf[this.pos++];
        lowBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    let middleByte = this.buf[this.pos++];
    // last four bits of the first 32 bit number
    lowBits |= (middleByte & 0x0f) << 28;
    // 3 upper bits are part of the next 32 bit number
    highBits = (middleByte & 0x70) >> 4;
    if ((middleByte & 0x80) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
        let b = this.buf[this.pos++];
        highBits |= (b & 0x7f) << shift;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    throw new Error("invalid varint");
}
exports.varint64read = varint64read;
/**
 * Write a 64 bit varint, given as two JS numbers, to the given bytes array.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344
 */
function varint64write(lo, hi, bytes) {
    for (let i = 0; i < 28; i = i + 7) {
        const shift = lo >>> i;
        const hasNext = !(shift >>> 7 == 0 && hi == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);
    if (!hasMoreBits) {
        return;
    }
    for (let i = 3; i < 31; i = i + 7) {
        const shift = hi >>> i;
        const hasNext = !(shift >>> 7 == 0);
        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;
        bytes.push(byte);
        if (!hasNext) {
            return;
        }
    }
    bytes.push((hi >>> 31) & 0x01);
}
exports.varint64write = varint64write;
// constants for binary math
const TWO_PWR_32_DBL = 0x100000000;
/**
 * Parse decimal string of 64 bit integer value as two JS numbers.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64FromString(dec) {
    // Check for minus sign.
    const minus = dec[0] === "-";
    if (minus) {
        dec = dec.slice(1);
    }
    // Work 6 decimal digits at a time, acting like we're converting base 1e6
    // digits to binary. This is safe to do with floating point math because
    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
        // Note: Number('') is 0.
        const digit1e6 = Number(dec.slice(begin, end));
        highBits *= base;
        lowBits = lowBits * base + digit1e6;
        // Carry bits from lowBits to
        if (lowBits >= TWO_PWR_32_DBL) {
            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);
            lowBits = lowBits % TWO_PWR_32_DBL;
        }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
}
exports.int64FromString = int64FromString;
/**
 * Losslessly converts a 64-bit signed integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    // If we're treating the input as a signed value and the high bit is set, do
    // a manual two's complement conversion before the decimal conversion.
    const negative = (bits.hi & 0x80000000);
    if (negative) {
        bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
}
exports.int64ToString = int64ToString;
/**
 * Losslessly converts a 64-bit unsigned integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    // Skip the expensive conversion if the number is small enough to use the
    // built-in conversions.
    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with
    // highBits <= 0x1FFFFF can be safely expressed with a double and retain
    // integer precision.
    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.
    if (hi <= 0x1FFFFF) {
        return String(TWO_PWR_32_DBL * hi + lo);
    }
    // What this code is doing is essentially converting the input number from
    // base-2 to base-1e7, which allows us to represent the 64-bit range with
    // only 3 (very large) digits. Those digits are then trivial to convert to
    // a base-10 string.
    // The magic numbers used here are -
    // 2^24 = 16777216 = (1,6777216) in base-1e7.
    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.
    // Split 32:32 representation into 16:24:24 representation so our
    // intermediate digits don't overflow.
    const low = lo & 0xFFFFFF;
    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;
    const high = (hi >> 16) & 0xFFFF;
    // Assemble our three base-1e7 digits, ignoring carries. The maximum
    // value in a digit at this step is representable as a 48-bit integer, which
    // can be stored in a 64-bit floating point number.
    let digitA = low + (mid * 6777216) + (high * 6710656);
    let digitB = mid + (high * 8147497);
    let digitC = (high * 2);
    // Apply carries from A to B and from B to C.
    const base = 10000000;
    if (digitA >= base) {
        digitB += Math.floor(digitA / base);
        digitA %= base;
    }
    if (digitB >= base) {
        digitC += Math.floor(digitB / base);
        digitB %= base;
    }
    // If digitC is 0, then we should have returned in the trivial code path
    // at the top for non-safe integers. Given this, we can assume both digitB
    // and digitA need leading zeros.
    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +
        decimalFrom1e7WithLeadingZeros(digitA);
}
exports.uInt64ToString = uInt64ToString;
function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
}
function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
}
/**
 * Returns two's compliment negation of input.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers
 */
function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
        lowBits = ~lowBits + 1;
    }
    else {
        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,
        // adding 1 to that, results in 0x100000000, which leaves
        // the low bits 0x0 and simply adds one to the high bits.
        highBits += 1;
    }
    return newBits(lowBits, highBits);
}
/**
 * Returns decimal representation of digit1e7 with leading zeros.
 */
const decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
};
/**
 * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144
 */
function varint32write(value, bytes) {
    if (value >= 0) {
        // write value as varint 32
        while (value > 0x7f) {
            bytes.push((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        bytes.push(value);
    }
    else {
        for (let i = 0; i < 9; i++) {
            bytes.push((value & 127) | 128);
            value = value >> 7;
        }
        bytes.push(1);
    }
}
exports.varint32write = varint32write;
/**
 * Read an unsigned 32 bit varint.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220
 */
function varint32read() {
    let b = this.buf[this.pos++];
    let result = b & 0x7f;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 7;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 14;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 0x7f) << 21;
    if ((b & 0x80) == 0) {
        this.assertBounds();
        return result;
    }
    // Extract only last 4 bits
    b = this.buf[this.pos++];
    result |= (b & 0x0f) << 28;
    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)
        b = this.buf[this.pos++];
    if ((b & 0x80) != 0)
        throw new Error("invalid varint");
    this.assertBounds();
    // Result can have 32 bits, convert it to unsigned
    return result >>> 0;
}
exports.varint32read = varint32read;


/***/ }),

/***/ 1344:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlainMessage = exports.createRegistryFromDescriptors = exports.createRegistry = exports.createDescriptorSet = exports.BinaryReader = exports.BinaryWriter = exports.WireType = exports.MethodIdempotency = exports.MethodKind = exports.ScalarType = exports.Message = exports.codegenInfo = exports.protoDelimited = exports.protoBase64 = exports.protoInt64 = exports.protoDouble = exports.proto2 = exports.proto3 = void 0;
var proto3_js_1 = __nccwpck_require__(9947);
Object.defineProperty(exports, "proto3", ({ enumerable: true, get: function () { return proto3_js_1.proto3; } }));
var proto2_js_1 = __nccwpck_require__(3605);
Object.defineProperty(exports, "proto2", ({ enumerable: true, get: function () { return proto2_js_1.proto2; } }));
var proto_double_js_1 = __nccwpck_require__(7303);
Object.defineProperty(exports, "protoDouble", ({ enumerable: true, get: function () { return proto_double_js_1.protoDouble; } }));
var proto_int64_js_1 = __nccwpck_require__(6865);
Object.defineProperty(exports, "protoInt64", ({ enumerable: true, get: function () { return proto_int64_js_1.protoInt64; } }));
var proto_base64_js_1 = __nccwpck_require__(5477);
Object.defineProperty(exports, "protoBase64", ({ enumerable: true, get: function () { return proto_base64_js_1.protoBase64; } }));
var proto_delimited_js_1 = __nccwpck_require__(4507);
Object.defineProperty(exports, "protoDelimited", ({ enumerable: true, get: function () { return proto_delimited_js_1.protoDelimited; } }));
var codegen_info_js_1 = __nccwpck_require__(4193);
Object.defineProperty(exports, "codegenInfo", ({ enumerable: true, get: function () { return codegen_info_js_1.codegenInfo; } }));
var message_js_1 = __nccwpck_require__(2779);
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return message_js_1.Message; } }));
var field_js_1 = __nccwpck_require__(4756);
Object.defineProperty(exports, "ScalarType", ({ enumerable: true, get: function () { return field_js_1.ScalarType; } }));
var service_type_js_1 = __nccwpck_require__(9552);
Object.defineProperty(exports, "MethodKind", ({ enumerable: true, get: function () { return service_type_js_1.MethodKind; } }));
Object.defineProperty(exports, "MethodIdempotency", ({ enumerable: true, get: function () { return service_type_js_1.MethodIdempotency; } }));
var binary_encoding_js_1 = __nccwpck_require__(1304);
Object.defineProperty(exports, "WireType", ({ enumerable: true, get: function () { return binary_encoding_js_1.WireType; } }));
Object.defineProperty(exports, "BinaryWriter", ({ enumerable: true, get: function () { return binary_encoding_js_1.BinaryWriter; } }));
Object.defineProperty(exports, "BinaryReader", ({ enumerable: true, get: function () { return binary_encoding_js_1.BinaryReader; } }));
var create_descriptor_set_js_1 = __nccwpck_require__(6619);
Object.defineProperty(exports, "createDescriptorSet", ({ enumerable: true, get: function () { return create_descriptor_set_js_1.createDescriptorSet; } }));
var create_registry_js_1 = __nccwpck_require__(1948);
Object.defineProperty(exports, "createRegistry", ({ enumerable: true, get: function () { return create_registry_js_1.createRegistry; } }));
var create_registry_from_desc_js_1 = __nccwpck_require__(6804);
Object.defineProperty(exports, "createRegistryFromDescriptors", ({ enumerable: true, get: function () { return create_registry_from_desc_js_1.createRegistryFromDescriptors; } }));
var to_plain_message_js_1 = __nccwpck_require__(4558);
Object.defineProperty(exports, "toPlainMessage", ({ enumerable: true, get: function () { return to_plain_message_js_1.toPlainMessage; } }));
// ideally, we would export these types with sub-path exports:
__exportStar(__nccwpck_require__(7291), exports);
__exportStar(__nccwpck_require__(1731), exports);
__exportStar(__nccwpck_require__(8466), exports);
__exportStar(__nccwpck_require__(2959), exports);
__exportStar(__nccwpck_require__(2183), exports);
__exportStar(__nccwpck_require__(4261), exports);
__exportStar(__nccwpck_require__(8080), exports);
__exportStar(__nccwpck_require__(1280), exports);
__exportStar(__nccwpck_require__(6400), exports);
__exportStar(__nccwpck_require__(7974), exports);
__exportStar(__nccwpck_require__(3672), exports);
__exportStar(__nccwpck_require__(7854), exports);


/***/ }),

/***/ 2779:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = void 0;
/**
 * Message is the base class of every message, generated, or created at
 * runtime.
 *
 * It is _not_ safe to extend this class. If you want to create a message at
 * run time, use proto3.makeMessageType().
 */
class Message {
    /**
     * Compare with a message of the same type.
     */
    equals(other) {
        return this.getType().runtime.util.equals(this.getType(), this, other);
    }
    /**
     * Create a deep copy.
     */
    clone() {
        return this.getType().runtime.util.clone(this);
    }
    /**
     * Parse from binary data, merging fields.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    fromBinary(bytes, options) {
        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);
        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);
        return this;
    }
    /**
     * Parse a message from a JSON value.
     */
    fromJson(jsonValue, options) {
        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);
        format.readMessage(type, jsonValue, opt, this);
        return this;
    }
    /**
     * Parse a message from a JSON string.
     */
    fromJsonString(jsonString, options) {
        let json;
        try {
            json = JSON.parse(jsonString);
        }
        catch (e) {
            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);
        }
        return this.fromJson(json, options);
    }
    /**
     * Serialize the message to binary data.
     */
    toBinary(options) {
        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();
        bin.writeMessage(this, writer, opt);
        return writer.finish();
    }
    /**
     * Serialize the message to a JSON value, a JavaScript value that can be
     * passed to JSON.stringify().
     */
    toJson(options) {
        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);
        return json.writeMessage(this, opt);
    }
    /**
     * Serialize the message to a JSON string.
     */
    toJsonString(options) {
        var _a;
        const value = this.toJson(options);
        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);
    }
    /**
     * Override for serialization behavior. This will be invoked when calling
     * JSON.stringify on this message (i.e. JSON.stringify(msg)).
     *
     * Note that this will not serialize google.protobuf.Any with a packed
     * message because the protobuf JSON format specifies that it needs to be
     * unpacked, and this is only possible with a type registry to look up the
     * message type.  As a result, attempting to serialize a message with this
     * type will throw an Error.
     *
     * This method is protected because you should not need to invoke it
     * directly -- instead use JSON.stringify or toJsonString for
     * stringified JSON.  Alternatively, if actual JSON is desired, you should
     * use toJson.
     */
    toJSON() {
        return this.toJson({
            emitDefaultValues: true,
        });
    }
    /**
     * Retrieve the MessageType of this message - a singleton that represents
     * the protobuf message declaration and provides metadata for reflection-
     * based operations.
     */
    getType() {
        // Any class that extends Message _must_ provide a complete static
        // implementation of MessageType.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
        return Object.getPrototypeOf(this).constructor;
    }
}
exports.Message = Message;


/***/ }),

/***/ 1594:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertFloat32 = exports.assertUInt32 = exports.assertInt32 = exports.assert = void 0;
/**
 * Assert that condition is truthy or throw error (with message)
 */
function assert(condition, msg) {
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean
    if (!condition) {
        throw new Error(msg);
    }
}
exports.assert = assert;
const FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;
/**
 * Assert a valid signed protobuf 32-bit integer.
 */
function assertInt32(arg) {
    if (typeof arg !== "number")
        throw new Error("invalid int 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
        throw new Error("invalid int 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
exports.assertInt32 = assertInt32;
/**
 * Assert a valid unsigned protobuf 32-bit integer.
 */
function assertUInt32(arg) {
    if (typeof arg !== "number")
        throw new Error("invalid uint 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
        throw new Error("invalid uint 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
exports.assertUInt32 = assertUInt32;
/**
 * Assert a valid protobuf float value.
 */
function assertFloat32(arg) {
    if (typeof arg !== "number")
        throw new Error("invalid float 32: " + typeof arg);
    if (!Number.isFinite(arg))
        return;
    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
        throw new Error("invalid float 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
exports.assertFloat32 = assertFloat32;


/***/ }),

/***/ 9639:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.writePacked = exports.writeScalar = exports.writeMessageField = exports.writeMapEntry = exports.makeBinaryFormatCommon = void 0;
const binary_encoding_js_1 = __nccwpck_require__(1304);
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
const field_wrapper_js_1 = __nccwpck_require__(7579);
const scalars_js_1 = __nccwpck_require__(5618);
const assert_js_1 = __nccwpck_require__(1594);
/* eslint-disable @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unnecessary-condition, no-case-declarations, prefer-const */
const unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields");
// Default options for parsing binary data.
const readDefaults = {
    readUnknownFields: true,
    readerFactory: (bytes) => new binary_encoding_js_1.BinaryReader(bytes),
};
// Default options for serializing binary data.
const writeDefaults = {
    writeUnknownFields: true,
    writerFactory: () => new binary_encoding_js_1.BinaryWriter(),
};
function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
}
function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
}
function makeBinaryFormatCommon() {
    return {
        makeReadOptions,
        makeWriteOptions,
        listUnknownFields(message) {
            var _a;
            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];
        },
        discardUnknownFields(message) {
            delete message[unknownFieldsSymbol];
        },
        writeUnknownFields(message, writer) {
            const m = message;
            const c = m[unknownFieldsSymbol];
            if (c) {
                for (const f of c) {
                    writer.tag(f.no, f.wireType).raw(f.data);
                }
            }
        },
        onUnknownField(message, no, wireType, data) {
            const m = message;
            if (!Array.isArray(m[unknownFieldsSymbol])) {
                m[unknownFieldsSymbol] = [];
            }
            m[unknownFieldsSymbol].push({ no, wireType, data });
        },
        readMessage(message, reader, length, options) {
            const type = message.getType();
            const end = length === undefined ? reader.len : reader.pos + length;
            while (reader.pos < end) {
                const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);
                if (!field) {
                    const data = reader.skip(wireType);
                    if (options.readUnknownFields) {
                        this.onUnknownField(message, fieldNo, wireType, data);
                    }
                    continue;
                }
                let target = message, repeated = field.repeated, localName = field.localName;
                if (field.oneof) {
                    target = target[field.oneof.localName];
                    if (target.case != localName) {
                        delete target.value;
                    }
                    target.case = localName;
                    localName = "value";
                }
                switch (field.kind) {
                    case "scalar":
                    case "enum":
                        const scalarType = field.kind == "enum" ? field_js_1.ScalarType.INT32 : field.T;
                        if (repeated) {
                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values
                            if (wireType == binary_encoding_js_1.WireType.LengthDelimited &&
                                scalarType != field_js_1.ScalarType.STRING &&
                                scalarType != field_js_1.ScalarType.BYTES) {
                                let e = reader.uint32() + reader.pos;
                                while (reader.pos < e) {
                                    arr.push(readScalar(reader, scalarType));
                                }
                            }
                            else {
                                arr.push(readScalar(reader, scalarType));
                            }
                        }
                        else {
                            target[localName] = readScalar(reader, scalarType);
                        }
                        break;
                    case "message":
                        const messageType = field.T;
                        if (repeated) {
                            // safe to assume presence of array, oneof cannot contain repeated values
                            target[localName].push(readMessageField(reader, new messageType(), options));
                        }
                        else {
                            if (target[localName] instanceof message_js_1.Message) {
                                readMessageField(reader, target[localName], options);
                            }
                            else {
                                target[localName] = readMessageField(reader, new messageType(), options);
                                if (messageType.fieldWrapper &&
                                    !field.oneof &&
                                    !field.repeated) {
                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                                }
                            }
                        }
                        break;
                    case "map":
                        let [mapKey, mapVal] = readMapEntry(field, reader, options);
                        // safe to assume presence of map object, oneof cannot contain repeated values
                        target[localName][mapKey] = mapVal;
                        break;
                }
            }
        },
    };
}
exports.makeBinaryFormatCommon = makeBinaryFormatCommon;
// Read a message, avoiding MessageType.fromBinary() to re-use the
// BinaryReadOptions and the IBinaryReader.
function readMessageField(reader, message, options) {
    const format = message.getType().runtime.bin;
    format.readMessage(message, reader, reader.uint32(), options);
    return message;
}
// Read a map field, expecting key field = 1, value field = 2
function readMapEntry(field, reader, options) {
    const length = reader.uint32(), end = reader.pos + length;
    let key, val;
    while (reader.pos < end) {
        let [fieldNo] = reader.tag();
        switch (fieldNo) {
            case 1:
                key = readScalar(reader, field.K);
                break;
            case 2:
                switch (field.V.kind) {
                    case "scalar":
                        val = readScalar(reader, field.V.T);
                        break;
                    case "enum":
                        val = reader.int32();
                        break;
                    case "message":
                        val = readMessageField(reader, new field.V.T(), options);
                        break;
                }
                break;
        }
    }
    if (key === undefined) {
        let keyRaw = (0, scalars_js_1.scalarDefaultValue)(field.K);
        key =
            field.K == field_js_1.ScalarType.BOOL
                ? keyRaw.toString()
                : keyRaw;
    }
    if (typeof key != "string" && typeof key != "number") {
        key = key.toString();
    }
    if (val === undefined) {
        switch (field.V.kind) {
            case "scalar":
                val = (0, scalars_js_1.scalarDefaultValue)(field.V.T);
                break;
            case "enum":
                val = 0;
                break;
            case "message":
                val = new field.V.T();
                break;
        }
    }
    return [key, val];
}
// Does not use scalarTypeInfo() for better performance.
function readScalar(reader, type) {
    switch (type) {
        case field_js_1.ScalarType.STRING:
            return reader.string();
        case field_js_1.ScalarType.BOOL:
            return reader.bool();
        case field_js_1.ScalarType.DOUBLE:
            return reader.double();
        case field_js_1.ScalarType.FLOAT:
            return reader.float();
        case field_js_1.ScalarType.INT32:
            return reader.int32();
        case field_js_1.ScalarType.INT64:
            return reader.int64();
        case field_js_1.ScalarType.UINT64:
            return reader.uint64();
        case field_js_1.ScalarType.FIXED64:
            return reader.fixed64();
        case field_js_1.ScalarType.BYTES:
            return reader.bytes();
        case field_js_1.ScalarType.FIXED32:
            return reader.fixed32();
        case field_js_1.ScalarType.SFIXED32:
            return reader.sfixed32();
        case field_js_1.ScalarType.SFIXED64:
            return reader.sfixed64();
        case field_js_1.ScalarType.SINT64:
            return reader.sint64();
        case field_js_1.ScalarType.UINT32:
            return reader.uint32();
        case field_js_1.ScalarType.SINT32:
            return reader.sint32();
    }
}
function writeMapEntry(writer, options, field, key, value) {
    writer.tag(field.no, binary_encoding_js_1.WireType.LengthDelimited);
    writer.fork();
    // javascript only allows number or string for object properties
    // we convert from our representation to the protobuf type
    let keyValue = key;
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys
    switch (field.K) {
        case field_js_1.ScalarType.INT32:
        case field_js_1.ScalarType.FIXED32:
        case field_js_1.ScalarType.UINT32:
        case field_js_1.ScalarType.SFIXED32:
        case field_js_1.ScalarType.SINT32:
            keyValue = Number.parseInt(key);
            break;
        case field_js_1.ScalarType.BOOL:
            (0, assert_js_1.assert)(key == "true" || key == "false");
            keyValue = key == "true";
            break;
    }
    // write key, expecting key field number = 1
    writeScalar(writer, field.K, 1, keyValue, true);
    // write value, expecting value field number = 2
    switch (field.V.kind) {
        case "scalar":
            writeScalar(writer, field.V.T, 2, value, true);
            break;
        case "enum":
            writeScalar(writer, field_js_1.ScalarType.INT32, 2, value, true);
            break;
        case "message":
            writeMessageField(writer, options, field.V.T, 2, value);
            break;
    }
    writer.join();
}
exports.writeMapEntry = writeMapEntry;
function writeMessageField(writer, options, type, fieldNo, value) {
    if (value !== undefined) {
        const message = (0, field_wrapper_js_1.wrapField)(type, value);
        writer
            .tag(fieldNo, binary_encoding_js_1.WireType.LengthDelimited)
            .bytes(message.toBinary(options));
    }
}
exports.writeMessageField = writeMessageField;
function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {
    let [wireType, method, isIntrinsicDefault] = (0, scalars_js_1.scalarTypeInfo)(type, value);
    if (!isIntrinsicDefault || emitIntrinsicDefault) {
        writer.tag(fieldNo, wireType)[method](value);
    }
}
exports.writeScalar = writeScalar;
function writePacked(writer, type, fieldNo, value) {
    if (!value.length) {
        return;
    }
    writer.tag(fieldNo, binary_encoding_js_1.WireType.LengthDelimited).fork();
    let [, method] = (0, scalars_js_1.scalarTypeInfo)(type);
    for (let i = 0; i < value.length; i++) {
        writer[method](value[i]);
    }
    writer.join();
}
exports.writePacked = writePacked;


/***/ }),

/***/ 3794:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeBinaryFormatProto2 = void 0;
const field_js_1 = __nccwpck_require__(4756);
const binary_format_common_js_1 = __nccwpck_require__(9639);
/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, no-case-declarations, prefer-const */
function makeBinaryFormatProto2() {
    return Object.assign(Object.assign({}, (0, binary_format_common_js_1.makeBinaryFormatCommon)()), { writeMessage(message, writer, options) {
            const type = message.getType();
            let field;
            try {
                for (field of type.fields.byNumber()) {
                    let value, // this will be our field value, whether it is member of a oneof or not
                    repeated = field.repeated, localName = field.localName;
                    if (field.oneof) {
                        const oneof = message[field.oneof.localName];
                        if (oneof.case !== localName) {
                            continue; // field is not selected, skip
                        }
                        value = oneof.value;
                    }
                    else {
                        value = message[localName];
                        // In contrast to proto3, we raise an error if a non-optional (proto2 required)
                        // field is missing a value.
                        if (value === undefined && !field.oneof && !field.opt) {
                            throw new Error(`cannot encode field ${type.typeName}.${field.name} to binary: required field not set`);
                        }
                    }
                    switch (field.kind) {
                        case "scalar":
                        case "enum":
                            let scalarType = field.kind == "enum" ? field_js_1.ScalarType.INT32 : field.T;
                            if (repeated) {
                                if (field.packed) {
                                    (0, binary_format_common_js_1.writePacked)(writer, scalarType, field.no, value);
                                }
                                else {
                                    for (const item of value) {
                                        (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, item, true);
                                    }
                                }
                            }
                            else {
                                if (value !== undefined) {
                                    // In contrast to proto3, we do not skip intrinsic default values.
                                    // Explicit default values are not special cased either.
                                    (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, value, true);
                                }
                            }
                            break;
                        case "message":
                            if (repeated) {
                                for (const item of value) {
                                    (0, binary_format_common_js_1.writeMessageField)(writer, options, field.T, field.no, item);
                                }
                            }
                            else {
                                (0, binary_format_common_js_1.writeMessageField)(writer, options, field.T, field.no, value);
                            }
                            break;
                        case "map":
                            for (const [key, val] of Object.entries(value)) {
                                (0, binary_format_common_js_1.writeMapEntry)(writer, options, field, key, val);
                            }
                            break;
                    }
                }
            }
            catch (e) {
                let m = field
                    ? `cannot encode field ${type.typeName}.${field === null || field === void 0 ? void 0 : field.name} to binary`
                    : `cannot encode message ${type.typeName} to binary`;
                let r = e instanceof Error ? e.message : String(e);
                throw new Error(m + (r.length > 0 ? `: ${r}` : ""));
            }
            if (options.writeUnknownFields) {
                this.writeUnknownFields(message, writer);
            }
            return writer;
        } });
}
exports.makeBinaryFormatProto2 = makeBinaryFormatProto2;


/***/ }),

/***/ 9558:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeBinaryFormatProto3 = void 0;
const field_js_1 = __nccwpck_require__(4756);
const binary_format_common_js_1 = __nccwpck_require__(9639);
/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, prefer-const, no-case-declarations */
function makeBinaryFormatProto3() {
    return Object.assign(Object.assign({}, (0, binary_format_common_js_1.makeBinaryFormatCommon)()), { writeMessage(message, writer, options) {
            const type = message.getType();
            for (const field of type.fields.byNumber()) {
                let value, // this will be our field value, whether it is member of a oneof or regular field
                repeated = field.repeated, localName = field.localName;
                if (field.oneof) {
                    const oneof = message[field.oneof.localName];
                    if (oneof.case !== localName) {
                        continue; // field is not selected, skip
                    }
                    value = oneof.value;
                }
                else {
                    value = message[localName];
                }
                switch (field.kind) {
                    case "scalar":
                    case "enum":
                        let scalarType = field.kind == "enum" ? field_js_1.ScalarType.INT32 : field.T;
                        if (repeated) {
                            if (field.packed) {
                                (0, binary_format_common_js_1.writePacked)(writer, scalarType, field.no, value);
                            }
                            else {
                                for (const item of value) {
                                    (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, item, true);
                                }
                            }
                        }
                        else {
                            if (value !== undefined) {
                                (0, binary_format_common_js_1.writeScalar)(writer, scalarType, field.no, value, !!field.oneof || field.opt);
                            }
                        }
                        break;
                    case "message":
                        if (repeated) {
                            for (const item of value) {
                                (0, binary_format_common_js_1.writeMessageField)(writer, options, field.T, field.no, item);
                            }
                        }
                        else {
                            (0, binary_format_common_js_1.writeMessageField)(writer, options, field.T, field.no, value);
                        }
                        break;
                    case "map":
                        for (const [key, val] of Object.entries(value)) {
                            (0, binary_format_common_js_1.writeMapEntry)(writer, options, field, key, val);
                        }
                        break;
                }
            }
            if (options.writeUnknownFields) {
                this.writeUnknownFields(message, writer);
            }
            return writer;
        } });
}
exports.makeBinaryFormatProto3 = makeBinaryFormatProto3;


/***/ }),

/***/ 8504:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeEnum = exports.makeEnumType = exports.setEnumType = exports.getEnumType = void 0;
const assert_js_1 = __nccwpck_require__(1594);
const enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
/**
 * Get reflection information from a generated enum.
 * If this function is called on something other than a generated
 * enum, it raises an error.
 */
function getEnumType(enumObject) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any
    const t = enumObject[enumTypeSymbol];
    (0, assert_js_1.assert)(t, "missing enum type on enum object");
    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return
}
exports.getEnumType = getEnumType;
/**
 * Sets reflection information on a generated enum.
 */
function setEnumType(enumObject, typeName, values, opt) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({
        no: v.no,
        name: v.name,
        localName: enumObject[v.no],
    })), opt);
}
exports.setEnumType = setEnumType;
/**
 * Create a new EnumType with the given values.
 */
function makeEnumType(typeName, values, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_opt) {
    const names = Object.create(null);
    const numbers = Object.create(null);
    const normalValues = [];
    for (const value of values) {
        // We do not surface options at this time
        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};
        const n = normalizeEnumValue(value);
        normalValues.push(n);
        names[value.name] = n;
        numbers[value.no] = n;
    }
    return {
        typeName,
        values: normalValues,
        // We do not surface options at this time
        // options: opt?.options ?? Object.create(null),
        findName(name) {
            return names[name];
        },
        findNumber(no) {
            return numbers[no];
        },
    };
}
exports.makeEnumType = makeEnumType;
/**
 * Create a new enum object with the given values.
 * Sets reflection information.
 */
function makeEnum(typeName, values, opt) {
    const enumObject = {};
    for (const value of values) {
        const n = normalizeEnumValue(value);
        enumObject[n.localName] = n.no;
        enumObject[n.no] = n.localName;
    }
    setEnumType(enumObject, typeName, values, opt);
    return enumObject;
}
exports.makeEnum = makeEnum;
function normalizeEnumValue(value) {
    if ("localName" in value) {
        return value;
    }
    return Object.assign(Object.assign({}, value), { localName: value.name });
}


/***/ }),

/***/ 653:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InternalFieldList = void 0;
class InternalFieldList {
    constructor(fields, normalizer) {
        this._fields = fields;
        this._normalizer = normalizer;
    }
    findJsonName(jsonName) {
        if (!this.jsonNames) {
            const t = {};
            for (const f of this.list()) {
                t[f.jsonName] = t[f.name] = f;
            }
            this.jsonNames = t;
        }
        return this.jsonNames[jsonName];
    }
    find(fieldNo) {
        if (!this.numbers) {
            const t = {};
            for (const f of this.list()) {
                t[f.no] = f;
            }
            this.numbers = t;
        }
        return this.numbers[fieldNo];
    }
    list() {
        if (!this.all) {
            this.all = this._normalizer(this._fields);
        }
        return this.all;
    }
    byNumber() {
        if (!this.numbersAsc) {
            this.numbersAsc = this.list()
                .concat()
                .sort((a, b) => a.no - b.no);
        }
        return this.numbersAsc;
    }
    byMember() {
        if (!this.members) {
            this.members = [];
            const a = this.members;
            let o;
            for (const f of this.list()) {
                if (f.oneof) {
                    if (f.oneof !== o) {
                        o = f.oneof;
                        a.push(o);
                    }
                }
                else {
                    a.push(f);
                }
            }
        }
        return this.members;
    }
}
exports.InternalFieldList = InternalFieldList;


/***/ }),

/***/ 7579:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getUnwrappedFieldType = exports.wrapField = void 0;
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
/**
 * Wrap a primitive message field value in its corresponding wrapper
 * message. This function is idempotent.
 */
function wrapField(type, value) {
    if (value instanceof message_js_1.Message || !type.fieldWrapper) {
        return value;
    }
    return type.fieldWrapper.wrapField(value);
}
exports.wrapField = wrapField;
/**
 * If the given field uses one of the well-known wrapper types, return
 * the primitive type it wraps.
 */
function getUnwrappedFieldType(field) {
    if (field.fieldKind !== "message") {
        return undefined;
    }
    if (field.repeated) {
        return undefined;
    }
    if (field.oneof != undefined) {
        return undefined;
    }
    return wktWrapperToScalarType[field.message.typeName];
}
exports.getUnwrappedFieldType = getUnwrappedFieldType;
const wktWrapperToScalarType = {
    "google.protobuf.DoubleValue": field_js_1.ScalarType.DOUBLE,
    "google.protobuf.FloatValue": field_js_1.ScalarType.FLOAT,
    "google.protobuf.Int64Value": field_js_1.ScalarType.INT64,
    "google.protobuf.UInt64Value": field_js_1.ScalarType.UINT64,
    "google.protobuf.Int32Value": field_js_1.ScalarType.INT32,
    "google.protobuf.UInt32Value": field_js_1.ScalarType.UINT32,
    "google.protobuf.BoolValue": field_js_1.ScalarType.BOOL,
    "google.protobuf.StringValue": field_js_1.ScalarType.STRING,
    "google.protobuf.BytesValue": field_js_1.ScalarType.BYTES,
};


/***/ }),

/***/ 158:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InternalOneofInfo = void 0;
const names_js_1 = __nccwpck_require__(9214);
const assert_js_1 = __nccwpck_require__(1594);
class InternalOneofInfo {
    constructor(name) {
        this.kind = "oneof";
        this.repeated = false;
        this.packed = false;
        this.opt = false;
        this.default = undefined;
        this.fields = [];
        this.name = name;
        this.localName = (0, names_js_1.localOneofName)(name);
    }
    addField(field) {
        (0, assert_js_1.assert)(field.oneof === this, `field ${field.name} not one of ${this.name}`);
        this.fields.push(field);
    }
    findField(localName) {
        if (!this._lookup) {
            this._lookup = Object.create(null);
            for (let i = 0; i < this.fields.length; i++) {
                this._lookup[this.fields[i].localName] = this.fields[i];
            }
        }
        return this._lookup[localName];
    }
}
exports.InternalOneofInfo = InternalOneofInfo;


/***/ }),

/***/ 430:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeJsonFormatCommon = void 0;
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
const assert_js_1 = __nccwpck_require__(1594);
const proto_int64_js_1 = __nccwpck_require__(6865);
const proto_base64_js_1 = __nccwpck_require__(5477);
/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
// Default options for parsing JSON.
const jsonReadDefaults = {
    ignoreUnknownFields: false,
};
// Default options for serializing to JSON.
const jsonWriteDefaults = {
    emitDefaultValues: false,
    enumAsInteger: false,
    useProtoFieldName: false,
    prettySpaces: 0,
};
function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;
}
function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;
}
function makeJsonFormatCommon(makeWriteField) {
    const writeField = makeWriteField(writeEnum, writeScalar);
    return {
        makeReadOptions,
        makeWriteOptions,
        readMessage(type, json, options, message) {
            if (json == null || Array.isArray(json) || typeof json != "object") {
                throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json)}`);
            }
            message = message !== null && message !== void 0 ? message : new type();
            const oneofSeen = {};
            for (const [jsonKey, jsonValue] of Object.entries(json)) {
                const field = type.fields.findJsonName(jsonKey);
                if (!field) {
                    if (!options.ignoreUnknownFields) {
                        throw new Error(`cannot decode message ${type.typeName} from JSON: key "${jsonKey}" is unknown`);
                    }
                    continue;
                }
                let localName = field.localName;
                let target = message;
                if (field.oneof) {
                    if (jsonValue === null && field.kind == "scalar") {
                        // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}
                        continue;
                    }
                    const seen = oneofSeen[field.oneof.localName];
                    if (seen) {
                        throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof "${field.oneof.name}" present: "${seen}", "${jsonKey}"`);
                    }
                    oneofSeen[field.oneof.localName] = jsonKey;
                    target = target[field.oneof.localName] = { case: localName };
                    localName = "value";
                }
                if (field.repeated) {
                    if (jsonValue === null) {
                        continue;
                    }
                    if (!Array.isArray(jsonValue)) {
                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
                    }
                    const targetArray = target[localName];
                    for (const jsonItem of jsonValue) {
                        if (jsonItem === null) {
                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);
                        }
                        let val;
                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- "map" is invalid for repeated fields
                        switch (field.kind) {
                            case "message":
                                val = field.T.fromJson(jsonItem, options);
                                break;
                            case "enum":
                                val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);
                                if (val === undefined)
                                    continue;
                                break;
                            case "scalar":
                                try {
                                    val = readScalar(field.T, jsonItem);
                                }
                                catch (e) {
                                    let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;
                                    if (e instanceof Error && e.message.length > 0) {
                                        m += `: ${e.message}`;
                                    }
                                    throw new Error(m);
                                }
                                break;
                        }
                        targetArray.push(val);
                    }
                }
                else if (field.kind == "map") {
                    if (jsonValue === null) {
                        continue;
                    }
                    if (Array.isArray(jsonValue) || typeof jsonValue != "object") {
                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
                    }
                    const targetMap = target[localName];
                    for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {
                        if (jsonMapValue === null) {
                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);
                        }
                        let val;
                        switch (field.V.kind) {
                            case "message":
                                val = field.V.T.fromJson(jsonMapValue, options);
                                break;
                            case "enum":
                                val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);
                                if (val === undefined)
                                    continue;
                                break;
                            case "scalar":
                                try {
                                    val = readScalar(field.V.T, jsonMapValue);
                                }
                                catch (e) {
                                    let m = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                                    if (e instanceof Error && e.message.length > 0) {
                                        m += `: ${e.message}`;
                                    }
                                    throw new Error(m);
                                }
                                break;
                        }
                        try {
                            targetMap[readScalar(field.K, field.K == field_js_1.ScalarType.BOOL
                                ? jsonMapKey == "true"
                                    ? true
                                    : jsonMapKey == "false"
                                        ? false
                                        : jsonMapKey
                                : jsonMapKey).toString()] = val;
                        }
                        catch (e) {
                            let m = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                            if (e instanceof Error && e.message.length > 0) {
                                m += `: ${e.message}`;
                            }
                            throw new Error(m);
                        }
                    }
                }
                else {
                    switch (field.kind) {
                        case "message":
                            const messageType = field.T;
                            if (jsonValue === null &&
                                messageType.typeName != "google.protobuf.Value") {
                                if (field.oneof) {
                                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field "${jsonKey}"`);
                                }
                                continue;
                            }
                            if (target[localName] instanceof message_js_1.Message) {
                                target[localName].fromJson(jsonValue, options);
                            }
                            else {
                                target[localName] = messageType.fromJson(jsonValue, options);
                                if (messageType.fieldWrapper && !field.oneof) {
                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                                }
                            }
                            break;
                        case "enum":
                            const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);
                            if (enumValue !== undefined) {
                                target[localName] = enumValue;
                            }
                            break;
                        case "scalar":
                            try {
                                target[localName] = readScalar(field.T, jsonValue);
                            }
                            catch (e) {
                                let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                                if (e instanceof Error && e.message.length > 0) {
                                    m += `: ${e.message}`;
                                }
                                throw new Error(m);
                            }
                            break;
                    }
                }
            }
            return message;
        },
        writeMessage(message, options) {
            const type = message.getType();
            const json = {};
            let field;
            try {
                for (const member of type.fields.byMember()) {
                    let jsonValue;
                    if (member.kind == "oneof") {
                        const oneof = message[member.localName];
                        if (oneof.value === undefined) {
                            continue;
                        }
                        field = member.findField(oneof.case);
                        if (!field) {
                            throw "oneof case not found: " + oneof.case;
                        }
                        jsonValue = writeField(field, oneof.value, options);
                    }
                    else {
                        field = member;
                        jsonValue = writeField(field, message[field.localName], options);
                    }
                    if (jsonValue !== undefined) {
                        json[options.useProtoFieldName ? field.name : field.jsonName] =
                            jsonValue;
                    }
                }
            }
            catch (e) {
                const m = field
                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`
                    : `cannot encode message ${type.typeName} to JSON`;
                const r = e instanceof Error ? e.message : String(e);
                throw new Error(m + (r.length > 0 ? `: ${r}` : ""));
            }
            return json;
        },
        readScalar,
        writeScalar,
        debug: debugJsonValue,
    };
}
exports.makeJsonFormatCommon = makeJsonFormatCommon;
function debugJsonValue(json) {
    if (json === null) {
        return "null";
    }
    switch (typeof json) {
        case "object":
            return Array.isArray(json) ? "array" : "object";
        case "string":
            return json.length > 100 ? "string" : `"${json.split('"').join('\\"')}"`;
        default:
            return json.toString();
    }
}
// May throw an error. If the error message is non-blank, it should be shown.
// It is up to the caller to provide context.
function readScalar(type, json) {
    // every valid case in the switch below returns, and every fall
    // through is regarded as a failure.
    switch (type) {
        // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
        // Either numbers or strings are accepted. Exponent notation is also accepted.
        case field_js_1.ScalarType.DOUBLE:
        case field_js_1.ScalarType.FLOAT:
            if (json === null)
                return 0.0;
            if (json === "NaN")
                return Number.NaN;
            if (json === "Infinity")
                return Number.POSITIVE_INFINITY;
            if (json === "-Infinity")
                return Number.NEGATIVE_INFINITY;
            if (json === "") {
                // empty string is not a number
                break;
            }
            if (typeof json == "string" && json.trim().length !== json.length) {
                // extra whitespace
                break;
            }
            if (typeof json != "string" && typeof json != "number") {
                break;
            }
            const float = Number(json);
            if (Number.isNaN(float)) {
                // not a number
                break;
            }
            if (!Number.isFinite(float)) {
                // infinity and -infinity are handled by string representation above, so this is an error
                break;
            }
            if (type == field_js_1.ScalarType.FLOAT)
                (0, assert_js_1.assertFloat32)(float);
            return float;
        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
        case field_js_1.ScalarType.INT32:
        case field_js_1.ScalarType.FIXED32:
        case field_js_1.ScalarType.SFIXED32:
        case field_js_1.ScalarType.SINT32:
        case field_js_1.ScalarType.UINT32:
            if (json === null)
                return 0;
            let int32;
            if (typeof json == "number")
                int32 = json;
            else if (typeof json == "string" && json.length > 0) {
                if (json.trim().length === json.length)
                    int32 = Number(json);
            }
            if (int32 === undefined)
                break;
            if (type == field_js_1.ScalarType.UINT32)
                (0, assert_js_1.assertUInt32)(int32);
            else
                (0, assert_js_1.assertInt32)(int32);
            return int32;
        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            if (json === null)
                return proto_int64_js_1.protoInt64.zero;
            if (typeof json != "number" && typeof json != "string")
                break;
            return proto_int64_js_1.protoInt64.parse(json);
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.UINT64:
            if (json === null)
                return proto_int64_js_1.protoInt64.zero;
            if (typeof json != "number" && typeof json != "string")
                break;
            return proto_int64_js_1.protoInt64.uParse(json);
        // bool:
        case field_js_1.ScalarType.BOOL:
            if (json === null)
                return false;
            if (typeof json !== "boolean")
                break;
            return json;
        // string:
        case field_js_1.ScalarType.STRING:
            if (json === null)
                return "";
            if (typeof json !== "string") {
                break;
            }
            // A string must always contain UTF-8 encoded or 7-bit ASCII.
            // We validate with encodeURIComponent, which appears to be the fastest widely available option.
            try {
                encodeURIComponent(json);
            }
            catch (e) {
                throw new Error("invalid UTF8");
            }
            return json;
        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
        // Either standard or URL-safe base64 encoding with/without paddings are accepted.
        case field_js_1.ScalarType.BYTES:
            if (json === null || json === "")
                return new Uint8Array(0);
            if (typeof json !== "string")
                break;
            return proto_base64_js_1.protoBase64.dec(json);
    }
    throw new Error();
}
function readEnum(type, json, ignoreUnknownFields) {
    if (json === null) {
        // proto3 requires 0 to be default value for all enums
        return 0;
    }
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
    switch (typeof json) {
        case "number":
            if (Number.isInteger(json)) {
                return json;
            }
            break;
        case "string":
            const value = type.findName(json);
            if (value || ignoreUnknownFields) {
                return value === null || value === void 0 ? void 0 : value.no;
            }
            break;
    }
    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);
}
function writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {
    var _a;
    if (value === undefined) {
        return value;
    }
    if (value === 0 && !emitIntrinsicDefault) {
        // proto3 requires 0 to be default value for all enums
        return undefined;
    }
    if (enumAsInteger) {
        return value;
    }
    if (type.typeName == "google.protobuf.NullValue") {
        return null;
    }
    const val = type.findNumber(value);
    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number
}
function writeScalar(type, value, emitIntrinsicDefault) {
    if (value === undefined) {
        return undefined;
    }
    switch (type) {
        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
        case field_js_1.ScalarType.INT32:
        case field_js_1.ScalarType.SFIXED32:
        case field_js_1.ScalarType.SINT32:
        case field_js_1.ScalarType.FIXED32:
        case field_js_1.ScalarType.UINT32:
            (0, assert_js_1.assert)(typeof value == "number");
            return value != 0 || emitIntrinsicDefault ? value : undefined;
        // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
        // Either numbers or strings are accepted. Exponent notation is also accepted.
        case field_js_1.ScalarType.FLOAT:
        // assertFloat32(value);
        case field_js_1.ScalarType.DOUBLE: // eslint-disable-line no-fallthrough
            (0, assert_js_1.assert)(typeof value == "number");
            if (Number.isNaN(value))
                return "NaN";
            if (value === Number.POSITIVE_INFINITY)
                return "Infinity";
            if (value === Number.NEGATIVE_INFINITY)
                return "-Infinity";
            return value !== 0 || emitIntrinsicDefault ? value : undefined;
        // string:
        case field_js_1.ScalarType.STRING:
            (0, assert_js_1.assert)(typeof value == "string");
            return value.length > 0 || emitIntrinsicDefault ? value : undefined;
        // bool:
        case field_js_1.ScalarType.BOOL:
            (0, assert_js_1.assert)(typeof value == "boolean");
            return value || emitIntrinsicDefault ? value : undefined;
        // JSON value will be a decimal string. Either numbers or strings are accepted.
        case field_js_1.ScalarType.UINT64:
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            (0, assert_js_1.assert)(typeof value == "bigint" ||
                typeof value == "string" ||
                typeof value == "number");
            // We use implicit conversion with `value != 0` to catch both 0n and "0"
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            return emitIntrinsicDefault || value != 0
                ? value.toString(10)
                : undefined;
        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
        // Either standard or URL-safe base64 encoding with/without paddings are accepted.
        case field_js_1.ScalarType.BYTES:
            (0, assert_js_1.assert)(value instanceof Uint8Array);
            return emitIntrinsicDefault || value.byteLength > 0
                ? proto_base64_js_1.protoBase64.enc(value)
                : undefined;
    }
}


/***/ }),

/***/ 1626:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeJsonFormatProto2 = void 0;
const field_wrapper_js_1 = __nccwpck_require__(7579);
const assert_js_1 = __nccwpck_require__(1594);
const json_format_common_js_1 = __nccwpck_require__(430);
/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function makeJsonFormatProto2() {
    return (0, json_format_common_js_1.makeJsonFormatCommon)((writeEnum, writeScalar) => {
        return function writeField(field, value, options) {
            if (field.kind == "map") {
                const jsonObj = {};
                switch (field.V.kind) {
                    case "scalar":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            const val = writeScalar(field.V.T, entryValue, true);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                    case "message":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            // JSON standard allows only (double quoted) string as property key
                            jsonObj[entryKey.toString()] = entryValue.toJson(options);
                        }
                        break;
                    case "enum":
                        const enumType = field.V.T;
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            (0, assert_js_1.assert)(entryValue === undefined || typeof entryValue == "number");
                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                }
                return options.emitDefaultValues || Object.keys(jsonObj).length > 0
                    ? jsonObj
                    : undefined;
            }
            else if (field.repeated) {
                const jsonArr = [];
                switch (field.kind) {
                    case "scalar":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeScalar(field.T, value[i], true));
                        }
                        break;
                    case "enum":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));
                        }
                        break;
                    case "message":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(value[i].toJson(options));
                        }
                        break;
                }
                return options.emitDefaultValues || jsonArr.length > 0
                    ? jsonArr
                    : undefined;
            }
            else {
                // In contrast to proto3, we raise an error if a non-optional (proto2 required)
                // field is missing a value.
                if (value === undefined) {
                    if (!field.oneof && !field.opt) {
                        throw `required field not set`;
                    }
                    return undefined;
                }
                switch (field.kind) {
                    case "scalar":
                        // In contrast to proto3, we do not skip intrinsic default values.
                        // Explicit default values are not special cased either.
                        return writeScalar(field.T, value, true);
                    case "enum":
                        // In contrast to proto3, we do not skip intrinsic default values.
                        // Explicit default values are not special cased either.
                        return writeEnum(field.T, value, true, options.enumAsInteger);
                    case "message":
                        return (0, field_wrapper_js_1.wrapField)(field.T, value).toJson(options);
                }
            }
        };
    });
}
exports.makeJsonFormatProto2 = makeJsonFormatProto2;


/***/ }),

/***/ 8946:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeJsonFormatProto3 = void 0;
const field_wrapper_js_1 = __nccwpck_require__(7579);
const assert_js_1 = __nccwpck_require__(1594);
const json_format_common_js_1 = __nccwpck_require__(430);
/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function makeJsonFormatProto3() {
    return (0, json_format_common_js_1.makeJsonFormatCommon)((writeEnum, writeScalar) => {
        return function writeField(field, value, options) {
            if (field.kind == "map") {
                const jsonObj = {};
                switch (field.V.kind) {
                    case "scalar":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            const val = writeScalar(field.V.T, entryValue, true);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                    case "message":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            // JSON standard allows only (double quoted) string as property key
                            jsonObj[entryKey.toString()] = entryValue.toJson(options);
                        }
                        break;
                    case "enum":
                        const enumType = field.V.T;
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            (0, assert_js_1.assert)(entryValue === undefined || typeof entryValue == "number");
                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);
                            (0, assert_js_1.assert)(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                }
                return options.emitDefaultValues || Object.keys(jsonObj).length > 0
                    ? jsonObj
                    : undefined;
            }
            else if (field.repeated) {
                const jsonArr = [];
                switch (field.kind) {
                    case "scalar":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeScalar(field.T, value[i], true));
                        }
                        break;
                    case "enum":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));
                        }
                        break;
                    case "message":
                        for (let i = 0; i < value.length; i++) {
                            jsonArr.push((0, field_wrapper_js_1.wrapField)(field.T, value[i]).toJson(options));
                        }
                        break;
                }
                return options.emitDefaultValues || jsonArr.length > 0
                    ? jsonArr
                    : undefined;
            }
            else {
                switch (field.kind) {
                    case "scalar":
                        return writeScalar(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);
                    case "enum":
                        return writeEnum(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);
                    case "message":
                        return value !== undefined
                            ? (0, field_wrapper_js_1.wrapField)(field.T, value).toJson(options)
                            : undefined;
                }
            }
        };
    });
}
exports.makeJsonFormatProto3 = makeJsonFormatProto3;


/***/ }),

/***/ 3089:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeMessageType = void 0;
const message_js_1 = __nccwpck_require__(2779);
/**
 * Create a new message type using the given runtime.
 */
function makeMessageType(runtime, typeName, fields, opt) {
    var _a;
    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(".") + 1);
    const type = {
        [localName]: function (data) {
            runtime.util.initFields(this);
            runtime.util.initPartial(data, this);
        },
    }[localName];
    Object.setPrototypeOf(type.prototype, new message_js_1.Message());
    Object.assign(type, {
        runtime,
        typeName,
        fields: runtime.util.newFieldList(fields),
        fromBinary(bytes, options) {
            return new type().fromBinary(bytes, options);
        },
        fromJson(jsonValue, options) {
            return new type().fromJson(jsonValue, options);
        },
        fromJsonString(jsonString, options) {
            return new type().fromJsonString(jsonString, options);
        },
        equals(a, b) {
            return runtime.util.equals(type, a, b);
        },
    });
    return type;
}
exports.makeMessageType = makeMessageType;


/***/ }),

/***/ 9214:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeIdentifier = exports.safeObjectProperty = exports.findEnumSharedPrefix = exports.fieldJsonName = exports.localOneofName = exports.localFieldName = exports.localName = void 0;
/**
 * Returns the name of a protobuf element in generated code.
 *
 * Field names - including oneofs - are converted to lowerCamelCase. For
 * messages, enumerations and services, the package name is stripped from
 * the type name. For nested messages and enumerations, the names are joined
 * with an underscore. For methods, the first character is made lowercase.
 */
function localName(desc) {
    switch (desc.kind) {
        case "field":
            return localFieldName(desc.name, desc.oneof !== undefined);
        case "oneof":
            return localOneofName(desc.name);
        case "enum":
        case "message":
        case "service": {
            const pkg = desc.file.proto.package;
            const offset = pkg === undefined ? 0 : pkg.length + 1;
            const name = desc.typeName.substring(offset).replace(/\./g, "_");
            // For services, we only care about safe identifiers, not safe object properties,
            // but we have shipped v1 with a bug that respected object properties, and we
            // do not want to introduce a breaking change, so we continue to escape for
            // safe object properties.
            // See https://github.com/bufbuild/protobuf-es/pull/391
            return (0, exports.safeObjectProperty)((0, exports.safeIdentifier)(name));
        }
        case "enum_value": {
            const sharedPrefix = desc.parent.sharedPrefix;
            if (sharedPrefix === undefined) {
                return desc.name;
            }
            const name = desc.name.substring(sharedPrefix.length);
            return (0, exports.safeObjectProperty)(name);
        }
        case "rpc": {
            let name = desc.name;
            if (name.length == 0) {
                return name;
            }
            name = name[0].toLowerCase() + name.substring(1);
            return (0, exports.safeObjectProperty)(name);
        }
    }
}
exports.localName = localName;
/**
 * Returns the name of a field in generated code.
 */
function localFieldName(protoName, inOneof) {
    const name = protoCamelCase(protoName);
    if (inOneof) {
        // oneof member names are not properties, but values of the `case` property.
        return name;
    }
    return (0, exports.safeObjectProperty)(safeMessageProperty(name));
}
exports.localFieldName = localFieldName;
/**
 * Returns the name of a oneof group in generated code.
 */
function localOneofName(protoName) {
    return localFieldName(protoName, false);
}
exports.localOneofName = localOneofName;
/**
 * Returns the JSON name for a protobuf field, exactly like protoc does.
 */
exports.fieldJsonName = protoCamelCase;
/**
 * Finds a prefix shared by enum values, for example `MY_ENUM_` for
 * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.
 */
function findEnumSharedPrefix(enumName, valueNames) {
    const prefix = camelToSnakeCase(enumName) + "_";
    for (const name of valueNames) {
        if (!name.toLowerCase().startsWith(prefix)) {
            return undefined;
        }
        const shortName = name.substring(prefix.length);
        if (shortName.length == 0) {
            return undefined;
        }
        if (/^\d/.test(shortName)) {
            // identifiers must not start with numbers
            return undefined;
        }
    }
    return prefix;
}
exports.findEnumSharedPrefix = findEnumSharedPrefix;
/**
 * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.
 * This is used to find shared prefixes in an enum.
 */
function camelToSnakeCase(camel) {
    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => "_" + c)).toLowerCase();
}
/**
 * Converts snake_case to protoCamelCase according to the convention
 * used by protoc to convert a field name to a JSON name.
 */
function protoCamelCase(snakeCase) {
    let capNext = false;
    const b = [];
    for (let i = 0; i < snakeCase.length; i++) {
        let c = snakeCase.charAt(i);
        switch (c) {
            case "_":
                capNext = true;
                break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                b.push(c);
                capNext = false;
                break;
            default:
                if (capNext) {
                    capNext = false;
                    c = c.toUpperCase();
                }
                b.push(c);
                break;
        }
    }
    return b.join("");
}
/**
 * Names that cannot be used for identifiers, such as class names,
 * but _can_ be used for object properties.
 */
const reservedIdentifiers = new Set([
    // ECMAScript 2015 keywords
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "export",
    "extends",
    "false",
    "finally",
    "for",
    "function",
    "if",
    "import",
    "in",
    "instanceof",
    "new",
    "null",
    "return",
    "super",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "yield",
    // ECMAScript 2015 future reserved keywords
    "enum",
    "implements",
    "interface",
    "let",
    "package",
    "private",
    "protected",
    "public",
    "static",
    // Class name cannot be 'Object' when targeting ES5 with module CommonJS
    "Object",
    // TypeScript keywords that cannot be used for types (as opposed to variables)
    "bigint",
    "number",
    "boolean",
    "string",
    "object",
    // Identifiers reserved for the runtime, so we can generate legible code
    "globalThis",
    "Uint8Array",
    "Partial",
]);
/**
 * Names that cannot be used for object properties because they are reserved
 * by built-in JavaScript properties.
 */
const reservedObjectProperties = new Set([
    // names reserved by JavaScript
    "constructor",
    "toString",
    "toJSON",
    "valueOf",
]);
/**
 * Names that cannot be used for object properties because they are reserved
 * by the runtime.
 */
const reservedMessageProperties = new Set([
    // names reserved by the runtime
    "getType",
    "clone",
    "equals",
    "fromBinary",
    "fromJson",
    "fromJsonString",
    "toBinary",
    "toJson",
    "toJsonString",
    // names reserved by the runtime for the future
    "toObject",
]);
const fallback = (name) => `${name}$`;
/**
 * Will wrap names that are Object prototype properties or names reserved
 * for `Message`s.
 */
const safeMessageProperty = (name) => {
    if (reservedMessageProperties.has(name)) {
        return fallback(name);
    }
    return name;
};
/**
 * Names that cannot be used for object properties because they are reserved
 * by built-in JavaScript properties.
 */
const safeObjectProperty = (name) => {
    if (reservedObjectProperties.has(name)) {
        return fallback(name);
    }
    return name;
};
exports.safeObjectProperty = safeObjectProperty;
/**
 * Names that can be used for identifiers or class properties
 */
const safeIdentifier = (name) => {
    if (reservedIdentifiers.has(name)) {
        return fallback(name);
    }
    return name;
};
exports.safeIdentifier = safeIdentifier;


/***/ }),

/***/ 8959:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeProtoRuntime = void 0;
const enum_js_1 = __nccwpck_require__(8504);
const message_type_js_1 = __nccwpck_require__(3089);
function makeProtoRuntime(syntax, json, bin, util) {
    return {
        syntax,
        json,
        bin,
        util,
        makeMessageType(typeName, fields, opt) {
            return (0, message_type_js_1.makeMessageType)(this, typeName, fields, opt);
        },
        makeEnum: enum_js_1.makeEnum,
        makeEnumType: enum_js_1.makeEnumType,
        getEnumType: enum_js_1.getEnumType,
    };
}
exports.makeProtoRuntime = makeProtoRuntime;


/***/ }),

/***/ 514:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reifyWkt = void 0;
const field_js_1 = __nccwpck_require__(4756);
/**
 * Reifies a given DescMessage into a more concrete object representing its
 * respective well-known type.  The returned object will contain properties
 * representing the WKT's defined fields.
 *
 * Useful during code generation when immediate access to a particular field
 * is needed without having to search the object's typename and DescField list.
 *
 * Returns undefined if the WKT cannot be completely constructed via the
 * DescMessage.
 */
function reifyWkt(message) {
    switch (message.typeName) {
        case "google.protobuf.Any": {
            const typeUrl = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.STRING);
            const value = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.BYTES);
            if (typeUrl && value) {
                return {
                    typeName: message.typeName,
                    typeUrl,
                    value,
                };
            }
            break;
        }
        case "google.protobuf.Timestamp": {
            const seconds = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT64);
            const nanos = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT32);
            if (seconds && nanos) {
                return {
                    typeName: message.typeName,
                    seconds,
                    nanos,
                };
            }
            break;
        }
        case "google.protobuf.Duration": {
            const seconds = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT64);
            const nanos = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.INT32);
            if (seconds && nanos) {
                return {
                    typeName: message.typeName,
                    seconds,
                    nanos,
                };
            }
            break;
        }
        case "google.protobuf.Struct": {
            const fields = message.fields.find((f) => f.number == 1 && !f.repeated);
            if ((fields === null || fields === void 0 ? void 0 : fields.fieldKind) !== "map" ||
                fields.mapValue.kind !== "message" ||
                fields.mapValue.message.typeName !== "google.protobuf.Value") {
                break;
            }
            return { typeName: message.typeName, fields };
        }
        case "google.protobuf.Value": {
            const kind = message.oneofs.find((o) => o.name === "kind");
            const nullValue = message.fields.find((f) => f.number == 1 && f.oneof === kind);
            if ((nullValue === null || nullValue === void 0 ? void 0 : nullValue.fieldKind) !== "enum" ||
                nullValue.enum.typeName !== "google.protobuf.NullValue") {
                return undefined;
            }
            const numberValue = message.fields.find((f) => f.number == 2 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.DOUBLE &&
                f.oneof === kind);
            const stringValue = message.fields.find((f) => f.number == 3 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.STRING &&
                f.oneof === kind);
            const boolValue = message.fields.find((f) => f.number == 4 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.BOOL &&
                f.oneof === kind);
            const structValue = message.fields.find((f) => f.number == 5 && f.oneof === kind);
            if ((structValue === null || structValue === void 0 ? void 0 : structValue.fieldKind) !== "message" ||
                structValue.message.typeName !== "google.protobuf.Struct") {
                return undefined;
            }
            const listValue = message.fields.find((f) => f.number == 6 && f.oneof === kind);
            if ((listValue === null || listValue === void 0 ? void 0 : listValue.fieldKind) !== "message" ||
                listValue.message.typeName !== "google.protobuf.ListValue") {
                return undefined;
            }
            if (kind && numberValue && stringValue && boolValue) {
                return {
                    typeName: message.typeName,
                    kind,
                    nullValue,
                    numberValue,
                    stringValue,
                    boolValue,
                    structValue,
                    listValue,
                };
            }
            break;
        }
        case "google.protobuf.ListValue": {
            const values = message.fields.find((f) => f.number == 1 && f.repeated);
            if ((values === null || values === void 0 ? void 0 : values.fieldKind) != "message" ||
                values.message.typeName !== "google.protobuf.Value") {
                break;
            }
            return { typeName: message.typeName, values };
        }
        case "google.protobuf.FieldMask": {
            const paths = message.fields.find((f) => f.number == 1 &&
                f.fieldKind == "scalar" &&
                f.scalar === field_js_1.ScalarType.STRING &&
                f.repeated);
            if (paths) {
                return { typeName: message.typeName, paths };
            }
            break;
        }
        case "google.protobuf.DoubleValue":
        case "google.protobuf.FloatValue":
        case "google.protobuf.Int64Value":
        case "google.protobuf.UInt64Value":
        case "google.protobuf.Int32Value":
        case "google.protobuf.UInt32Value":
        case "google.protobuf.BoolValue":
        case "google.protobuf.StringValue":
        case "google.protobuf.BytesValue": {
            const value = message.fields.find((f) => f.number == 1 && f.name == "value");
            if (!value) {
                break;
            }
            if (value.fieldKind !== "scalar") {
                break;
            }
            return { typeName: message.typeName, value };
        }
    }
    return undefined;
}
exports.reifyWkt = reifyWkt;


/***/ }),

/***/ 5618:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scalarTypeInfo = exports.scalarDefaultValue = exports.scalarEquals = void 0;
const field_js_1 = __nccwpck_require__(4756);
const binary_encoding_js_1 = __nccwpck_require__(1304);
const proto_int64_js_1 = __nccwpck_require__(6865);
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Returns true if both scalar values are equal.
 */
function scalarEquals(type, a, b) {
    if (a === b) {
        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.
        return true;
    }
    // Special case BYTES - we need to compare each byte individually
    if (type == field_js_1.ScalarType.BYTES) {
        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {
            return false;
        }
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    // Special case 64-bit integers - we support number, string and bigint representation.
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
    switch (type) {
        case field_js_1.ScalarType.UINT64:
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            // Loose comparison will match between 0n, 0 and "0".
            return a == b;
    }
    // Anything that hasn't been caught by strict comparison or special cased
    // BYTES and 64-bit integers is not equal.
    return false;
}
exports.scalarEquals = scalarEquals;
/**
 * Returns the default value for the given scalar type, following
 * proto3 semantics.
 */
function scalarDefaultValue(type) {
    switch (type) {
        case field_js_1.ScalarType.BOOL:
            return false;
        case field_js_1.ScalarType.UINT64:
        case field_js_1.ScalarType.FIXED64:
        case field_js_1.ScalarType.INT64:
        case field_js_1.ScalarType.SFIXED64:
        case field_js_1.ScalarType.SINT64:
            return proto_int64_js_1.protoInt64.zero;
        case field_js_1.ScalarType.DOUBLE:
        case field_js_1.ScalarType.FLOAT:
            return 0.0;
        case field_js_1.ScalarType.BYTES:
            return new Uint8Array(0);
        case field_js_1.ScalarType.STRING:
            return "";
        default:
            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.
            // We do not use individual cases to save a few bytes code size.
            return 0;
    }
}
exports.scalarDefaultValue = scalarDefaultValue;
/**
 * Get information for writing a scalar value.
 *
 * Returns tuple:
 * [0]: appropriate WireType
 * [1]: name of the appropriate method of IBinaryWriter
 * [2]: whether the given value is a default value for proto3 semantics
 *
 * If argument `value` is omitted, [2] is always false.
 */
function scalarTypeInfo(type, value) {
    const isUndefined = value === undefined;
    let wireType = binary_encoding_js_1.WireType.Varint;
    let isIntrinsicDefault = value === 0;
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults
    switch (type) {
        case field_js_1.ScalarType.STRING:
            isIntrinsicDefault = isUndefined || !value.length;
            wireType = binary_encoding_js_1.WireType.LengthDelimited;
            break;
        case field_js_1.ScalarType.BOOL:
            isIntrinsicDefault = value === false;
            break;
        case field_js_1.ScalarType.DOUBLE:
            wireType = binary_encoding_js_1.WireType.Bit64;
            break;
        case field_js_1.ScalarType.FLOAT:
            wireType = binary_encoding_js_1.WireType.Bit32;
            break;
        case field_js_1.ScalarType.INT64:
            isIntrinsicDefault = isUndefined || value == 0;
            break;
        case field_js_1.ScalarType.UINT64:
            isIntrinsicDefault = isUndefined || value == 0;
            break;
        case field_js_1.ScalarType.FIXED64:
            isIntrinsicDefault = isUndefined || value == 0;
            wireType = binary_encoding_js_1.WireType.Bit64;
            break;
        case field_js_1.ScalarType.BYTES:
            isIntrinsicDefault = isUndefined || !value.byteLength;
            wireType = binary_encoding_js_1.WireType.LengthDelimited;
            break;
        case field_js_1.ScalarType.FIXED32:
            wireType = binary_encoding_js_1.WireType.Bit32;
            break;
        case field_js_1.ScalarType.SFIXED32:
            wireType = binary_encoding_js_1.WireType.Bit32;
            break;
        case field_js_1.ScalarType.SFIXED64:
            isIntrinsicDefault = isUndefined || value == 0;
            wireType = binary_encoding_js_1.WireType.Bit64;
            break;
        case field_js_1.ScalarType.SINT64:
            isIntrinsicDefault = isUndefined || value == 0;
            break;
    }
    const method = field_js_1.ScalarType[type].toLowerCase();
    return [wireType, method, isUndefined || isIntrinsicDefault];
}
exports.scalarTypeInfo = scalarTypeInfo;


/***/ }),

/***/ 9091:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeUtilCommon = void 0;
const enum_js_1 = __nccwpck_require__(8504);
const message_js_1 = __nccwpck_require__(2779);
const field_js_1 = __nccwpck_require__(4756);
const scalars_js_1 = __nccwpck_require__(5618);
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */
function makeUtilCommon() {
    return {
        setEnumType: enum_js_1.setEnumType,
        initPartial(source, target) {
            if (source === undefined) {
                return;
            }
            const type = target.getType();
            for (const member of type.fields.byMember()) {
                const localName = member.localName, t = target, s = source;
                if (s[localName] === undefined) {
                    continue;
                }
                switch (member.kind) {
                    case "oneof":
                        const sk = s[localName].case;
                        if (sk === undefined) {
                            continue;
                        }
                        const sourceField = member.findField(sk);
                        let val = s[localName].value;
                        if (sourceField &&
                            sourceField.kind == "message" &&
                            !(val instanceof sourceField.T)) {
                            val = new sourceField.T(val);
                        }
                        t[localName] = { case: sk, value: val };
                        break;
                    case "scalar":
                    case "enum":
                        t[localName] = s[localName];
                        break;
                    case "map":
                        switch (member.V.kind) {
                            case "scalar":
                            case "enum":
                                Object.assign(t[localName], s[localName]);
                                break;
                            case "message":
                                const messageType = member.V.T;
                                for (const k of Object.keys(s[localName])) {
                                    let val = s[localName][k];
                                    if (!messageType.fieldWrapper) {
                                        // We only take partial input for messages that are not a wrapper type.
                                        // For those messages, we recursively normalize the partial input.
                                        val = new messageType(val);
                                    }
                                    t[localName][k] = val;
                                }
                                break;
                        }
                        break;
                    case "message":
                        const mt = member.T;
                        if (member.repeated) {
                            t[localName] = s[localName].map((val) => val instanceof mt ? val : new mt(val));
                        }
                        else if (s[localName] !== undefined) {
                            const val = s[localName];
                            if (mt.fieldWrapper) {
                                t[localName] = val;
                            }
                            else {
                                t[localName] = val instanceof mt ? val : new mt(val);
                            }
                        }
                        break;
                }
            }
        },
        equals(type, a, b) {
            if (a === b) {
                return true;
            }
            if (!a || !b) {
                return false;
            }
            return type.fields.byMember().every((m) => {
                const va = a[m.localName];
                const vb = b[m.localName];
                if (m.repeated) {
                    if (va.length !== vb.length) {
                        return false;
                    }
                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never "map"
                    switch (m.kind) {
                        case "message":
                            return va.every((a, i) => m.T.equals(a, vb[i]));
                        case "scalar":
                            return va.every((a, i) => (0, scalars_js_1.scalarEquals)(m.T, a, vb[i]));
                        case "enum":
                            return va.every((a, i) => (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, a, vb[i]));
                    }
                    throw new Error(`repeated cannot contain ${m.kind}`);
                }
                switch (m.kind) {
                    case "message":
                        return m.T.equals(va, vb);
                    case "enum":
                        return (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, va, vb);
                    case "scalar":
                        return (0, scalars_js_1.scalarEquals)(m.T, va, vb);
                    case "oneof":
                        if (va.case !== vb.case) {
                            return false;
                        }
                        const s = m.findField(va.case);
                        if (s === undefined) {
                            return true;
                        }
                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never "map"
                        switch (s.kind) {
                            case "message":
                                return s.T.equals(va.value, vb.value);
                            case "enum":
                                return (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, va.value, vb.value);
                            case "scalar":
                                return (0, scalars_js_1.scalarEquals)(s.T, va.value, vb.value);
                        }
                        throw new Error(`oneof cannot contain ${s.kind}`);
                    case "map":
                        const keys = Object.keys(va).concat(Object.keys(vb));
                        switch (m.V.kind) {
                            case "message":
                                const messageType = m.V.T;
                                return keys.every((k) => messageType.equals(va[k], vb[k]));
                            case "enum":
                                return keys.every((k) => (0, scalars_js_1.scalarEquals)(field_js_1.ScalarType.INT32, va[k], vb[k]));
                            case "scalar":
                                const scalarType = m.V.T;
                                return keys.every((k) => (0, scalars_js_1.scalarEquals)(scalarType, va[k], vb[k]));
                        }
                        break;
                }
            });
        },
        clone(message) {
            const type = message.getType(), target = new type(), any = target;
            for (const member of type.fields.byMember()) {
                const source = message[member.localName];
                let copy;
                if (member.repeated) {
                    copy = source.map((e) => cloneSingularField(member, e));
                }
                else if (member.kind == "map") {
                    copy = any[member.localName];
                    for (const [key, v] of Object.entries(source)) {
                        copy[key] = cloneSingularField(member.V, v);
                    }
                }
                else if (member.kind == "oneof") {
                    const f = member.findField(source.case);
                    copy = f
                        ? { case: source.case, value: cloneSingularField(f, source.value) }
                        : { case: undefined };
                }
                else {
                    copy = cloneSingularField(member, source);
                }
                any[member.localName] = copy;
            }
            return target;
        },
    };
}
exports.makeUtilCommon = makeUtilCommon;
// clone a single field value - i.e. the element type of repeated fields, the value type of maps
function cloneSingularField(field, value) {
    if (value === undefined) {
        return value;
    }
    if (value instanceof message_js_1.Message) {
        return value.clone();
    }
    if (value instanceof Uint8Array) {
        const c = new Uint8Array(value.byteLength);
        c.set(value);
        return c;
    }
    return value;
}


/***/ }),

/***/ 5477:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoBase64 = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */
// lookup table from base64 character to byte
let encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
// lookup table from base64 character *code* to byte because lookup by number is fast
let decTable = [];
for (let i = 0; i < encTable.length; i++)
    decTable[encTable[i].charCodeAt(0)] = i;
// support base64url variants
decTable["-".charCodeAt(0)] = encTable.indexOf("+");
decTable["_".charCodeAt(0)] = encTable.indexOf("/");
exports.protoBase64 = {
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    dec(base64Str) {
        // estimate byte size, not accounting for inner padding and whitespace
        let es = (base64Str.length * 3) / 4;
        if (base64Str[base64Str.length - 2] == "=")
            es -= 2;
        else if (base64Str[base64Str.length - 1] == "=")
            es -= 1;
        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array
        groupPos = 0, // position in base64 group
        b, // current byte
        p = 0; // previous byte
        for (let i = 0; i < base64Str.length; i++) {
            b = decTable[base64Str.charCodeAt(i)];
            if (b === undefined) {
                switch (base64Str[i]) {
                    // @ts-ignore TS7029: Fallthrough case in switch
                    case "=":
                        groupPos = 0; // reset state when padding found
                    // @ts-ignore TS7029: Fallthrough case in switch
                    case "\n":
                    case "\r":
                    case "\t":
                    case " ":
                        continue; // skip white-space, and padding
                    default:
                        throw Error("invalid base64 string.");
                }
            }
            switch (groupPos) {
                case 0:
                    p = b;
                    groupPos = 1;
                    break;
                case 1:
                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);
                    p = b;
                    groupPos = 2;
                    break;
                case 2:
                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);
                    p = b;
                    groupPos = 3;
                    break;
                case 3:
                    bytes[bytePos++] = ((p & 3) << 6) | b;
                    groupPos = 0;
                    break;
            }
        }
        if (groupPos == 1)
            throw Error("invalid base64 string.");
        return bytes.subarray(0, bytePos);
    },
    /**
     * Encode a byte array to a base64 string.
     */
    enc(bytes) {
        let base64 = "", groupPos = 0, // position in base64 group
        b, // current byte
        p = 0; // carry over from previous byte
        for (let i = 0; i < bytes.length; i++) {
            b = bytes[i];
            switch (groupPos) {
                case 0:
                    base64 += encTable[b >> 2];
                    p = (b & 3) << 4;
                    groupPos = 1;
                    break;
                case 1:
                    base64 += encTable[p | (b >> 4)];
                    p = (b & 15) << 2;
                    groupPos = 2;
                    break;
                case 2:
                    base64 += encTable[p | (b >> 6)];
                    base64 += encTable[b & 63];
                    groupPos = 0;
                    break;
            }
        }
        // add output padding
        if (groupPos) {
            base64 += encTable[p];
            base64 += "=";
            if (groupPos == 1)
                base64 += "=";
        }
        return base64;
    },
};


/***/ }),

/***/ 4507:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoDelimited = void 0;
const binary_format_common_js_1 = __nccwpck_require__(9639);
const binary_encoding_js_1 = __nccwpck_require__(1304);
/**
 * protoDelimited provides functions to serialize and parse size-delimited
 * messages.
 *
 * A size-delimited message is a varint size in bytes, followed by exactly
 * that many bytes of a message serialized with the binary format.
 *
 * This size-delimited format is compatible with other implementations.
 * For details, see https://github.com/protocolbuffers/protobuf/issues/10229
 */
exports.protoDelimited = {
    /**
     * Serialize a message, prefixing it with its size.
     */
    enc(message, options) {
        const opt = (0, binary_format_common_js_1.makeBinaryFormatCommon)().makeWriteOptions(options);
        return opt.writerFactory().bytes(message.toBinary(opt)).finish();
    },
    /**
     * Parse a size-delimited message, ignoring extra bytes.
     */
    dec(type, bytes, options) {
        const opt = (0, binary_format_common_js_1.makeBinaryFormatCommon)().makeReadOptions(options);
        return type.fromBinary(opt.readerFactory(bytes).bytes(), opt);
    },
    /**
     * Parse a stream of size-delimited messages.
     */
    decStream(type, iterable) {
        return __asyncGenerator(this, arguments, function* decStream_1() {
            var _a, e_1, _b, _c;
            // append chunk to buffer, returning updated buffer
            function append(buffer, chunk) {
                const n = new Uint8Array(buffer.byteLength + chunk.byteLength);
                n.set(buffer);
                n.set(chunk, buffer.length);
                return n;
            }
            let buffer = new Uint8Array(0);
            try {
                for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), _a = iterable_1_1.done, !_a; _d = true) {
                    _c = iterable_1_1.value;
                    _d = false;
                    const chunk = _c;
                    buffer = append(buffer, chunk);
                    for (;;) {
                        const size = exports.protoDelimited.peekSize(buffer);
                        if (size.eof) {
                            // size is incomplete, buffer more data
                            break;
                        }
                        if (size.offset + size.size > buffer.byteLength) {
                            // message is incomplete, buffer more data
                            break;
                        }
                        yield yield __await(exports.protoDelimited.dec(type, buffer));
                        buffer = buffer.subarray(size.offset + size.size);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_1.return)) yield __await(_b.call(iterable_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (buffer.byteLength > 0) {
                throw new Error("incomplete data");
            }
        });
    },
    /**
     * Decodes the size from the given size-delimited message, which may be
     * incomplete.
     *
     * Returns an object with the following properties:
     * - size: The size of the delimited message in bytes
     * - offset: The offset in the given byte array where the message starts
     * - eof: true
     *
     * If the size-delimited data does not include all bytes of the varint size,
     * the following object is returned:
     * - size: null
     * - offset: null
     * - eof: false
     *
     * This function can be used to implement parsing of size-delimited messages
     * from a stream.
     */
    peekSize(data) {
        const sizeEof = { eof: true, size: null, offset: null };
        for (let i = 0; i < 10; i++) {
            if (i > data.byteLength) {
                return sizeEof;
            }
            if ((data[i] & 0x80) == 0) {
                const reader = new binary_encoding_js_1.BinaryReader(data);
                let size;
                try {
                    size = reader.uint32();
                }
                catch (e) {
                    if (e instanceof RangeError) {
                        return sizeEof;
                    }
                    throw e;
                }
                return {
                    eof: false,
                    size,
                    offset: reader.pos,
                };
            }
        }
        throw new Error("invalid varint");
    },
};


/***/ }),

/***/ 7303:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoDouble = void 0;
// Export global Number constants. This is done so that we can safely use
// these global constants when generating code and be assured we're using
// the correct values. We cannot rely on globalThis since we support ES2017
// and globalThis was introduced in ES2020. We also don't want to explicitly
// generate code using, for example, Number.NaN, since this could clash with
// a message name of Number. Instead we can export them here since this will
// be in a different scope as the generated code and we are guaranteed to use
// the intended global values.
exports.protoDouble = {
    NaN: Number.NaN,
    POSITIVE_INFINITY: Number.POSITIVE_INFINITY,
    NEGATIVE_INFINITY: Number.NEGATIVE_INFINITY,
};


/***/ }),

/***/ 6865:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.protoInt64 = void 0;
const assert_js_1 = __nccwpck_require__(1594);
const varint_js_1 = __nccwpck_require__(9119);
function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    // note that Safari 14 implements BigInt, but not the DataView methods
    const ok = typeof BigInt === "function" &&
        typeof dv.getBigInt64 === "function" &&
        typeof dv.getBigUint64 === "function" &&
        typeof dv.setBigInt64 === "function" &&
        typeof dv.setBigUint64 === "function" &&
        (typeof process != "object" ||
            typeof process.env != "object" ||
            process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok) {
        const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
        return {
            zero: BigInt(0),
            supported: true,
            parse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > MAX || bi < MIN) {
                    throw new Error(`int64 invalid: ${value}`);
                }
                return bi;
            },
            uParse(value) {
                const bi = typeof value == "bigint" ? value : BigInt(value);
                if (bi > UMAX || bi < UMIN) {
                    throw new Error(`uint64 invalid: ${value}`);
                }
                return bi;
            },
            enc(value) {
                dv.setBigInt64(0, this.parse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            uEnc(value) {
                dv.setBigInt64(0, this.uParse(value), true);
                return {
                    lo: dv.getInt32(0, true),
                    hi: dv.getInt32(4, true),
                };
            },
            dec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigInt64(0, true);
            },
            uDec(lo, hi) {
                dv.setInt32(0, lo, true);
                dv.setInt32(4, hi, true);
                return dv.getBigUint64(0, true);
            },
        };
    }
    const assertInt64String = (value) => (0, assert_js_1.assert)(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);
    const assertUInt64String = (value) => (0, assert_js_1.assert)(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);
    return {
        zero: "0",
        supported: false,
        parse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return value;
        },
        uParse(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return value;
        },
        enc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertInt64String(value);
            return (0, varint_js_1.int64FromString)(value);
        },
        uEnc(value) {
            if (typeof value != "string") {
                value = value.toString();
            }
            assertUInt64String(value);
            return (0, varint_js_1.int64FromString)(value);
        },
        dec(lo, hi) {
            return (0, varint_js_1.int64ToString)(lo, hi);
        },
        uDec(lo, hi) {
            return (0, varint_js_1.uInt64ToString)(lo, hi);
        },
    };
}
exports.protoInt64 = makeInt64Support();


/***/ }),

/***/ 3605:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.proto2 = void 0;
const proto_runtime_js_1 = __nccwpck_require__(8959);
const binary_format_proto2_js_1 = __nccwpck_require__(3794);
const util_common_js_1 = __nccwpck_require__(9091);
const field_list_js_1 = __nccwpck_require__(653);
const field_js_1 = __nccwpck_require__(158);
const names_js_1 = __nccwpck_require__(9214);
const json_format_proto2_js_1 = __nccwpck_require__(1626);
/**
 * Provides functionality for messages defined with the proto2 syntax.
 */
exports.proto2 = (0, proto_runtime_js_1.makeProtoRuntime)("proto2", (0, json_format_proto2_js_1.makeJsonFormatProto2)(), (0, binary_format_proto2_js_1.makeBinaryFormatProto2)(), Object.assign(Object.assign({}, (0, util_common_js_1.makeUtilCommon)()), { newFieldList(fields) {
        return new field_list_js_1.InternalFieldList(fields, normalizeFieldInfosProto2);
    },
    initFields(target) {
        for (const member of target.getType().fields.byMember()) {
            const name = member.localName, t = target;
            if (member.repeated) {
                t[name] = [];
                continue;
            }
            switch (member.kind) {
                case "oneof":
                    t[name] = { case: undefined };
                    break;
                case "map":
                    t[name] = {};
                    break;
                case "scalar":
                case "enum":
                case "message":
                    // In contrast to proto3, enum and scalar fields have no intrinsic default value,
                    // only an optional explicit default value.
                    // Unlike proto3 intrinsic default values, proto2 explicit default values are not
                    // set on construction, because they are not omitted on the wire. If we did set
                    // default values on construction, a deserialize-serialize round-trip would add
                    // fields to a message.
                    break;
            }
        }
    } }));
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function normalizeFieldInfosProto2(fieldInfos) {
    var _a, _b, _c;
    const r = [];
    let o;
    for (const field of typeof fieldInfos == "function"
        ? fieldInfos()
        : fieldInfos) {
        const f = field;
        f.localName = (0, names_js_1.localFieldName)(field.name, field.oneof !== undefined);
        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : (0, names_js_1.fieldJsonName)(field.name);
        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
        // In contrast to proto3, repeated fields are unpacked except when explicitly specified.
        f.packed = (_c = field.packed) !== null && _c !== void 0 ? _c : false;
        // We do not surface options at this time
        // f.options = field.options ?? emptyReadonlyObject;
        if (field.oneof !== undefined) {
            const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
            if (!o || o.name != ooname) {
                o = new field_js_1.InternalOneofInfo(ooname);
            }
            f.oneof = o;
            o.addField(f);
        }
        r.push(f);
    }
    return r;
}


/***/ }),

/***/ 9947:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.proto3 = void 0;
const proto_runtime_js_1 = __nccwpck_require__(8959);
const binary_format_proto3_js_1 = __nccwpck_require__(9558);
const json_format_proto3_js_1 = __nccwpck_require__(8946);
const util_common_js_1 = __nccwpck_require__(9091);
const field_list_js_1 = __nccwpck_require__(653);
const scalars_js_1 = __nccwpck_require__(5618);
const field_js_1 = __nccwpck_require__(4756);
const field_js_2 = __nccwpck_require__(158);
const names_js_1 = __nccwpck_require__(9214);
/**
 * Provides functionality for messages defined with the proto3 syntax.
 */
exports.proto3 = (0, proto_runtime_js_1.makeProtoRuntime)("proto3", (0, json_format_proto3_js_1.makeJsonFormatProto3)(), (0, binary_format_proto3_js_1.makeBinaryFormatProto3)(), Object.assign(Object.assign({}, (0, util_common_js_1.makeUtilCommon)()), { newFieldList(fields) {
        return new field_list_js_1.InternalFieldList(fields, normalizeFieldInfosProto3);
    },
    initFields(target) {
        for (const member of target.getType().fields.byMember()) {
            if (member.opt) {
                continue;
            }
            const name = member.localName, t = target;
            if (member.repeated) {
                t[name] = [];
                continue;
            }
            switch (member.kind) {
                case "oneof":
                    t[name] = { case: undefined };
                    break;
                case "enum":
                    t[name] = 0;
                    break;
                case "map":
                    t[name] = {};
                    break;
                case "scalar":
                    t[name] = (0, scalars_js_1.scalarDefaultValue)(member.T); // eslint-disable-line @typescript-eslint/no-unsafe-assignment
                    break;
                case "message":
                    // message fields are always optional in proto3
                    break;
            }
        }
    } }));
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */
function normalizeFieldInfosProto3(fieldInfos) {
    var _a, _b, _c;
    const r = [];
    let o;
    for (const field of typeof fieldInfos == "function"
        ? fieldInfos()
        : fieldInfos) {
        const f = field;
        f.localName = (0, names_js_1.localFieldName)(field.name, field.oneof !== undefined);
        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : (0, names_js_1.fieldJsonName)(field.name);
        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
        // From the proto3 language guide:
        // > In proto3, repeated fields of scalar numeric types are packed by default.
        // This information is incomplete - according to the conformance tests, BOOL
        // and ENUM are packed by default as well. This means only STRING and BYTES
        // are not packed by default, which makes sense because they are length-delimited.
        f.packed =
            (_c = field.packed) !== null && _c !== void 0 ? _c : (field.kind == "enum" ||
                (field.kind == "scalar" &&
                    field.T != field_js_1.ScalarType.BYTES &&
                    field.T != field_js_1.ScalarType.STRING));
        // We do not surface options at this time
        // f.options = field.options ?? emptyReadonlyObject;
        if (field.oneof !== undefined) {
            const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
            if (!o || o.name != ooname) {
                o = new field_js_2.InternalOneofInfo(ooname);
            }
            f.oneof = o;
            o.addField(f);
        }
        r.push(f);
    }
    return r;
}


/***/ }),

/***/ 9552:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MethodIdempotency = exports.MethodKind = void 0;
/**
 * MethodKind represents the four method types that can be declared in
 * protobuf with the `stream` keyword:
 *
 * 1. Unary:           rpc (Input) returns (Output)
 * 2. ServerStreaming: rpc (Input) returns (stream Output)
 * 3. ClientStreaming: rpc (stream Input) returns (Output)
 * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)
 */
var MethodKind;
(function (MethodKind) {
    MethodKind[MethodKind["Unary"] = 0] = "Unary";
    MethodKind[MethodKind["ServerStreaming"] = 1] = "ServerStreaming";
    MethodKind[MethodKind["ClientStreaming"] = 2] = "ClientStreaming";
    MethodKind[MethodKind["BiDiStreaming"] = 3] = "BiDiStreaming";
})(MethodKind || (exports.MethodKind = MethodKind = {}));
/**
 * Is this method side-effect-free (or safe in HTTP parlance), or just
 * idempotent, or neither? HTTP based RPC implementation may choose GET verb
 * for safe methods, and PUT verb for idempotent methods instead of the
 * default POST.
 *
 * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,
 * defined in the well-known type google/protobuf/descriptor.proto, but
 * drops UNKNOWN.
 */
var MethodIdempotency;
(function (MethodIdempotency) {
    /**
     * Idempotent, no side effects.
     */
    MethodIdempotency[MethodIdempotency["NoSideEffects"] = 1] = "NoSideEffects";
    /**
     * Idempotent, but may have side effects.
     */
    MethodIdempotency[MethodIdempotency["Idempotent"] = 2] = "Idempotent";
})(MethodIdempotency || (exports.MethodIdempotency = MethodIdempotency = {}));


/***/ }),

/***/ 4558:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlainMessage = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */
const message_js_1 = __nccwpck_require__(2779);
/**
 * toPlainMessage returns a new object by striping
 * all methods from a message, leaving only fields and
 * oneof groups. It is recursive, meaning it applies this
 * same logic to all nested message fields as well.
 */
function toPlainMessage(message) {
    const type = message.getType();
    const target = {};
    for (const member of type.fields.byMember()) {
        const source = message[member.localName];
        let copy;
        if (member.repeated) {
            copy = source.map((e) => toPlainValue(e));
        }
        else if (member.kind == "map") {
            copy = {};
            for (const [key, v] of Object.entries(source)) {
                copy[key] = toPlainValue(v);
            }
        }
        else if (member.kind == "oneof") {
            const f = member.findField(source.case);
            copy = f
                ? { case: source.case, value: toPlainValue(source.value) }
                : { case: undefined };
        }
        else {
            copy = toPlainValue(source);
        }
        target[member.localName] = copy;
    }
    return target;
}
exports.toPlainMessage = toPlainMessage;
function toPlainValue(value) {
    if (value === undefined) {
        return value;
    }
    if (value instanceof message_js_1.Message) {
        return toPlainMessage(value);
    }
    if (value instanceof Uint8Array) {
        const c = new Uint8Array(value.byteLength);
        c.set(value);
        return c;
    }
    return value;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nccwpck_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// ESM COMPAT FLAG
__nccwpck_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@actions/core/lib/core.js
var core = __nccwpck_require__(2186);
;// CONCATENATED MODULE: ./node_modules/@bufbuild/protobuf/dist/esm/service-type.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * MethodKind represents the four method types that can be declared in
 * protobuf with the `stream` keyword:
 *
 * 1. Unary:           rpc (Input) returns (Output)
 * 2. ServerStreaming: rpc (Input) returns (stream Output)
 * 3. ClientStreaming: rpc (stream Input) returns (Output)
 * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)
 */
var service_type_MethodKind;
(function (MethodKind) {
    MethodKind[MethodKind["Unary"] = 0] = "Unary";
    MethodKind[MethodKind["ServerStreaming"] = 1] = "ServerStreaming";
    MethodKind[MethodKind["ClientStreaming"] = 2] = "ClientStreaming";
    MethodKind[MethodKind["BiDiStreaming"] = 3] = "BiDiStreaming";
})(service_type_MethodKind || (service_type_MethodKind = {}));
/**
 * Is this method side-effect-free (or safe in HTTP parlance), or just
 * idempotent, or neither? HTTP based RPC implementation may choose GET verb
 * for safe methods, and PUT verb for idempotent methods instead of the
 * default POST.
 *
 * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,
 * defined in the well-known type google/protobuf/descriptor.proto, but
 * drops UNKNOWN.
 */
var MethodIdempotency;
(function (MethodIdempotency) {
    /**
     * Idempotent, no side effects.
     */
    MethodIdempotency[MethodIdempotency["NoSideEffects"] = 1] = "NoSideEffects";
    /**
     * Idempotent, but may have side effects.
     */
    MethodIdempotency[MethodIdempotency["Idempotent"] = 2] = "Idempotent";
})(MethodIdempotency || (MethodIdempotency = {}));

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/interceptor.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * applyInterceptors takes the given UnaryFn or ServerStreamingFn, and wraps
 * it with each of the given interceptors, returning a new UnaryFn or
 * ServerStreamingFn.
 */
function applyInterceptors(next, interceptors) {
    return interceptors
        .concat()
        .reverse()
        .reduce(
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    (n, i) => i(n), next // eslint-disable-line @typescript-eslint/no-explicit-any
    );
}
/**
 * Runs a unary method with the given interceptors. Note that this function
 * is only used when implementing a Transport.
 */
function runUnary(req, next, interceptors) {
    if (interceptors) {
        next = applyInterceptors(next, interceptors);
    }
    return next(req);
}
/**
 * Runs a server-streaming method with the given interceptors. Note that this
 * function is only used when implementing a Transport.
 */
function runStreaming(req, next, interceptors) {
    if (interceptors) {
        next = applyInterceptors(next, interceptors);
    }
    return next(req);
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/http-headers.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



/**
 * Encode a single binary header value according to the Connect
 * and gRPC specifications.
 *
 * This function accepts raw binary data from a buffer, a string
 * with UTF-8 text, or a protobuf message. It encodes the input
 * with unpadded base64 and returns a string that can be used for
 * a header whose name ends with `-bin`.
 */
function encodeBinaryHeader(value) {
    let bytes;
    if (value instanceof Message) {
        bytes = value.toBinary();
    }
    else if (typeof value == "string") {
        bytes = new TextEncoder().encode(value);
    }
    else {
        bytes = value instanceof Uint8Array ? value : new Uint8Array(value);
    }
    return protoBase64.enc(bytes).replace(/=+$/, "");
}
function decodeBinaryHeader(value, type, options) {
    try {
        const bytes = protoBase64.dec(value);
        if (type) {
            return type.fromBinary(bytes, options);
        }
        return bytes;
    }
    catch (e) {
        throw connectErrorFromReason(e, Code.DataLoss);
    }
}
/**
 * Merge two or more Headers objects by appending all fields from
 * all inputs to a new Headers object.
 */
function http_headers_appendHeaders(...headers) {
    const h = new Headers();
    for (const e of headers) {
        e.forEach((value, key) => {
            h.append(key, value);
        });
    }
    return h;
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/code.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Connect represents categories of errors as codes, and each code maps to a
 * specific HTTP status code. The codes and their semantics were chosen to
 * match gRPC. Only the codes below are valid — there are no user-defined
 * codes.
 *
 * See the specification at https://connect.build/docs/protocol#error-codes
 * for details.
 */
var code_Code;
(function (Code) {
    /**
     * Canceled, usually be the user
     */
    Code[Code["Canceled"] = 1] = "Canceled";
    /**
     * Unknown error
     */
    Code[Code["Unknown"] = 2] = "Unknown";
    /**
     * Argument invalid regardless of system state
     */
    Code[Code["InvalidArgument"] = 3] = "InvalidArgument";
    /**
     * Operation expired, may or may not have completed.
     */
    Code[Code["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    /**
     * Entity not found.
     */
    Code[Code["NotFound"] = 5] = "NotFound";
    /**
     * Entity already exists.
     */
    Code[Code["AlreadyExists"] = 6] = "AlreadyExists";
    /**
     * Operation not authorized.
     */
    Code[Code["PermissionDenied"] = 7] = "PermissionDenied";
    /**
     * Quota exhausted.
     */
    Code[Code["ResourceExhausted"] = 8] = "ResourceExhausted";
    /**
     * Argument invalid in current system state.
     */
    Code[Code["FailedPrecondition"] = 9] = "FailedPrecondition";
    /**
     * Operation aborted.
     */
    Code[Code["Aborted"] = 10] = "Aborted";
    /**
     * Out of bounds, use instead of FailedPrecondition.
     */
    Code[Code["OutOfRange"] = 11] = "OutOfRange";
    /**
     * Operation not implemented or disabled.
     */
    Code[Code["Unimplemented"] = 12] = "Unimplemented";
    /**
     * Internal error, reserved for "serious errors".
     */
    Code[Code["Internal"] = 13] = "Internal";
    /**
     * Unavailable, client should back off and retry.
     */
    Code[Code["Unavailable"] = 14] = "Unavailable";
    /**
     * Unrecoverable data loss or corruption.
     */
    Code[Code["DataLoss"] = 15] = "DataLoss";
    /**
     * Request isn't authenticated.
     */
    Code[Code["Unauthenticated"] = 16] = "Unauthenticated";
})(code_Code || (code_Code = {}));

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/code-string.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * codeToString returns the string representation of a Code.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function code_string_codeToString(value) {
    const name = code_Code[value];
    if (typeof name != "string") {
        return value.toString();
    }
    return (name[0].toLowerCase() +
        name.substring(1).replace(/[A-Z]/g, (c) => "_" + c.toLowerCase()));
}
let stringToCode;
/**
 * codeFromString parses the string representation of a Code in snake_case.
 * For example, the string "permission_denied" parses into Code.PermissionDenied.
 *
 * If the given string cannot be parsed, the function returns undefined.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeFromString(value) {
    if (!stringToCode) {
        stringToCode = {};
        for (const value of Object.values(code_Code)) {
            if (typeof value == "string") {
                continue;
            }
            stringToCode[code_string_codeToString(value)] = value;
        }
    }
    return stringToCode[value];
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/connect-error.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



/**
 * ConnectError captures four pieces of information: a Code, an error
 * message, an optional cause of the error, and an optional collection of
 * arbitrary Protobuf messages called  "details".
 *
 * Because developer tools typically show just the error message, we prefix
 * it with the status code, so that the most important information is always
 * visible immediately.
 *
 * Error details are wrapped with google.protobuf.Any on the wire, so that
 * a server or middleware can attach arbitrary data to an error. Use the
 * function connectErrorDetails() to retrieve the details.
 */
class connect_error_ConnectError extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message, code = code_Code.Unknown, metadata, outgoingDetails, cause) {
        super(createMessage(message, code));
        this.name = "ConnectError";
        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example
        Object.setPrototypeOf(this, new.target.prototype);
        this.rawMessage = message;
        this.code = code;
        this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
        this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
        this.cause = cause;
    }
}
function connectErrorDetails(error, typeOrRegistry, ...moreTypes) {
    const types = "typeName" in typeOrRegistry ? [typeOrRegistry, ...moreTypes] : [];
    const registry = "typeName" in typeOrRegistry ? createRegistry(...types) : typeOrRegistry;
    const details = [];
    for (const data of error.details) {
        if (data instanceof Message) {
            if (registry.findMessage(data.getType().typeName)) {
                details.push(data);
            }
            continue;
        }
        const type = registry.findMessage(data.type);
        if (type) {
            try {
                details.push(type.fromBinary(data.value));
            }
            catch (_) {
                //
            }
        }
    }
    return details;
}
/**
 * Create an error message, prefixing the given code.
 */
function createMessage(message, code) {
    return message.length
        ? `[${code_string_codeToString(code)}] ${message}`
        : `[${code_string_codeToString(code)}]`;
}
/**
 * Convert any value - typically a caught error into a ConnectError,
 * following these rules:
 * - If the value is already a ConnectError, return it as is.
 * - If the value is an AbortError from the fetch API, return the message
 *   of the AbortError with code Canceled.
 * - For other Errors, return the error message with code Unknown by default.
 * - For other values, return the values String representation as a message,
 *   with the code Unknown by default.
 */
function connect_error_connectErrorFromReason(reason, code = code_Code.Unknown) {
    if (reason instanceof connect_error_ConnectError) {
        return reason;
    }
    if (reason instanceof Error) {
        if (reason.name == "AbortError") {
            // Fetch requests can only be canceled with an AbortController.
            // We detect that condition by looking at the name of the raised
            // error object, and translate to the appropriate status code.
            return new connect_error_ConnectError(reason.message, code_Code.Canceled);
        }
        return new connect_error_ConnectError(reason.message, code);
    }
    return new connect_error_ConnectError(String(reason), code);
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol/serialization.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



/**
 * Create an object that provides convenient access to request and response
 * message serialization for a given method.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createMethodSerializationLookup(method, binaryOptions, jsonOptions, limitOptions) {
    const inputBinary = limitSerialization(createBinarySerialization(method.I, binaryOptions), limitOptions);
    const inputJson = limitSerialization(createJsonSerialization(method.I, jsonOptions), limitOptions);
    const outputBinary = limitSerialization(createBinarySerialization(method.O, binaryOptions), limitOptions);
    const outputJson = limitSerialization(createJsonSerialization(method.O, jsonOptions), limitOptions);
    return {
        getI(useBinaryFormat) {
            return useBinaryFormat ? inputBinary : inputJson;
        },
        getO(useBinaryFormat) {
            return useBinaryFormat ? outputBinary : outputJson;
        },
    };
}
/**
 * Returns functions to normalize and serialize the input message
 * of an RPC, and to parse the output message of an RPC.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {
    function normalize(input) {
        return input instanceof method.I ? input : new method.I(input);
    }
    const input = useBinaryFormat
        ? createBinarySerialization(method.I, binaryOptions)
        : createJsonSerialization(method.I, jsonOptions);
    const output = useBinaryFormat
        ? createBinarySerialization(method.O, binaryOptions)
        : createJsonSerialization(method.O, jsonOptions);
    return { normalize, parse: output.parse, serialize: input.serialize };
}
/**
 * Apply I/O limits to a Serialization object, returning a new object.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function limitSerialization(serialization, limitOptions) {
    return {
        serialize(data) {
            const bytes = serialization.serialize(data);
            assertWriteMaxBytes(limitOptions.writeMaxBytes, bytes.byteLength);
            return bytes;
        },
        parse(data) {
            assertReadMaxBytes(limitOptions.readMaxBytes, data.byteLength, true);
            return serialization.parse(data);
        },
    };
}
/**
 * Creates a Serialization object for serializing the given protobuf message
 * with the protobuf binary format.
 */
function createBinarySerialization(messageType, options) {
    return {
        parse(data) {
            try {
                return messageType.fromBinary(data, options);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new connect_error_ConnectError(`parse binary: ${m}`, code_Code.InvalidArgument);
            }
        },
        serialize(data) {
            try {
                return data.toBinary(options);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new connect_error_ConnectError(`serialize binary: ${m}`, code_Code.Internal);
            }
        },
    };
}
/**
 * Creates a Serialization object for serializing the given protobuf message
 * with the protobuf canonical JSON encoding.
 */
function createJsonSerialization(messageType, options) {
    var _a, _b;
    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();
    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();
    return {
        parse(data) {
            try {
                const json = textDecoder.decode(data);
                return messageType.fromJsonString(json, options);
            }
            catch (e) {
                throw connect_error_connectErrorFromReason(e, code_Code.InvalidArgument);
            }
        },
        serialize(data) {
            try {
                const json = data.toJsonString(options);
                return textEncoder.encode(json);
            }
            catch (e) {
                throw connect_error_connectErrorFromReason(e, code_Code.Internal);
            }
        },
    };
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol/create-method-url.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Create a URL for the given RPC. This simply adds the qualified
 * service name, a slash, and the method name to the path of the given
 * baseUrl.
 *
 * For example, the baseUri https://example.com and method "Say" from
 * the service example.ElizaService results in:
 * https://example.com/example.ElizaService/Say
 *
 * This format is used by the protocols Connect, gRPC and Twirp.
 *
 * Note that this function also accepts a protocol-relative baseUrl.
 * If given an empty string or "/" as a baseUrl, it returns just the
 * path.
 */
function createMethodUrl(baseUrl, service, method) {
    const s = typeof service == "string" ? service : service.typeName;
    const m = typeof method == "string" ? method : method.name;
    return baseUrl.toString().replace(/\/?$/, `/${s}/${m}`);
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol/envelope.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



/**
 * Create a WHATWG ReadableStream of enveloped messages from a ReadableStream
 * of bytes.
 *
 * Ideally, this would simply be a TransformStream, but ReadableStream.pipeThrough
 * does not have the necessary availability at this time.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createEnvelopeReadableStream(stream) {
    let reader;
    let buffer = new Uint8Array(0);
    function append(chunk) {
        const n = new Uint8Array(buffer.length + chunk.length);
        n.set(buffer);
        n.set(chunk, buffer.length);
        buffer = n;
    }
    return new ReadableStream({
        start() {
            reader = stream.getReader();
        },
        async pull(controller) {
            let header = undefined;
            for (;;) {
                if (header === undefined && buffer.byteLength >= 5) {
                    let length = 0;
                    for (let i = 1; i < 5; i++) {
                        length = (length << 8) + buffer[i];
                    }
                    header = { flags: buffer[0], length };
                }
                if (header !== undefined && buffer.byteLength >= header.length + 5) {
                    break;
                }
                const result = await reader.read();
                if (result.done) {
                    break;
                }
                append(result.value);
            }
            if (header === undefined) {
                if (buffer.byteLength == 0) {
                    controller.close();
                    return;
                }
                controller.error(new connect_error_ConnectError("premature end of stream", code_Code.DataLoss));
                return;
            }
            const data = buffer.subarray(5, 5 + header.length);
            buffer = buffer.subarray(5 + header.length);
            controller.enqueue({
                flags: header.flags,
                data,
            });
        },
    });
}
/**
 * Compress an EnvelopedMessage.
 *
 * Raises Internal if an enveloped message is already compressed.
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function envelope_envelopeCompress(envelope, compression, compressMinBytes) {
    let { flags, data } = envelope;
    if ((flags & compressedFlag) === compressedFlag) {
        throw new ConnectError("invalid envelope, already compressed", Code.Internal);
    }
    if (compression && data.byteLength >= compressMinBytes) {
        data = await compression.compress(data);
        flags = flags | compressedFlag;
    }
    return { data, flags };
}
/**
 * Decompress an EnvelopedMessage.
 *
 * Raises InvalidArgument if an envelope is compressed, but compression is null.
 *
 * Relies on the provided Compression to raise ResourceExhausted if the
 * *decompressed* message size is larger than readMaxBytes. If the envelope is
 * not compressed, readMaxBytes is not honored.
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function envelope_envelopeDecompress(envelope, compression, readMaxBytes) {
    let { flags, data } = envelope;
    if ((flags & compressedFlag) === compressedFlag) {
        if (!compression) {
            throw new ConnectError("received compressed envelope, but do not know how to decompress", Code.InvalidArgument);
        }
        data = await compression.decompress(data, readMaxBytes);
        flags = flags ^ compressedFlag;
    }
    return { data, flags };
}
/**
 * Encode a single enveloped message.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function envelope_encodeEnvelope(flags, data) {
    const bytes = new Uint8Array(data.length + 5);
    bytes.set(data, 5);
    const v = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    v.setUint8(0, flags); // first byte is flags
    v.setUint32(1, data.length); // 4 bytes message length
    return bytes;
}
/**
 * Encode a set of enveloped messages.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function encodeEnvelopes(...envelopes) {
    const len = envelopes.reduce((previousValue, currentValue) => previousValue + currentValue.data.length + 5, 0);
    const bytes = new Uint8Array(len);
    const v = new DataView(bytes.buffer);
    let offset = 0;
    for (const e of envelopes) {
        v.setUint8(offset, e.flags); // first byte is flags
        v.setUint32(offset + 1, e.data.length); // 4 bytes message length
        bytes.set(e.data, offset + 5);
        offset += e.data.length + 5;
    }
    return bytes;
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/headers.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @private Internal code, does not follow semantic versioning.
 */
const headerContentType = "Content-Type";
const headerUnaryContentLength = "Content-Length";
const headers_headerUnaryEncoding = "Content-Encoding";
const headers_headerStreamEncoding = "Connect-Content-Encoding";
const headers_headerUnaryAcceptEncoding = "Accept-Encoding";
const headers_headerStreamAcceptEncoding = "Connect-Accept-Encoding";
const headerTimeout = "Connect-Timeout-Ms";
const headers_headerProtocolVersion = "Connect-Protocol-Version";

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/version.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



/**
 * The only know value for the header Connect-Protocol-Version.
 *
 * @private Internal code, does not follow semantic versioning.
 */
const protocolVersion = "1";
/**
 * Requires the Connect-Protocol-Version header to be present with the expected
 * value. Raises a ConnectError with Code.InvalidArgument otherwise.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requireProtocolVersion(requestHeader) {
    const v = requestHeader.get(headerProtocolVersion);
    if (v === null) {
        throw new ConnectError(`missing required header: set ${headerProtocolVersion} to "${protocolVersion}"`, Code.InvalidArgument);
    }
    else if (v !== protocolVersion) {
        throw new ConnectError(`${headerProtocolVersion} must be "${protocolVersion}": got "${v}"`, Code.InvalidArgument);
    }
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/content-type.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Regular Expression that matches any valid Connect Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
const contentTypeRegExp = /^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;
/**
 * Regular Expression that matches a Connect unary Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
const contentTypeUnaryRegExp = /^application\/(?:json(?:; ?charset=utf-?8)?|proto)$/i;
/**
 * Regular Expression that matches a Connect streaming Content-Type header value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
const contentTypeStreamRegExp = /^application\/connect\+?(?:json(?:; ?charset=utf-?8)?|proto)$/i;
const contentTypeUnaryProto = "application/proto";
const contentTypeUnaryJson = "application/json";
const contentTypeStreamProto = "application/connect+proto";
const contentTypeStreamJson = "application/connect+json";
/**
 * Parse a Connect Content-Type header.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function parseContentType(contentType) {
    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);
    if (!match) {
        return undefined;
    }
    const stream = !!match[1];
    const binary = !!match[3];
    return { stream, binary };
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/request-header.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.




/**
 * Creates headers for a Connect request.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    if (timeoutMs !== undefined) {
        result.set(headerTimeout, `${timeoutMs}`);
    }
    result.set(headerContentType, methodKind == service_type_MethodKind.Unary
        ? useBinaryFormat
            ? contentTypeUnaryProto
            : contentTypeUnaryJson
        : useBinaryFormat
            ? contentTypeStreamProto
            : contentTypeStreamJson);
    result.set(headers_headerProtocolVersion, protocolVersion);
    return result;
}
/**
 * Creates headers for a Connect request with compression.
 *
 * Note that we always set the Content-Encoding header for unary methods.
 * It is up to the caller to decide whether to apply compression - and remove
 * the header if compression is not used, for example because the payload is
 * too small to make compression effective.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function requestHeaderWithCompression(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression) {
    const result = requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders);
    if (sendCompression != null) {
        const name = methodKind == MethodKind.Unary
            ? headerUnaryEncoding
            : headerStreamEncoding;
        result.set(name, sendCompression.name);
    }
    if (acceptCompression.length > 0) {
        const name = methodKind == MethodKind.Unary
            ? headerUnaryAcceptEncoding
            : headerStreamAcceptEncoding;
        result.set(name, acceptCompression.map((c) => c.name).join(","));
    }
    return result;
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/http-status.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Determine the Connect error code for the given HTTP status code.
 * See https://connect.build/docs/protocol#error-codes
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeFromHttpStatus(httpStatus) {
    switch (httpStatus) {
        case 400: // Bad Request
            return code_Code.InvalidArgument;
        case 401: // Unauthorized
            return code_Code.Unauthenticated;
        case 403: // Forbidden
            return code_Code.PermissionDenied;
        case 404: // Not Found
            return code_Code.Unimplemented;
        case 408: // Request Timeout
            return code_Code.DeadlineExceeded;
        case 409: // Conflict
            return code_Code.Aborted;
        case 412: // Precondition Failed
            return code_Code.FailedPrecondition;
        case 413: // Payload Too Large
            return code_Code.ResourceExhausted;
        case 415: // Unsupported Media Type
            return code_Code.Internal;
        case 429: // Too Many Requests
            return code_Code.Unavailable;
        case 431: // Request Header Fields Too Large
            return code_Code.ResourceExhausted;
        case 502: // Bad Gateway
            return code_Code.Unavailable;
        case 503: // Service Unavailable
            return code_Code.Unavailable;
        case 504: // Gateway Timeout
            return code_Code.Unavailable;
        default:
            return code_Code.Unknown;
    }
}
/**
 * Returns a HTTP status code for the given Connect code.
 * See https://connect.build/docs/protocol#error-codes
 *
 * @private Internal code, does not follow semantic versioning.
 */
function codeToHttpStatus(code) {
    switch (code) {
        case Code.Canceled:
            return 408; // Request Timeout
        case Code.Unknown:
            return 500; // Internal Server Error
        case Code.InvalidArgument:
            return 400; // Bad Request
        case Code.DeadlineExceeded:
            return 408; // Request Timeout
        case Code.NotFound:
            return 404; // Not Found
        case Code.AlreadyExists:
            return 409; // Conflict
        case Code.PermissionDenied:
            return 403; // Forbidden
        case Code.ResourceExhausted:
            return 429; // Too Many Requests
        case Code.FailedPrecondition:
            return 412; // Precondition Failed
        case Code.Aborted:
            return 409; // Conflict
        case Code.OutOfRange:
            return 400; // Bad Request
        case Code.Unimplemented:
            return 404; // Not Found
        case Code.Internal:
            return 500; // Internal Server Error
        case Code.Unavailable:
            return 503; // Service Unavailable
        case Code.DataLoss:
            return 500; // Internal Server Error
        case Code.Unauthenticated:
            return 401; // Unauthorized
        default:
            return 500; // same as CodeUnknown
    }
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/validate-response.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.






/**
 * Validates response status and header for the Connect protocol.
 * Throws a ConnectError if the header indicates an error, or if
 * the content type is unexpected, with the following exception:
 * For unary RPCs with an HTTP error status and content type
 * application/json, this returns an error derived from the HTTP
 * status instead of throwing it, giving an implementation a chance
 * to parse a Connect error from the wire.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function validateResponse(methodKind, useBinaryFormat, status, headers) {
    const mimeType = headers.get("Content-Type");
    const parsedType = parseContentType(mimeType);
    if (status !== 200) {
        const errorFromStatus = new connect_error_ConnectError(`HTTP ${status}`, codeFromHttpStatus(status));
        if (methodKind == service_type_MethodKind.Unary &&
            parsedType &&
            !parsedType.stream &&
            !parsedType.binary) {
            return { isUnaryError: true, unaryError: errorFromStatus };
        }
        throw errorFromStatus;
    }
    const isStream = methodKind != service_type_MethodKind.Unary;
    if (!parsedType ||
        parsedType.binary != useBinaryFormat ||
        parsedType.stream != isStream) {
        throw new connect_error_ConnectError(`unexpected response content type "${mimeType !== null && mimeType !== void 0 ? mimeType : "?"}"`, code_Code.InvalidArgument);
    }
    return { isUnaryError: false };
}
/**
 * Validates response status and header for the Connect protocol.
 * This function is identical to validateResponse(), but also verifies
 * that a given encoding header is acceptable.
 *
 * @private
 */
function validateResponseWithCompression(methodKind, useBinaryFormat, acceptCompression, status, headers) {
    let compression;
    const encoding = headers.get(methodKind == MethodKind.Unary ? headerUnaryEncoding : headerStreamEncoding);
    if (encoding != null && encoding.toLowerCase() !== "identity") {
        compression = acceptCompression.find((c) => c.name === encoding);
        if (!compression) {
            throw new ConnectError(`unsupported response encoding "${encoding}"`, Code.InvalidArgument);
        }
    }
    return Object.assign({ compression }, validateResponse(methodKind, useBinaryFormat, status, headers));
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */
// lookup table from base64 character to byte
let encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
// lookup table from base64 character *code* to byte because lookup by number is fast
let decTable = [];
for (let i = 0; i < encTable.length; i++)
    decTable[encTable[i].charCodeAt(0)] = i;
// support base64url variants
decTable["-".charCodeAt(0)] = encTable.indexOf("+");
decTable["_".charCodeAt(0)] = encTable.indexOf("/");
const proto_base64_protoBase64 = {
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    dec(base64Str) {
        // estimate byte size, not accounting for inner padding and whitespace
        let es = (base64Str.length * 3) / 4;
        if (base64Str[base64Str.length - 2] == "=")
            es -= 2;
        else if (base64Str[base64Str.length - 1] == "=")
            es -= 1;
        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array
        groupPos = 0, // position in base64 group
        b, // current byte
        p = 0; // previous byte
        for (let i = 0; i < base64Str.length; i++) {
            b = decTable[base64Str.charCodeAt(i)];
            if (b === undefined) {
                switch (base64Str[i]) {
                    // @ts-ignore TS7029: Fallthrough case in switch
                    case "=":
                        groupPos = 0; // reset state when padding found
                    // @ts-ignore TS7029: Fallthrough case in switch
                    case "\n":
                    case "\r":
                    case "\t":
                    case " ":
                        continue; // skip white-space, and padding
                    default:
                        throw Error("invalid base64 string.");
                }
            }
            switch (groupPos) {
                case 0:
                    p = b;
                    groupPos = 1;
                    break;
                case 1:
                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);
                    p = b;
                    groupPos = 2;
                    break;
                case 2:
                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);
                    p = b;
                    groupPos = 3;
                    break;
                case 3:
                    bytes[bytePos++] = ((p & 3) << 6) | b;
                    groupPos = 0;
                    break;
            }
        }
        if (groupPos == 1)
            throw Error("invalid base64 string.");
        return bytes.subarray(0, bytePos);
    },
    /**
     * Encode a byte array to a base64 string.
     */
    enc(bytes) {
        let base64 = "", groupPos = 0, // position in base64 group
        b, // current byte
        p = 0; // carry over from previous byte
        for (let i = 0; i < bytes.length; i++) {
            b = bytes[i];
            switch (groupPos) {
                case 0:
                    base64 += encTable[b >> 2];
                    p = (b & 3) << 4;
                    groupPos = 1;
                    break;
                case 1:
                    base64 += encTable[p | (b >> 4)];
                    p = (b & 15) << 2;
                    groupPos = 2;
                    break;
                case 2:
                    base64 += encTable[p | (b >> 6)];
                    base64 += encTable[b & 63];
                    groupPos = 0;
                    break;
            }
        }
        // add output padding
        if (groupPos) {
            base64 += encTable[p];
            base64 += "=";
            if (groupPos == 1)
                base64 += "=";
        }
        return base64;
    },
};

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/error-json.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};




/**
 * Parse a Connect error from a JSON value.
 * Will return a ConnectError, and throw the provided fallback if parsing failed.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function errorFromJson(jsonValue, metadata, fallback) {
    if (metadata) {
        new Headers(metadata).forEach((value, key) => fallback.metadata.append(key, value));
    }
    if (typeof jsonValue !== "object" ||
        jsonValue == null ||
        Array.isArray(jsonValue) ||
        !("code" in jsonValue) ||
        typeof jsonValue.code !== "string") {
        throw fallback;
    }
    const code = codeFromString(jsonValue.code);
    if (code === undefined) {
        throw fallback;
    }
    const message = jsonValue.message;
    if (message != null && typeof message !== "string") {
        throw fallback;
    }
    const error = new connect_error_ConnectError(message !== null && message !== void 0 ? message : "", code, metadata);
    if ("details" in jsonValue && Array.isArray(jsonValue.details)) {
        for (const detail of jsonValue.details) {
            if (detail === null ||
                typeof detail != "object" ||
                Array.isArray(detail) ||
                typeof detail.type != "string" ||
                typeof detail.value != "string" ||
                ("debug" in detail && typeof detail.debug != "object")) {
                throw fallback;
            }
            try {
                error.details.push({
                    type: detail.type,
                    value: proto_base64_protoBase64.dec(detail.value),
                    debug: detail.debug,
                });
            }
            catch (e) {
                throw fallback;
            }
        }
    }
    return error;
}
/**
 * Parse a Connect error from a serialized JSON value.
 * Will return a ConnectError, and throw the provided fallback if parsing failed.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function errorFromJsonBytes(bytes, metadata, fallback) {
    let jsonValue;
    try {
        jsonValue = JSON.parse(new TextDecoder().decode(bytes));
    }
    catch (e) {
        throw fallback;
    }
    return errorFromJson(jsonValue, metadata, fallback);
}
/**
 * Serialize the given error to JSON.
 *
 * The JSON serialization options are required to produce the optional
 * human-readable representation in the "debug" key if the detail uses
 * google.protobuf.Any. If serialization of the "debug" value fails, it
 * is silently disregarded.
 *
 * See https://connect.build/docs/protocol#error-end-stream
 *
 * @private Internal code, does not follow semantic versioning.
 */
function error_json_errorToJson(error, jsonWriteOptions) {
    const o = {
        code: codeToString(error.code),
    };
    if (error.rawMessage.length > 0) {
        o.message = error.rawMessage;
    }
    if (error.details.length > 0) {
        o.details = error.details
            .map((value) => {
            if (value instanceof Message) {
                const i = {
                    type: value.getType().typeName,
                    value: value.toBinary(),
                };
                try {
                    i.debug = value.toJson(jsonWriteOptions);
                }
                catch (e) {
                    // We deliberately ignore errors that may occur when serializing
                    // a message to JSON (the message contains an Any).
                    // The rationale is that we are only trying to provide optional
                    // debug information.
                }
                return i;
            }
            return value;
        })
            .map((_a) => {
            var { value } = _a, rest = __rest(_a, ["value"]);
            return (Object.assign(Object.assign({}, rest), { value: protoBase64.enc(value) }));
        });
    }
    return o;
}
/**
 * Serialize the given error to JSON. This calls errorToJson(), but stringifies
 * the result, and converts it into a UInt8Array.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function errorToJsonBytes(error, jsonWriteOptions) {
    const textEncoder = new TextEncoder();
    try {
        const jsonObject = error_json_errorToJson(error, jsonWriteOptions);
        const jsonString = JSON.stringify(jsonObject);
        return textEncoder.encode(jsonString);
    }
    catch (e) {
        const m = e instanceof Error ? e.message : String(e);
        throw new ConnectError(`failed to serialize Connect Error: ${m}`, Code.Internal);
    }
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/trailer-mux.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * In unary RPCs, Connect transports trailing metadata as response header
 * fields, prefixed with "trailer-".
 *
 * This function demuxes headers and trailers into two separate Headers
 * objects.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function trailerDemux(header) {
    const h = new Headers(), t = new Headers();
    header.forEach((value, key) => {
        if (key.toLowerCase().startsWith("trailer-")) {
            t.set(key.substring(8), value);
        }
        else {
            h.set(key, value);
        }
    });
    return [h, t];
}
/**
 * In unary RPCs, Connect transports trailing metadata as response header
 * fields, prefixed with "trailer-".
 *
 * This function muxes a header and a trailer into a single Headers object.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function trailerMux(header, trailer) {
    const h = new Headers(header);
    trailer.forEach((value, key) => {
        h.set(`trailer-${key}`, value);
    });
    return h;
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol-connect/end-stream.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.




/**
 * endStreamFlag indicates that the data in a EnvelopedMessage
 * is a EndStreamResponse of the Connect protocol.
 *
 * @private Internal code, does not follow semantic versioning.
 */
const endStreamFlag = 0b00000010;
/**
 * Parse an EndStreamResponse of the Connect protocol.
 * Throws a ConnectError on malformed input.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function endStreamFromJson(data) {
    const parseErr = new connect_error_ConnectError("invalid end stream", code_Code.InvalidArgument);
    let jsonValue;
    try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        jsonValue = JSON.parse(typeof data == "string" ? data : new TextDecoder().decode(data));
    }
    catch (e) {
        throw parseErr;
    }
    if (typeof jsonValue != "object" ||
        jsonValue == null ||
        Array.isArray(jsonValue)) {
        throw parseErr;
    }
    const metadata = new Headers();
    if ("metadata" in jsonValue) {
        if (typeof jsonValue.metadata != "object" ||
            jsonValue.metadata == null ||
            Array.isArray(jsonValue.metadata)) {
            throw parseErr;
        }
        for (const [key, values] of Object.entries(jsonValue.metadata)) {
            if (!Array.isArray(values) ||
                values.some((value) => typeof value != "string")) {
                throw parseErr;
            }
            for (const value of values) {
                metadata.append(key, value);
            }
        }
    }
    const error = "error" in jsonValue
        ? errorFromJson(jsonValue.error, metadata, parseErr)
        : undefined;
    return { metadata, error };
}
/**
 * Serialize the given EndStreamResponse to JSON.
 *
 * The JSON serialization options are required to produce the optional
 * human-readable representation of error details if the detail uses
 * google.protobuf.Any.
 *
 * See https://connect.build/docs/protocol#error-end-stream
 *
 * @private Internal code, does not follow semantic versioning.
 */
function endStreamToJson(metadata, error, jsonWriteOptions) {
    const es = {};
    if (error !== undefined) {
        es.error = errorToJson(error, jsonWriteOptions);
        metadata = appendHeaders(metadata, error.metadata);
    }
    let hasMetadata = false;
    const md = {};
    metadata.forEach((value, key) => {
        hasMetadata = true;
        md[key] = [value];
    });
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (hasMetadata) {
        es.metadata = md;
    }
    return es;
}
/**
 * Create a Serialization object that serializes a Connect EndStreamResponse.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function createEndStreamSerialization(options) {
    const textEncoder = new TextEncoder();
    return {
        serialize(data) {
            try {
                const jsonObject = endStreamToJson(data.metadata, data.error, options);
                const jsonString = JSON.stringify(jsonObject);
                return textEncoder.encode(jsonString);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new ConnectError(`failed to serialize EndStreamResponse: ${m}`, Code.Internal);
            }
        },
        parse(data) {
            try {
                return endStreamFromJson(data);
            }
            catch (e) {
                const m = e instanceof Error ? e.message : String(e);
                throw new ConnectError(`failed to parse EndStreamResponse: ${m}`, Code.InvalidArgument);
            }
        },
    };
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect-web/dist/esm/assert-fetch-api.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Asserts that the fetch API is available.
 */
function assertFetchApi() {
    try {
        new Headers();
    }
    catch (_) {
        throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.");
    }
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect-web/dist/esm/connect-transport.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __await = (undefined && undefined.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (undefined && undefined.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};





/**
 * Create a Transport for the Connect protocol, which makes unary and
 * server-streaming methods available to web browsers. It uses the fetch
 * API to make HTTP requests.
 */
function createConnectTransport(options) {
    var _a;
    assertFetchApi();
    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : false;
    return {
        async unary(service, method, signal, timeoutMs, header, message) {
            var _a;
            const { normalize, serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
            try {
                return await runUnary({
                    stream: false,
                    service,
                    method,
                    url: createMethodUrl(options.baseUrl, service, method),
                    init: {
                        method: "POST",
                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                        redirect: "error",
                        mode: "cors",
                    },
                    header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
                    message: normalize(message),
                    signal: signal !== null && signal !== void 0 ? signal : new AbortController().signal,
                }, async (req) => {
                    const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: serialize(req.message) }));
                    const { isUnaryError, unaryError } = validateResponse(method.kind, useBinaryFormat, response.status, response.headers);
                    if (isUnaryError) {
                        throw errorFromJson((await response.json()), http_headers_appendHeaders(...trailerDemux(response.headers)), unaryError);
                    }
                    const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);
                    return {
                        stream: false,
                        service,
                        method,
                        header: demuxedHeader,
                        message: parse(new Uint8Array(await response.arrayBuffer())),
                        trailer: demuxedTrailer,
                    };
                }, options.interceptors);
            }
            catch (e) {
                throw connect_error_connectErrorFromReason(e, code_Code.Internal);
            }
        },
        async stream(service, method, signal, timeoutMs, header, input) {
            var _a;
            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
            function parseResponseBody(body, trailerTarget) {
                return __asyncGenerator(this, arguments, function* parseResponseBody_1() {
                    const reader = createEnvelopeReadableStream(body).getReader();
                    try {
                        let endStreamReceived = false;
                        for (;;) {
                            const result = yield __await(reader.read());
                            if (result.done) {
                                break;
                            }
                            const { flags, data } = result.value;
                            if ((flags & endStreamFlag) === endStreamFlag) {
                                endStreamReceived = true;
                                const endStream = endStreamFromJson(data);
                                if (endStream.error) {
                                    throw endStream.error;
                                }
                                endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));
                                continue;
                            }
                            yield yield __await(parse(data));
                        }
                        if (!endStreamReceived) {
                            throw "missing EndStreamResponse";
                        }
                    }
                    catch (e) {
                        throw connect_error_connectErrorFromReason(e);
                    }
                });
            }
            async function createRequestBody(input) {
                if (method.kind != service_type_MethodKind.ServerStreaming) {
                    throw "The fetch API does not support streaming request bodies";
                }
                const r = await input[Symbol.asyncIterator]().next();
                if (r.done == true) {
                    throw "missing request message";
                }
                return envelope_encodeEnvelope(0, serialize(r.value));
            }
            return runStreaming({
                stream: true,
                service,
                method,
                url: createMethodUrl(options.baseUrl, service, method),
                init: {
                    method: "POST",
                    credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : "same-origin",
                    redirect: "error",
                    mode: "cors",
                },
                signal: signal !== null && signal !== void 0 ? signal : new AbortController().signal,
                header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header),
                message: input,
            }, async (req) => {
                try {
                    const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));
                    validateResponse(method.kind, useBinaryFormat, fRes.status, fRes.headers);
                    if (fRes.body === null) {
                        throw "missing response body";
                    }
                    const trailer = new Headers();
                    const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer) });
                    return res;
                }
                catch (e) {
                    throw connect_error_connectErrorFromReason(e, code_Code.Internal);
                }
            }, options.interceptors).catch((e) => Promise.reject(connect_error_connectErrorFromReason(e)));
        },
    };
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/protocol/async-iterable.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __asyncValues = (undefined && undefined.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var async_iterable_await = (undefined && undefined.__await) || function (v) { return this instanceof async_iterable_await ? (this.v = v, this) : new async_iterable_await(v); }
var async_iterable_asyncGenerator = (undefined && undefined.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof async_iterable_await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncDelegator = (undefined && undefined.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: async_iterable_await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};




function pipeTo(source, ...rest) {
    const [transforms, sink, opt] = pickTransformsAndSink(rest);
    let iterable = source;
    let abortable;
    if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {
        iterable = abortable = makeIterableAbortable(iterable);
    }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    iterable = pipe(iterable, ...transforms, { propagateDownStreamError: false });
    return sink(iterable).catch((reason) => {
        if (abortable) {
            return abortable.abort(reason).then(() => Promise.reject(reason));
        }
        return Promise.reject(reason);
    });
}
// pick transforms, the sink, and options from the pipeTo() rest parameter
function pickTransformsAndSink(rest) {
    let opt;
    if (typeof rest[rest.length - 1] != "function") {
        opt = rest.pop();
    }
    const sink = rest.pop();
    return [rest, sink, opt];
}
/**
 * Creates an AsyncIterableSink that concatenates all elements from the input.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function sinkAll() {
    return async function (iterable) {
        var _a, e_1, _b, _c;
        const all = [];
        try {
            for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a;) {
                _c = iterable_1_1.value;
                _d = false;
                try {
                    const chunk = _c;
                    all.push(chunk);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return all;
    };
}
/**
 * Creates an AsyncIterableSink that concatenates all chunks from the input into
 * a single Uint8Array.
 *
 * The iterable raises an error if the more than readMaxBytes are read.
 *
 * An optional length hint can be provided to optimize allocation and validation.
 * If more or less bytes are present in the source that the length hint indicates,
 * and error is raised.
 * If the length hint is larger than readMaxBytes, an error is raised.
 * If the length hint is not a positive integer, it is ignored.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function sinkAllBytes(readMaxBytes, lengthHint) {
    return async function (iterable) {
        return await readAllBytes(iterable, readMaxBytes, lengthHint);
    };
}
function pipe(source, ...rest) {
    return async_iterable_asyncGenerator(this, arguments, function* pipe_1() {
        const [transforms, opt] = pickTransforms(rest);
        let abortable;
        let iterable = source;
        if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {
            iterable = abortable = makeIterableAbortable(iterable);
        }
        for (const t of transforms) {
            iterable = t(iterable);
        }
        const it = iterable[Symbol.asyncIterator]();
        for (;;) {
            const r = yield async_iterable_await(it.next());
            if (r.done === true) {
                break;
            }
            if (!abortable) {
                yield yield async_iterable_await(r.value);
                continue;
            }
            try {
                yield yield async_iterable_await(r.value);
            }
            catch (e) {
                yield async_iterable_await(abortable.abort(e)); // propagate downstream error to the source
                throw e;
            }
        }
    });
}
function pickTransforms(rest) {
    let opt;
    if (typeof rest[rest.length - 1] != "function") {
        opt = rest.pop();
    }
    return [rest, opt];
}
/**
 * Creates an AsyncIterableTransform that catches any error from the input, and
 * passes it to the given catchError function.
 *
 * The catchError function may return a final value.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformCatch(catchError) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            // we deliberate avoid a for-await loop because we only want to catch upstream
            // errors, not downstream errors (yield).
            const it = iterable[Symbol.asyncIterator]();
            for (;;) {
                let r;
                try {
                    r = yield async_iterable_await(it.next());
                }
                catch (e) {
                    const caught = yield async_iterable_await(catchError(e));
                    if (caught !== undefined) {
                        yield yield async_iterable_await(caught);
                    }
                    break;
                }
                if (r.done === true) {
                    break;
                }
                yield yield async_iterable_await(r.value);
            }
        });
    };
}
/**
 * Creates an AsyncIterableTransform that catches any error from the input, and
 * passes it to the given function. Unlike transformCatch(), the given function
 * is also called when no error is raised.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformCatchFinally(catchFinally) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            // we deliberate avoid a for-await loop because we only want to catch upstream
            // errors, not downstream errors (yield).
            let err;
            const it = iterable[Symbol.asyncIterator]();
            for (;;) {
                let r;
                try {
                    r = yield async_iterable_await(it.next());
                }
                catch (e) {
                    err = e;
                    break;
                }
                if (r.done === true) {
                    break;
                }
                yield yield async_iterable_await(r.value);
            }
            const caught = yield async_iterable_await(catchFinally(err));
            if (caught !== undefined) {
                yield yield async_iterable_await(caught);
            }
        });
    };
}
/**
 * Creates an AsyncIterableTransform that appends a value.
 *
 * The element to append is provided by a function. If the function returns
 * undefined, no element is appended.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformAppend(provide) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield async_iterable_await(iterable_2.next()), _a = iterable_2_1.done, !_a;) {
                    _c = iterable_2_1.value;
                    _d = false;
                    try {
                        const chunk = _c;
                        yield yield async_iterable_await(chunk);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_2.return)) yield async_iterable_await(_b.call(iterable_2));
                }
                finally { if (e_2) throw e_2.error; }
            }
            const append = yield async_iterable_await(provide());
            if (append !== undefined) {
                yield yield async_iterable_await(append);
            }
        });
    };
}
/**
 * Creates an AsyncIterableTransform that prepends an element.
 *
 * The element to prepend is provided by a function. If the function returns
 * undefined, no element is appended.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformPrepend(provide) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_3, _b, _c;
            const prepend = yield async_iterable_await(provide());
            if (prepend !== undefined) {
                yield yield async_iterable_await(prepend);
            }
            try {
                for (var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield async_iterable_await(iterable_3.next()), _a = iterable_3_1.done, !_a;) {
                    _c = iterable_3_1.value;
                    _d = false;
                    try {
                        const chunk = _c;
                        yield yield async_iterable_await(chunk);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_3.return)) yield async_iterable_await(_b.call(iterable_3));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    };
}
/**
 * Creates an AsyncIterableTransform that reads all bytes from the input, and
 * concatenates them to a single Uint8Array.
 *
 * The iterable raises an error if the more than readMaxBytes are read.
 *
 * An optional length hint can be provided to optimize allocation and validation.
 * If more or less bytes are present in the source that the length hint indicates,
 * and error is raised.
 * If the length hint is larger than readMaxBytes, an error is raised.
 * If the length hint is not a positive integer, it is ignored.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformReadAllBytes(readMaxBytes, lengthHint) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            yield yield async_iterable_await(yield async_iterable_await(readAllBytes(iterable, readMaxBytes, lengthHint)));
        });
    };
}
/**
 * Creates an AsyncIterableTransform that takes partial protobuf messages of the
 * specified message type as input, and yields full instances.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformNormalizeMessage(messageType) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, iterable_4 = __asyncValues(iterable), iterable_4_1; iterable_4_1 = yield async_iterable_await(iterable_4.next()), _a = iterable_4_1.done, !_a;) {
                    _c = iterable_4_1.value;
                    _d = false;
                    try {
                        const chunk = _c;
                        if (chunk instanceof messageType) {
                            yield yield async_iterable_await(chunk);
                        }
                        else {
                            yield yield async_iterable_await(new messageType(chunk));
                        }
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_4.return)) yield async_iterable_await(_b.call(iterable_4));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    };
}
function transformSerializeEnvelope(serialization, endStreamFlag, endSerialization) {
    if (endStreamFlag === undefined || endSerialization === undefined) {
        return function (iterable) {
            return async_iterable_asyncGenerator(this, arguments, function* () {
                var _a, e_5, _b, _c;
                try {
                    for (var _d = true, iterable_5 = __asyncValues(iterable), iterable_5_1; iterable_5_1 = yield async_iterable_await(iterable_5.next()), _a = iterable_5_1.done, !_a;) {
                        _c = iterable_5_1.value;
                        _d = false;
                        try {
                            const chunk = _c;
                            const data = serialization.serialize(chunk);
                            yield yield async_iterable_await({ flags: 0, data });
                        }
                        finally {
                            _d = true;
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (!_d && !_a && (_b = iterable_5.return)) yield async_iterable_await(_b.call(iterable_5));
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            });
        };
    }
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_6, _b, _c;
            try {
                for (var _d = true, iterable_6 = __asyncValues(iterable), iterable_6_1; iterable_6_1 = yield async_iterable_await(iterable_6.next()), _a = iterable_6_1.done, !_a;) {
                    _c = iterable_6_1.value;
                    _d = false;
                    try {
                        const chunk = _c;
                        let data;
                        let flags = 0;
                        if (chunk.end) {
                            flags = flags | endStreamFlag;
                            data = endSerialization.serialize(chunk.value);
                        }
                        else {
                            data = serialization.serialize(chunk.value);
                        }
                        yield yield async_iterable_await({ flags, data });
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_6.return)) yield async_iterable_await(_b.call(iterable_6));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    };
}
function transformParseEnvelope(serialization, endStreamFlag, endSerialization) {
    // code path always yields ParsedEnvelopedMessage<T, E>
    if (endSerialization && endStreamFlag !== undefined) {
        return function (iterable) {
            return async_iterable_asyncGenerator(this, arguments, function* () {
                var _a, e_7, _b, _c;
                try {
                    for (var _d = true, iterable_7 = __asyncValues(iterable), iterable_7_1; iterable_7_1 = yield async_iterable_await(iterable_7.next()), _a = iterable_7_1.done, !_a;) {
                        _c = iterable_7_1.value;
                        _d = false;
                        try {
                            const { flags, data } = _c;
                            if ((flags & endStreamFlag) === endStreamFlag) {
                                yield yield async_iterable_await({ value: endSerialization.parse(data), end: true });
                            }
                            else {
                                yield yield async_iterable_await({ value: serialization.parse(data), end: false });
                            }
                        }
                        finally {
                            _d = true;
                        }
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (!_d && !_a && (_b = iterable_7.return)) yield async_iterable_await(_b.call(iterable_7));
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            });
        };
    }
    // code path always yields T
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_8, _b, _c;
            try {
                for (var _d = true, iterable_8 = __asyncValues(iterable), iterable_8_1; iterable_8_1 = yield async_iterable_await(iterable_8.next()), _a = iterable_8_1.done, !_a;) {
                    _c = iterable_8_1.value;
                    _d = false;
                    try {
                        const { flags, data } = _c;
                        if (endStreamFlag !== undefined &&
                            (flags & endStreamFlag) === endStreamFlag) {
                            if (endSerialization === null) {
                                throw new ConnectError("unexpected end flag", Code.InvalidArgument);
                            }
                            // skips end-of-stream envelope
                            continue;
                        }
                        yield yield async_iterable_await(serialization.parse(data));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_8.return)) yield async_iterable_await(_b.call(iterable_8));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    };
}
/**
 * Creates an AsyncIterableTransform that takes enveloped messages as a source,
 * and compresses them if they are larger than compressMinBytes.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformCompressEnvelope(compression, compressMinBytes) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_9, _b, _c;
            try {
                for (var _d = true, iterable_9 = __asyncValues(iterable), iterable_9_1; iterable_9_1 = yield async_iterable_await(iterable_9.next()), _a = iterable_9_1.done, !_a;) {
                    _c = iterable_9_1.value;
                    _d = false;
                    try {
                        const env = _c;
                        yield yield async_iterable_await(yield async_iterable_await(envelopeCompress(env, compression, compressMinBytes)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_9.return)) yield async_iterable_await(_b.call(iterable_9));
                }
                finally { if (e_9) throw e_9.error; }
            }
        });
    };
}
/**
 * Creates an AsyncIterableTransform that takes enveloped messages as a source,
 * and decompresses them using the given compression.
 *
 * The iterable raises an error if the decompressed payload of an enveloped
 * message is larger than readMaxBytes, or if no compression is provided.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformDecompressEnvelope(compression, readMaxBytes) {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_10, _b, _c;
            try {
                for (var _d = true, iterable_10 = __asyncValues(iterable), iterable_10_1; iterable_10_1 = yield async_iterable_await(iterable_10.next()), _a = iterable_10_1.done, !_a;) {
                    _c = iterable_10_1.value;
                    _d = false;
                    try {
                        const env = _c;
                        yield yield async_iterable_await(yield async_iterable_await(envelopeDecompress(env, compression, readMaxBytes)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_10.return)) yield async_iterable_await(_b.call(iterable_10));
                }
                finally { if (e_10) throw e_10.error; }
            }
        });
    };
}
/**
 * Create an AsyncIterableTransform that takes enveloped messages as a source,
 * and joins them into a stream of raw bytes.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformJoinEnvelopes() {
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_11, _b, _c;
            try {
                for (var _d = true, iterable_11 = __asyncValues(iterable), iterable_11_1; iterable_11_1 = yield async_iterable_await(iterable_11.next()), _a = iterable_11_1.done, !_a;) {
                    _c = iterable_11_1.value;
                    _d = false;
                    try {
                        const { flags, data } = _c;
                        yield yield async_iterable_await(encodeEnvelope(flags, data));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_11.return)) yield async_iterable_await(_b.call(iterable_11));
                }
                finally { if (e_11) throw e_11.error; }
            }
        });
    };
}
/**
 * Create an AsyncIterableTransform that takes raw bytes as a source, and splits
 * them into enveloped messages.
 *
 * The iterable raises an error
 * - if the payload of an enveloped message is larger than readMaxBytes,
 * - if the stream ended before an enveloped message fully arrived,
 * - or if the stream ended with extraneous data.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function transformSplitEnvelope(readMaxBytes) {
    // append chunk to buffer, returning updated buffer
    function append(buffer, chunk) {
        const n = new Uint8Array(buffer.byteLength + chunk.byteLength);
        n.set(buffer);
        n.set(chunk, buffer.length);
        return n;
    }
    // tuple 0: envelope, or undefined if incomplete
    // tuple 1: remainder of the buffer
    function shiftEnvelope(buffer, header) {
        if (buffer.byteLength < 5 + header.length) {
            return [undefined, buffer];
        }
        return [
            { flags: header.flags, data: buffer.subarray(5, 5 + header.length) },
            buffer.subarray(5 + header.length),
        ];
    }
    // undefined: header is incomplete
    function peekHeader(buffer) {
        if (buffer.byteLength < 5) {
            return undefined;
        }
        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        const length = view.getUint32(1); // 4 bytes message length
        const flags = view.getUint8(0); // first byte is flags
        return { length, flags };
    }
    return function (iterable) {
        return async_iterable_asyncGenerator(this, arguments, function* () {
            var _a, e_12, _b, _c;
            let buffer = new Uint8Array(0);
            try {
                for (var _d = true, iterable_12 = __asyncValues(iterable), iterable_12_1; iterable_12_1 = yield async_iterable_await(iterable_12.next()), _a = iterable_12_1.done, !_a;) {
                    _c = iterable_12_1.value;
                    _d = false;
                    try {
                        const chunk = _c;
                        buffer = append(buffer, chunk);
                        for (;;) {
                            const header = peekHeader(buffer);
                            if (!header) {
                                break;
                            }
                            assertReadMaxBytes(readMaxBytes, header.length, true);
                            let env;
                            [env, buffer] = shiftEnvelope(buffer, header);
                            if (!env) {
                                break;
                            }
                            yield yield async_iterable_await(env);
                        }
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = iterable_12.return)) yield async_iterable_await(_b.call(iterable_12));
                }
                finally { if (e_12) throw e_12.error; }
            }
            if (buffer.byteLength > 0) {
                const header = peekHeader(buffer);
                let message = "protocol error: incomplete envelope";
                if (header) {
                    message = `protocol error: promised ${header.length} bytes in enveloped message, got ${buffer.byteLength - 5} bytes`;
                }
                throw new ConnectError(message, Code.InvalidArgument);
            }
        });
    };
}
/**
 * Reads all bytes from the source, and concatenates them to a single Uint8Array.
 *
 * Raises an error if:
 * - more than readMaxBytes are read
 * - lengthHint is a positive integer, but larger than readMaxBytes
 * - lengthHint is a positive integer, and the source contains more or less bytes
 *   than promised
 *
 * @private Internal code, does not follow semantic versioning.
 */
async function readAllBytes(iterable, readMaxBytes, lengthHint) {
    var _a, e_13, _b, _c, _d, e_14, _e, _f;
    const [ok, hint] = parseLengthHint(lengthHint);
    if (ok) {
        if (hint > readMaxBytes) {
            assertReadMaxBytes(readMaxBytes, hint, true);
        }
        const buffer = new Uint8Array(hint);
        let offset = 0;
        try {
            for (var _g = true, iterable_13 = __asyncValues(iterable), iterable_13_1; iterable_13_1 = await iterable_13.next(), _a = iterable_13_1.done, !_a;) {
                _c = iterable_13_1.value;
                _g = false;
                try {
                    const chunk = _c;
                    if (offset + chunk.byteLength > hint) {
                        throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset + chunk.byteLength}`, Code.InvalidArgument);
                    }
                    buffer.set(chunk, offset);
                    offset += chunk.byteLength;
                }
                finally {
                    _g = true;
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (!_g && !_a && (_b = iterable_13.return)) await _b.call(iterable_13);
            }
            finally { if (e_13) throw e_13.error; }
        }
        if (offset < hint) {
            throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset}`, Code.InvalidArgument);
        }
        return buffer;
    }
    const chunks = [];
    let count = 0;
    try {
        for (var _h = true, iterable_14 = __asyncValues(iterable), iterable_14_1; iterable_14_1 = await iterable_14.next(), _d = iterable_14_1.done, !_d;) {
            _f = iterable_14_1.value;
            _h = false;
            try {
                const chunk = _f;
                count += chunk.byteLength;
                assertReadMaxBytes(readMaxBytes, count);
                chunks.push(chunk);
            }
            finally {
                _h = true;
            }
        }
    }
    catch (e_14_1) { e_14 = { error: e_14_1 }; }
    finally {
        try {
            if (!_h && !_d && (_e = iterable_14.return)) await _e.call(iterable_14);
        }
        finally { if (e_14) throw e_14.error; }
    }
    const all = new Uint8Array(count);
    let offset = 0;
    for (let chunk = chunks.shift(); chunk; chunk = chunks.shift()) {
        all.set(chunk, offset);
        offset += chunk.byteLength;
    }
    return all;
}
// parse the lengthHint argument of readAllBytes()
function parseLengthHint(lengthHint) {
    if (lengthHint === undefined || lengthHint === null) {
        return [false, 0];
    }
    const n = typeof lengthHint == "string" ? parseInt(lengthHint, 10) : lengthHint;
    if (!Number.isSafeInteger(n) || n < 0) {
        return [false, n];
    }
    return [true, n];
}
/**
 * Wrap the given iterable and return an iterable with an abort() method.
 *
 * This function exists purely for convenience. Where one would typically have
 * to access the iterator directly, advance through all elements, and call
 * AsyncIterator.throw() to notify the upstream iterable, this function allows
 * to use convenient for-await loops and still notify the upstream iterable:
 *
 * ```ts
 * const abortable = makeIterableAbortable(iterable);
 * for await (const ele of abortable) {
 *   await abortable.abort("ERR");
 * }
 * ```
 * There are a couple of limitations of this function:
 * - the given async iterable must implement throw
 * - the async iterable cannot be re-use
 * - if source catches errors and yields values for them, they are ignored, and
 *   the source may still dangle
 *
 * There are four possible ways an async function* can handle yield errors:
 * 1. don't catch errors at all - Abortable.abort() will resolve "rethrown"
 * 2. catch errors and rethrow - Abortable.abort() will resolve "rethrown"
 * 3. catch errors and return - Abortable.abort() will resolve "completed"
 * 4. catch errors and yield a value - Abortable.abort() will resolve "caught"
 *
 * Note that catching errors and yielding a value is problematic, and it should
 * be documented that this may leave the source in a dangling state.
 *
 * @private Internal code, does not follow semantic versioning.
 */
function makeIterableAbortable(iterable) {
    const innerCandidate = iterable[Symbol.asyncIterator]();
    if (innerCandidate.throw === undefined) {
        throw new Error("AsyncIterable does not implement throw");
    }
    const inner = innerCandidate;
    let aborted;
    let resultPromise;
    let it = {
        next() {
            resultPromise = inner.next().finally(() => {
                resultPromise = undefined;
            });
            return resultPromise;
        },
        throw(e) {
            return inner.throw(e);
        },
    };
    if (innerCandidate.return === undefined) {
        it = Object.assign(Object.assign({}, it), { return(value) {
                return inner.return(value);
            } });
    }
    let used = false;
    return {
        abort(reason) {
            if (aborted) {
                return aborted.state;
            }
            const f = () => {
                return inner.throw(reason).then((r) => (r.done === true ? "completed" : "caught"), () => "rethrown");
            };
            if (resultPromise) {
                aborted = { reason, state: resultPromise.then(f, f) };
                return aborted.state;
            }
            aborted = { reason, state: f() };
            return aborted.state;
        },
        [Symbol.asyncIterator]() {
            if (used) {
                throw new Error("AsyncIterable cannot be re-used");
            }
            used = true;
            return it;
        },
    };
}
// Create an instance of a WritableIterable of type T
function createWritableIterable() {
    let queue = [];
    // Represents the resolve function of the promise returned by the async iterator if no values exist in the queue at
    // the time of request.  It is resolved when a value is successfully received into the queue.
    let queueResolve;
    let error = undefined;
    const process = async (payload) => {
        // // If the writer's internal error was set, then reject any attempts at processing a payload.
        if (error) {
            return Promise.reject(String(error));
        }
        // If there is an iterator resolver then a consumer of the async iterator is waiting on a value.  So resolve that
        // promise with the new value being sent and return a promise that is immediately resolved
        if (queueResolve) {
            queueResolve(payload);
            queueResolve = undefined;
            return Promise.resolve();
        }
        const elem = {
            payload,
        };
        const prom = new Promise((resolve, reject) => {
            elem.resolve = resolve;
            elem.reject = reject;
        });
        // Otherwise no one is waiting on a value yet so add it to the queue and return a promise that will be resolved
        // when someone reads this value
        queue.push(elem);
        return prom;
    };
    let closed = false;
    return {
        isClosed() {
            return closed;
        },
        async write(payload) {
            if (closed) {
                throw new ConnectError("cannot write, already closed");
            }
            return process({ value: payload, done: false });
        },
        async close() {
            if (closed) {
                throw new ConnectError("cannot close, already closed");
            }
            closed = true;
            return process({ value: undefined, done: true });
        },
        [Symbol.asyncIterator]() {
            return {
                next: async () => {
                    // If the writer's internal error was set, then reject any attempts at processing a payload.
                    if (error) {
                        return Promise.reject(String(error));
                    }
                    const elem = queue.shift();
                    if (!elem) {
                        // We don't have any payloads ready to be sent (i.e. the consumer of the iterator is consuming faster than
                        // senders are sending).  So return a Promise ensuring we'll resolve it when we get something.
                        return new Promise((resolve) => {
                            queueResolve = resolve;
                        });
                    }
                    // Resolve the send promise on a successful send/close.
                    if (elem.resolve) {
                        elem.resolve();
                    }
                    return elem.payload;
                },
                throw: async (e) => {
                    error = e;
                    // The reader of this iterator has failed with the given error.  So anything left in the queue should be
                    // drained and rejected with the given error
                    for (const item of queue) {
                        if (item.reject) {
                            item.reject(e);
                        }
                    }
                    queue = [];
                    return new Promise((resolve) => {
                        resolve({ value: undefined, done: true });
                    });
                },
            };
        },
    };
}
/**
 * Create an asynchronous iterable from an array.
 *
 * @private Internal code, does not follow semantic versioning.
 */
// eslint-disable-next-line @typescript-eslint/require-await
function createAsyncIterable(items) {
    return async_iterable_asyncGenerator(this, arguments, function* createAsyncIterable_1() {
        yield async_iterable_await(yield* __asyncDelegator(__asyncValues(items)));
    });
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/any-client.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Create any client for the given service.
 *
 * The given createMethod function is called for each method definition
 * of the service. The function it returns is added to the client object
 * as a method.
 */
function makeAnyClient(service, createMethod) {
    const client = {};
    for (const [localName, methodInfo] of Object.entries(service.methods)) {
        const method = createMethod(Object.assign(Object.assign({}, methodInfo), { localName,
            service }));
        if (method != null) {
            client[localName] = method;
        }
    }
    return client;
}

;// CONCATENATED MODULE: ./node_modules/@bufbuild/connect/dist/esm/promise-client.js
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var promise_client_await = (undefined && undefined.__await) || function (v) { return this instanceof promise_client_await ? (this.v = v, this) : new promise_client_await(v); }
var promise_client_asyncValues = (undefined && undefined.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var promise_client_asyncDelegator = (undefined && undefined.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: promise_client_await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
var promise_client_asyncGenerator = (undefined && undefined.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof promise_client_await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};





/**
 * Create a PromiseClient for the given service, invoking RPCs through the
 * given transport.
 */
function createPromiseClient(service, transport) {
    return makeAnyClient(service, (method) => {
        switch (method.kind) {
            case service_type_MethodKind.Unary:
                return createUnaryFn(transport, service, method);
            case service_type_MethodKind.ServerStreaming:
                return createServerStreamingFn(transport, service, method);
            case service_type_MethodKind.ClientStreaming:
                return createClientStreamingFn(transport, service, method);
            case service_type_MethodKind.BiDiStreaming:
                return createBiDiStreamingFn(transport, service, method);
            default:
                return null;
        }
    });
}
function createUnaryFn(transport, service, method) {
    return async function (input, options) {
        var _a, _b;
        const response = await transport.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input);
        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
        return response.message;
    };
}
function createServerStreamingFn(transport, service, method) {
    return function (input, options) {
        var _a, _b;
        return promise_client_asyncGenerator(this, arguments, function* () {
            const inputMessage = input instanceof method.I ? input : new method.I(input);
            const response = yield promise_client_await(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([inputMessage])));
            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
            yield promise_client_await(yield* promise_client_asyncDelegator(promise_client_asyncValues(response.message)));
            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
        });
    };
}
function createClientStreamingFn(transport, service, method) {
    return async function (request, options) {
        var _a, e_1, _b, _c;
        var _d, _e;
        function input() {
            return promise_client_asyncGenerator(this, arguments, function* input_1() {
                var _a, e_2, _b, _c;
                try {
                    for (var _d = true, request_1 = promise_client_asyncValues(request), request_1_1; request_1_1 = yield promise_client_await(request_1.next()), _a = request_1_1.done, !_a;) {
                        _c = request_1_1.value;
                        _d = false;
                        try {
                            const partial = _c;
                            yield yield promise_client_await(partial instanceof method.I ? partial : new method.I(partial));
                        }
                        finally {
                            _d = true;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (!_d && !_a && (_b = request_1.return)) yield promise_client_await(_b.call(request_1));
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            });
        }
        const response = await transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input());
        (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);
        let singleMessage;
        try {
            for (var _f = true, _g = promise_client_asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a;) {
                _c = _h.value;
                _f = false;
                try {
                    const message = _c;
                    singleMessage = message;
                }
                finally {
                    _f = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_f && !_a && (_b = _g.return)) await _b.call(_g);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!singleMessage) {
            throw new connect_error_ConnectError("protocol error: missing response message", code_Code.Internal);
        }
        (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);
        return singleMessage;
    };
}
function createBiDiStreamingFn(transport, service, method) {
    return function (request, options) {
        var _a, _b;
        return promise_client_asyncGenerator(this, arguments, function* () {
            function input() {
                return promise_client_asyncGenerator(this, arguments, function* input_2() {
                    var _a, e_3, _b, _c;
                    try {
                        for (var _d = true, request_2 = promise_client_asyncValues(request), request_2_1; request_2_1 = yield promise_client_await(request_2.next()), _a = request_2_1.done, !_a;) {
                            _c = request_2_1.value;
                            _d = false;
                            try {
                                const partial = _c;
                                yield yield promise_client_await(partial instanceof method.I ? partial : new method.I(partial));
                            }
                            finally {
                                _d = true;
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (!_d && !_a && (_b = request_2.return)) yield promise_client_await(_b.call(request_2));
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                });
            }
            const response = yield promise_client_await(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input()));
            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);
            yield promise_client_await(yield* promise_client_asyncDelegator(promise_client_asyncValues(response.message)));
            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
        });
    };
}

// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/authentication/service_connect.js
var service_connect = __nccwpck_require__(6624);
;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/session_manager.js
var SessionKey;
(function (SessionKey) {
    SessionKey["AccessToken"] = "_access_token";
    SessionKey["RefreshToken"] = "_refresh_token";
    SessionKey["UserID"] = "_user_id";
    SessionKey["User"] = "_user";
    SessionKey["ProjectToken"] = "_project_token";
})(SessionKey || (SessionKey = {}));
class InMemorySessionManager {
    constructor() {
        this.map = new Map();
    }
    set(key, value) {
        this.map.set(key, value);
    }
    get(key) {
        return this.map.get(key);
    }
    remove(key) {
        this.map.delete(key);
    }
}
class LocalStorageSessionManager {
    set(key, value) {
        localStorage.setItem(key, value);
    }
    get(key) {
        return localStorage.getItem(key) ?? undefined;
    }
    remove(key) {
        localStorage.removeItem(key);
    }
}

;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/defaults.js
function defaultHost() {
    const _default = 'http://localhost:4747/';
    if (typeof process === 'undefined') {
        return _default;
    }
    return process.env.RIG_HOST || _default;
}
function defaultProjectID() {
    const _default = 'c10c947b-91f1-41ea-96df-ea13ee68a7fc0';
    if (typeof process === 'undefined') {
        return _default;
    }
    return process.env.RIG_PROJECT_ID || _default;
}
function defaultLoginMethod() {
    if (typeof process === 'undefined') {
        return undefined;
    }
    if (process.env.RIG_CLIENT_ID === undefined || process.env.RIG_CLIENT_SECRET === undefined) {
        return undefined;
    }
    return {
        method: {
            case: 'clientCredentials',
            value: {
                clientId: process.env.RIG_CLIENT_ID,
                clientSecret: process.env.RIG_CLIENT_SECRET
            }
        }
    };
}

// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/user/service_connect.js
var user_service_connect = __nccwpck_require__(5329);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/user/settings/service_connect.js
var settings_service_connect = __nccwpck_require__(3210);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/project/settings/service_connect.js
var project_settings_service_connect = __nccwpck_require__(3886);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/project/service_connect.js
var project_service_connect = __nccwpck_require__(8184);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/group/service_connect.js
var group_service_connect = __nccwpck_require__(1760);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/storage/service_connect.js
var storage_service_connect = __nccwpck_require__(9068);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/database/service_connect.js
var database_service_connect = __nccwpck_require__(7139);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/service_account/service_connect.js
var service_account_service_connect = __nccwpck_require__(2916);
// EXTERNAL MODULE: ./node_modules/@rigdev/api/api/v1/capsule/service_connect.js
var capsule_service_connect = __nccwpck_require__(6779);
;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/client.js














const omitTypes = new Set([
    '/api.v1.authentication.Service/Login',
    '/api.v1.authentication.Service/Register',
    '/api.v1.authentication.Service/VerifyEmail',
    '/api.v1.authentication.Service/RefreshToken',
    '/api.v1.authentication.Service/OauthCallback',
    '/api.v1.authentication.Service/SendPasswordReset',
    '/api.v1.authentication.Service/ResetPassword',
    '/api.v1.authentication.Service/GetAuthConfig'
]);
class Client {
    async getAccessToken() {
        let accessToken = this.sessionManager.get(SessionKey.AccessToken);
        if (!accessToken && this.loginRequest !== undefined) {
            const response = await createPromiseClient(service_connect/* Service */.t, this._transport).login(this.loginRequest);
            if (response.token) {
                this.sessionManager.set(SessionKey.AccessToken, response.token.accessToken);
                this.sessionManager.set(SessionKey.RefreshToken, response.token.refreshToken);
                accessToken = response.token.accessToken;
            }
        }
        if (!accessToken)
            return;
        try {
            const jwtPayload = JSON.parse(atob(accessToken.split('.')[1]));
            if (Date.now() >= jwtPayload.exp * 1000) {
                const refreshToken = this.sessionManager.get(SessionKey.RefreshToken);
                const response = await createPromiseClient(service_connect/* Service */.t, this._transport).refreshToken({
                    refreshToken
                });
                this.sessionManager.set(SessionKey.AccessToken, response.token?.accessToken ?? '');
                this.sessionManager.set(SessionKey.RefreshToken, response.token?.refreshToken ?? '');
                accessToken = response.token?.accessToken ?? '';
            }
        }
        catch (e) {
            this.logout();
            return; // Return undefined to avoid entering the infinite loop
        }
        return accessToken;
    }
    constructor(options) {
        this._authInterceptor = (next) => async (req) => {
            const path = new URL(req.url).pathname;
            if (omitTypes.has(path)) {
                return await next(req);
            }
            const accessToken = await this.getAccessToken();
            if (accessToken) {
                req.header.set('Authorization', 'Bearer ' + accessToken);
                // TODO What is project token and how should I get it??
                // const projectToken = await this.getProjectToken();
                // if (projectToken) {
                //   req.header.set('X-Rig-Project-Token', projectToken);
                // }
            }
            return await next(req);
        };
        this.host = options.host ?? defaultHost();
        if (options.credentials !== undefined) {
            this.loginRequest = {
                method: {
                    case: 'clientCredentials',
                    value: {
                        clientId: options.credentials.id,
                        clientSecret: options.credentials.secret
                    }
                }
            };
        }
        else {
            this.loginRequest = defaultLoginMethod();
        }
        this.sessionManager =
            typeof localStorage === 'undefined' ? new InMemorySessionManager() : new LocalStorageSessionManager();
        this._transport = createConnectTransport({
            baseUrl: this.host,
            interceptors: [this._authInterceptor]
        });
        this.user = createPromiseClient(user_service_connect/* Service */.t, this._transport);
        this.userSettings = createPromiseClient(settings_service_connect/* Service */.t, this._transport);
        this.projectSettings = createPromiseClient(project_settings_service_connect/* Service */.t, this._transport);
        this.projects = createPromiseClient(project_service_connect/* Service */.t, this._transport);
        this.storage = createPromiseClient(storage_service_connect/* Service */.t, this._transport);
        this.group = createPromiseClient(group_service_connect/* Service */.t, this._transport);
        this.database = createPromiseClient(database_service_connect/* Service */.t, this._transport);
        this.serviceAccount = createPromiseClient(service_account_service_connect/* Service */.t, this._transport);
        this.capsule = createPromiseClient(capsule_service_connect/* Service */.t, this._transport);
        this.auth = createPromiseClient(service_connect/* Service */.t, this._transport);
    }
    async login(loginRequest) {
        this.loginRequest = loginRequest;
        const response = await this.auth.login(this.loginRequest);
        if (response.token && response.token.accessToken !== '') {
            this.sessionManager.set(SessionKey.AccessToken, response.token?.accessToken ?? '');
            this.sessionManager.set(SessionKey.RefreshToken, response.token?.refreshToken ?? '');
        }
        return response;
    }
    logout() {
        this.sessionManager.remove(SessionKey.AccessToken);
        this.sessionManager.remove(SessionKey.RefreshToken);
    }
}

;// CONCATENATED MODULE: ./node_modules/@rigdev/sdk/lib/index.js




;// CONCATENATED MODULE: ./lib.ts


async function makeClient() {
    const input = {
        clientID: (0,core.getInput)("clientID"),
        clientSecret: (0,core.getInput)("clientSecret"),
        url: (0,core.getInput)("url"),
    };
    const client = new Client({
        host: input.url,
        credentials: {
            id: input.clientID,
            secret: input.clientSecret,
        },
    });
    return client;
}

;// CONCATENATED MODULE: ./deploy.ts


async function action(inputs) {
    const client = await makeClient();
    await client.capsule.deploy({
        capsuleId: inputs.capsuleID,
        changes: [
            {
                field: {
                    case: "buildId",
                    value: inputs.buildID,
                },
            },
        ],
    });
}
try {
    action({
        capsuleID: (0,core.getInput)("capsuleID"),
        buildID: (0,core.getInput)("buildID"),
    });
}
catch (e) {
    (0,core.setFailed)(e.message);
}

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=index.js.map